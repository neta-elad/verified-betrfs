(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun Tagclass._System.___hFunc2LLO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LLO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LLO () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun class.CoordinationSystemRefinement.__default () T@U)
(declare-fun Tagclass.CoordinationSystemRefinement.__default () T@U)
(declare-fun Tagclass.CrashTolerantJournal.Variables () T@U)
(declare-fun Tagclass.MsgHistoryMod.MsgHistory () T@U)
(declare-fun Tagclass.CrashTolerantMap.Variables () T@U)
(declare-fun Tagclass.TotalKMMapMod.TotalMap () T@U)
(declare-fun Tagclass.StampedMod.Stamped () T@U)
(declare-fun Tagclass.CoordinationSystem.Variables () T@U)
(declare-fun |Tagclass.AsyncMod_6#MapSpecMod#.PersistentState| () T@U)
(declare-fun Tagclass.FloatingSeqMod.FloatingSeq () T@U)
(declare-fun Tagclass.CrashTolerantMapSpecMod.Constants () T@U)
(declare-fun Tagclass.CrashTolerantMapSpecMod.Variables () T@U)
(declare-fun |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| () T@U)
(declare-fun Tagclass.CoordinationSystem.Step () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun Tagclass.MsgHistoryMod.KeyedMessage () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun |##FloatingSeqMod.FloatingSeq.FloatingSeq| () T@U)
(declare-fun class.FloatingSeqMod.FloatingSeq () T@U)
(declare-fun class.FloatingSeqMod.__default () T@U)
(declare-fun Tagclass.FloatingSeqMod.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun |##ValueMessage.Delta.NoDelta| () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun class.TotalKMMapMod.__default () T@U)
(declare-fun Tagclass.TotalKMMapMod.__default () T@U)
(declare-fun |##MapSpecMod.Input.GetInput| () T@U)
(declare-fun Tagclass.MapSpecMod.Input () T@U)
(declare-fun |##MapSpecMod.Input.PutInput| () T@U)
(declare-fun |##MapSpecMod.Input.NoopInput| () T@U)
(declare-fun class.MapSpecMod.Input () T@U)
(declare-fun |##MapSpecMod.Output.GetOutput| () T@U)
(declare-fun Tagclass.MapSpecMod.Output () T@U)
(declare-fun |##MapSpecMod.Output.PutOutput| () T@U)
(declare-fun |##MapSpecMod.Output.NoopOutput| () T@U)
(declare-fun class.MapSpecMod.Output () T@U)
(declare-fun |##MapSpecMod.Variables.Variables| () T@U)
(declare-fun Tagclass.MapSpecMod.Variables () T@U)
(declare-fun class.MapSpecMod.Variables () T@U)
(declare-fun class.MapSpecMod.__default () T@U)
(declare-fun Tagclass.MapSpecMod.__default () T@U)
(declare-fun class.CrashTolerantMapSpecMod.__default () T@U)
(declare-fun Tagclass.CrashTolerantMapSpecMod.__default () T@U)
(declare-fun |Tagclass.AsyncMod_6#MapSpecMod#.UIOp| () T@U)
(declare-fun |##CrashTolerantMapSpecMod.Constants.Constants| () T@U)
(declare-fun class.CrashTolerantMapSpecMod.Constants () T@U)
(declare-fun |##CrashTolerantMapSpecMod.Variables.Variables| () T@U)
(declare-fun |Tagclass.AsyncMod_6#MapSpecMod#.EphemeralState| () T@U)
(declare-fun class.CrashTolerantMapSpecMod.Variables () T@U)
(declare-fun class.LSNMod.__default () T@U)
(declare-fun Tagclass.LSNMod.__default () T@U)
(declare-fun |##StampedMod.Stamped.Stamped| () T@U)
(declare-fun class.StampedMod.Stamped () T@U)
(declare-fun class.StampedMod.__default () T@U)
(declare-fun Tagclass.StampedMod.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.LinearSequence__i.__default () T@U)
(declare-fun Tagclass.LinearSequence__i.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun |##MsgHistoryMod.KeyedMessage.KeyedMessage| () T@U)
(declare-fun class.MsgHistoryMod.KeyedMessage () T@U)
(declare-fun |##MsgHistoryMod.MsgHistory.MsgHistory| () T@U)
(declare-fun class.MsgHistoryMod.MsgHistory () T@U)
(declare-fun class.MsgHistoryMod.__default () T@U)
(declare-fun Tagclass.MsgHistoryMod.__default () T@U)
(declare-fun |##AbstractJournal.TransitionLabel.ReadForRecoveryLabel| () T@U)
(declare-fun Tagclass.AbstractJournal.TransitionLabel () T@U)
(declare-fun |##AbstractJournal.TransitionLabel.FreezeForCommitLabel| () T@U)
(declare-fun |##AbstractJournal.TransitionLabel.QueryEndLsnLabel| () T@U)
(declare-fun |##AbstractJournal.TransitionLabel.PutLabel| () T@U)
(declare-fun |##AbstractJournal.TransitionLabel.DiscardOldLabel| () T@U)
(declare-fun |##AbstractJournal.TransitionLabel.InternalLabel| () T@U)
(declare-fun class.AbstractJournal.TransitionLabel () T@U)
(declare-fun |##AbstractJournal.Variables.Variables| () T@U)
(declare-fun Tagclass.AbstractJournal.Variables () T@U)
(declare-fun class.AbstractJournal.Variables () T@U)
(declare-fun class.AbstractJournal.__default () T@U)
(declare-fun Tagclass.AbstractJournal.__default () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel| () T@U)
(declare-fun Tagclass.CrashTolerantJournal.TransitionLabel () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.PutLabel| () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.InternalLabel| () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.CommitStartLabel| () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| () T@U)
(declare-fun |##CrashTolerantJournal.TransitionLabel.CrashLabel| () T@U)
(declare-fun class.CrashTolerantJournal.TransitionLabel () T@U)
(declare-fun |##CrashTolerantJournal.Ephemeral.Unknown| () T@U)
(declare-fun Tagclass.CrashTolerantJournal.Ephemeral () T@U)
(declare-fun |##CrashTolerantJournal.Ephemeral.Known| () T@U)
(declare-fun class.CrashTolerantJournal.Ephemeral () T@U)
(declare-fun |##CrashTolerantJournal.Variables.Variables| () T@U)
(declare-fun class.CrashTolerantJournal.Variables () T@U)
(declare-fun class.CrashTolerantJournal.__default () T@U)
(declare-fun Tagclass.CrashTolerantJournal.__default () T@U)
(declare-fun |##AbstractMap.TransitionLabel.QueryLabel| () T@U)
(declare-fun Tagclass.AbstractMap.TransitionLabel () T@U)
(declare-fun |##AbstractMap.TransitionLabel.PutLabel| () T@U)
(declare-fun |##AbstractMap.TransitionLabel.QueryEndLsnLabel| () T@U)
(declare-fun |##AbstractMap.TransitionLabel.FreezeAsLabel| () T@U)
(declare-fun |##AbstractMap.TransitionLabel.InternalLabel| () T@U)
(declare-fun class.AbstractMap.TransitionLabel () T@U)
(declare-fun |##AbstractMap.Variables.Variables| () T@U)
(declare-fun Tagclass.AbstractMap.Variables () T@U)
(declare-fun class.AbstractMap.Variables () T@U)
(declare-fun class.AbstractMap.__default () T@U)
(declare-fun Tagclass.AbstractMap.__default () T@U)
(declare-fun |##CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| () T@U)
(declare-fun Tagclass.CrashTolerantMap.TransitionLabel () T@U)
(declare-fun |##CrashTolerantMap.TransitionLabel.PutRecordsLabel| () T@U)
(declare-fun |##CrashTolerantMap.TransitionLabel.QueryLabel| () T@U)
(declare-fun |##CrashTolerantMap.TransitionLabel.InternalLabel| () T@U)
(declare-fun |##CrashTolerantMap.TransitionLabel.CommitStartLabel| () T@U)
(declare-fun |##CrashTolerantMap.TransitionLabel.CommitCompleteLabel| () T@U)
(declare-fun |##CrashTolerantMap.TransitionLabel.CrashLabel| () T@U)
(declare-fun class.CrashTolerantMap.TransitionLabel () T@U)
(declare-fun |##CrashTolerantMap.Ephemeral.Unknown| () T@U)
(declare-fun Tagclass.CrashTolerantMap.Ephemeral () T@U)
(declare-fun |##CrashTolerantMap.Ephemeral.Known| () T@U)
(declare-fun class.CrashTolerantMap.Ephemeral () T@U)
(declare-fun |##CrashTolerantMap.Variables.Variables| () T@U)
(declare-fun class.CrashTolerantMap.Variables () T@U)
(declare-fun |##CrashTolerantMap.Step.LoadEphemeralFromPersistentStep| () T@U)
(declare-fun Tagclass.CrashTolerantMap.Step () T@U)
(declare-fun |##CrashTolerantMap.Step.PutRecordsStep| () T@U)
(declare-fun |##CrashTolerantMap.Step.QueryStep| () T@U)
(declare-fun |##CrashTolerantMap.Step.FreezeMapInternalStep| () T@U)
(declare-fun |##CrashTolerantMap.Step.EphemeralInternalStep| () T@U)
(declare-fun |##CrashTolerantMap.Step.CommitStartStep| () T@U)
(declare-fun |##CrashTolerantMap.Step.CommitCompleteStep| () T@U)
(declare-fun |##CrashTolerantMap.Step.CrashStep| () T@U)
(declare-fun class.CrashTolerantMap.Step () T@U)
(declare-fun class.CrashTolerantMap.__default () T@U)
(declare-fun Tagclass.CrashTolerantMap.__default () T@U)
(declare-fun |##CoordinationSystem.Ephemeral.Unknown| () T@U)
(declare-fun Tagclass.CoordinationSystem.Ephemeral () T@U)
(declare-fun |##CoordinationSystem.Ephemeral.Known| () T@U)
(declare-fun class.CoordinationSystem.Ephemeral () T@U)
(declare-fun |##CoordinationSystem.Variables.Variables| () T@U)
(declare-fun class.CoordinationSystem.Variables () T@U)
(declare-fun |##CoordinationSystem.Step.LoadEphemeralFromPersistentStep| () T@U)
(declare-fun |##CoordinationSystem.Step.RecoverStep| () T@U)
(declare-fun |##CoordinationSystem.Step.AcceptRequestStep| () T@U)
(declare-fun |##CoordinationSystem.Step.QueryStep| () T@U)
(declare-fun |##CoordinationSystem.Step.PutStep| () T@U)
(declare-fun |##CoordinationSystem.Step.DeliverReplyStep| () T@U)
(declare-fun |##CoordinationSystem.Step.JournalInternalStep| () T@U)
(declare-fun |##CoordinationSystem.Step.MapInternalStep| () T@U)
(declare-fun |##CoordinationSystem.Step.ReqSyncStep| () T@U)
(declare-fun |##CoordinationSystem.Step.ReplySyncStep| () T@U)
(declare-fun |##CoordinationSystem.Step.CommitStartStep| () T@U)
(declare-fun |##CoordinationSystem.Step.CommitCompleteStep| () T@U)
(declare-fun |##CoordinationSystem.Step.CrashStep| () T@U)
(declare-fun class.CoordinationSystem.Step () T@U)
(declare-fun class.CoordinationSystem.__default () T@U)
(declare-fun Tagclass.CoordinationSystem.__default () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.ID| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.Request.Request| () T@U)
(declare-fun |Tagclass.AsyncMod_6#MapSpecMod#.Request| () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.Request| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.Reply.Reply| () T@U)
(declare-fun |Tagclass.AsyncMod_6#MapSpecMod#.Reply| () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.Reply| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.PersistentState| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.EphemeralState| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.Variables.Variables| () T@U)
(declare-fun |Tagclass.AsyncMod_6#MapSpecMod#.Variables| () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.Variables| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.UIOp.RequestOp| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| () T@U)
(declare-fun |##AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.UIOp| () T@U)
(declare-fun |class.AsyncMod_6#MapSpecMod#.__default| () T@U)
(declare-fun |Tagclass.AsyncMod_6#MapSpecMod#.__default| () T@U)
(declare-fun |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| () T@U)
(declare-fun |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp| () T@U)
(declare-fun |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp| () T@U)
(declare-fun |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| () T@U)
(declare-fun |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| () T@U)
(declare-fun |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp| () T@U)
(declare-fun |class.CrashTolerantUIOp_5#MapSpecMod#.UIOp| () T@U)
(declare-fun |class.CrashTolerantUIOp_5#MapSpecMod#.__default| () T@U)
(declare-fun |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.__default| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#Func2LLO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun tytagFamily$Variables () T@U)
(declare-fun tytagFamily$MsgHistory () T@U)
(declare-fun tytagFamily$TotalMap () T@U)
(declare-fun tytagFamily$Stamped () T@U)
(declare-fun tytagFamily$PersistentState () T@U)
(declare-fun tytagFamily$FloatingSeq () T@U)
(declare-fun tytagFamily$Constants () T@U)
(declare-fun tytagFamily$UIOp () T@U)
(declare-fun tytagFamily$Step () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$Value () T@U)
(declare-fun tytagFamily$KeyedMessage () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun tytagFamily$Delta () T@U)
(declare-fun tytagFamily$Message () T@U)
(declare-fun tytagFamily$Input () T@U)
(declare-fun tytagFamily$Output () T@U)
(declare-fun tytagFamily$EphemeralState () T@U)
(declare-fun tytagFamily$TransitionLabel () T@U)
(declare-fun tytagFamily$Ephemeral () T@U)
(declare-fun tytagFamily$Request () T@U)
(declare-fun tytagFamily$Reply () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_2 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_1 (T@U) T@U)
(declare-fun |#_System._tuple#2OLL._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2OLL.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2OLL (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_1 (T@U) T@U)
(declare-fun _System.Tuple2OLL._0 (T@U) T@U)
(declare-fun _System.Tuple2OLL._1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2OLL| (T@U) Bool)
(declare-fun |_System.Tuple2OLL#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_1 (T@U) T@U)
(declare-fun Tclass.CoordinationSystemRefinement.__default () T@U)
(declare-fun Tclass.CrashTolerantJournal.Variables () T@U)
(declare-fun Tclass.MsgHistoryMod.MsgHistory () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun CoordinationSystemRefinement.__default.IEJ (T@U) T@U)
(declare-fun |CoordinationSystemRefinement.__default.IEJ#canCall| (T@U) Bool)
(declare-fun CrashTolerantJournal.Variables.WF (T@U) Bool)
(declare-fun CrashTolerantJournal.Ephemeral.Known_q (T@U) Bool)
(declare-fun CrashTolerantJournal.Variables.ephemeral (T@U) T@U)
(declare-fun MsgHistoryMod.MsgHistory.WF (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.IEJ#requires| (T@U) Bool)
(declare-fun CrashTolerantJournal.Variables.Variables_q (T@U) Bool)
(declare-fun AbstractJournal.Variables.Variables_q (T@U) Bool)
(declare-fun CrashTolerantJournal.Ephemeral.v (T@U) T@U)
(declare-fun AbstractJournal.Variables.journal (T@U) T@U)
(declare-fun Tclass.CrashTolerantMap.Variables () T@U)
(declare-fun Tclass.TotalKMMapMod.TotalMap () T@U)
(declare-fun Tclass.StampedMod.Stamped (T@U) T@U)
(declare-fun Tclass.StampedMod.Stamped_0 (T@U) T@U)
(declare-fun CoordinationSystemRefinement.__default.IMap (T@U) T@U)
(declare-fun |CoordinationSystemRefinement.__default.IMap#canCall| (T@U) Bool)
(declare-fun CrashTolerantMap.Variables.WF (T@U) Bool)
(declare-fun CrashTolerantMap.Ephemeral.Known_q (T@U) Bool)
(declare-fun CrashTolerantMap.Variables.ephemeral (T@U) T@U)
(declare-fun |CoordinationSystemRefinement.__default.IMap#requires| (T@U) Bool)
(declare-fun CrashTolerantMap.Variables.Variables_q (T@U) Bool)
(declare-fun AbstractMap.Variables.Variables_q (T@U) Bool)
(declare-fun CrashTolerantMap.Ephemeral.v (T@U) T@U)
(declare-fun AbstractMap.Variables.stampedMap (T@U) T@U)
(declare-fun Tclass.CoordinationSystem.Variables () T@U)
(declare-fun CoordinationSystemRefinement.__default.EphemeralSeqEnd (T@U) Int)
(declare-fun |CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| (T@U) Bool)
(declare-fun CoordinationSystem.Variables.WF (T@U) Bool)
(declare-fun CoordinationSystem.Variables.journal (T@U) T@U)
(declare-fun |CoordinationSystemRefinement.__default.EphemeralSeqEnd#requires| (T@U) Bool)
(declare-fun CoordinationSystem.Variables.Variables_q (T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.MsgHistory_q (T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.seqEnd (T@U) Int)
(declare-fun |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| () T@U)
(declare-fun CoordinationSystemRefinement.__default.StampedMapToVersion (T@U) T@U)
(declare-fun |CoordinationSystemRefinement.__default.StampedMapToVersion#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.StampedMapToVersion#requires| (T@U) Bool)
(declare-fun StampedMod.Stamped.Stamped_q (T@U) Bool)
(declare-fun |#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| (T@U) T@U)
(declare-fun |#MapSpecMod.Variables.Variables| (T@U) T@U)
(declare-fun StampedMod.Stamped.value (T@U) T@U)
(declare-fun Tclass.FloatingSeqMod.FloatingSeq (T@U) T@U)
(declare-fun Tclass.FloatingSeqMod.FloatingSeq_0 (T@U) T@U)
(declare-fun CoordinationSystemRefinement.__default.FloatingVersions (T@U T@U Int) T@U)
(declare-fun |CoordinationSystemRefinement.__default.FloatingVersions#canCall| (T@U T@U Int) Bool)
(declare-fun MsgHistoryMod.MsgHistory.CanFollow (T@U Int) Bool)
(declare-fun StampedMod.Stamped.seqEnd (T@U) Int)
(declare-fun MsgHistoryMod.MsgHistory.CanDiscardTo (T@U Int) Bool)
(declare-fun FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq (T@U T@U) Int)
(declare-fun |CoordinationSystemRefinement.__default.FloatingVersions#requires| (T@U T@U Int) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.InitPersistentState#canCall| () Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.InitPersistentState| () T@U)
(declare-fun |MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (T@U Int) Bool)
(declare-fun |MsgHistoryMod.__default.MapPlusHistory#canCall| (T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.DiscardRecent (T@U Int) T@U)
(declare-fun MsgHistoryMod.__default.MapPlusHistory (T@U T@U) T@U)
(declare-fun |FloatingSeqMod.__default.floatingSeq#canCall| (T@U Int Int T@U) Bool)
(declare-fun |lambda#10| (T@U) T@U)
(declare-fun |lambda#6| (Int Int T@U T@U T@U) T@U)
(declare-fun |lambda#7| (T@U) T@U)
(declare-fun |lambda#9| (T@U) T@U)
(declare-fun |lambda#8| (Bool) T@U)
(declare-fun $LZ () T@U)
(declare-fun FloatingSeqMod.__default.floatingSeq (T@U Int Int T@U) T@U)
(declare-fun Tclass.CrashTolerantMapSpecMod.Constants () T@U)
(declare-fun |CoordinationSystemRefinement.__default.Ic#canCall| () Bool)
(declare-fun CoordinationSystemRefinement.__default.Ic () T@U)
(declare-fun |CoordinationSystemRefinement.__default.Ic#requires| () Bool)
(declare-fun |#CrashTolerantMapSpecMod.Constants.Constants| () T@U)
(declare-fun Tclass.CrashTolerantMapSpecMod.Variables () T@U)
(declare-fun CoordinationSystemRefinement.__default.I (T@U) T@U)
(declare-fun |CoordinationSystemRefinement.__default.I#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.I#requires| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.Inv#canCall| (T@U) Bool)
(declare-fun CoordinationSystemRefinement.__default.Inv (T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.InitState#canCall| () Bool)
(declare-fun CrashTolerantJournal.Variables.persistent (T@U) T@U)
(declare-fun CoordinationSystem.Ephemeral.Known_q (T@U) Bool)
(declare-fun CoordinationSystem.Variables.ephemeral (T@U) T@U)
(declare-fun CoordinationSystem.Variables.mapadt (T@U) T@U)
(declare-fun CrashTolerantMap.Variables.persistent (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall| () Bool)
(declare-fun CrashTolerantMapSpecMod.__default.InitState () T@U)
(declare-fun |#CrashTolerantMapSpecMod.Variables.Variables| (T@U T@U T@U) T@U)
(declare-fun CoordinationSystem.Ephemeral.progress (T@U) T@U)
(declare-fun CoordinationSystem.Ephemeral.syncReqs (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState| () T@U)
(declare-fun CoordinationSystemRefinement.__default.JournalOverlapsAgree (T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun |CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| (T@U T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.JournalOverlapsAgree#requires| (T@U T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.msgs (T@U) T@U)
(declare-fun MsgHistoryMod.MsgHistory.Contains (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.Contains#canCall| (T@U Int) Bool)
(declare-fun |$IsA#MsgHistoryMod.KeyedMessage| (T@U) Bool)
(declare-fun |MsgHistoryMod.KeyedMessage#Equal| (T@U T@U) Bool)
(declare-fun CoordinationSystemRefinement.__default.JournalExtendsJournal (T@U T@U Int) Bool)
(declare-fun |CoordinationSystemRefinement.__default.JournalExtendsJournal#canCall| (T@U T@U Int) Bool)
(declare-fun |CoordinationSystemRefinement.__default.JournalExtendsJournal#requires| (T@U T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (T@U Int) Bool)
(declare-fun |$IsA#MsgHistoryMod.MsgHistory| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory#Equal| (T@U T@U) Bool)
(declare-fun CoordinationSystemRefinement.__default.InvPersistentJournalGeometry (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#requires| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanFollow#canCall| (T@U Int) Bool)
(declare-fun CoordinationSystemRefinement.__default.InvEphemeralGeometry (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvEphemeralGeometry#requires| (T@U) Bool)
(declare-fun CoordinationSystem.Ephemeral.mapLsn (T@U) Int)
(declare-fun CoordinationSystemRefinement.__default.InvEphemeralValueAgreement (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#requires| (T@U) Bool)
(declare-fun StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree () T@U)
(declare-fun |$IsA#StampedMod.Stamped| (T@U) Bool)
(declare-fun |StampedMod.Stamped#Equal| (T@U T@U) Bool)
(declare-fun CoordinationSystemRefinement.__default.MapIsFrozen (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.MapIsFrozen#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.MapIsFrozen#requires| (T@U) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun CrashTolerantMap.Variables.inFlight (T@U) T@U)
(declare-fun CoordinationSystemRefinement.__default.CommitStarted (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.CommitStarted#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.CommitStarted#requires| (T@U) Bool)
(declare-fun CrashTolerantJournal.Variables.inFlight (T@U) T@U)
(declare-fun CoordinationSystemRefinement.__default.InvFrozenMapGeometry (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvFrozenMapGeometry#requires| (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#requires| (T@U) Bool)
(declare-fun CoordinationSystemRefinement.__default.InvCommitStartedGeometry (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvCommitStartedGeometry#requires| (T@U) Bool)
(declare-fun CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#requires| (T@U) Bool)
(declare-fun |CoordinationSystemRefinement.__default.Inv#requires| (T@U) Bool)
(declare-fun |CoordinationSystem.Variables.WF#canCall| (T@U) Bool)
(declare-fun CoordinationSystem.Ephemeral.Unknown_q (T@U) Bool)
(declare-fun |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| () T@U)
(declare-fun Tclass.CoordinationSystem.Step () T@U)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.MsgHistoryMod.KeyedMessage () T@U)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun |#FloatingSeqMod.FloatingSeq.FloatingSeq| (Int T@U) T@U)
(declare-fun FloatingSeqMod.FloatingSeq.FloatingSeq_q (T@U) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.start (T@U) Int)
(declare-fun FloatingSeqMod.FloatingSeq.entries (T@U) T@U)
(declare-fun |$IsA#FloatingSeqMod.FloatingSeq| (T@U) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq#Equal| (T@U T@U) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.Len (T@U T@U) Int)
(declare-fun |FloatingSeqMod.FloatingSeq.Len#canCall| (T@U T@U) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.Len#requires| (T@U T@U) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.FirstActiveIndex (T@U T@U) Int)
(declare-fun |FloatingSeqMod.FloatingSeq.FirstActiveIndex#canCall| (T@U T@U) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.FirstActiveIndex#requires| (T@U T@U) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.IsActive (T@U T@U Int) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.IsActive#canCall| (T@U T@U Int) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.IsActive#requires| (T@U T@U Int) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.Get (T@U T@U Int) T@U)
(declare-fun |FloatingSeqMod.FloatingSeq.Get#canCall| (T@U T@U Int) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.Get#requires| (T@U T@U Int) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.GetPrefix (T@U T@U Int) T@U)
(declare-fun |FloatingSeqMod.FloatingSeq.GetPrefix#canCall| (T@U T@U Int) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.GetPrefix#requires| (T@U T@U Int) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.GetSuffix (T@U T@U Int) T@U)
(declare-fun |FloatingSeqMod.FloatingSeq.GetSuffix#canCall| (T@U T@U Int) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.GetSuffix#requires| (T@U T@U Int) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.Append (T@U T@U T@U) T@U)
(declare-fun |FloatingSeqMod.FloatingSeq.Append#canCall| (T@U T@U T@U) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.Append#requires| (T@U T@U T@U) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.Last (T@U T@U) T@U)
(declare-fun |FloatingSeqMod.FloatingSeq.Last#canCall| (T@U T@U) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.Last#requires| (T@U T@U) Bool)
(declare-fun FloatingSeqMod.FloatingSeq.DropLast (T@U T@U) T@U)
(declare-fun |FloatingSeqMod.FloatingSeq.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |FloatingSeqMod.FloatingSeq.DropLast#requires| (T@U T@U) Bool)
(declare-fun Tclass.FloatingSeqMod.__default () T@U)
(declare-fun |FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| (T@U T@U) Bool)
(declare-fun |FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#requires| (T@U T@U) Bool)
(declare-fun FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq (T@U T@U Int) T@U)
(declare-fun |FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq#canCall| (T@U T@U Int) Bool)
(declare-fun |FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq#requires| (T@U T@U Int) Bool)
(declare-fun |FloatingSeqMod.__default.floatingSeq#requires| (T@U Int Int T@U) Bool)
(declare-fun |lambda#91| (T@U T@U T@U Int) T@U)
(declare-fun |lambda#92| (T@U Int Int) T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.MapRemove_s.__default () T@U)
(declare-fun MapRemove_s.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MapRemove_s.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapRemove_s.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#106| (T@U T@U T@U) T@U)
(declare-fun |lambda#107| (T@U) T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun NativeTypes.__default.Uint8UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint8UpperBound#requires| () Bool)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.LinearMaybe.__default () T@U)
(declare-fun LinearMaybe.__default.has (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.has#canCall| (T@U T@U) Bool)
(declare-fun |#$maybe| (T@U) T@U)
(declare-fun |LinearMaybe.__default.has#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.read (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.read#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.read#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.peek (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.peek#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.peek#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.unwrap (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.unwrap#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.unwrap#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.give (T@U T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.give#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.give#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMaybe.__default.empty (T@U) T@U)
(declare-fun |LinearMaybe.__default.empty#requires| (T@U) Bool)
(declare-fun LinearMaybe.__default.discard (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.discard#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.discard#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.imagine (T@U Bool T@U) T@U)
(declare-fun |LinearMaybe.__default.imagine#canCall| (T@U Bool T@U) Bool)
(declare-fun |LinearMaybe.__default.imagine#requires| (T@U Bool T@U) Bool)
(declare-fun Tclass.LinearExtern.__default () T@U)
(declare-fun LinearExtern.__default.seq_get (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.seq_get#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.seq_get#requires| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_set (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_set#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_set#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_length (T@U T@U) Int)
(declare-fun |LinearExtern.__default.seq_length#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_length#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_empty (T@U) T@U)
(declare-fun |LinearExtern.__default.seq_empty#requires| (T@U) Bool)
(declare-fun LinearExtern.__default.seq_alloc (T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_alloc#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_alloc#requires| (T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_free (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_free#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_free#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_unleash (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_unleash#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_unleash#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseqs__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#canCall| (T@U T@U) Bool)
(declare-fun |#$lseq| (T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq__has (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq__has#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq__has#requires| (T@U T@U) Bool)
(declare-fun |lambda#112| (T@U T@U) T@U)
(declare-fun LinearExtern.__default.imagine__lseq__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_length_raw (T@U T@U) Int)
(declare-fun |LinearExtern.__default.lseq_length_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_length_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_alloc_raw (T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#canCall| (T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#requires| (T@U Int) Bool)
(declare-fun LinearExtern.__default.lseq_free_raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_free_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_free_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_swap_raw_fun (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.lseq_share_raw (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_share_raw#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_share_raw#requires| (T@U T@U Int) Bool)
(declare-fun |#ValueMessage.Delta.NoDelta| () T@U)
(declare-fun ValueMessage.Delta.NoDelta_q (T@U) Bool)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun |$IsA#ValueMessage.Delta| (T@U) Bool)
(declare-fun |ValueMessage.Delta#Equal| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun |ValueType.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun ValueMessage.__default.MakeValueMessage (T@U) T@U)
(declare-fun |ValueMessage.__default.MakeValueMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.MakeValueMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun ValueMessage.__default.EvaluateMessage (T@U) T@U)
(declare-fun |ValueMessage.__default.EvaluateMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EvaluateMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefaultMessage () T@U)
(declare-fun |ValueMessage.__default.DefaultMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun Tclass.TotalKMMapMod.__default () T@U)
(declare-fun TotalKMMapMod.__default.TerminalValue (T@U) Bool)
(declare-fun |TotalKMMapMod.__default.TerminalValue#canCall| (T@U) Bool)
(declare-fun |TotalKMMapMod.__default.TerminalValue#requires| (T@U) Bool)
(declare-fun TotalKMMapMod.__default.DefaultV () T@U)
(declare-fun |TotalKMMapMod.__default.DefaultV#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultMessage#canCall| () Bool)
(declare-fun TotalKMMapMod.__default.AnyKey (T@U) Bool)
(declare-fun |TotalKMMapMod.__default.AnyKey#canCall| (T@U) Bool)
(declare-fun |TotalKMMapMod.__default.AnyKey#requires| (T@U) Bool)
(declare-fun TotalKMMapMod.__default.Defined (T@U T@U) Bool)
(declare-fun |TotalKMMapMod.__default.Defined#canCall| (T@U T@U) Bool)
(declare-fun |TotalKMMapMod.__default.Defined#requires| (T@U T@U) Bool)
(declare-fun TotalKMMapMod.__default.TotalMapIsFull (T@U) Bool)
(declare-fun |TotalKMMapMod.__default.TotalMapIsFull#canCall| (T@U) Bool)
(declare-fun |TotalKMMapMod.__default.TotalMapIsFull#requires| (T@U) Bool)
(declare-fun TotalKMMapMod.__default.EmptyTotalMap () T@U)
(declare-fun |TotalKMMapMod.__default.EmptyTotalMap#requires| () Bool)
(declare-fun |TotalKMMapMod.__default.DefaultV#canCall| () Bool)
(declare-fun |lambda#122| (T@U) T@U)
(declare-fun |lambda#123| (T@U) T@U)
(declare-fun TotalKMMapMod.__default.Witness () T@U)
(declare-fun |TotalKMMapMod.__default.Witness#requires| () Bool)
(declare-fun |#MapSpecMod.Input.GetInput| (T@U) T@U)
(declare-fun MapSpecMod.Input.GetInput_q (T@U) Bool)
(declare-fun Tclass.MapSpecMod.Input () T@U)
(declare-fun MapSpecMod.Input.key (T@U) T@U)
(declare-fun |#MapSpecMod.Input.PutInput| (T@U T@U) T@U)
(declare-fun MapSpecMod.Input.PutInput_q (T@U) Bool)
(declare-fun MapSpecMod.Input.value (T@U) T@U)
(declare-fun |#MapSpecMod.Input.NoopInput| () T@U)
(declare-fun MapSpecMod.Input.NoopInput_q (T@U) Bool)
(declare-fun |$IsA#MapSpecMod.Input| (T@U) Bool)
(declare-fun |MapSpecMod.Input#Equal| (T@U T@U) Bool)
(declare-fun |#MapSpecMod.Output.GetOutput| (T@U) T@U)
(declare-fun MapSpecMod.Output.GetOutput_q (T@U) Bool)
(declare-fun Tclass.MapSpecMod.Output () T@U)
(declare-fun MapSpecMod.Output.value (T@U) T@U)
(declare-fun |#MapSpecMod.Output.PutOutput| () T@U)
(declare-fun MapSpecMod.Output.PutOutput_q (T@U) Bool)
(declare-fun |#MapSpecMod.Output.NoopOutput| () T@U)
(declare-fun MapSpecMod.Output.NoopOutput_q (T@U) Bool)
(declare-fun |$IsA#MapSpecMod.Output| (T@U) Bool)
(declare-fun |MapSpecMod.Output#Equal| (T@U T@U) Bool)
(declare-fun MapSpecMod.Variables.Variables_q (T@U) Bool)
(declare-fun Tclass.MapSpecMod.Variables () T@U)
(declare-fun MapSpecMod.Variables.kmmap (T@U) T@U)
(declare-fun |$IsA#MapSpecMod.Variables| (T@U) Bool)
(declare-fun |MapSpecMod.Variables#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MapSpecMod.__default () T@U)
(declare-fun MapSpecMod.__default.InitState () T@U)
(declare-fun |MapSpecMod.__default.InitState#requires| () Bool)
(declare-fun |TotalKMMapMod.__default.EmptyTotalMap#canCall| () Bool)
(declare-fun MapSpecMod.__default.Query (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpecMod.__default.Query#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpecMod.__default.Query#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpecMod.__default.Put (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpecMod.__default.Put#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpecMod.__default.Put#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpecMod.__default.Next (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpecMod.__default.Next#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpecMod.__default.Next#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.CrashTolerantMapSpecMod.__default () T@U)
(declare-fun |CrashTolerantMapSpecMod.__default.InitState#requires| () Bool)
(declare-fun CrashTolerantMapSpecMod.__default.OptionallyAppendVersion (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#canCall| (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#requires| (T@U T@U) Bool)
(declare-fun |Tclass.AsyncMod_6#MapSpecMod#.UIOp| () T@U)
(declare-fun CrashTolerantMapSpecMod.__default.Operate (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Operate#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Operate#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.Variables.Variables_q (T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.Variables.versions (T@U) T@U)
(declare-fun CrashTolerantMapSpecMod.Variables.asyncEphemeral (T@U) T@U)
(declare-fun |CrashTolerantMapSpecMod.Variables.WF#canCall| (T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.Variables.WF (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| (T@U T@U T@U) Bool)
(declare-fun |#AsyncMod_6#MapSpecMod#.Variables.Variables| (T@U T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.NextStep| (T@U T@U T@U) Bool)
(declare-fun |$IsA#CrashTolerantMapSpecMod.Variables| (T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.Variables.syncRequests (T@U) T@U)
(declare-fun |CrashTolerantMapSpecMod.Variables#Equal| (T@U T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.__default.Crash (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Crash#canCall| (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Crash#requires| (T@U T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.Variables.StableIndex (T@U) Int)
(declare-fun |CrashTolerantMapSpecMod.Variables.StableIndex#canCall| (T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.__default.Sync (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Sync#canCall| (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Sync#requires| (T@U T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.__default.ReqSync (T@U T@U Int) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.ReqSync#canCall| (T@U T@U Int) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.ReqSync#requires| (T@U T@U Int) Bool)
(declare-fun CrashTolerantMapSpecMod.__default.ReplySync (T@U T@U Int) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.ReplySync#canCall| (T@U T@U Int) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.ReplySync#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun CrashTolerantMapSpecMod.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (T@U) Bool)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (T@U) T@U)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| (T@U) Bool)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| (T@U) Bool)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| (T@U) Bool)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (T@U) Int)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| (T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.__default.Next (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Next#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Next#requires| (T@U T@U T@U T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.__default.Init (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Init#canCall| (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.__default.Init#requires| (T@U T@U) Bool)
(declare-fun CrashTolerantMapSpecMod.Constants.Constants_q (T@U) Bool)
(declare-fun |$IsA#CrashTolerantMapSpecMod.Constants| (T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.Constants#Equal| (T@U T@U) Bool)
(declare-fun |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| () T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (T@U T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.Variables.WF#requires| (T@U) Bool)
(declare-fun |CrashTolerantMapSpecMod.Variables.StableIndex#requires| (T@U) Bool)
(declare-fun Tclass.LSNMod.__default () T@U)
(declare-fun |#StampedMod.Stamped.Stamped| (T@U Int) T@U)
(declare-fun Tclass.StampedMod.__default () T@U)
(declare-fun StampedMod.__default.Empty () T@U)
(declare-fun |StampedMod.__default.Empty#requires| () Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#126| (T@U T@U Int) T@U)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun |lambda#128| (T@U T@U) T@U)
(declare-fun Tclass.LinearSequence__i.__default () T@U)
(declare-fun LinearSequence__i.__default.seq__alloc__init (T@U Int T@U) T@U)
(declare-fun |LinearSequence__i.__default.seq__alloc__init#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearSequence__i.__default.seq__alloc__init#requires| (T@U Int T@U) Bool)
(declare-fun LinearSequence__i.__default.lseqs (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseqs#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseqs#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.imagine__lseq (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.imagine__lseq#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.imagine__lseq#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.linLast (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.linLast#canCall| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.operator_kcardinality_qlseq (T@U T@U) Int)
(declare-fun |LinearSequence__i.__default.linLast#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.ldroplast (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.ldroplast#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.ldroplast#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__has__all (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__has__all#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__has__all#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__length__as__uint64 (T@U T@U) Int)
(declare-fun |LinearSequence__i.__default.lseq__length__as__uint64#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__length__as__uint64#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__length (T@U T@U) Int)
(declare-fun |LinearSequence__i.__default.lseq__length#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__length#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.operator_kcardinality_qlseq#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.operator_ksubscript_qlseq (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_ksubscript_qlseq#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.operator_kin_qlseq (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_kin_qlseq#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_kin_qlseq#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__add (T@U T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseq__add#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__add#requires| (T@U T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__peek (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.lseq__peek#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.lseq__peek#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__free__fun (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseq__free__fun#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__free__fun#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__take__fun (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.lseq__take__fun#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.lseq__take__fun#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__full (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__full#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__full#requires| (T@U T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#134| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#135| (T@U Int Int T@U T@U T@U T@U) T@U)
(declare-fun |lambda#137| (T@U Int Int T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldSets (T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldSets#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldSets#requires| (T@U T@U) Bool)
(declare-fun |lambda#149| () T@U)
(declare-fun |lambda#150| (T@U T@U) T@U)
(declare-fun |lambda#152| (T@U) T@U)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqHasUniqueElems (T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqHasUniqueElems#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqHasUniqueElems#requires| (T@U T@U) Bool)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapInjective (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapInjective#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapInjective#requires| (T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgree (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgree#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgree#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#169| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove11 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapInvert (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapInvert#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapInvert#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#8_a| (T@U T@U T@U T@U) T@U)
(declare-fun |$let#8$canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#174| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#185| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#200| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#220| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |#MsgHistoryMod.KeyedMessage.KeyedMessage| (T@U T@U) T@U)
(declare-fun MsgHistoryMod.KeyedMessage.KeyedMessage_q (T@U) Bool)
(declare-fun MsgHistoryMod.KeyedMessage.key (T@U) T@U)
(declare-fun MsgHistoryMod.KeyedMessage.message (T@U) T@U)
(declare-fun |#MsgHistoryMod.MsgHistory.MsgHistory| (T@U Int Int) T@U)
(declare-fun MsgHistoryMod.MsgHistory.seqStart (T@U) Int)
(declare-fun |MsgHistoryMod.MsgHistory.WF#canCall| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.WF#requires| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.ContainsExactly#canCall| (T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.ContainsExactly (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.ContainsExactly#requires| (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.Contains#requires| (T@U Int) Bool)
(declare-fun MsgHistoryMod.MsgHistory.LSNSet (T@U T@U) T@U)
(declare-fun |MsgHistoryMod.MsgHistory.LSNSet#canCall| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.LSNSet#requires| (T@U T@U) Bool)
(declare-fun |lambda#227| (T@U Int Int) T@U)
(declare-fun MsgHistoryMod.MsgHistory.IsEmpty (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.IsEmpty#canCall| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.IsEmpty#requires| (T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.Len (T@U) Int)
(declare-fun |MsgHistoryMod.MsgHistory.Len#canCall| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.Len#requires| (T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.CanConcat (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanConcat#canCall| (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanConcat#requires| (T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.Concat (T@U T@U) T@U)
(declare-fun |MsgHistoryMod.MsgHistory.Concat#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun |MsgHistoryMod.MsgHistory.Concat#requires| (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanFollow#requires| (T@U Int) Bool)
(declare-fun MsgHistoryMod.MsgHistory.ApplyToStampedMap (T@U T@U T@U) T@U)
(declare-fun |MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.ApplyToStampedMap#requires| (T@U T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanDiscardTo#requires| (T@U Int) Bool)
(declare-fun MsgHistoryMod.MsgHistory.DiscardOld (T@U Int) T@U)
(declare-fun |MsgHistoryMod.MsgHistory.DiscardOld#canCall| (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.DiscardOld#requires| (T@U Int) Bool)
(declare-fun MsgHistoryMod.MsgHistory.MaybeDiscardOld (T@U Int) T@U)
(declare-fun |MsgHistoryMod.MsgHistory.MaybeDiscardOld#canCall| (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.MaybeDiscardOld#requires| (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.DiscardRecent#requires| (T@U Int) Bool)
(declare-fun MsgHistoryMod.MsgHistory.IncludesSubseq (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.IncludesSubseq#requires| (T@U T@U) Bool)
(declare-fun Tclass.MsgHistoryMod.__default () T@U)
(declare-fun MsgHistoryMod.__default.EmptyHistoryAt (Int) T@U)
(declare-fun |MsgHistoryMod.__default.EmptyHistoryAt#canCall| (Int) Bool)
(declare-fun |MsgHistoryMod.__default.EmptyHistoryAt#requires| (Int) Bool)
(declare-fun MsgHistoryMod.__default.SingletonAt (Int T@U) T@U)
(declare-fun |MsgHistoryMod.__default.SingletonAt#canCall| (Int T@U) Bool)
(declare-fun |MsgHistoryMod.__default.SingletonAt#requires| (Int T@U) Bool)
(declare-fun |MsgHistoryMod.__default.MapPlusHistory#requires| (T@U T@U) Bool)
(declare-fun |#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (T@U) T@U)
(declare-fun AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q (T@U) Bool)
(declare-fun Tclass.AbstractJournal.TransitionLabel () T@U)
(declare-fun AbstractJournal.TransitionLabel.messages (T@U) T@U)
(declare-fun |#AbstractJournal.TransitionLabel.FreezeForCommitLabel| (T@U) T@U)
(declare-fun AbstractJournal.TransitionLabel.FreezeForCommitLabel_q (T@U) Bool)
(declare-fun AbstractJournal.TransitionLabel.frozenJournal (T@U) T@U)
(declare-fun |#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (Int) T@U)
(declare-fun AbstractJournal.TransitionLabel.QueryEndLsnLabel_q (T@U) Bool)
(declare-fun AbstractJournal.TransitionLabel.endLsn (T@U) Int)
(declare-fun |#AbstractJournal.TransitionLabel.PutLabel| (T@U) T@U)
(declare-fun AbstractJournal.TransitionLabel.PutLabel_q (T@U) Bool)
(declare-fun |#AbstractJournal.TransitionLabel.DiscardOldLabel| (Int Int) T@U)
(declare-fun AbstractJournal.TransitionLabel.DiscardOldLabel_q (T@U) Bool)
(declare-fun AbstractJournal.TransitionLabel.startLsn (T@U) Int)
(declare-fun AbstractJournal.TransitionLabel.requireEnd (T@U) Int)
(declare-fun |#AbstractJournal.TransitionLabel.InternalLabel| () T@U)
(declare-fun AbstractJournal.TransitionLabel.InternalLabel_q (T@U) Bool)
(declare-fun |$IsA#AbstractJournal.TransitionLabel| (T@U) Bool)
(declare-fun |AbstractJournal.TransitionLabel#Equal| (T@U T@U) Bool)
(declare-fun |#AbstractJournal.Variables.Variables| (T@U) T@U)
(declare-fun Tclass.AbstractJournal.Variables () T@U)
(declare-fun |$IsA#AbstractJournal.Variables| (T@U) Bool)
(declare-fun |AbstractJournal.Variables#Equal| (T@U T@U) Bool)
(declare-fun AbstractJournal.Variables.WF (T@U) Bool)
(declare-fun |AbstractJournal.Variables.WF#canCall| (T@U) Bool)
(declare-fun |AbstractJournal.Variables.WF#requires| (T@U) Bool)
(declare-fun AbstractJournal.Variables.CanEndAt (T@U Int) Bool)
(declare-fun |AbstractJournal.Variables.CanEndAt#canCall| (T@U Int) Bool)
(declare-fun |AbstractJournal.Variables.CanEndAt#requires| (T@U Int) Bool)
(declare-fun Tclass.AbstractJournal.__default () T@U)
(declare-fun AbstractJournal.__default.ReadForRecovery (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.ReadForRecovery#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.ReadForRecovery#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractJournal.__default.FreezeForCommit (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.FreezeForCommit#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.FreezeForCommit#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractJournal.__default.ObserveFreshJournal (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.ObserveFreshJournal#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.ObserveFreshJournal#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractJournal.__default.Put (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Put#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Put#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractJournal.__default.DiscardOld (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.DiscardOld#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.DiscardOld#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractJournal.__default.Internal (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Internal#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Internal#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractJournal.__default.Init (T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Init#canCall| (T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Init#requires| (T@U T@U) Bool)
(declare-fun AbstractJournal.__default.Next (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractJournal.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel| () T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q (T@U) Bool)
(declare-fun Tclass.CrashTolerantJournal.TransitionLabel () T@U)
(declare-fun |#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| (T@U) T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q (T@U) Bool)
(declare-fun CrashTolerantJournal.TransitionLabel.records (T@U) T@U)
(declare-fun |#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (Int) T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q (T@U) Bool)
(declare-fun CrashTolerantJournal.TransitionLabel.endLsn (T@U) Int)
(declare-fun |#CrashTolerantJournal.TransitionLabel.PutLabel| (T@U) T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.PutLabel_q (T@U) Bool)
(declare-fun |#CrashTolerantJournal.TransitionLabel.InternalLabel| () T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.InternalLabel_q (T@U) Bool)
(declare-fun |#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (Int) T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q (T@U) Bool)
(declare-fun CrashTolerantJournal.TransitionLabel.syncLsn (T@U) Int)
(declare-fun |#CrashTolerantJournal.TransitionLabel.CommitStartLabel| (Int Int) T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.CommitStartLabel_q (T@U) Bool)
(declare-fun CrashTolerantJournal.TransitionLabel.newBoundaryLsn (T@U) Int)
(declare-fun CrashTolerantJournal.TransitionLabel.maxLsn (T@U) Int)
(declare-fun |#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (Int) T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q (T@U) Bool)
(declare-fun CrashTolerantJournal.TransitionLabel.requireEnd (T@U) Int)
(declare-fun |#CrashTolerantJournal.TransitionLabel.CrashLabel| () T@U)
(declare-fun CrashTolerantJournal.TransitionLabel.CrashLabel_q (T@U) Bool)
(declare-fun |$IsA#CrashTolerantJournal.TransitionLabel| (T@U) Bool)
(declare-fun |CrashTolerantJournal.TransitionLabel#Equal| (T@U T@U) Bool)
(declare-fun |#CrashTolerantJournal.Ephemeral.Unknown| () T@U)
(declare-fun CrashTolerantJournal.Ephemeral.Unknown_q (T@U) Bool)
(declare-fun Tclass.CrashTolerantJournal.Ephemeral () T@U)
(declare-fun |#CrashTolerantJournal.Ephemeral.Known| (T@U) T@U)
(declare-fun |$IsA#CrashTolerantJournal.Ephemeral| (T@U) Bool)
(declare-fun |CrashTolerantJournal.Ephemeral#Equal| (T@U T@U) Bool)
(declare-fun CrashTolerantJournal.Ephemeral.WF (T@U) Bool)
(declare-fun |CrashTolerantJournal.Ephemeral.WF#canCall| (T@U) Bool)
(declare-fun |CrashTolerantJournal.Ephemeral.WF#requires| (T@U) Bool)
(declare-fun |#CrashTolerantJournal.Variables.Variables| (T@U T@U T@U) T@U)
(declare-fun |$IsA#CrashTolerantJournal.Variables| (T@U) Bool)
(declare-fun |CrashTolerantJournal.Variables#Equal| (T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.Variables.WF#canCall| (T@U) Bool)
(declare-fun |CrashTolerantJournal.Variables.WF#requires| (T@U) Bool)
(declare-fun Tclass.CrashTolerantJournal.__default () T@U)
(declare-fun CrashTolerantJournal.__default.LoadEphemeralFromPersistent (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.LoadEphemeralFromPersistent#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.LoadEphemeralFromPersistent#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.ReadForRecovery (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.ReadForRecovery#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.ReadForRecovery#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.QueryEndLsn (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.QueryEndLsn#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.QueryEndLsn#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.Put (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Put#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Put#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.Internal (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Internal#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Internal#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.QueryLsnPersistence (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.QueryLsnPersistence#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.QueryLsnPersistence#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.CommitStart (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.CommitStart#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.CommitStart#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.CommitComplete (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.CommitComplete#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.CommitComplete#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.Crash (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Crash#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Crash#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantJournal.__default.Init (T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Init#canCall| (T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Init#requires| (T@U) Bool)
(declare-fun CrashTolerantJournal.__default.Next (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantJournal.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun |#AbstractMap.TransitionLabel.QueryLabel| (Int T@U T@U) T@U)
(declare-fun AbstractMap.TransitionLabel.QueryLabel_q (T@U) Bool)
(declare-fun Tclass.AbstractMap.TransitionLabel () T@U)
(declare-fun AbstractMap.TransitionLabel.endLsn (T@U) Int)
(declare-fun AbstractMap.TransitionLabel.key (T@U) T@U)
(declare-fun AbstractMap.TransitionLabel.value (T@U) T@U)
(declare-fun |#AbstractMap.TransitionLabel.PutLabel| (T@U) T@U)
(declare-fun AbstractMap.TransitionLabel.PutLabel_q (T@U) Bool)
(declare-fun AbstractMap.TransitionLabel.puts (T@U) T@U)
(declare-fun |#AbstractMap.TransitionLabel.QueryEndLsnLabel| (Int) T@U)
(declare-fun AbstractMap.TransitionLabel.QueryEndLsnLabel_q (T@U) Bool)
(declare-fun |#AbstractMap.TransitionLabel.FreezeAsLabel| (T@U) T@U)
(declare-fun AbstractMap.TransitionLabel.FreezeAsLabel_q (T@U) Bool)
(declare-fun AbstractMap.TransitionLabel.stampedMap (T@U) T@U)
(declare-fun |#AbstractMap.TransitionLabel.InternalLabel| () T@U)
(declare-fun AbstractMap.TransitionLabel.InternalLabel_q (T@U) Bool)
(declare-fun |$IsA#AbstractMap.TransitionLabel| (T@U) Bool)
(declare-fun |AbstractMap.TransitionLabel#Equal| (T@U T@U) Bool)
(declare-fun |#AbstractMap.Variables.Variables| (T@U) T@U)
(declare-fun Tclass.AbstractMap.Variables () T@U)
(declare-fun |$IsA#AbstractMap.Variables| (T@U) Bool)
(declare-fun |AbstractMap.Variables#Equal| (T@U T@U) Bool)
(declare-fun Tclass.AbstractMap.__default () T@U)
(declare-fun AbstractMap.__default.Query (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Query#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Query#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractMap.__default.Put (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Put#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Put#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractMap.__default.QueryEndLsn (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.QueryEndLsn#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.QueryEndLsn#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractMap.__default.FreezeAs (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.FreezeAs#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.FreezeAs#requires| (T@U T@U T@U) Bool)
(declare-fun AbstractMap.__default.Init (T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Init#canCall| (T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Init#requires| (T@U T@U) Bool)
(declare-fun AbstractMap.__default.Next (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |AbstractMap.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun |#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (Int) T@U)
(declare-fun CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q (T@U) Bool)
(declare-fun Tclass.CrashTolerantMap.TransitionLabel () T@U)
(declare-fun CrashTolerantMap.TransitionLabel.endLsn (T@U) Int)
(declare-fun |#CrashTolerantMap.TransitionLabel.PutRecordsLabel| (T@U) T@U)
(declare-fun CrashTolerantMap.TransitionLabel.PutRecordsLabel_q (T@U) Bool)
(declare-fun CrashTolerantMap.TransitionLabel.records (T@U) T@U)
(declare-fun |#CrashTolerantMap.TransitionLabel.QueryLabel| (Int T@U T@U) T@U)
(declare-fun CrashTolerantMap.TransitionLabel.QueryLabel_q (T@U) Bool)
(declare-fun CrashTolerantMap.TransitionLabel.key (T@U) T@U)
(declare-fun CrashTolerantMap.TransitionLabel.value (T@U) T@U)
(declare-fun |#CrashTolerantMap.TransitionLabel.InternalLabel| () T@U)
(declare-fun CrashTolerantMap.TransitionLabel.InternalLabel_q (T@U) Bool)
(declare-fun |#CrashTolerantMap.TransitionLabel.CommitStartLabel| (Int) T@U)
(declare-fun CrashTolerantMap.TransitionLabel.CommitStartLabel_q (T@U) Bool)
(declare-fun CrashTolerantMap.TransitionLabel.newBoundaryLsn (T@U) Int)
(declare-fun |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel| () T@U)
(declare-fun CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q (T@U) Bool)
(declare-fun |#CrashTolerantMap.TransitionLabel.CrashLabel| () T@U)
(declare-fun CrashTolerantMap.TransitionLabel.CrashLabel_q (T@U) Bool)
(declare-fun |$IsA#CrashTolerantMap.TransitionLabel| (T@U) Bool)
(declare-fun |CrashTolerantMap.TransitionLabel#Equal| (T@U T@U) Bool)
(declare-fun CrashTolerantMap.TransitionLabel.WF (T@U) Bool)
(declare-fun |CrashTolerantMap.TransitionLabel.WF#canCall| (T@U) Bool)
(declare-fun |CrashTolerantMap.TransitionLabel.WF#requires| (T@U) Bool)
(declare-fun |#CrashTolerantMap.Ephemeral.Unknown| () T@U)
(declare-fun CrashTolerantMap.Ephemeral.Unknown_q (T@U) Bool)
(declare-fun Tclass.CrashTolerantMap.Ephemeral () T@U)
(declare-fun |#CrashTolerantMap.Ephemeral.Known| (T@U) T@U)
(declare-fun |$IsA#CrashTolerantMap.Ephemeral| (T@U) Bool)
(declare-fun |CrashTolerantMap.Ephemeral#Equal| (T@U T@U) Bool)
(declare-fun |#CrashTolerantMap.Variables.Variables| (T@U T@U T@U) T@U)
(declare-fun |$IsA#CrashTolerantMap.Variables| (T@U) Bool)
(declare-fun |CrashTolerantMap.Variables#Equal| (T@U T@U) Bool)
(declare-fun |CrashTolerantMap.Variables.WF#canCall| (T@U) Bool)
(declare-fun |CrashTolerantMap.Variables.WF#requires| (T@U) Bool)
(declare-fun |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep| () T@U)
(declare-fun CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q (T@U) Bool)
(declare-fun Tclass.CrashTolerantMap.Step () T@U)
(declare-fun |#CrashTolerantMap.Step.PutRecordsStep| () T@U)
(declare-fun CrashTolerantMap.Step.PutRecordsStep_q (T@U) Bool)
(declare-fun |#CrashTolerantMap.Step.QueryStep| () T@U)
(declare-fun CrashTolerantMap.Step.QueryStep_q (T@U) Bool)
(declare-fun |#CrashTolerantMap.Step.FreezeMapInternalStep| (T@U) T@U)
(declare-fun CrashTolerantMap.Step.FreezeMapInternalStep_q (T@U) Bool)
(declare-fun CrashTolerantMap.Step.frozenMap (T@U) T@U)
(declare-fun |#CrashTolerantMap.Step.EphemeralInternalStep| () T@U)
(declare-fun CrashTolerantMap.Step.EphemeralInternalStep_q (T@U) Bool)
(declare-fun |#CrashTolerantMap.Step.CommitStartStep| () T@U)
(declare-fun CrashTolerantMap.Step.CommitStartStep_q (T@U) Bool)
(declare-fun |#CrashTolerantMap.Step.CommitCompleteStep| () T@U)
(declare-fun CrashTolerantMap.Step.CommitCompleteStep_q (T@U) Bool)
(declare-fun |#CrashTolerantMap.Step.CrashStep| () T@U)
(declare-fun CrashTolerantMap.Step.CrashStep_q (T@U) Bool)
(declare-fun |$IsA#CrashTolerantMap.Step| (T@U) Bool)
(declare-fun |CrashTolerantMap.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.CrashTolerantMap.__default () T@U)
(declare-fun CrashTolerantMap.__default.LoadEphemeralFromPersistent (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.LoadEphemeralFromPersistent#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.LoadEphemeralFromPersistent#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.PutRecords (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.PutRecords#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.PutRecords#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.Query (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Query#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Query#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.FreezeMapInternal (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.FreezeMapInternal#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.FreezeMapInternal#requires| (T@U T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.EphemeralInternal (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.EphemeralInternal#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.EphemeralInternal#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.CommitStart (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.CommitStart#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.CommitStart#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.CommitComplete (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.CommitComplete#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.CommitComplete#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.Crash (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Crash#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Crash#requires| (T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.Init (T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Init#canCall| (T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Init#requires| (T@U) Bool)
(declare-fun |StampedMod.__default.Empty#canCall| () Bool)
(declare-fun CrashTolerantMap.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun CrashTolerantMap.__default.Next (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantMap.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun |#CoordinationSystem.Ephemeral.Unknown| () T@U)
(declare-fun Tclass.CoordinationSystem.Ephemeral () T@U)
(declare-fun |#CoordinationSystem.Ephemeral.Known| (T@U T@U Int) T@U)
(declare-fun |$IsA#CoordinationSystem.Ephemeral| (T@U) Bool)
(declare-fun |CoordinationSystem.Ephemeral#Equal| (T@U T@U) Bool)
(declare-fun |#CoordinationSystem.Variables.Variables| (T@U T@U T@U) T@U)
(declare-fun |$IsA#CoordinationSystem.Variables| (T@U) Bool)
(declare-fun |CoordinationSystem.Variables#Equal| (T@U T@U) Bool)
(declare-fun |CoordinationSystem.Variables.WF#requires| (T@U) Bool)
(declare-fun CoordinationSystem.Variables.Init (T@U) Bool)
(declare-fun |CoordinationSystem.Variables.Init#canCall| (T@U) Bool)
(declare-fun |CoordinationSystem.Variables.Init#requires| (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep| () T@U)
(declare-fun CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.RecoverStep| (T@U) T@U)
(declare-fun CoordinationSystem.Step.RecoverStep_q (T@U) Bool)
(declare-fun CoordinationSystem.Step.records (T@U) T@U)
(declare-fun |#CoordinationSystem.Step.AcceptRequestStep| () T@U)
(declare-fun CoordinationSystem.Step.AcceptRequestStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.QueryStep| () T@U)
(declare-fun CoordinationSystem.Step.QueryStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.PutStep| () T@U)
(declare-fun CoordinationSystem.Step.PutStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.DeliverReplyStep| () T@U)
(declare-fun CoordinationSystem.Step.DeliverReplyStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.JournalInternalStep| () T@U)
(declare-fun CoordinationSystem.Step.JournalInternalStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.MapInternalStep| () T@U)
(declare-fun CoordinationSystem.Step.MapInternalStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.ReqSyncStep| () T@U)
(declare-fun CoordinationSystem.Step.ReqSyncStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.ReplySyncStep| () T@U)
(declare-fun CoordinationSystem.Step.ReplySyncStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.CommitStartStep| (Int) T@U)
(declare-fun CoordinationSystem.Step.CommitStartStep_q (T@U) Bool)
(declare-fun CoordinationSystem.Step.newBoundaryLsn (T@U) Int)
(declare-fun |#CoordinationSystem.Step.CommitCompleteStep| () T@U)
(declare-fun CoordinationSystem.Step.CommitCompleteStep_q (T@U) Bool)
(declare-fun |#CoordinationSystem.Step.CrashStep| () T@U)
(declare-fun CoordinationSystem.Step.CrashStep_q (T@U) Bool)
(declare-fun |$IsA#CoordinationSystem.Step| (T@U) Bool)
(declare-fun |CoordinationSystem.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.CoordinationSystem.__default () T@U)
(declare-fun CoordinationSystem.__default.LoadEphemeralFromPersistent (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.LoadEphemeralFromPersistent#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.LoadEphemeralFromPersistent#requires| (T@U T@U T@U) Bool)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (T@U) Bool)
(declare-fun |$IsA#AsyncMod_6#MapSpecMod#.EphemeralState| (T@U) Bool)
(declare-fun CoordinationSystem.__default.Recover (T@U T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Recover#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Recover#requires| (T@U T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.AcceptRequest (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.AcceptRequest#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.AcceptRequest#requires| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.EphemeralState.requests| (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.UIOp.req| (T@U) T@U)
(declare-fun |#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (T@U T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.EphemeralState.replies| (T@U) T@U)
(declare-fun CoordinationSystem.__default.Query (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Query#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Query#requires| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.Request.Request_q| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.Request.input| (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.Reply.Reply_q| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.UIOp.reply| (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.Reply.output| (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.Reply.id| (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.Request.id| (T@U) T@U)
(declare-fun CoordinationSystem.__default.Put (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Put#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Put#requires| (T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.DeliverReply (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.DeliverReply#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.DeliverReply#requires| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| (T@U) Bool)
(declare-fun CoordinationSystem.__default.JournalInternal (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.JournalInternal#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.JournalInternal#requires| (T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.MapInternal (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.MapInternal#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.MapInternal#requires| (T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.ReqSync (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.ReqSync#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.ReqSync#requires| (T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.ReplySync (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.ReplySync#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.ReplySync#requires| (T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.CommitStart (T@U T@U T@U Int) Bool)
(declare-fun |CoordinationSystem.__default.CommitStart#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |CoordinationSystem.__default.CommitStart#requires| (T@U T@U T@U Int) Bool)
(declare-fun CoordinationSystem.__default.CommitComplete (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.CommitComplete#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.CommitComplete#requires| (T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.Crash (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Crash#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Crash#requires| (T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.Init (T@U) Bool)
(declare-fun |CoordinationSystem.__default.Init#canCall| (T@U) Bool)
(declare-fun |CoordinationSystem.__default.Init#requires| (T@U) Bool)
(declare-fun CoordinationSystem.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun CoordinationSystem.__default.Next (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |CoordinationSystem.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun |#AsyncMod_6#MapSpecMod#.Request.Request| (T@U T@U) T@U)
(declare-fun |Tclass.AsyncMod_6#MapSpecMod#.Request| () T@U)
(declare-fun |#$ID| () T@U)
(declare-fun |$IsA#AsyncMod_6#MapSpecMod#.Request| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.Request#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncMod_6#MapSpecMod#.Reply.Reply| (T@U T@U) T@U)
(declare-fun |Tclass.AsyncMod_6#MapSpecMod#.Reply| () T@U)
(declare-fun |$IsA#AsyncMod_6#MapSpecMod#.Reply| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.Reply#Equal| (T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.PersistentState.appv| (T@U) T@U)
(declare-fun |$IsA#AsyncMod_6#MapSpecMod#.PersistentState| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.PersistentState#Equal| (T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.Variables.Variables_q| (T@U) Bool)
(declare-fun |Tclass.AsyncMod_6#MapSpecMod#.Variables| () T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.Variables.persistent| (T@U) T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.Variables.ephemeral| (T@U) T@U)
(declare-fun |$IsA#AsyncMod_6#MapSpecMod#.Variables| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| (T@U) T@U)
(declare-fun |#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| (T@U T@U) T@U)
(declare-fun |#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| (T@U) T@U)
(declare-fun |$IsA#AsyncMod_6#MapSpecMod#.UIOp| (T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.UIOp#Equal| (T@U T@U) Bool)
(declare-fun |Tclass.AsyncMod_6#MapSpecMod#.__default| () T@U)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.InitPersistentState#requires| () Bool)
(declare-fun |MapSpecMod.__default.InitState#canCall| () Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#requires| () Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoRequest| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoRequest#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoRequest#requires| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoExecute| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoExecute#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoExecute#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoReply| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoReply#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.DoReply#requires| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.NextStep#requires| (T@U T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.Next| (T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.Next#canCall| (T@U T@U) Bool)
(declare-fun |AsyncMod_6#MapSpecMod#.__default.Next#requires| (T@U T@U) Bool)
(declare-fun |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| (T@U) T@U)
(declare-fun |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp| () T@U)
(declare-fun |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp| () T@U)
(declare-fun |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| (Int) T@U)
(declare-fun |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| (Int) T@U)
(declare-fun |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp| () T@U)
(declare-fun |$IsA#CrashTolerantUIOp_5#MapSpecMod#.UIOp| (T@U) Bool)
(declare-fun |CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| (T@U T@U) Bool)
(declare-fun |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default| () T@U)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#65| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#66| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#67| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#68| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#69| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#70| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#71| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#72| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#76| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#77| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#78| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#79| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#80| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#82| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#83| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#84| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#85| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#86| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#87| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#88| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#89| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#90| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#136| (T@U Int Int T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9)
 :qid |ctor:FieldType|
))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12))
))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc2OSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2OSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2OSO) TyTagType)) (= (type Tagclass._System.___hFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hFunc1OS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OS) TyTagType)) (= (type Tagclass._System.___hFunc0L) TyTagType)) (= (type Tagclass._System.___hPartialFunc0L) TyTagType)) (= (type Tagclass._System.___hTotalFunc0L) TyTagType)) (= (type Tagclass._System.___hFunc2LOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LOO) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type Tagclass._System.___hFunc1OL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OL) TyTagType)) (= (type Tagclass._System.___hFunc1LO) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LO) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LO) TyTagType)) (= (type |##_System._tuple#2OLL._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2OLL) TyTagType)) (= (type class._System.Tuple2OLL) ClassNameType)) (= (type Tagclass._System.___hFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hFunc2SSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2SSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2SSO) TyTagType)) (= (type Tagclass._System.___hFunc2LLO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LLO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LLO) TyTagType)) (= (type Tagclass._System.___hFunc1SS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1SS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1SS) TyTagType)) (= (type Tagclass._System.___hFunc1LL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LL) TyTagType)) (= (type class.CoordinationSystemRefinement.__default) ClassNameType)) (= (type Tagclass.CoordinationSystemRefinement.__default) TyTagType)) (= (type Tagclass.CrashTolerantJournal.Variables) TyTagType)) (= (type Tagclass.MsgHistoryMod.MsgHistory) TyTagType)) (= (type Tagclass.CrashTolerantMap.Variables) TyTagType)) (= (type Tagclass.TotalKMMapMod.TotalMap) TyTagType)) (= (type Tagclass.StampedMod.Stamped) TyTagType)) (= (type Tagclass.CoordinationSystem.Variables) TyTagType)) (= (type |Tagclass.AsyncMod_6#MapSpecMod#.PersistentState|) TyTagType)) (= (type Tagclass.FloatingSeqMod.FloatingSeq) TyTagType)) (= (type Tagclass.CrashTolerantMapSpecMod.Constants) TyTagType)) (= (type Tagclass.CrashTolerantMapSpecMod.Variables) TyTagType)) (= (type |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) TyTagType)) (= (type Tagclass.CoordinationSystem.Step) TyTagType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type Tagclass.MsgHistoryMod.KeyedMessage) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type |##FloatingSeqMod.FloatingSeq.FloatingSeq|) DtCtorIdType)) (= (type class.FloatingSeqMod.FloatingSeq) ClassNameType)) (= (type class.FloatingSeqMod.__default) ClassNameType)) (= (type Tagclass.FloatingSeqMod.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.MapRemove_s.__default) ClassNameType)) (= (type Tagclass.MapRemove_s.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type class.LinearMaybe.predefined) ClassNameType)) (= (type class.LinearMaybe.__default) ClassNameType)) (= (type Tagclass.LinearMaybe.__default) TyTagType)) (= (type class.LinearExtern.predefined) ClassNameType)) (= (type class.LinearExtern.__default) ClassNameType)) (= (type Tagclass.LinearExtern.__default) TyTagType)) (= (type |##ValueMessage.Delta.NoDelta|) DtCtorIdType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type class.TotalKMMapMod.__default) ClassNameType)) (= (type Tagclass.TotalKMMapMod.__default) TyTagType)) (= (type |##MapSpecMod.Input.GetInput|) DtCtorIdType)) (= (type Tagclass.MapSpecMod.Input) TyTagType)) (= (type |##MapSpecMod.Input.PutInput|) DtCtorIdType)) (= (type |##MapSpecMod.Input.NoopInput|) DtCtorIdType)) (= (type class.MapSpecMod.Input) ClassNameType)) (= (type |##MapSpecMod.Output.GetOutput|) DtCtorIdType)) (= (type Tagclass.MapSpecMod.Output) TyTagType)) (= (type |##MapSpecMod.Output.PutOutput|) DtCtorIdType)) (= (type |##MapSpecMod.Output.NoopOutput|) DtCtorIdType)) (= (type class.MapSpecMod.Output) ClassNameType)) (= (type |##MapSpecMod.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.MapSpecMod.Variables) TyTagType)) (= (type class.MapSpecMod.Variables) ClassNameType)) (= (type class.MapSpecMod.__default) ClassNameType)) (= (type Tagclass.MapSpecMod.__default) TyTagType)) (= (type class.CrashTolerantMapSpecMod.__default) ClassNameType)) (= (type Tagclass.CrashTolerantMapSpecMod.__default) TyTagType)) (= (type |Tagclass.AsyncMod_6#MapSpecMod#.UIOp|) TyTagType)) (= (type |##CrashTolerantMapSpecMod.Constants.Constants|) DtCtorIdType)) (= (type class.CrashTolerantMapSpecMod.Constants) ClassNameType)) (= (type |##CrashTolerantMapSpecMod.Variables.Variables|) DtCtorIdType)) (= (type |Tagclass.AsyncMod_6#MapSpecMod#.EphemeralState|) TyTagType)) (= (type class.CrashTolerantMapSpecMod.Variables) ClassNameType)) (= (type class.LSNMod.__default) ClassNameType)) (= (type Tagclass.LSNMod.__default) TyTagType)) (= (type |##StampedMod.Stamped.Stamped|) DtCtorIdType)) (= (type class.StampedMod.Stamped) ClassNameType)) (= (type class.StampedMod.__default) ClassNameType)) (= (type Tagclass.StampedMod.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.LinearSequence__i.__default) ClassNameType)) (= (type Tagclass.LinearSequence__i.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type |##MsgHistoryMod.KeyedMessage.KeyedMessage|) DtCtorIdType)) (= (type class.MsgHistoryMod.KeyedMessage) ClassNameType)) (= (type |##MsgHistoryMod.MsgHistory.MsgHistory|) DtCtorIdType)) (= (type class.MsgHistoryMod.MsgHistory) ClassNameType)) (= (type class.MsgHistoryMod.__default) ClassNameType)) (= (type Tagclass.MsgHistoryMod.__default) TyTagType)) (= (type |##AbstractJournal.TransitionLabel.ReadForRecoveryLabel|) DtCtorIdType)) (= (type Tagclass.AbstractJournal.TransitionLabel) TyTagType)) (= (type |##AbstractJournal.TransitionLabel.FreezeForCommitLabel|) DtCtorIdType)) (= (type |##AbstractJournal.TransitionLabel.QueryEndLsnLabel|) DtCtorIdType)) (= (type |##AbstractJournal.TransitionLabel.PutLabel|) DtCtorIdType)) (= (type |##AbstractJournal.TransitionLabel.DiscardOldLabel|) DtCtorIdType)) (= (type |##AbstractJournal.TransitionLabel.InternalLabel|) DtCtorIdType)) (= (type class.AbstractJournal.TransitionLabel) ClassNameType)) (= (type |##AbstractJournal.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.AbstractJournal.Variables) TyTagType)) (= (type class.AbstractJournal.Variables) ClassNameType)) (= (type class.AbstractJournal.__default) ClassNameType)) (= (type Tagclass.AbstractJournal.__default) TyTagType)) (= (type |##CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|) DtCtorIdType)) (= (type Tagclass.CrashTolerantJournal.TransitionLabel) TyTagType)) (= (type |##CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel|) DtCtorIdType)) (= (type |##CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel|) DtCtorIdType)) (= (type |##CrashTolerantJournal.TransitionLabel.PutLabel|) DtCtorIdType)) (= (type |##CrashTolerantJournal.TransitionLabel.InternalLabel|) DtCtorIdType)) (= (type |##CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel|) DtCtorIdType)) (= (type |##CrashTolerantJournal.TransitionLabel.CommitStartLabel|) DtCtorIdType)) (= (type |##CrashTolerantJournal.TransitionLabel.CommitCompleteLabel|) DtCtorIdType)) (= (type |##CrashTolerantJournal.TransitionLabel.CrashLabel|) DtCtorIdType)) (= (type class.CrashTolerantJournal.TransitionLabel) ClassNameType)) (= (type |##CrashTolerantJournal.Ephemeral.Unknown|) DtCtorIdType)) (= (type Tagclass.CrashTolerantJournal.Ephemeral) TyTagType)) (= (type |##CrashTolerantJournal.Ephemeral.Known|) DtCtorIdType)) (= (type class.CrashTolerantJournal.Ephemeral) ClassNameType)) (= (type |##CrashTolerantJournal.Variables.Variables|) DtCtorIdType)) (= (type class.CrashTolerantJournal.Variables) ClassNameType)) (= (type class.CrashTolerantJournal.__default) ClassNameType)) (= (type Tagclass.CrashTolerantJournal.__default) TyTagType)) (= (type |##AbstractMap.TransitionLabel.QueryLabel|) DtCtorIdType)) (= (type Tagclass.AbstractMap.TransitionLabel) TyTagType)) (= (type |##AbstractMap.TransitionLabel.PutLabel|) DtCtorIdType)) (= (type |##AbstractMap.TransitionLabel.QueryEndLsnLabel|) DtCtorIdType)) (= (type |##AbstractMap.TransitionLabel.FreezeAsLabel|) DtCtorIdType)) (= (type |##AbstractMap.TransitionLabel.InternalLabel|) DtCtorIdType)) (= (type class.AbstractMap.TransitionLabel) ClassNameType)) (= (type |##AbstractMap.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.AbstractMap.Variables) TyTagType)) (= (type class.AbstractMap.Variables) ClassNameType)) (= (type class.AbstractMap.__default) ClassNameType)) (= (type Tagclass.AbstractMap.__default) TyTagType)) (= (type |##CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel|) DtCtorIdType)) (= (type Tagclass.CrashTolerantMap.TransitionLabel) TyTagType)) (= (type |##CrashTolerantMap.TransitionLabel.PutRecordsLabel|) DtCtorIdType)) (= (type |##CrashTolerantMap.TransitionLabel.QueryLabel|) DtCtorIdType)) (= (type |##CrashTolerantMap.TransitionLabel.InternalLabel|) DtCtorIdType)) (= (type |##CrashTolerantMap.TransitionLabel.CommitStartLabel|) DtCtorIdType)) (= (type |##CrashTolerantMap.TransitionLabel.CommitCompleteLabel|) DtCtorIdType)) (= (type |##CrashTolerantMap.TransitionLabel.CrashLabel|) DtCtorIdType)) (= (type class.CrashTolerantMap.TransitionLabel) ClassNameType)) (= (type |##CrashTolerantMap.Ephemeral.Unknown|) DtCtorIdType)) (= (type Tagclass.CrashTolerantMap.Ephemeral) TyTagType)) (= (type |##CrashTolerantMap.Ephemeral.Known|) DtCtorIdType)) (= (type class.CrashTolerantMap.Ephemeral) ClassNameType)) (= (type |##CrashTolerantMap.Variables.Variables|) DtCtorIdType)) (= (type class.CrashTolerantMap.Variables) ClassNameType)) (= (type |##CrashTolerantMap.Step.LoadEphemeralFromPersistentStep|) DtCtorIdType)) (= (type Tagclass.CrashTolerantMap.Step) TyTagType)) (= (type |##CrashTolerantMap.Step.PutRecordsStep|) DtCtorIdType)) (= (type |##CrashTolerantMap.Step.QueryStep|) DtCtorIdType)) (= (type |##CrashTolerantMap.Step.FreezeMapInternalStep|) DtCtorIdType)) (= (type |##CrashTolerantMap.Step.EphemeralInternalStep|) DtCtorIdType)) (= (type |##CrashTolerantMap.Step.CommitStartStep|) DtCtorIdType)) (= (type |##CrashTolerantMap.Step.CommitCompleteStep|) DtCtorIdType)) (= (type |##CrashTolerantMap.Step.CrashStep|) DtCtorIdType)) (= (type class.CrashTolerantMap.Step) ClassNameType)) (= (type class.CrashTolerantMap.__default) ClassNameType)) (= (type Tagclass.CrashTolerantMap.__default) TyTagType)) (= (type |##CoordinationSystem.Ephemeral.Unknown|) DtCtorIdType)) (= (type Tagclass.CoordinationSystem.Ephemeral) TyTagType)) (= (type |##CoordinationSystem.Ephemeral.Known|) DtCtorIdType)) (= (type class.CoordinationSystem.Ephemeral) ClassNameType)) (= (type |##CoordinationSystem.Variables.Variables|) DtCtorIdType)) (= (type class.CoordinationSystem.Variables) ClassNameType)) (= (type |##CoordinationSystem.Step.LoadEphemeralFromPersistentStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.RecoverStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.AcceptRequestStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.QueryStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.PutStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.DeliverReplyStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.JournalInternalStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.MapInternalStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.ReqSyncStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.ReplySyncStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.CommitStartStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.CommitCompleteStep|) DtCtorIdType)) (= (type |##CoordinationSystem.Step.CrashStep|) DtCtorIdType)) (= (type class.CoordinationSystem.Step) ClassNameType)) (= (type class.CoordinationSystem.__default) ClassNameType)) (= (type Tagclass.CoordinationSystem.__default) TyTagType)) (= (type |class.AsyncMod_6#MapSpecMod#.ID|) ClassNameType)) (= (type |##AsyncMod_6#MapSpecMod#.Request.Request|) DtCtorIdType)) (= (type |Tagclass.AsyncMod_6#MapSpecMod#.Request|) TyTagType)) (= (type |class.AsyncMod_6#MapSpecMod#.Request|) ClassNameType)) (= (type |##AsyncMod_6#MapSpecMod#.Reply.Reply|) DtCtorIdType)) (= (type |Tagclass.AsyncMod_6#MapSpecMod#.Reply|) TyTagType)) (= (type |class.AsyncMod_6#MapSpecMod#.Reply|) ClassNameType)) (= (type |##AsyncMod_6#MapSpecMod#.PersistentState.PersistentState|) DtCtorIdType)) (= (type |class.AsyncMod_6#MapSpecMod#.PersistentState|) ClassNameType)) (= (type |##AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState|) DtCtorIdType)) (= (type |class.AsyncMod_6#MapSpecMod#.EphemeralState|) ClassNameType)) (= (type |##AsyncMod_6#MapSpecMod#.Variables.Variables|) DtCtorIdType)) (= (type |Tagclass.AsyncMod_6#MapSpecMod#.Variables|) TyTagType)) (= (type |class.AsyncMod_6#MapSpecMod#.Variables|) ClassNameType)) (= (type |##AsyncMod_6#MapSpecMod#.UIOp.RequestOp|) DtCtorIdType)) (= (type |##AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp|) DtCtorIdType)) (= (type |##AsyncMod_6#MapSpecMod#.UIOp.ReplyOp|) DtCtorIdType)) (= (type |class.AsyncMod_6#MapSpecMod#.UIOp|) ClassNameType)) (= (type |class.AsyncMod_6#MapSpecMod#.__default|) ClassNameType)) (= (type |Tagclass.AsyncMod_6#MapSpecMod#.__default|) TyTagType)) (= (type |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp|) DtCtorIdType)) (= (type |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|) DtCtorIdType)) (= (type |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp|) DtCtorIdType)) (= (type |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp|) DtCtorIdType)) (= (type |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp|) DtCtorIdType)) (= (type |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp|) DtCtorIdType)) (= (type |class.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) ClassNameType)) (= (type |class.CrashTolerantUIOp_5#MapSpecMod#.__default|) ClassNameType)) (= (type |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.__default|) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0L|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2OLL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LL|) TyTagFamilyType)) (= (type tytagFamily$Variables) TyTagFamilyType)) (= (type tytagFamily$MsgHistory) TyTagFamilyType)) (= (type tytagFamily$TotalMap) TyTagFamilyType)) (= (type tytagFamily$Stamped) TyTagFamilyType)) (= (type tytagFamily$PersistentState) TyTagFamilyType)) (= (type tytagFamily$FloatingSeq) TyTagFamilyType)) (= (type tytagFamily$Constants) TyTagFamilyType)) (= (type tytagFamily$UIOp) TyTagFamilyType)) (= (type tytagFamily$Step) TyTagFamilyType)) (= (type tytagFamily$Key) TyTagFamilyType)) (= (type tytagFamily$Value) TyTagFamilyType)) (= (type tytagFamily$KeyedMessage) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)) (= (type tytagFamily$Delta) TyTagFamilyType)) (= (type tytagFamily$Message) TyTagFamilyType)) (= (type tytagFamily$Input) TyTagFamilyType)) (= (type tytagFamily$Output) TyTagFamilyType)) (= (type tytagFamily$EphemeralState) TyTagFamilyType)) (= (type tytagFamily$TransitionLabel) TyTagFamilyType)) (= (type tytagFamily$Ephemeral) TyTagFamilyType)) (= (type tytagFamily$Request) TyTagFamilyType)) (= (type tytagFamily$Reply) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc2OSO Tagclass._System.___hPartialFunc2OSO Tagclass._System.___hTotalFunc2OSO Tagclass._System.___hFunc3LLOO Tagclass._System.___hPartialFunc3LLOO Tagclass._System.___hTotalFunc3LLOO Tagclass._System.___hFunc1OS Tagclass._System.___hPartialFunc1OS Tagclass._System.___hTotalFunc1OS Tagclass._System.___hFunc0L Tagclass._System.___hPartialFunc0L Tagclass._System.___hTotalFunc0L Tagclass._System.___hFunc2LOO Tagclass._System.___hPartialFunc2LOO Tagclass._System.___hTotalFunc2LOO |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 Tagclass._System.___hFunc1OL Tagclass._System.___hPartialFunc1OL Tagclass._System.___hTotalFunc1OL Tagclass._System.___hFunc1LO Tagclass._System.___hPartialFunc1LO Tagclass._System.___hTotalFunc1LO |##_System._tuple#2OLL._#Make2| Tagclass._System.Tuple2OLL class._System.Tuple2OLL Tagclass._System.___hFunc3LLOL Tagclass._System.___hPartialFunc3LLOL Tagclass._System.___hTotalFunc3LLOL Tagclass._System.___hFunc2SSO Tagclass._System.___hPartialFunc2SSO Tagclass._System.___hTotalFunc2SSO Tagclass._System.___hFunc2LLO Tagclass._System.___hPartialFunc2LLO Tagclass._System.___hTotalFunc2LLO Tagclass._System.___hFunc1SS Tagclass._System.___hPartialFunc1SS Tagclass._System.___hTotalFunc1SS Tagclass._System.___hFunc1LL Tagclass._System.___hPartialFunc1LL Tagclass._System.___hTotalFunc1LL class.CoordinationSystemRefinement.__default Tagclass.CoordinationSystemRefinement.__default Tagclass.CrashTolerantJournal.Variables Tagclass.MsgHistoryMod.MsgHistory Tagclass.CrashTolerantMap.Variables Tagclass.TotalKMMapMod.TotalMap Tagclass.StampedMod.Stamped Tagclass.CoordinationSystem.Variables |Tagclass.AsyncMod_6#MapSpecMod#.PersistentState| Tagclass.FloatingSeqMod.FloatingSeq Tagclass.CrashTolerantMapSpecMod.Constants Tagclass.CrashTolerantMapSpecMod.Variables |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| Tagclass.CoordinationSystem.Step Tagclass.KeyType.Key Tagclass.ValueType.Value Tagclass.MsgHistoryMod.KeyedMessage class.SequencesLite.__default Tagclass.SequencesLite.__default |##FloatingSeqMod.FloatingSeq.FloatingSeq| class.FloatingSeqMod.FloatingSeq class.FloatingSeqMod.__default Tagclass.FloatingSeqMod.__default |##Options.Option.None| Tagclass.Options.Option |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.MapRemove_s.__default Tagclass.MapRemove_s.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default class.ValueType.__default Tagclass.ValueType.__default class.LinearMaybe.predefined class.LinearMaybe.__default Tagclass.LinearMaybe.__default class.LinearExtern.predefined class.LinearExtern.__default Tagclass.LinearExtern.__default |##ValueMessage.Delta.NoDelta| Tagclass.ValueMessage.Delta class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default Tagclass.ValueMessage.Message |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message class.KeyType.__default Tagclass.KeyType.__default class.TotalKMMapMod.__default Tagclass.TotalKMMapMod.__default |##MapSpecMod.Input.GetInput| Tagclass.MapSpecMod.Input |##MapSpecMod.Input.PutInput| |##MapSpecMod.Input.NoopInput| class.MapSpecMod.Input |##MapSpecMod.Output.GetOutput| Tagclass.MapSpecMod.Output |##MapSpecMod.Output.PutOutput| |##MapSpecMod.Output.NoopOutput| class.MapSpecMod.Output |##MapSpecMod.Variables.Variables| Tagclass.MapSpecMod.Variables class.MapSpecMod.Variables class.MapSpecMod.__default Tagclass.MapSpecMod.__default class.CrashTolerantMapSpecMod.__default Tagclass.CrashTolerantMapSpecMod.__default |Tagclass.AsyncMod_6#MapSpecMod#.UIOp| |##CrashTolerantMapSpecMod.Constants.Constants| class.CrashTolerantMapSpecMod.Constants |##CrashTolerantMapSpecMod.Variables.Variables| |Tagclass.AsyncMod_6#MapSpecMod#.EphemeralState| class.CrashTolerantMapSpecMod.Variables class.LSNMod.__default Tagclass.LSNMod.__default |##StampedMod.Stamped.Stamped| class.StampedMod.Stamped class.StampedMod.__default Tagclass.StampedMod.__default class.Mathematics.__default Tagclass.Mathematics.__default class.LinearSequence__i.__default Tagclass.LinearSequence__i.__default class.Sequences.__default Tagclass.Sequences.__default class.Maps.__default Tagclass.Maps.__default |##MsgHistoryMod.KeyedMessage.KeyedMessage| class.MsgHistoryMod.KeyedMessage |##MsgHistoryMod.MsgHistory.MsgHistory| class.MsgHistoryMod.MsgHistory class.MsgHistoryMod.__default Tagclass.MsgHistoryMod.__default |##AbstractJournal.TransitionLabel.ReadForRecoveryLabel| Tagclass.AbstractJournal.TransitionLabel |##AbstractJournal.TransitionLabel.FreezeForCommitLabel| |##AbstractJournal.TransitionLabel.QueryEndLsnLabel| |##AbstractJournal.TransitionLabel.PutLabel| |##AbstractJournal.TransitionLabel.DiscardOldLabel| |##AbstractJournal.TransitionLabel.InternalLabel| class.AbstractJournal.TransitionLabel |##AbstractJournal.Variables.Variables| Tagclass.AbstractJournal.Variables class.AbstractJournal.Variables class.AbstractJournal.__default Tagclass.AbstractJournal.__default |##CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel| Tagclass.CrashTolerantJournal.TransitionLabel |##CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |##CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |##CrashTolerantJournal.TransitionLabel.PutLabel| |##CrashTolerantJournal.TransitionLabel.InternalLabel| |##CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |##CrashTolerantJournal.TransitionLabel.CommitStartLabel| |##CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |##CrashTolerantJournal.TransitionLabel.CrashLabel| class.CrashTolerantJournal.TransitionLabel |##CrashTolerantJournal.Ephemeral.Unknown| Tagclass.CrashTolerantJournal.Ephemeral |##CrashTolerantJournal.Ephemeral.Known| class.CrashTolerantJournal.Ephemeral |##CrashTolerantJournal.Variables.Variables| class.CrashTolerantJournal.Variables class.CrashTolerantJournal.__default Tagclass.CrashTolerantJournal.__default |##AbstractMap.TransitionLabel.QueryLabel| Tagclass.AbstractMap.TransitionLabel |##AbstractMap.TransitionLabel.PutLabel| |##AbstractMap.TransitionLabel.QueryEndLsnLabel| |##AbstractMap.TransitionLabel.FreezeAsLabel| |##AbstractMap.TransitionLabel.InternalLabel| class.AbstractMap.TransitionLabel |##AbstractMap.Variables.Variables| Tagclass.AbstractMap.Variables class.AbstractMap.Variables class.AbstractMap.__default Tagclass.AbstractMap.__default |##CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| Tagclass.CrashTolerantMap.TransitionLabel |##CrashTolerantMap.TransitionLabel.PutRecordsLabel| |##CrashTolerantMap.TransitionLabel.QueryLabel| |##CrashTolerantMap.TransitionLabel.InternalLabel| |##CrashTolerantMap.TransitionLabel.CommitStartLabel| |##CrashTolerantMap.TransitionLabel.CommitCompleteLabel| |##CrashTolerantMap.TransitionLabel.CrashLabel| class.CrashTolerantMap.TransitionLabel |##CrashTolerantMap.Ephemeral.Unknown| Tagclass.CrashTolerantMap.Ephemeral |##CrashTolerantMap.Ephemeral.Known| class.CrashTolerantMap.Ephemeral |##CrashTolerantMap.Variables.Variables| class.CrashTolerantMap.Variables |##CrashTolerantMap.Step.LoadEphemeralFromPersistentStep| Tagclass.CrashTolerantMap.Step |##CrashTolerantMap.Step.PutRecordsStep| |##CrashTolerantMap.Step.QueryStep| |##CrashTolerantMap.Step.FreezeMapInternalStep| |##CrashTolerantMap.Step.EphemeralInternalStep| |##CrashTolerantMap.Step.CommitStartStep| |##CrashTolerantMap.Step.CommitCompleteStep| |##CrashTolerantMap.Step.CrashStep| class.CrashTolerantMap.Step class.CrashTolerantMap.__default Tagclass.CrashTolerantMap.__default |##CoordinationSystem.Ephemeral.Unknown| Tagclass.CoordinationSystem.Ephemeral |##CoordinationSystem.Ephemeral.Known| class.CoordinationSystem.Ephemeral |##CoordinationSystem.Variables.Variables| class.CoordinationSystem.Variables |##CoordinationSystem.Step.LoadEphemeralFromPersistentStep| |##CoordinationSystem.Step.RecoverStep| |##CoordinationSystem.Step.AcceptRequestStep| |##CoordinationSystem.Step.QueryStep| |##CoordinationSystem.Step.PutStep| |##CoordinationSystem.Step.DeliverReplyStep| |##CoordinationSystem.Step.JournalInternalStep| |##CoordinationSystem.Step.MapInternalStep| |##CoordinationSystem.Step.ReqSyncStep| |##CoordinationSystem.Step.ReplySyncStep| |##CoordinationSystem.Step.CommitStartStep| |##CoordinationSystem.Step.CommitCompleteStep| |##CoordinationSystem.Step.CrashStep| class.CoordinationSystem.Step class.CoordinationSystem.__default Tagclass.CoordinationSystem.__default |class.AsyncMod_6#MapSpecMod#.ID| |##AsyncMod_6#MapSpecMod#.Request.Request| |Tagclass.AsyncMod_6#MapSpecMod#.Request| |class.AsyncMod_6#MapSpecMod#.Request| |##AsyncMod_6#MapSpecMod#.Reply.Reply| |Tagclass.AsyncMod_6#MapSpecMod#.Reply| |class.AsyncMod_6#MapSpecMod#.Reply| |##AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |class.AsyncMod_6#MapSpecMod#.PersistentState| |##AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |class.AsyncMod_6#MapSpecMod#.EphemeralState| |##AsyncMod_6#MapSpecMod#.Variables.Variables| |Tagclass.AsyncMod_6#MapSpecMod#.Variables| |class.AsyncMod_6#MapSpecMod#.Variables| |##AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |##AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |##AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |class.AsyncMod_6#MapSpecMod#.UIOp| |class.AsyncMod_6#MapSpecMod#.__default| |Tagclass.AsyncMod_6#MapSpecMod#.__default| |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp| |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp| |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp| |class.CrashTolerantUIOp_5#MapSpecMod#.UIOp| |class.CrashTolerantUIOp_5#MapSpecMod#.__default| |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.__default| tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_tuple#2| |tytagFamily$_#Func2OSO| |tytagFamily$_#PartialFunc2OSO| |tytagFamily$_#TotalFunc2OSO| |tytagFamily$_#Func3LLOO| |tytagFamily$_#PartialFunc3LLOO| |tytagFamily$_#TotalFunc3LLOO| |tytagFamily$_#Func1OS| |tytagFamily$_#PartialFunc1OS| |tytagFamily$_#TotalFunc1OS| |tytagFamily$_#Func0L| |tytagFamily$_#PartialFunc0L| |tytagFamily$_#TotalFunc0L| |tytagFamily$_#Func2LOO| |tytagFamily$_#PartialFunc2LOO| |tytagFamily$_#TotalFunc2LOO| |tytagFamily$_tuple#0| |tytagFamily$_#Func1OL| |tytagFamily$_#PartialFunc1OL| |tytagFamily$_#TotalFunc1OL| |tytagFamily$_#Func1LO| |tytagFamily$_#PartialFunc1LO| |tytagFamily$_#TotalFunc1LO| |tytagFamily$_tuple#2OLL| |tytagFamily$_#Func3LLOL| |tytagFamily$_#PartialFunc3LLOL| |tytagFamily$_#TotalFunc3LLOL| |tytagFamily$_#Func2SSO| |tytagFamily$_#PartialFunc2SSO| |tytagFamily$_#TotalFunc2SSO| |tytagFamily$_#Func2LLO| |tytagFamily$_#PartialFunc2LLO| |tytagFamily$_#TotalFunc2LLO| |tytagFamily$_#Func1SS| |tytagFamily$_#PartialFunc1SS| |tytagFamily$_#TotalFunc1SS| |tytagFamily$_#Func1LL| |tytagFamily$_#PartialFunc1LL| |tytagFamily$_#TotalFunc1LL| tytagFamily$Variables tytagFamily$MsgHistory tytagFamily$TotalMap tytagFamily$Stamped tytagFamily$PersistentState tytagFamily$FloatingSeq tytagFamily$Constants tytagFamily$UIOp tytagFamily$Step tytagFamily$Key tytagFamily$Value tytagFamily$KeyedMessage tytagFamily$Option tytagFamily$sbyte tytagFamily$byte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$uint64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128 tytagFamily$Delta tytagFamily$Message tytagFamily$Input tytagFamily$Output tytagFamily$EphemeralState tytagFamily$TransitionLabel tytagFamily$Ephemeral tytagFamily$Request tytagFamily$Reply)
)
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType)
 :qid |funType:TBitvector|
 :pattern ( (TBitvector arg0@@13))
)))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w)
 :qid |DafnyPreludebpl.34:15|
 :skolemid |347|
 :pattern ( (TBitvector w))
)))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType)
 :qid |funType:TSet|
 :pattern ( (TSet arg0@@14))
)) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType)
 :qid |funType:Inv0_TSet|
 :pattern ( (Inv0_TSet arg0@@15))
))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t))
 :qid |DafnyPreludebpl.36:15|
 :skolemid |348|
 :pattern ( (TSet t))
)))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType)
 :qid |funType:TISet|
 :pattern ( (TISet arg0@@16))
)) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType)
 :qid |funType:Inv0_TISet|
 :pattern ( (Inv0_TISet arg0@@17))
))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0))
 :qid |DafnyPreludebpl.38:15|
 :skolemid |349|
 :pattern ( (TISet t@@0))
)))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType)
 :qid |funType:TSeq|
 :pattern ( (TSeq arg0@@18))
)) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType)
 :qid |funType:Inv0_TSeq|
 :pattern ( (Inv0_TSeq arg0@@19))
))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1))
 :qid |DafnyPreludebpl.40:15|
 :skolemid |350|
 :pattern ( (TSeq t@@1))
)))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType)
 :qid |funType:TMultiSet|
 :pattern ( (TMultiSet arg0@@20))
)) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType)
 :qid |funType:Inv0_TMultiSet|
 :pattern ( (Inv0_TMultiSet arg0@@21))
))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2))
 :qid |DafnyPreludebpl.42:15|
 :skolemid |351|
 :pattern ( (TMultiSet t@@2))
)))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType)
 :qid |funType:TMap|
 :pattern ( (TMap arg0@@22 arg1))
)) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType)
 :qid |funType:Inv0_TMap|
 :pattern ( (Inv0_TMap arg0@@23))
))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3))
 :qid |DafnyPreludebpl.45:15|
 :skolemid |352|
 :pattern ( (TMap t@@3 u))
)))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType)
 :qid |funType:Inv1_TMap|
 :pattern ( (Inv1_TMap arg0@@24))
)))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0))
 :qid |DafnyPreludebpl.46:15|
 :skolemid |353|
 :pattern ( (TMap t@@4 u@@0))
)))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType)
 :qid |funType:TIMap|
 :pattern ( (TIMap arg0@@25 arg1@@0))
)) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType)
 :qid |funType:Inv0_TIMap|
 :pattern ( (Inv0_TIMap arg0@@26))
))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5))
 :qid |DafnyPreludebpl.49:15|
 :skolemid |354|
 :pattern ( (TIMap t@@5 u@@1))
)))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType)
 :qid |funType:Inv1_TIMap|
 :pattern ( (Inv1_TIMap arg0@@27))
)))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2))
 :qid |DafnyPreludebpl.50:15|
 :skolemid |355|
 :pattern ( (TIMap t@@6 u@@2))
)))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType)
 :qid |funType:Tag|
 :pattern ( (Tag arg0@@28))
)))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet))
 :qid |DafnyPreludebpl.76:15|
 :skolemid |356|
 :pattern ( (TSet t@@7))
)))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet))
 :qid |DafnyPreludebpl.77:15|
 :skolemid |357|
 :pattern ( (TISet t@@8))
)))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet))
 :qid |DafnyPreludebpl.78:15|
 :skolemid |358|
 :pattern ( (TMultiSet t@@9))
)))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq))
 :qid |DafnyPreludebpl.79:15|
 :skolemid |359|
 :pattern ( (TSeq t@@10))
)))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap))
 :qid |DafnyPreludebpl.80:15|
 :skolemid |360|
 :pattern ( (TMap t@@11 u@@3))
)))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap))
 :qid |DafnyPreludebpl.81:15|
 :skolemid |361|
 :pattern ( (TIMap t@@12 u@@4))
)))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29)))
(= (type (Lit arg0@@29)) T))
 :qid |funType:Lit|
 :pattern ( (Lit arg0@@29))
)))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8)
 :qid |DafnyPreludebpl.89:29|
 :skolemid |362|
 :pattern ( (Lit x@@8))
)))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType)
 :qid |funType:$Box|
 :pattern ( ($Box arg0@@30))
))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9)))
 :qid |DafnyPreludebpl.90:18|
 :skolemid |363|
 :pattern ( ($Box (Lit x@@9)))
)))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10)
 :qid |DafnyPreludebpl.95:29|
 :skolemid |364|
 :pattern ( (LitInt x@@10))
)))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11))))
 :qid |DafnyPreludebpl.96:15|
 :skolemid |365|
 :pattern ( ($Box (int_2_U (LitInt x@@11))))
)))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12)
 :qid |DafnyPreludebpl.97:30|
 :skolemid |366|
 :pattern ( (LitReal x@@12))
)))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13))))
 :qid |DafnyPreludebpl.98:15|
 :skolemid |367|
 :pattern ( ($Box (real_2_U (LitReal x@@13))))
)))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType)
 :qid |funType:char#FromInt|
 :pattern ( (|char#FromInt| arg0@@31))
))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536)))
 :qid |DafnyPreludebpl.107:15|
 :skolemid |368|
 :pattern ( (|char#ToInt| ch))
)))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n))
 :qid |DafnyPreludebpl.111:15|
 :skolemid |369|
 :pattern ( (|char#FromInt| n))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType)
 :qid |funType:char#Plus|
 :pattern ( (|char#Plus| arg0@@32 arg1@@1))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b)))))
 :qid |DafnyPreludebpl.117:15|
 :skolemid |370|
 :pattern ( (|char#Plus| a b))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType)
 :qid |funType:char#Minus|
 :pattern ( (|char#Minus| arg0@@33 arg1@@2))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0)))))
 :qid |DafnyPreludebpl.120:15|
 :skolemid |371|
 :pattern ( (|char#Minus| a@@0 b@@0))
)))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0)
 :qid |funType:$Unbox|
 :pattern ( ($Unbox T@@0 arg0@@34))
)))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14)))
(= ($Unbox T@@1 ($Box x@@14)) x@@14))
 :qid |DafnyPreludebpl.141:18|
 :skolemid |372|
 :pattern ( ($Box x@@14))
)))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt)))
 :qid |DafnyPreludebpl.143:15|
 :skolemid |373|
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal)))
 :qid |DafnyPreludebpl.146:15|
 :skolemid |374|
 :pattern ( ($IsBox bx@@0 TReal))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool)))
 :qid |DafnyPreludebpl.149:15|
 :skolemid |375|
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar)))
 :qid |DafnyPreludebpl.152:15|
 :skolemid |376|
 :pattern ( ($IsBox bx@@2 TChar))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@36 arg1@@4))
))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5)
 :qid |typeInv:MapType0TypeInv1|
 :pattern ( (MapType0Type arg0@@37 arg1@@5))
))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38))))
(= (type (MapType0Select arg0@@38 arg1@@6)) aVar1))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@38 arg1@@6))
))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2)))
(let ((aVar0 (type arg1@@7)))
(= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0))))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2))
))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m))))
 (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0))))
 :qid |DafnyPreludebpl.158:15|
 :skolemid |377|
 :pattern ( ($IsBox bx@@3 (TBitvector 0)))
)))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13))))
 :qid |DafnyPreludebpl.162:15|
 :skolemid |378|
 :pattern ( ($IsBox bx@@4 (TSet t@@13)))
)))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14))))
 :qid |DafnyPreludebpl.165:15|
 :skolemid |379|
 :pattern ( ($IsBox bx@@5 (TISet t@@14)))
)))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15))))
 :qid |DafnyPreludebpl.168:15|
 :skolemid |380|
 :pattern ( ($IsBox bx@@6 (TMultiSet t@@15)))
)))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16)
 :qid |ctor:SeqType|
)) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41)
 :qid |typeInv:SeqTypeInv0|
 :pattern ( (SeqType arg0@@41))
))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16))))
 :qid |DafnyPreludebpl.171:15|
 :skolemid |381|
 :pattern ( ($IsBox bx@@7 (TSeq t@@16)))
)))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17)
 :qid |ctor:MapType|
)) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43)
 :qid |typeInv:MapTypeInv0|
 :pattern ( (MapType arg0@@43 arg1@@9))
))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10)
 :qid |typeInv:MapTypeInv1|
 :pattern ( (MapType arg0@@44 arg1@@10))
))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17))))
 :qid |DafnyPreludebpl.174:15|
 :skolemid |382|
 :pattern ( ($IsBox bx@@8 (TMap s t@@17)))
)))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18)
 :qid |ctor:IMapType|
)) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46)
 :qid |typeInv:IMapTypeInv0|
 :pattern ( (IMapType arg0@@46 arg1@@12))
))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13)
 :qid |typeInv:IMapTypeInv1|
 :pattern ( (IMapType arg0@@47 arg1@@13))
))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18))))
 :qid |DafnyPreludebpl.177:15|
 :skolemid |383|
 :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18)))
)))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19)))
 :qid |DafnyPreludebpl.181:18|
 :skolemid |384|
 :pattern ( ($IsBox ($Box v) t@@19))
)))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14))))
(= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@48 arg1@@14))
)) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type)
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0))
))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2))))
 (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)))
 :qid |DafnyPreludebpl.184:18|
 :skolemid |385|
 :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h))
)))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt))
 :qid |DafnyPreludebpl.202:14|
 :skolemid |386|
 :pattern ( ($Is v@@1 TInt))
)))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal))
 :qid |DafnyPreludebpl.203:14|
 :skolemid |387|
 :pattern ( ($Is v@@2 TReal))
)))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool))
 :qid |DafnyPreludebpl.204:14|
 :skolemid |388|
 :pattern ( ($Is v@@3 TBool))
)))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar))
 :qid |DafnyPreludebpl.205:14|
 :skolemid |389|
 :pattern ( ($Is v@@4 TChar))
)))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL))
 :qid |DafnyPreludebpl.206:14|
 :skolemid |390|
 :pattern ( ($Is v@@5 TORDINAL))
)))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0))
 :qid |DafnyPreludebpl.208:14|
 :skolemid |391|
 :pattern ( ($IsAlloc v@@6 TInt h@@0))
)))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1))
 :qid |DafnyPreludebpl.209:14|
 :skolemid |392|
 :pattern ( ($IsAlloc v@@7 TReal h@@1))
)))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2))
 :qid |DafnyPreludebpl.210:14|
 :skolemid |393|
 :pattern ( ($IsAlloc v@@8 TBool h@@2))
)))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3))
 :qid |DafnyPreludebpl.211:14|
 :skolemid |394|
 :pattern ( ($IsAlloc v@@9 TChar h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4))
 :qid |DafnyPreludebpl.212:14|
 :skolemid |395|
 :pattern ( ($IsAlloc v@@10 TORDINAL h@@4))
)))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0)))
 :qid |DafnyPreludebpl.216:15|
 :skolemid |396|
 :pattern ( ($Is v@@11 (TBitvector 0)))
)))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5))
 :qid |DafnyPreludebpl.217:15|
 :skolemid |397|
 :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5))
)))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0))
 :qid |DafnyPreludebpl.221:11|
 :skolemid |398|
 :pattern ( (MapType0Select v@@13 bx@@10))
))))
 :qid |DafnyPreludebpl.219:15|
 :skolemid |399|
 :pattern ( ($Is v@@13 (TSet t0)))
)))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0))
 :qid |DafnyPreludebpl.225:11|
 :skolemid |400|
 :pattern ( (MapType0Select v@@14 bx@@11))
))))
 :qid |DafnyPreludebpl.223:15|
 :skolemid |401|
 :pattern ( ($Is v@@14 (TISet t0@@0)))
)))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1))
 :qid |DafnyPreludebpl.229:11|
 :skolemid |402|
 :pattern ( (MapType0Select v@@15 bx@@12))
))))
 :qid |DafnyPreludebpl.227:15|
 :skolemid |403|
 :pattern ( ($Is v@@15 (TMultiSet t0@@1)))
)))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16))
 :qid |DafnyPreludebpl.231:15|
 :skolemid |404|
 :pattern ( ($Is v@@16 (TMultiSet t0@@2)))
)))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50))))
(= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2))
 :qid |funType:Seq#Index|
 :pattern ( (|Seq#Index| arg0@@50 arg1@@16))
)))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3))
 :qid |DafnyPreludebpl.235:11|
 :skolemid |405|
 :pattern ( (|Seq#Index| v@@17 i))
))))
 :qid |DafnyPreludebpl.233:15|
 :skolemid |406|
 :pattern ( ($Is v@@17 (TSeq t0@@3)))
)))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6))
 :qid |DafnyPreludebpl.240:11|
 :skolemid |407|
 :pattern ( (MapType0Select v@@18 bx@@13))
))))
 :qid |DafnyPreludebpl.238:15|
 :skolemid |408|
 :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6))
)))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7))
 :qid |DafnyPreludebpl.244:11|
 :skolemid |409|
 :pattern ( (MapType0Select v@@19 bx@@14))
))))
 :qid |DafnyPreludebpl.242:15|
 :skolemid |410|
 :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7))
)))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8))
 :qid |DafnyPreludebpl.248:11|
 :skolemid |411|
 :pattern ( (MapType0Select v@@20 bx@@15))
))))
 :qid |DafnyPreludebpl.246:15|
 :skolemid |412|
 :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8))
)))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9))
 :qid |DafnyPreludebpl.252:11|
 :skolemid |413|
 :pattern ( (|Seq#Index| v@@21 i@@0))
))))
 :qid |DafnyPreludebpl.250:15|
 :skolemid |414|
 :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9))
)))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51))))
(let ((U (MapTypeInv0 (type arg0@@51))))
(= (type (|Map#Elements| arg0@@51)) (MapType0Type U V))))
 :qid |funType:Map#Elements|
 :pattern ( (|Map#Elements| arg0@@51))
)) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52))))
(= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType)))
 :qid |funType:Map#Domain|
 :pattern ( (|Map#Domain| arg0@@52))
))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8)))
 :qid |DafnyPreludebpl.259:19|
 :skolemid |415|
 :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16))
 :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16))
))))
 :qid |DafnyPreludebpl.256:15|
 :skolemid |416|
 :pattern ( ($Is v@@22 (TMap t0@@8 t1)))
)))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10)))
 :qid |DafnyPreludebpl.267:19|
 :skolemid |417|
 :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17))
 :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17))
))))
 :qid |DafnyPreludebpl.264:15|
 :skolemid |418|
 :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10))
)))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53))))
(= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType)))
 :qid |funType:Map#Values|
 :pattern ( (|Map#Values| arg0@@53))
)) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType))
 :qid |funType:Map#Items|
 :pattern ( (|Map#Items| arg0@@54))
))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType)
 :qid |funType:Tclass._System.Tuple2|
 :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17))
))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1)))))
 :qid |DafnyPreludebpl.272:15|
 :skolemid |419|
 :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1)))
)))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56))))
(let ((U@@1 (IMapTypeInv0 (type arg0@@56))))
(= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1))))
 :qid |funType:IMap#Elements|
 :pattern ( (|IMap#Elements| arg0@@56))
)) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57))))
(= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType)))
 :qid |funType:IMap#Domain|
 :pattern ( (|IMap#Domain| arg0@@57))
))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11)))
 :qid |DafnyPreludebpl.282:19|
 :skolemid |420|
 :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18))
 :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18))
))))
 :qid |DafnyPreludebpl.279:15|
 :skolemid |421|
 :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2)))
)))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11)))
 :qid |DafnyPreludebpl.290:19|
 :skolemid |422|
 :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19))
 :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19))
))))
 :qid |DafnyPreludebpl.287:15|
 :skolemid |423|
 :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11))
)))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58))))
(= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType)))
 :qid |funType:IMap#Values|
 :pattern ( (|IMap#Values| arg0@@58))
)) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType))
 :qid |funType:IMap#Items|
 :pattern ( (|IMap#Items| arg0@@59))
))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4)))))
 :qid |DafnyPreludebpl.295:15|
 :skolemid |424|
 :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4)))
)))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType)
 :qid |funType:TypeTuple|
 :pattern ( (TypeTuple arg0@@60 arg1@@18))
)) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType)
 :qid |funType:TypeTupleCar|
 :pattern ( (TypeTupleCar arg0@@61))
))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType)
 :qid |funType:TypeTupleCdr|
 :pattern ( (TypeTupleCdr arg0@@62))
))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1)))
 :qid |DafnyPreludebpl.322:15|
 :skolemid |425|
 :pattern ( (TypeTuple a@@1 b@@1))
)))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType))
 :qid |funType:SetRef_to_SetBox|
 :pattern ( (SetRef_to_SetBox arg0@@63))
)))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20)))))
 :qid |DafnyPreludebpl.331:15|
 :skolemid |426|
 :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20))
)))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?)))
 :qid |DafnyPreludebpl.333:15|
 :skolemid |427|
 :pattern ( (SetRef_to_SetBox s@@2))
)))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d)))
 :qid |DafnyPreludebpl.352:15|
 :skolemid |428|
 :pattern ( (BoxRank ($Box d)))
)))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o)))
 :qid |DafnyPreludebpl.367:15|
 :skolemid |429|
 :pattern ( (|ORD#Offset| o))
)))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType)
 :qid |funType:ORD#FromNat|
 :pattern ( (|ORD#FromNat| arg0@@64))
)))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0)))
 :qid |DafnyPreludebpl.373:15|
 :skolemid |430|
 :pattern ( (|ORD#FromNat| n@@0))
)))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0))))
 :qid |DafnyPreludebpl.375:15|
 :skolemid |431|
 :pattern ( (|ORD#Offset| o@@0))
 :pattern ( (|ORD#IsNat| o@@0))
)))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1))))
 :qid |DafnyPreludebpl.379:15|
 :skolemid |432|
 :pattern ( (|ORD#Less| o@@1 p))
)))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2)))
 :qid |DafnyPreludebpl.385:15|
 :skolemid |433|
 :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2))
)))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r))
 :qid |DafnyPreludebpl.388:15|
 :skolemid |434|
 :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))
 :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r))
)))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)))
 :qid |DafnyPreludebpl.395:15|
 :skolemid |435|
 :pattern ( (|ORD#LessThanLimit| o@@4 p@@2))
)))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType)
 :qid |funType:ORD#Plus|
 :pattern ( (|ORD#Plus| arg0@@65 arg1@@19))
)))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3)))))))
 :qid |DafnyPreludebpl.399:15|
 :skolemid |436|
 :pattern ( (|ORD#Plus| o@@5 p@@3))
)))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4)))))
 :qid |DafnyPreludebpl.404:15|
 :skolemid |437|
 :pattern ( (|ORD#Plus| o@@6 p@@4))
)))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7))))
 :qid |DafnyPreludebpl.407:15|
 :skolemid |438|
 :pattern ( (|ORD#Plus| o@@7 p@@5))
)))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType)
 :qid |funType:ORD#Minus|
 :pattern ( (|ORD#Minus| arg0@@66 arg1@@20))
)))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6)))))
 :qid |DafnyPreludebpl.412:15|
 :skolemid |439|
 :pattern ( (|ORD#Minus| o@@8 p@@6))
)))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9))))
 :qid |DafnyPreludebpl.416:15|
 :skolemid |440|
 :pattern ( (|ORD#Minus| o@@9 p@@7))
)))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1))))))
 :qid |DafnyPreludebpl.422:15|
 :skolemid |441|
 :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)))
)))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2))))))
 :qid |DafnyPreludebpl.427:15|
 :skolemid |442|
 :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)))
)))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7))))))))
 :qid |DafnyPreludebpl.432:15|
 :skolemid |443|
 :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)))
)))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8))))))))
 :qid |DafnyPreludebpl.438:15|
 :skolemid |444|
 :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)))
)))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67))))
(= (type (AtLayer arg0@@67 arg1@@21)) A))
 :qid |funType:AtLayer|
 :pattern ( (AtLayer arg0@@67 arg1@@21))
))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f))))
 (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly))))
 :qid |DafnyPreludebpl.462:18|
 :skolemid |445|
 :pattern ( (AtLayer f ly))
)))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType)
 :qid |funType:$LS|
 :pattern ( ($LS arg0@@68))
)))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0))))
 (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0))))
 :qid |DafnyPreludebpl.463:18|
 :skolemid |446|
 :pattern ( (AtLayer f@@0 ($LS ly@@0)))
)))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType))
 :qid |funType:IndexField|
 :pattern ( (IndexField arg0@@69))
)))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1)
 :qid |DafnyPreludebpl.474:15|
 :skolemid |447|
 :pattern ( (IndexField i@@1))
)))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2)
 :qid |DafnyPreludebpl.476:15|
 :skolemid |448|
 :pattern ( (IndexField i@@2))
)))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType))
 :qid |funType:MultiIndexField|
 :pattern ( (MultiIndexField arg0@@70 arg1@@22))
)))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1)))
 :qid |DafnyPreludebpl.479:15|
 :skolemid |449|
 :pattern ( (MultiIndexField f@@1 i@@3))
)))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71))))
(= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3)))
 :qid |funType:MultiIndexField_Inverse0|
 :pattern ( (MultiIndexField_Inverse0 arg0@@71))
)))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4)))
 :qid |DafnyPreludebpl.482:15|
 :skolemid |450|
 :pattern ( (MultiIndexField f@@2 i@@4))
)))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3))
 :qid |funType:FieldOfDecl|
 :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23))
)) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType)
 :qid |funType:DeclType|
 :pattern ( (DeclType arg0@@73))
))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType)
 :qid |funType:DeclName|
 :pattern ( (DeclName arg0@@74))
))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm)))
 :qid |DafnyPreludebpl.491:18|
 :skolemid |451|
 :pattern ( (FieldOfDecl T@@4 cl nm))
)))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k))
 :qid |DafnyPreludebpl.504:17|
 :skolemid |452|
 :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12))
)))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0))
 :qid |DafnyPreludebpl.507:14|
 :skolemid |453|
 :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13))
)))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14)))
 :qid |DafnyPreludebpl.524:15|
 :skolemid |454|
 :no-pattern (type o@@14)
 :no-pattern (U_2_int o@@14)
 :no-pattern (U_2_bool o@@14)
)))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15))
 :qid |DafnyPreludebpl.530:14|
 :skolemid |455|
 :pattern ( (q@Int x@@15))
)))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16))
 :qid |DafnyPreludebpl.531:15|
 :skolemid |456|
 :pattern ( (q@Real x@@16))
)))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5)
 :qid |DafnyPreludebpl.532:15|
 :skolemid |457|
 :pattern ( (q@Int (q@Real i@@5)))
)))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17)))
 (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))))
 :qid |DafnyPreludebpl.554:22|
 :skolemid |458|
 :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c))
 :qid |DafnyPreludebpl.557:15|
 :skolemid |459|
 :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))
)))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc)))
 :qid |DafnyPreludebpl.560:30|
 :skolemid |460|
 :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc))
)))
 :qid |DafnyPreludebpl.559:15|
 :skolemid |461|
 :pattern ( ($HeapSucc h@@15 k@@1))
)))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4))))
 (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4))))
 :qid |DafnyPreludebpl.566:20|
 :skolemid |462|
 :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4))
))))
 :qid |DafnyPreludebpl.563:15|
 :skolemid |463|
 :pattern ( ($HeapSuccGhost h@@16 k@@2))
)))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3))))
 (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3))))
 :qid |DafnyPreludebpl.624:18|
 :skolemid |468|
 :pattern ( (|Set#Card| s@@3))
)))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType))
 :qid |funType:Set#Empty|
 :pattern ( (|Set#Empty| T@@6))
)))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17)))
 (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17))))
 :qid |DafnyPreludebpl.627:18|
 :skolemid |469|
 :pattern ( (let ((T@@7 (type o@@17)))
(MapType0Select (|Set#Empty| T@@7) o@@17)))
)))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4))))
 (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18)))
 :qid |DafnyPreludebpl.630:33|
 :skolemid |470|
 :no-pattern (type x@@18)
 :no-pattern (U_2_int x@@18)
 :no-pattern (U_2_bool x@@18)
))))))
 :qid |DafnyPreludebpl.628:18|
 :skolemid |471|
 :pattern ( (|Set#Card| s@@4))
)))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75)))
(= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType)))
 :qid |funType:Set#Singleton|
 :pattern ( (|Set#Singleton| arg0@@75))
)))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1))
 :qid |DafnyPreludebpl.636:18|
 :skolemid |472|
 :pattern ( (|Set#Singleton| r@@1))
)))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2)))
 (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18))))
 :qid |DafnyPreludebpl.637:18|
 :skolemid |473|
 :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18))
)))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1)
 :qid |DafnyPreludebpl.638:18|
 :skolemid |474|
 :pattern ( (|Set#Card| (|Set#Singleton| r@@3)))
)))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24)))
(= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType)))
 :qid |funType:Set#UnionOne|
 :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24))
)))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19)))
 (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19))))))
 :qid |DafnyPreludebpl.641:18|
 :skolemid |475|
 :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))
)))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20)))
 (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20))))
 :qid |DafnyPreludebpl.643:18|
 :skolemid |476|
 :pattern ( (|Set#UnionOne| a@@4 x@@20))
)))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21)))
 (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1))))
 :qid |DafnyPreludebpl.645:18|
 :skolemid |477|
 :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1))
)))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22)))
 (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6))))
 :qid |DafnyPreludebpl.647:18|
 :skolemid |478|
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22)))
)))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23)))
 (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1))))
 :qid |DafnyPreludebpl.649:18|
 :skolemid |479|
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23)))
)))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77))))
(= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType)))
 :qid |funType:Set#Union|
 :pattern ( (|Set#Union| arg0@@77 arg1@@25))
)))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20)))
 (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))))))
 :qid |DafnyPreludebpl.653:18|
 :skolemid |480|
 :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))
)))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2)))
 (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2))))
 :qid |DafnyPreludebpl.655:18|
 :skolemid |481|
 :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2))
)))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3)))
 (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3))))
 :qid |DafnyPreludebpl.657:18|
 :skolemid |482|
 :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3))
)))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78))))
(= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType)))
 :qid |funType:Set#Difference|
 :pattern ( (|Set#Difference| arg0@@78 arg1@@26))
)))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11))))
 (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11))))
 :qid |DafnyPreludebpl.659:18|
 :skolemid |483|
 :pattern ( (|Set#Union| a@@11 b@@6))
)))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79))))
(= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType)))
 :qid |funType:Set#Intersection|
 :pattern ( (|Set#Intersection| arg0@@79 arg1@@27))
)))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21)))
 (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))))))
 :qid |DafnyPreludebpl.669:18|
 :skolemid |484|
 :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))
)))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13))))
 (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8))))
 :qid |DafnyPreludebpl.672:18|
 :skolemid |485|
 :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8))
)))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14))))
 (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9))))
 :qid |DafnyPreludebpl.674:18|
 :skolemid |486|
 :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)))
)))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15))))
 (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10))))
 :qid |DafnyPreludebpl.676:18|
 :skolemid |487|
 :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10))
)))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16))))
 (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11))))
 :qid |DafnyPreludebpl.678:18|
 :skolemid |488|
 :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)))
)))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17))))
 (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12)))))
 :qid |DafnyPreludebpl.680:18|
 :skolemid |489|
 :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12)))
 :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12)))
)))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22)))
 (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))))))
 :qid |DafnyPreludebpl.684:18|
 :skolemid |490|
 :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))
)))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4)))
 (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4)))))
 :qid |DafnyPreludebpl.686:18|
 :skolemid |491|
 :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4))
)))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20))))
 (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15)))))))
 :qid |DafnyPreludebpl.688:18|
 :skolemid |492|
 :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15)))
)))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21))))
 (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23)))
 :qid |DafnyPreludebpl.697:32|
 :skolemid |493|
 :pattern ( (MapType0Select a@@21 o@@23))
 :pattern ( (MapType0Select b@@16 o@@23))
)))))
 :qid |DafnyPreludebpl.696:17|
 :skolemid |494|
 :pattern ( (|Set#Subset| a@@21 b@@16))
)))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22))))
 (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24))))
 :qid |DafnyPreludebpl.705:31|
 :skolemid |495|
 :pattern ( (MapType0Select a@@22 o@@24))
 :pattern ( (MapType0Select b@@17 o@@24))
)))))
 :qid |DafnyPreludebpl.704:17|
 :skolemid |496|
 :pattern ( (|Set#Equal| a@@22 b@@17))
)))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23))))
 (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18)))
 :qid |DafnyPreludebpl.706:17|
 :skolemid |497|
 :pattern ( (|Set#Equal| a@@23 b@@18))
)))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24))))
 (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25)))))
 :qid |DafnyPreludebpl.711:34|
 :skolemid |498|
 :pattern ( (MapType0Select a@@24 o@@25))
 :pattern ( (MapType0Select b@@19 o@@25))
)))))
 :qid |DafnyPreludebpl.710:18|
 :skolemid |499|
 :pattern ( (|Set#Disjoint| a@@24 b@@19))
)))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType))
 :qid |funType:ISet#Empty|
 :pattern ( (|ISet#Empty| T@@37))
)))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26)))
 (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26))))
 :qid |DafnyPreludebpl.720:18|
 :skolemid |500|
 :pattern ( (let ((T@@38 (type o@@26)))
(MapType0Select (|ISet#Empty| T@@38) o@@26)))
)))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28)))
(= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType)))
 :qid |funType:ISet#UnionOne|
 :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28))
)))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24)))
 (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27))))))
 :qid |DafnyPreludebpl.727:18|
 :skolemid |501|
 :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))
)))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25)))
 (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25))))
 :qid |DafnyPreludebpl.729:18|
 :skolemid |502|
 :pattern ( (|ISet#UnionOne| a@@26 x@@25))
)))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26)))
 (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5))))
 :qid |DafnyPreludebpl.731:18|
 :skolemid |503|
 :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5))
)))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81))))
(= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType)))
 :qid |funType:ISet#Union|
 :pattern ( (|ISet#Union| arg0@@81 arg1@@29))
)))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28)))
 (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28))))))
 :qid |DafnyPreludebpl.735:18|
 :skolemid |504|
 :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))
)))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6)))
 (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6))))
 :qid |DafnyPreludebpl.737:18|
 :skolemid |505|
 :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6))
)))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7)))
 (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7))))
 :qid |DafnyPreludebpl.739:18|
 :skolemid |506|
 :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7))
)))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82))))
(= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType)))
 :qid |funType:ISet#Difference|
 :pattern ( (|ISet#Difference| arg0@@82 arg1@@30))
)))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31))))
 (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31))))
 :qid |DafnyPreludebpl.741:18|
 :skolemid |507|
 :pattern ( (|ISet#Union| a@@31 b@@23))
)))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83))))
(= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType)))
 :qid |funType:ISet#Intersection|
 :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31))
)))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29)))
 (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29))))))
 :qid |DafnyPreludebpl.747:18|
 :skolemid |508|
 :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))
)))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33))))
 (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25))))
 :qid |DafnyPreludebpl.750:18|
 :skolemid |509|
 :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25))
)))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34))))
 (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26))))
 :qid |DafnyPreludebpl.752:18|
 :skolemid |510|
 :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)))
)))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35))))
 (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27))))
 :qid |DafnyPreludebpl.754:18|
 :skolemid |511|
 :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27))
)))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36))))
 (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28))))
 :qid |DafnyPreludebpl.756:18|
 :skolemid |512|
 :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)))
)))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30)))
 (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30)))))))
 :qid |DafnyPreludebpl.761:18|
 :skolemid |513|
 :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))
)))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8)))
 (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8)))))
 :qid |DafnyPreludebpl.763:18|
 :skolemid |514|
 :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8))
)))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39))))
 (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31)))
 :qid |DafnyPreludebpl.768:33|
 :skolemid |515|
 :pattern ( (MapType0Select a@@39 o@@31))
 :pattern ( (MapType0Select b@@31 o@@31))
)))))
 :qid |DafnyPreludebpl.767:17|
 :skolemid |516|
 :pattern ( (|ISet#Subset| a@@39 b@@31))
)))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40))))
 (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32))))
 :qid |DafnyPreludebpl.772:32|
 :skolemid |517|
 :pattern ( (MapType0Select a@@40 o@@32))
 :pattern ( (MapType0Select b@@32 o@@32))
)))))
 :qid |DafnyPreludebpl.771:17|
 :skolemid |518|
 :pattern ( (|ISet#Equal| a@@40 b@@32))
)))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41))))
 (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33)))
 :qid |DafnyPreludebpl.773:17|
 :skolemid |519|
 :pattern ( (|ISet#Equal| a@@41 b@@33))
)))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42))))
 (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33)))))
 :qid |DafnyPreludebpl.778:35|
 :skolemid |520|
 :pattern ( (MapType0Select a@@42 o@@33))
 :pattern ( (MapType0Select b@@34 o@@33))
)))))
 :qid |DafnyPreludebpl.777:18|
 :skolemid |521|
 :pattern ( (|ISet#Disjoint| a@@42 b@@34))
)))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43))
 :qid |DafnyPreludebpl.785:15|
 :skolemid |522|
 :pattern ( (|Math#min| a@@43 b@@35))
)))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36))
 :qid |DafnyPreludebpl.786:15|
 :skolemid |523|
 :pattern ( (|Math#min| a@@44 b@@36))
)))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37))
 :qid |DafnyPreludebpl.787:15|
 :skolemid |524|
 :pattern ( (|Math#min| a@@45 b@@37))
)))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46))
 :qid |DafnyPreludebpl.790:15|
 :skolemid |525|
 :pattern ( (|Math#clip| a@@46))
)))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0))
 :qid |DafnyPreludebpl.791:15|
 :skolemid |526|
 :pattern ( (|Math#clip| a@@47))
)))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms))))
 (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms))))
 :qid |DafnyPreludebpl.799:11|
 :skolemid |527|
 :pattern ( (MapType0Select ms bx@@22))
)))))
 :qid |DafnyPreludebpl.797:18|
 :skolemid |528|
 :pattern ( ($IsGoodMultiSet ms))
)))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5))))
 (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5))))
 :qid |DafnyPreludebpl.802:18|
 :skolemid |529|
 :pattern ( (|MultiSet#Card| s@@5))
)))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27)))
 (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5)))))
 :qid |DafnyPreludebpl.803:18|
 :skolemid |530|
 :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)))
)))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType))
 :qid |funType:MultiSet#Empty|
 :pattern ( (|MultiSet#Empty| T@@64))
)))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34)))
(= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0))
 :qid |DafnyPreludebpl.807:18|
 :skolemid |531|
 :pattern ( (let ((T@@65 (type o@@34)))
(MapType0Select (|MultiSet#Empty| T@@65) o@@34)))
)))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7))))
 (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28))))
 :qid |DafnyPreludebpl.810:38|
 :skolemid |532|
 :no-pattern (type x@@28)
 :no-pattern (U_2_int x@@28)
 :no-pattern (U_2_bool x@@28)
))))))
 :qid |DafnyPreludebpl.808:18|
 :skolemid |533|
 :pattern ( (|MultiSet#Card| s@@7))
)))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84)))
(= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType)))
 :qid |funType:MultiSet#Singleton|
 :pattern ( (|MultiSet#Singleton| arg0@@84))
)))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4)))
 (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35))))))
 :qid |DafnyPreludebpl.813:18|
 :skolemid |534|
 :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35))
)))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32)))
(= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType)))
 :qid |funType:MultiSet#UnionOne|
 :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32))
)))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5)))
(= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5)))
 :qid |DafnyPreludebpl.815:18|
 :skolemid |535|
 :pattern ( (|MultiSet#Singleton| r@@5))
)))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29)))
 (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36)))))))
 :qid |DafnyPreludebpl.819:18|
 :skolemid |536|
 :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36))
)))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30)))
 (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1))))
 :qid |DafnyPreludebpl.822:18|
 :skolemid |537|
 :pattern ( (|MultiSet#UnionOne| a@@49 x@@30))
)))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31)))
 (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9)))))
 :qid |DafnyPreludebpl.825:18|
 :skolemid |538|
 :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9))
)))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32)))
 (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10)))))
 :qid |DafnyPreludebpl.828:18|
 :skolemid |539|
 :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10))
)))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33)))
 (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1))))
 :qid |DafnyPreludebpl.830:18|
 :skolemid |540|
 :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)))
)))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86))))
(= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType)))
 :qid |funType:MultiSet#Union|
 :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33))
)))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37)))
 (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37))))))
 :qid |DafnyPreludebpl.836:18|
 :skolemid |541|
 :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37))
)))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54))))
 (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39)))))
 :qid |DafnyPreludebpl.838:18|
 :skolemid |542|
 :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)))
)))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87))))
(= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType)))
 :qid |funType:MultiSet#Intersection|
 :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34))
)))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38)))
 (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38))))))
 :qid |DafnyPreludebpl.842:18|
 :skolemid |543|
 :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38))
)))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56))))
 (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41))))
 :qid |DafnyPreludebpl.846:18|
 :skolemid |544|
 :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41))
)))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57))))
 (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42))))
 :qid |DafnyPreludebpl.848:18|
 :skolemid |545|
 :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)))
)))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88))))
(= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType)))
 :qid |funType:MultiSet#Difference|
 :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35))
)))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39)))
 (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39)))))))
 :qid |DafnyPreludebpl.853:18|
 :skolemid |546|
 :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39))
)))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11)))
 (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0)))
 :qid |DafnyPreludebpl.855:18|
 :skolemid |547|
 :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11))
)))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60))))
 (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))))))
 :qid |DafnyPreludebpl.857:18|
 :skolemid |548|
 :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)))
)))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61))))
 (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40))))
 :qid |DafnyPreludebpl.867:37|
 :skolemid |549|
 :pattern ( (MapType0Select a@@61 o@@40))
 :pattern ( (MapType0Select b@@46 o@@40))
)))))
 :qid |DafnyPreludebpl.866:17|
 :skolemid |550|
 :pattern ( (|MultiSet#Subset| a@@61 b@@46))
)))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62))))
 (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41))))
 :qid |DafnyPreludebpl.871:36|
 :skolemid |551|
 :pattern ( (MapType0Select a@@62 o@@41))
 :pattern ( (MapType0Select b@@47 o@@41))
)))))
 :qid |DafnyPreludebpl.870:17|
 :skolemid |552|
 :pattern ( (|MultiSet#Equal| a@@62 b@@47))
)))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63))))
 (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48)))
 :qid |DafnyPreludebpl.873:17|
 :skolemid |553|
 :pattern ( (|MultiSet#Equal| a@@63 b@@48))
)))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64))))
 (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0)))
 :qid |DafnyPreludebpl.878:39|
 :skolemid |554|
 :pattern ( (MapType0Select a@@64 o@@42))
 :pattern ( (MapType0Select b@@49 o@@42))
)))))
 :qid |DafnyPreludebpl.877:18|
 :skolemid |555|
 :pattern ( (|MultiSet#Disjoint| a@@64 b@@49))
)))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89))))
(= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType)))
 :qid |funType:MultiSet#FromSet|
 :pattern ( (|MultiSet#FromSet| arg0@@89))
)))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65)))
 (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))))))
 :qid |DafnyPreludebpl.882:18|
 :skolemid |556|
 :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65))
)))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9))))
 (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9))))
 :qid |DafnyPreludebpl.885:18|
 :skolemid |557|
 :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9)))
)))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90))))
(= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType)))
 :qid |funType:MultiSet#FromSeq|
 :pattern ( (|MultiSet#FromSeq| arg0@@90))
)))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10))))
 (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10))))
 :qid |DafnyPreludebpl.891:18|
 :skolemid |558|
 :pattern ( (|MultiSet#FromSeq| s@@10))
)))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11))))
 (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11))))
 :qid |DafnyPreludebpl.893:18|
 :skolemid |559|
 :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)))
)))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36)))
(= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97)))
 :qid |funType:Seq#Build|
 :pattern ( (|Seq#Build| arg0@@91 arg1@@36))
)))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29)))
 (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29))))
 :qid |DafnyPreludebpl.897:18|
 :skolemid |560|
 :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)))
)))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99))
 :qid |funType:Seq#Empty|
 :pattern ( (|Seq#Empty| T@@99))
)))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100))
 :skolemid |561|
)))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92))))
(= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101)))
 :qid |funType:Seq#Append|
 :pattern ( (|Seq#Append| arg0@@92 arg1@@37))
)))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66))))
 (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50)))))
 :qid |DafnyPreludebpl.904:18|
 :skolemid |562|
 :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)))
)))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1)))
(= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103)))
 :qid |funType:Seq#Update|
 :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1))
)))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30)))
 (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34)))))
 :qid |DafnyPreludebpl.909:18|
 :skolemid |563|
 :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34))
)))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35)))
 (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7)))
 :qid |DafnyPreludebpl.916:11|
 :skolemid |564|
 :pattern ( (|Seq#Index| s@@14 i@@7))
)) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35))))))
 :qid |DafnyPreludebpl.915:18|
 :skolemid |565|
 :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35))
)))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15))))
 (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15))))
 :qid |DafnyPreludebpl.925:18|
 :skolemid |566|
 :pattern ( (|Seq#Length| s@@15))
)))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0)
 :skolemid |567|
 :pattern ( (|Seq#Empty| T@@107))
)))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16))))
 (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108))))
 :qid |DafnyPreludebpl.929:18|
 :skolemid |568|
 :pattern ( (|Seq#Length| s@@16))
)))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94)))
(= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109)))
 :qid |funType:Seq#Singleton|
 :pattern ( (|Seq#Singleton| arg0@@94))
)))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1)
 :qid |DafnyPreludebpl.942:18|
 :skolemid |569|
 :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23)))
)))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95))))
(= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110)))
 :qid |funType:Seq#Build_inv0|
 :pattern ( (|Seq#Build_inv0| arg0@@95))
)) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96))))
(= (type (|Seq#Build_inv1| arg0@@96)) T@@111))
 :qid |funType:Seq#Build_inv1|
 :pattern ( (|Seq#Build_inv1| arg0@@96))
))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5)))
 (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5))))
 :qid |DafnyPreludebpl.947:18|
 :skolemid |570|
 :pattern ( (|Seq#Build| s@@17 val@@5))
)))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31)))
 (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18)))))
 :qid |DafnyPreludebpl.952:18|
 :skolemid |571|
 :pattern ( (|Seq#Build| s@@18 v@@31))
)))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32)))
 (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8))))))
 :qid |DafnyPreludebpl.955:18|
 :skolemid |572|
 :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8))
)))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24)))
 :qid |DafnyPreludebpl.960:15|
 :skolemid |573|
 :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24)))
)))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType))
 :qid |funType:Seq#Create|
 :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3))
))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len))
 :qid |DafnyPreludebpl.964:15|
 :skolemid |574|
 :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init)))
)))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType)
 :qid |funType:Apply1|
 :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4))
)))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9)))))
 :qid |DafnyPreludebpl.968:15|
 :skolemid |575|
 :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0))))
 (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))))
 :qid |DafnyPreludebpl.974:18|
 :skolemid |576|
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25)
 :qid |DafnyPreludebpl.978:18|
 :skolemid |577|
 :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0))))
 (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0))))))))
 :qid |DafnyPreludebpl.979:18|
 :skolemid |578|
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6))
)))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33)))
 (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21)))))
 :qid |DafnyPreludebpl.984:18|
 :skolemid |579|
 :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)))
)))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34)))
 (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7)))))))
 :qid |DafnyPreludebpl.986:18|
 :skolemid |580|
 :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7))
)))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36)))
 (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36))
 :qid |DafnyPreludebpl.994:13|
 :skolemid |581|
 :pattern ( (|Seq#Index| s@@23 i@@12))
)))))
 :qid |DafnyPreludebpl.992:18|
 :skolemid |582|
 :pattern ( (|Seq#Contains| s@@23 x@@36))
)))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37)))
 (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37)))
 :qid |DafnyPreludebpl.995:18|
 :skolemid |583|
 :pattern ( (let ((T@@120 (type x@@37)))
(|Seq#Contains| (|Seq#Empty| T@@120) x@@37)))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38)))
 (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38)))))
 :qid |DafnyPreludebpl.999:18|
 :skolemid |584|
 :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38))
)))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35)))
 (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39)))))
 :qid |DafnyPreludebpl.1004:18|
 :skolemid |585|
 :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39))
)))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99))))
(= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123)))
 :qid |funType:Seq#Take|
 :pattern ( (|Seq#Take| arg0@@99 arg1@@41))
)))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40)))
 (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40))
 :qid |DafnyPreludebpl.1011:13|
 :skolemid |586|
 :pattern ( (|Seq#Index| s@@25 i@@13))
)))))
 :qid |DafnyPreludebpl.1008:18|
 :skolemid |587|
 :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40))
)))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100))))
(= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125)))
 :qid |funType:Seq#Drop|
 :pattern ( (|Seq#Drop| arg0@@100 arg1@@42))
)))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41)))
 (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41))
 :qid |DafnyPreludebpl.1016:13|
 :skolemid |588|
 :pattern ( (|Seq#Index| s@@26 i@@14))
)))))
 :qid |DafnyPreludebpl.1013:18|
 :skolemid |589|
 :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2))))
 (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j)))
 :qid |DafnyPreludebpl.1023:13|
 :skolemid |590|
 :pattern ( (|Seq#Index| s0@@2 j))
 :pattern ( (|Seq#Index| s1@@2 j))
))))))
 :qid |DafnyPreludebpl.1020:18|
 :skolemid |591|
 :pattern ( (|Seq#Equal| s0@@2 s1@@2))
)))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67))))
 (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51)))
 :qid |DafnyPreludebpl.1025:18|
 :skolemid |592|
 :pattern ( (|Seq#Equal| a@@67 b@@51))
)))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3))))
 (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0)))
 :qid |DafnyPreludebpl.1031:13|
 :skolemid |593|
 :pattern ( (|Seq#Index| s0@@3 j@@0))
 :pattern ( (|Seq#Index| s1@@3 j@@0))
)))))
 :qid |DafnyPreludebpl.1029:18|
 :skolemid |594|
 :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10))
)))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27))))
 (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11))))
 :qid |DafnyPreludebpl.1035:18|
 :skolemid |595|
 :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11)))
)))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28))))
 (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1)))))
 :qid |DafnyPreludebpl.1037:18|
 :weight 25
 :skolemid |596|
 :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1))
 :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12))
)))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29))))
 (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13)))))
 :qid |DafnyPreludebpl.1045:18|
 :skolemid |597|
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13)))
)))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30))))
 (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14))))))
 :qid |DafnyPreludebpl.1047:18|
 :weight 25
 :skolemid |598|
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2))
)))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31))))
 (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3)))))
 :qid |DafnyPreludebpl.1052:18|
 :weight 25
 :skolemid |599|
 :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15))
)))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32))))
 (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26))))
 :qid |DafnyPreludebpl.1058:18|
 :skolemid |600|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16))
)))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType))
 :qid |funType:Seq#FromArray|
 :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43))
)))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68)))
 :qid |DafnyPreludebpl.1067:15|
 :skolemid |601|
 :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)))
)))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))))
 :qid |DafnyPreludebpl.1072:11|
 :skolemid |602|
 :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))
 :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15))
)))
 :qid |DafnyPreludebpl.1070:15|
 :skolemid |603|
 :pattern ( (|Seq#FromArray| h@@18 a@@69))
)))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70))))
 :qid |DafnyPreludebpl.1082:15|
 :skolemid |604|
 :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1))
)))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36)))
 :qid |DafnyPreludebpl.1087:15|
 :skolemid |605|
 :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71))
)))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37)))
 (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37)))))
 :qid |DafnyPreludebpl.1092:18|
 :skolemid |606|
 :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17))
)))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38)))
 (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18)))))
 :qid |DafnyPreludebpl.1095:18|
 :skolemid |607|
 :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18))
)))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39)))
 (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39)))))
 :qid |DafnyPreludebpl.1098:18|
 :skolemid |608|
 :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19))
)))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40)))
 (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20)))))
 :qid |DafnyPreludebpl.1101:18|
 :skolemid |609|
 :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20))
)))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0))))))
 :qid |DafnyPreludebpl.1105:15|
 :skolemid |610|
 :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1))
)))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41)))
 (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41)))))
 :qid |DafnyPreludebpl.1109:18|
 :skolemid |611|
 :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21))
)))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38))))
 :qid |DafnyPreludebpl.1114:15|
 :skolemid |612|
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))))
)))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39))))
 (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39)))))
 :qid |DafnyPreludebpl.1117:18|
 :skolemid |613|
 :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)))
)))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40))))
 (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40)))))
 :qid |DafnyPreludebpl.1120:18|
 :skolemid |614|
 :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23)))
)))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41))))
 (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41)))))
 :qid |DafnyPreludebpl.1123:18|
 :skolemid |615|
 :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))))
)))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42))))
 (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42)))
 :qid |DafnyPreludebpl.1128:18|
 :skolemid |616|
 :pattern ( (|Seq#Drop| s@@42 n@@22))
)))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43))))
 (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145))))
 :qid |DafnyPreludebpl.1130:18|
 :skolemid |617|
 :pattern ( (|Seq#Take| s@@43 n@@23))
)))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44))))
 (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24))))))
 :qid |DafnyPreludebpl.1132:18|
 :skolemid |618|
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24))
)))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10))))
(let ((U@@3 (MapTypeInv0 (type m@@10))))
 (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10)))))
 :qid |DafnyPreludebpl.1150:20|
 :skolemid |619|
 :pattern ( (|Map#Card| m@@10))
)))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4))
 :qid |funType:Map#Empty|
 :pattern ( (|Map#Empty| U@@4 V@@4))
)))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11))))
(let ((U@@5 (MapTypeInv0 (type m@@11))))
 (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5))))))
 :qid |DafnyPreludebpl.1152:21|
 :skolemid |620|
 :pattern ( (|Map#Card| m@@11))
)))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12))))
(let ((U@@6 (MapTypeInv0 (type m@@12))))
 (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4)))
 :qid |DafnyPreludebpl.1158:31|
 :skolemid |621|
 :no-pattern (type k@@4)
 :no-pattern (U_2_int k@@4)
 :no-pattern (U_2_bool k@@4)
))))))
 :qid |DafnyPreludebpl.1156:21|
 :skolemid |622|
 :pattern ( (|Map#Domain| m@@12))
)))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13))))
(let ((U@@7 (MapTypeInv0 (type m@@13))))
 (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42)))
 :qid |DafnyPreludebpl.1161:31|
 :skolemid |623|
 :no-pattern (type v@@42)
 :no-pattern (U_2_int v@@42)
 :no-pattern (U_2_bool v@@42)
))))))
 :qid |DafnyPreludebpl.1159:21|
 :skolemid |624|
 :pattern ( (|Map#Values| m@@13))
)))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType)
 :qid |funType:#_System._tuple#2._#Make2|
 :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44))
)))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14))))
(let ((U@@8 (MapTypeInv0 (type m@@14))))
 (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43)))))
 :qid |DafnyPreludebpl.1164:31|
 :skolemid |625|
 :no-pattern (type k@@5)
 :no-pattern (type v@@43)
 :no-pattern (U_2_int k@@5)
 :no-pattern (U_2_bool k@@5)
 :no-pattern (U_2_int v@@43)
 :no-pattern (U_2_bool v@@43)
))))))
 :qid |DafnyPreludebpl.1162:21|
 :skolemid |626|
 :pattern ( (|Map#Items| m@@14))
)))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15))))
(let ((U@@9 (MapTypeInv0 (type m@@15))))
 (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15)))))
 :qid |DafnyPreludebpl.1166:21|
 :skolemid |627|
 :pattern ( (|Set#Card| (|Map#Domain| m@@15)))
)))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16))))
(let ((U@@10 (MapTypeInv0 (type m@@16))))
 (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16)))))
 :qid |DafnyPreludebpl.1169:21|
 :skolemid |628|
 :pattern ( (|Set#Card| (|Map#Values| m@@16)))
)))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17))))
(let ((U@@11 (MapTypeInv0 (type m@@17))))
 (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17)))))
 :qid |DafnyPreludebpl.1172:21|
 :skolemid |629|
 :pattern ( (|Set#Card| (|Map#Items| m@@17)))
)))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44)))
(let ((U@@12 (MapTypeInv0 (type m@@18))))
 (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5))))
 :qid |DafnyPreludebpl.1185:10|
 :skolemid |630|
 :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5))
 :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5))
))))))
 :qid |DafnyPreludebpl.1183:20|
 :skolemid |631|
 :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44))
)))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType)
 :qid |funType:_System.Tuple2._0|
 :pattern ( (_System.Tuple2._0 arg0@@103))
)) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType)
 :qid |funType:_System.Tuple2._1|
 :pattern ( (_System.Tuple2._1 arg0@@104))
))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))))
 :qid |DafnyPreludebpl.1204:15|
 :skolemid |632|
 :pattern ( (MapType0Select (|Map#Items| m@@19) item))
)))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6)))
 (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))))
 :qid |DafnyPreludebpl.1212:21|
 :skolemid |633|
 :pattern ( (let ((U@@13 (type u@@6)))
(MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))
)))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45))))
(let ((U@@14 (MapType0TypeInv0 (type arg0@@105))))
(= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14))))
 :qid |funType:Map#Glue|
 :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4))
)))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52))))
(let ((U@@15 (MapType0TypeInv0 (type a@@73))))
 (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73))))
 :qid |DafnyPreludebpl.1217:21|
 :skolemid |634|
 :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)))
)))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53))))
(let ((U@@16 (MapType0TypeInv0 (type a@@74))))
 (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53))))
 :qid |DafnyPreludebpl.1220:21|
 :skolemid |635|
 :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)))
)))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5)))
 :qid |DafnyPreludebpl.1226:11|
 :skolemid |636|
 :no-pattern (type bx@@24)
 :no-pattern (U_2_int bx@@24)
 :no-pattern (U_2_bool bx@@24)
))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5)))
 :qid |DafnyPreludebpl.1223:15|
 :skolemid |637|
 :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)))
)))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5)))
(let ((U@@17 (type arg1@@46)))
(= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17))))
 :qid |funType:Map#Build|
 :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5))
)))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45)))
(let ((U@@18 (type u@@7)))
 (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|))))))))
 :qid |DafnyPreludebpl.1237:21|
 :skolemid |638|
 :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|))
 :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|))
)))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46)))
(let ((U@@19 (type u@@8)))
 (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21)))))
 :qid |DafnyPreludebpl.1243:21|
 :skolemid |639|
 :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)))
)))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47)))
(let ((U@@20 (type u@@9)))
 (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1)))))
 :qid |DafnyPreludebpl.1245:21|
 :skolemid |640|
 :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)))
)))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107))))
(let ((U@@21 (MapTypeInv0 (type arg0@@107))))
(= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21))))
 :qid |funType:Map#Merge|
 :pattern ( (|Map#Merge| arg0@@107 arg1@@47))
)))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23))))
(let ((U@@22 (MapTypeInv0 (type m@@23))))
 (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25))))))
 :qid |DafnyPreludebpl.1250:21|
 :skolemid |641|
 :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25)))
)))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24))))
(let ((U@@23 (type u@@10)))
 (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10)))))))
 :qid |DafnyPreludebpl.1253:21|
 :skolemid |642|
 :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10))
)))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108))))
(let ((U@@24 (MapTypeInv0 (type arg0@@108))))
(= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24))))
 :qid |funType:Map#Subtract|
 :pattern ( (|Map#Subtract| arg0@@108 arg1@@48))
)))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25))))
(let ((U@@25 (MapTypeInv0 (type m@@25))))
 (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45)))))
 :qid |DafnyPreludebpl.1260:21|
 :skolemid |643|
 :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45)))
)))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26))))
(let ((U@@26 (type u@@11)))
 (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11)))))
 :qid |DafnyPreludebpl.1263:21|
 :skolemid |644|
 :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11))
)))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27))))
(let ((U@@27 (MapTypeInv0 (type m@@27))))
 (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12))))
 :qid |DafnyPreludebpl.1272:35|
 :skolemid |645|
 :no-pattern (type u@@12)
 :no-pattern (U_2_int u@@12)
 :no-pattern (U_2_bool u@@12)
)) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13)))
 :qid |DafnyPreludebpl.1273:35|
 :skolemid |646|
 :no-pattern (type u@@13)
 :no-pattern (U_2_int u@@13)
 :no-pattern (U_2_bool u@@13)
)))))))
 :qid |DafnyPreludebpl.1270:21|
 :skolemid |647|
 :pattern ( (|Map#Equal| m@@27 |m'|))
)))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28))))
(let ((U@@28 (MapTypeInv0 (type m@@28))))
 (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|))))
 :qid |DafnyPreludebpl.1275:21|
 :skolemid |648|
 :pattern ( (|Map#Equal| m@@28 |m'@@0|))
)))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29))))
(let ((U@@29 (MapTypeInv0 (type m@@29))))
 (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43)))))
 :qid |DafnyPreludebpl.1282:38|
 :skolemid |649|
 :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43))
 :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43))
))))))
 :qid |DafnyPreludebpl.1280:21|
 :skolemid |650|
 :pattern ( (|Map#Disjoint| m@@29 |m'@@1|))
)))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30))
 :qid |funType:IMap#Empty|
 :pattern ( (|IMap#Empty| U@@30 V@@30))
)))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30))))
(let ((U@@31 (IMapTypeInv0 (type m@@30))))
 (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6)))
 :qid |DafnyPreludebpl.1298:32|
 :skolemid |651|
 :no-pattern (type k@@6)
 :no-pattern (U_2_int k@@6)
 :no-pattern (U_2_bool k@@6)
))))))
 :qid |DafnyPreludebpl.1296:21|
 :skolemid |652|
 :pattern ( (|IMap#Domain| m@@30))
)))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31))))
(let ((U@@32 (IMapTypeInv0 (type m@@31))))
 (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48)))
 :qid |DafnyPreludebpl.1301:32|
 :skolemid |653|
 :no-pattern (type v@@48)
 :no-pattern (U_2_int v@@48)
 :no-pattern (U_2_bool v@@48)
))))))
 :qid |DafnyPreludebpl.1299:21|
 :skolemid |654|
 :pattern ( (|IMap#Values| m@@31))
)))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32))))
(let ((U@@33 (IMapTypeInv0 (type m@@32))))
 (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49)))))
 :qid |DafnyPreludebpl.1304:32|
 :skolemid |655|
 :no-pattern (type k@@7)
 :no-pattern (type v@@49)
 :no-pattern (U_2_int k@@7)
 :no-pattern (U_2_bool k@@7)
 :no-pattern (U_2_int v@@49)
 :no-pattern (U_2_bool v@@49)
))))))
 :qid |DafnyPreludebpl.1302:21|
 :skolemid |656|
 :pattern ( (|IMap#Items| m@@32))
)))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33))))
(let ((U@@34 (IMapTypeInv0 (type m@@33))))
 (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34))))))
 :qid |DafnyPreludebpl.1306:21|
 :skolemid |657|
 :pattern ( (|IMap#Domain| m@@33))
)))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34))))
(let ((U@@35 (IMapTypeInv0 (type m@@34))))
 (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35))))))
 :qid |DafnyPreludebpl.1309:21|
 :skolemid |658|
 :pattern ( (|IMap#Values| m@@34))
)))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35))))
(let ((U@@36 (IMapTypeInv0 (type m@@35))))
 (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType))))))
 :qid |DafnyPreludebpl.1312:21|
 :skolemid |659|
 :pattern ( (|IMap#Items| m@@35))
)))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50)))
(let ((U@@37 (IMapTypeInv0 (type m@@36))))
 (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14))))
 :qid |DafnyPreludebpl.1325:10|
 :skolemid |660|
 :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14))
 :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14))
))))))
 :qid |DafnyPreludebpl.1323:20|
 :skolemid |661|
 :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50))
)))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))))
 :qid |DafnyPreludebpl.1340:15|
 :skolemid |662|
 :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0))
)))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15)))
 (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))))
 :qid |DafnyPreludebpl.1347:21|
 :skolemid |663|
 :pattern ( (let ((U@@38 (type u@@15)))
(MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))
)))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49))))
(let ((U@@39 (MapType0TypeInv0 (type arg0@@109))))
(= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39))))
 :qid |funType:IMap#Glue|
 :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6))
)))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55))))
(let ((U@@40 (MapType0TypeInv0 (type a@@76))))
 (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76))))
 :qid |DafnyPreludebpl.1352:21|
 :skolemid |664|
 :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)))
)))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56))))
(let ((U@@41 (MapType0TypeInv0 (type a@@77))))
 (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56))))
 :qid |DafnyPreludebpl.1355:21|
 :skolemid |665|
 :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)))
)))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6)))
 :qid |DafnyPreludebpl.1361:11|
 :skolemid |666|
 :no-pattern (type bx@@25)
 :no-pattern (U_2_int bx@@25)
 :no-pattern (U_2_bool bx@@25)
))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6)))
 :qid |DafnyPreludebpl.1358:15|
 :skolemid |667|
 :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)))
)))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7)))
(let ((U@@42 (type arg1@@50)))
(= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42))))
 :qid |funType:IMap#Build|
 :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7))
)))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51)))
(let ((U@@43 (type u@@16)))
 (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|))))))))
 :qid |DafnyPreludebpl.1371:21|
 :skolemid |668|
 :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|))
 :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|))
)))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39))))
(let ((U@@44 (IMapTypeInv0 (type m@@39))))
 (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17))))
 :qid |DafnyPreludebpl.1382:36|
 :skolemid |669|
 :no-pattern (type u@@17)
 :no-pattern (U_2_int u@@17)
 :no-pattern (U_2_bool u@@17)
)) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18)))
 :qid |DafnyPreludebpl.1383:35|
 :skolemid |670|
 :no-pattern (type u@@18)
 :no-pattern (U_2_int u@@18)
 :no-pattern (U_2_bool u@@18)
)))))))
 :qid |DafnyPreludebpl.1380:21|
 :skolemid |671|
 :pattern ( (|IMap#Equal| m@@39 |m'@@2|))
)))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40))))
(let ((U@@45 (IMapTypeInv0 (type m@@40))))
 (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|))))
 :qid |DafnyPreludebpl.1385:21|
 :skolemid |672|
 :pattern ( (|IMap#Equal| m@@40 |m'@@3|))
)))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111))))
(let ((U@@46 (IMapTypeInv0 (type arg0@@111))))
(= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46))))
 :qid |funType:IMap#Merge|
 :pattern ( (|IMap#Merge| arg0@@111 arg1@@51))
)))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41))))
(let ((U@@47 (IMapTypeInv0 (type m@@41))))
 (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27))))))
 :qid |DafnyPreludebpl.1391:21|
 :skolemid |673|
 :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)))
)))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42))))
(let ((U@@48 (type u@@19)))
 (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19)))))))
 :qid |DafnyPreludebpl.1394:21|
 :skolemid |674|
 :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19))
)))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112))))
(let ((U@@49 (IMapTypeInv0 (type arg0@@112))))
(= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49))))
 :qid |funType:IMap#Subtract|
 :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52))
)))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43))))
(let ((U@@50 (IMapTypeInv0 (type m@@43))))
 (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47)))))
 :qid |DafnyPreludebpl.1401:21|
 :skolemid |675|
 :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)))
)))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44))))
(let ((U@@51 (type u@@20)))
 (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20)))))
 :qid |DafnyPreludebpl.1404:21|
 :skolemid |676|
 :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20))
)))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12))
 :qid |DafnyPreludebpl.1413:30|
 :skolemid |677|
 :pattern ( (INTERNAL_add_boogie x@@42 y@@12))
)))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13))
 :qid |DafnyPreludebpl.1414:30|
 :skolemid |678|
 :pattern ( (INTERNAL_sub_boogie x@@43 y@@13))
)))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14))
 :qid |DafnyPreludebpl.1415:30|
 :skolemid |679|
 :pattern ( (INTERNAL_mul_boogie x@@44 y@@14))
)))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15))
 :qid |DafnyPreludebpl.1416:30|
 :skolemid |680|
 :pattern ( (INTERNAL_div_boogie x@@45 y@@15))
)))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16))
 :qid |DafnyPreludebpl.1417:30|
 :skolemid |681|
 :pattern ( (INTERNAL_mod_boogie x@@46 y@@16))
)))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17))
 :qid |DafnyPreludebpl.1418:51|
 :skolemid |682|
 :pattern ( (INTERNAL_lt_boogie x@@47 y@@17))
)))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18))
 :qid |DafnyPreludebpl.1419:51|
 :skolemid |683|
 :pattern ( (INTERNAL_le_boogie x@@48 y@@18))
)))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19))
 :qid |DafnyPreludebpl.1420:51|
 :skolemid |684|
 :pattern ( (INTERNAL_gt_boogie x@@49 y@@19))
)))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20))
 :qid |DafnyPreludebpl.1421:51|
 :skolemid |685|
 :pattern ( (INTERNAL_ge_boogie x@@50 y@@20))
)))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21))
 :qid |DafnyPreludebpl.1423:14|
 :skolemid |686|
 :pattern ( (Mul x@@51 y@@21))
)))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22))
 :qid |DafnyPreludebpl.1424:14|
 :skolemid |687|
 :pattern ( (Div x@@52 y@@22))
)))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23))
 :qid |DafnyPreludebpl.1425:14|
 :skolemid |688|
 :pattern ( (Mod x@@53 y@@23))
)))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24))
 :qid |DafnyPreludebpl.1426:14|
 :skolemid |689|
 :pattern ( (Add x@@54 y@@24))
)))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25))
 :qid |DafnyPreludebpl.1427:14|
 :skolemid |690|
 :pattern ( (Sub x@@55 y@@25))
)))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58)))
 :qid |DafnyPreludebpl.1468:15|
 :skolemid |691|
 :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79))
 :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58))
)))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59)))
 :qid |DafnyPreludebpl.1473:15|
 :skolemid |692|
 :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80))
 :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59))
)))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60)))
 :qid |DafnyPreludebpl.1478:15|
 :skolemid |693|
 :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81))
 :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60))
)))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType)
 :qid |funType:TagFamily|
 :pattern ( (TagFamily arg0@@113))
)))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat)))
 :qid |unknown.0:0|
 :skolemid |694|
 :pattern ( ($IsBox bx@@26 Tclass._System.nat))
)))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (INTERNAL_le_boogie 0 (U_2_int |x#0|))))
 :qid |unknown.0:0|
 :skolemid |695|
 :pattern ( ($Is |x#0| Tclass._System.nat))
)))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h))
 :qid |unknown.0:0|
 :skolemid |696|
 :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?)))
 :qid |unknown.0:0|
 :skolemid |697|
 :pattern ( ($IsBox bx@@27 Tclass._System.object?))
)))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?))
 :qid |unknown.0:0|
 :skolemid |698|
 :pattern ( ($Is $o Tclass._System.object?))
)))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))))
 :qid |unknown.0:0|
 :skolemid |699|
 :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0))
)))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object)))
 :qid |unknown.0:0|
 :skolemid |700|
 :pattern ( ($IsBox bx@@28 Tclass._System.object))
)))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))))
 :qid |unknown.0:0|
 :skolemid |701|
 :pattern ( ($Is |c#0| Tclass._System.object))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)))
 :qid |unknown.0:0|
 :skolemid |702|
 :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1))
)))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType)
 :qid |funType:Tclass._System.array?|
 :pattern ( (Tclass._System.array? arg0@@114))
)))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array)))
 :qid |unknown.0:0|
 :skolemid |703|
 :pattern ( (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType)
 :qid |funType:Tclass._System.array?_0|
 :pattern ( (Tclass._System.array?_0 arg0@@115))
)))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0))
 :qid |unknown.0:0|
 :skolemid |704|
 :pattern ( (Tclass._System.array? _System.array$arg@@0))
)))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1))))
 :qid |unknown.0:0|
 :skolemid |705|
 :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1)))
)))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType)
 :qid |funType:dtype|
 :pattern ( (dtype arg0@@116))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2))
 :qid |unknown.0:0|
 :skolemid |706|
 :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3)))
 :qid |unknown.0:0|
 :skolemid |707|
 :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3))
)))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4)))))
 :qid |unknown.0:0|
 :skolemid |708|
 :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4)))
)))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))))
 :qid |unknown.0:0|
 :skolemid |709|
 :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt))
 :qid |unknown.0:0|
 :skolemid |710|
 :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6))
)))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5))
 :qid |unknown.0:0|
 :skolemid |711|
 :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType)
 :qid |funType:Tclass._System.array|
 :pattern ( (Tclass._System.array arg0@@117))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array)))
 :qid |unknown.0:0|
 :skolemid |712|
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType)
 :qid |funType:Tclass._System.array_0|
 :pattern ( (Tclass._System.array_0 arg0@@118))
)))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9))
 :qid |unknown.0:0|
 :skolemid |713|
 :pattern ( (Tclass._System.array _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10))))
 :qid |unknown.0:0|
 :skolemid |714|
 :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null)))))
 :qid |unknown.0:0|
 :skolemid |715|
 :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6)))
 :qid |unknown.0:0|
 :skolemid |716|
 :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6))
)))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType)
 :qid |funType:Tclass._System.___hFunc1|
 :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|)))
 :qid |unknown.0:0|
 :skolemid |717|
 :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|))
)))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType)
 :qid |funType:Tclass._System.___hFunc1_0|
 :pattern ( (Tclass._System.___hFunc1_0 arg0@@120))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|))
 :qid |unknown.0:0|
 :skolemid |718|
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType)
 :qid |funType:Tclass._System.___hFunc1_1|
 :pattern ( (Tclass._System.___hFunc1_1 arg0@@121))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|))
 :qid |unknown.0:0|
 :skolemid |719|
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))))
 :qid |unknown.0:0|
 :skolemid |720|
 :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24)
 :qid |ctor:MapType2Type|
)) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123)
 :qid |typeInv:MapType2TypeInv0|
 :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9))
))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56)
 :qid |typeInv:MapType2TypeInv1|
 :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10))
))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11)
 :qid |typeInv:MapType2TypeInv2|
 :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11))
))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126))))
(= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2))
 :qid |funType:MapType2Select|
 :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12))
))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1)))
(let ((aVar1@@2 (type arg2@@13)))
(let ((aVar0@@0 (type arg1@@59)))
(= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0)))))
 :qid |funType:MapType2Store|
 :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1))
))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45))))
 (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6)))
 :qid |mapAx0:MapType2Select|
 :weight 0
))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1)))
 :qid |mapAx1:MapType2Select:0|
 :weight 0
)) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0)))
 :qid |mapAx1:MapType2Select:1|
 :weight 0
))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1)))
 :qid |mapAx2:MapType2Select|
 :weight 0
)))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType)
 :qid |funType:Handle1|
 :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14))
))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0)))
 :qid |unknown.0:0|
 :skolemid |721|
 :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0))
)))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0))
 :qid |unknown.0:0|
 :skolemid |722|
 :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0))
)))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType))
 :qid |funType:Reads1|
 :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0))
)))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32))))
 :qid |unknown.0:0|
 :skolemid |723|
 :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32))
)))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld))))
 (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld))))
 :qid |unknown.0:0|
 :skolemid |724|
 :no-pattern (type o@@44)
 :no-pattern (type fld)
 :no-pattern (U_2_int o@@44)
 :no-pattern (U_2_bool o@@44)
 :no-pattern (U_2_int fld)
 :no-pattern (U_2_bool fld)
)))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)))
 :qid |unknown.0:0|
 :skolemid |725|
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))
)))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0))))
 (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0))))
 :qid |unknown.0:0|
 :skolemid |726|
 :no-pattern (type o@@45)
 :no-pattern (type fld@@0)
 :no-pattern (U_2_int o@@45)
 :no-pattern (U_2_bool o@@45)
 :no-pattern (U_2_int fld@@0)
 :no-pattern (U_2_bool fld@@0)
)))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)))
 :qid |unknown.0:0|
 :skolemid |727|
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))
)))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1))))
 (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1))))
 :qid |unknown.0:0|
 :skolemid |728|
 :no-pattern (type o@@46)
 :no-pattern (type fld@@1)
 :no-pattern (U_2_int o@@46)
 :no-pattern (U_2_bool o@@46)
 :no-pattern (U_2_int fld@@1)
 :no-pattern (U_2_bool fld@@1)
)))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)))
 :qid |unknown.0:0|
 :skolemid |729|
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))
)))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2))))
 (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2))))
 :qid |unknown.0:0|
 :skolemid |730|
 :no-pattern (type o@@47)
 :no-pattern (type fld@@2)
 :no-pattern (U_2_int o@@47)
 :no-pattern (U_2_bool o@@47)
 :no-pattern (U_2_int fld@@2)
 :no-pattern (U_2_bool fld@@2)
)))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)))
 :qid |unknown.0:0|
 :skolemid |731|
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))
)))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3))))
 (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3))))
 :qid |unknown.0:0|
 :skolemid |732|
 :no-pattern (type o@@48)
 :no-pattern (type fld@@3)
 :no-pattern (U_2_int o@@48)
 :no-pattern (U_2_bool o@@48)
 :no-pattern (U_2_int fld@@3)
 :no-pattern (U_2_bool fld@@3)
)))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)))
 :qid |unknown.0:0|
 :skolemid |733|
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))
)))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4))))
 (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4))))
 :qid |unknown.0:0|
 :skolemid |734|
 :no-pattern (type o@@49)
 :no-pattern (type fld@@4)
 :no-pattern (U_2_int o@@49)
 :no-pattern (U_2_bool o@@49)
 :no-pattern (U_2_int fld@@4)
 :no-pattern (U_2_bool fld@@4)
)))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)))
 :qid |unknown.0:0|
 :skolemid |735|
 :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))
)))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType))))
 :qid |unknown.0:0|
 :skolemid |736|
 :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4))
 :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8))
)))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)))
 :qid |unknown.0:0|
 :skolemid |737|
 :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5))
 :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))
)))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18)))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |738|
 :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10))
))))
 :qid |unknown.0:0|
 :skolemid |739|
 :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)))
)))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28))
 :qid |unknown.0:0|
 :skolemid |740|
 :pattern ( ($IsBox bx@@33 u0))
 :pattern ( ($IsBox bx@@33 t0@@28))
))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1))
 :qid |unknown.0:0|
 :skolemid |741|
 :pattern ( ($IsBox bx@@34 t1@@19))
 :pattern ( ($IsBox bx@@34 u1))
)))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1)))
 :qid |unknown.0:0|
 :skolemid |742|
 :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1)))
)))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc))))
 :qid |unknown.0:0|
 :skolemid |743|
 :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))
))))
 :qid |unknown.0:0|
 :skolemid |744|
 :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11))
 :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11))
))))
 :qid |unknown.0:0|
 :skolemid |745|
 :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25))
)))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26)))
 :qid |unknown.0:0|
 :skolemid |746|
 :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12))
)))
 :qid |unknown.0:0|
 :skolemid |747|
 :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))
)))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1|
 :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|)))
 :qid |unknown.0:0|
 :skolemid |748|
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1_0|
 :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|))
 :qid |unknown.0:0|
 :skolemid |749|
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1_1|
 :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|))
 :qid |unknown.0:0|
 :skolemid |750|
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))))
 :qid |unknown.0:0|
 :skolemid |751|
 :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |752|
 :no-pattern (type |x0#0|)
 :no-pattern (U_2_int |x0#0|)
 :no-pattern (U_2_bool |x0#0|)
)))))
 :qid |unknown.0:0|
 :skolemid |753|
 :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7)))
 :qid |unknown.0:0|
 :skolemid |754|
 :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7))
)))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1|
 :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|)))
 :qid |unknown.0:0|
 :skolemid |755|
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|))
)))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1_0|
 :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|))
 :qid |unknown.0:0|
 :skolemid |756|
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|))
)))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1_1|
 :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|))
 :qid |unknown.0:0|
 :skolemid |757|
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))))
 :qid |unknown.0:0|
 :skolemid |758|
 :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|))
 :qid |unknown.0:0|
 :skolemid |759|
 :no-pattern (type |x0#0@@0|)
 :no-pattern (U_2_int |x0#0@@0|)
 :no-pattern (U_2_bool |x0#0@@0|)
)))))
 :qid |unknown.0:0|
 :skolemid |760|
 :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|)))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8)))
 :qid |unknown.0:0|
 :skolemid |761|
 :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8))
)))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType)
 :qid |funType:Tclass._System.___hFunc0|
 :pattern ( (Tclass._System.___hFunc0 arg0@@136))
)))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|)))
 :qid |unknown.0:0|
 :skolemid |762|
 :pattern ( (Tclass._System.___hFunc0 |#$R@@15|))
)))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType)
 :qid |funType:Tclass._System.___hFunc0_0|
 :pattern ( (Tclass._System.___hFunc0_0 arg0@@137))
)))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|))
 :qid |unknown.0:0|
 :skolemid |763|
 :pattern ( (Tclass._System.___hFunc0 |#$R@@16|))
)))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|))))
 :qid |unknown.0:0|
 :skolemid |764|
 :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|)))
)))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType)
 :qid |funType:Apply0|
 :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16))
)) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType)
 :qid |funType:Handle0|
 :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17))
))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6)))
 :qid |unknown.0:0|
 :skolemid |765|
 :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)))
)))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3)))
 :qid |unknown.0:0|
 :skolemid |766|
 :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3)))
)))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType))
 :qid |funType:Reads0|
 :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18))
)))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38))))
 :qid |unknown.0:0|
 :skolemid |767|
 :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38))
)))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5))))
 (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5))))
 :qid |unknown.0:0|
 :skolemid |768|
 :no-pattern (type o@@50)
 :no-pattern (type fld@@5)
 :no-pattern (U_2_int o@@50)
 :no-pattern (U_2_bool o@@50)
 :no-pattern (U_2_int fld@@5)
 :no-pattern (U_2_bool fld@@5)
)))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17)))
 :qid |unknown.0:0|
 :skolemid |769|
 :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17))
)))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6))))
 (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6))))
 :qid |unknown.0:0|
 :skolemid |770|
 :no-pattern (type o@@51)
 :no-pattern (type fld@@6)
 :no-pattern (U_2_int o@@51)
 :no-pattern (U_2_bool o@@51)
 :no-pattern (U_2_int fld@@6)
 :no-pattern (U_2_bool fld@@6)
)))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18)))
 :qid |unknown.0:0|
 :skolemid |771|
 :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18))
)))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7))))
 (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7))))
 :qid |unknown.0:0|
 :skolemid |772|
 :no-pattern (type o@@52)
 :no-pattern (type fld@@7)
 :no-pattern (U_2_int o@@52)
 :no-pattern (U_2_bool o@@52)
 :no-pattern (U_2_int fld@@7)
 :no-pattern (U_2_bool fld@@7)
)))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19)))
 :qid |unknown.0:0|
 :skolemid |773|
 :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19))
)))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8))))
 (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8))))
 :qid |unknown.0:0|
 :skolemid |774|
 :no-pattern (type o@@53)
 :no-pattern (type fld@@8)
 :no-pattern (U_2_int o@@53)
 :no-pattern (U_2_bool o@@53)
 :no-pattern (U_2_int fld@@8)
 :no-pattern (U_2_bool fld@@8)
)))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20)))
 :qid |unknown.0:0|
 :skolemid |775|
 :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20))
)))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9))))
 (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9))))
 :qid |unknown.0:0|
 :skolemid |776|
 :no-pattern (type o@@54)
 :no-pattern (type fld@@9)
 :no-pattern (U_2_int o@@54)
 :no-pattern (U_2_bool o@@54)
 :no-pattern (U_2_int fld@@9)
 :no-pattern (U_2_bool fld@@9)
)))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21)))
 :qid |unknown.0:0|
 :skolemid |777|
 :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21))
)))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10))))
 (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10))))
 :qid |unknown.0:0|
 :skolemid |778|
 :no-pattern (type o@@55)
 :no-pattern (type fld@@10)
 :no-pattern (U_2_int o@@55)
 :no-pattern (U_2_bool o@@55)
 :no-pattern (U_2_int fld@@10)
 :no-pattern (U_2_bool fld@@10)
)))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22)))
 :qid |unknown.0:0|
 :skolemid |779|
 :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22))
)))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType))))
 :qid |unknown.0:0|
 :skolemid |780|
 :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9))
 :pattern ( (Reads0 t0@@40 heap@@9 f@@23))
)))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24)))
 :qid |unknown.0:0|
 :skolemid |781|
 :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10))
 :pattern ( (Requires0 t0@@41 heap@@10 f@@24))
)))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42)))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |782|
 :pattern ( (Apply0 t0@@42 h@@30 f@@25))
))))
 :qid |unknown.0:0|
 :skolemid |783|
 :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)))
)))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0))
 :qid |unknown.0:0|
 :skolemid |784|
 :pattern ( ($IsBox bx@@39 t0@@43))
 :pattern ( ($IsBox bx@@39 u0@@0))
)))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0)))
 :qid |unknown.0:0|
 :skolemid |785|
 :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0)))
)))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc))))
 :qid |unknown.0:0|
 :skolemid |786|
 :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))
)))))
 :qid |unknown.0:0|
 :skolemid |787|
 :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31))
)))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32))
 :qid |unknown.0:0|
 :skolemid |788|
 :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))
)))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc0|
 :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141))
)))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|)))
 :qid |unknown.0:0|
 :skolemid |789|
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|))
)))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc0_0|
 :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142))
)))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|))
 :qid |unknown.0:0|
 :skolemid |790|
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|))
)))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|))))
 :qid |unknown.0:0|
 :skolemid |791|
 :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|)))
)))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType)))))
 :qid |unknown.0:0|
 :skolemid |792|
 :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|)))
)))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9)))
 :qid |unknown.0:0|
 :skolemid |793|
 :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9))
)))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc0|
 :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143))
)))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|)))
 :qid |unknown.0:0|
 :skolemid |794|
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|))
)))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc0_0|
 :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144))
)))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|))
 :qid |unknown.0:0|
 :skolemid |795|
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|))
)))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|))))
 :qid |unknown.0:0|
 :skolemid |796|
 :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|)))
)))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|))))
 :qid |unknown.0:0|
 :skolemid |797|
 :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|)))
)))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10)))
 :qid |unknown.0:0|
 :skolemid |798|
 :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10))
)))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default)))
 :qid |unknown.0:0|
 :skolemid |799|
 :pattern ( ($IsBox bx@@42 Tclass._System.__default))
)))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))))
 :qid |unknown.0:0|
 :skolemid |800|
 :pattern ( ($Is $o@@7 Tclass._System.__default))
)))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc)))))
 :qid |unknown.0:0|
 :skolemid |801|
 :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11))
)))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true)
 :qid |unknown.0:0|
 :skolemid |802|
 :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|))
))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |803|
 :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|))
)))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType)
 :qid |funType:Tclass._System.___hFunc2|
 :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19))
)))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|)))
 :qid |unknown.0:0|
 :skolemid |804|
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|))
)))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType)
 :qid |funType:Tclass._System.___hFunc2_0|
 :pattern ( (Tclass._System.___hFunc2_0 arg0@@146))
)))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|))
 :qid |unknown.0:0|
 :skolemid |805|
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|))
)))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType)
 :qid |funType:Tclass._System.___hFunc2_1|
 :pattern ( (Tclass._System.___hFunc2_1 arg0@@147))
)))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|))
 :qid |unknown.0:0|
 :skolemid |806|
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|))
)))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType)
 :qid |funType:Tclass._System.___hFunc2_2|
 :pattern ( (Tclass._System.___hFunc2_2 arg0@@148))
)))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|))
 :qid |unknown.0:0|
 :skolemid |807|
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|))
)))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))))
 :qid |unknown.0:0|
 :skolemid |808|
 :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25)
 :qid |ctor:MapType3Type|
)) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150)
 :qid |typeInv:MapType3TypeInv0|
 :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4))
))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70)
 :qid |typeInv:MapType3TypeInv1|
 :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5))
))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23)
 :qid |typeInv:MapType3TypeInv2|
 :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6))
))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7)
 :qid |typeInv:MapType3TypeInv3|
 :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7))
))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154))))
(= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3))
 :qid |funType:MapType3Select|
 :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8))
))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1)))
(let ((aVar2@@2 (type arg3@@9)))
(let ((aVar1@@3 (type arg2@@26)))
(let ((aVar0@@1 (type arg1@@74)))
(= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0))))))
 :qid |funType:MapType3Store|
 :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1))
))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49))))
 (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10)))
 :qid |mapAx0:MapType3Select|
 :weight 0
))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2)))
 :qid |mapAx1:MapType3Select:0|
 :weight 0
)) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0)))
 :qid |mapAx1:MapType3Select:1|
 :weight 0
))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1)))
 :qid |mapAx1:MapType3Select:2|
 :weight 0
))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2)))
 :qid |mapAx2:MapType3Select|
 :weight 0
)))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType)
 :qid |funType:Apply2|
 :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6))
))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType)
 :qid |funType:Handle2|
 :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28))
))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1)))
 :qid |unknown.0:0|
 :skolemid |809|
 :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1))
)))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0))
 :qid |unknown.0:0|
 :skolemid |810|
 :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0))
)))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType))
 :qid |funType:Reads2|
 :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0))
)))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44))))
 :qid |unknown.0:0|
 :skolemid |811|
 :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44))
)))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11))))
 (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11))))
 :qid |unknown.0:0|
 :skolemid |812|
 :no-pattern (type o@@56)
 :no-pattern (type fld@@11)
 :no-pattern (U_2_int o@@56)
 :no-pattern (U_2_bool o@@56)
 :no-pattern (U_2_int fld@@11)
 :no-pattern (U_2_bool fld@@11)
)))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)))
 :qid |unknown.0:0|
 :skolemid |813|
 :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))
)))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12))))
 (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12))))
 :qid |unknown.0:0|
 :skolemid |814|
 :no-pattern (type o@@57)
 :no-pattern (type fld@@12)
 :no-pattern (U_2_int o@@57)
 :no-pattern (U_2_bool o@@57)
 :no-pattern (U_2_int fld@@12)
 :no-pattern (U_2_bool fld@@12)
)))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)))
 :qid |unknown.0:0|
 :skolemid |815|
 :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))
)))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13))))
 (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13))))
 :qid |unknown.0:0|
 :skolemid |816|
 :no-pattern (type o@@58)
 :no-pattern (type fld@@13)
 :no-pattern (U_2_int o@@58)
 :no-pattern (U_2_bool o@@58)
 :no-pattern (U_2_int fld@@13)
 :no-pattern (U_2_bool fld@@13)
)))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)))
 :qid |unknown.0:0|
 :skolemid |817|
 :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))
)))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14))))
 (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14))))
 :qid |unknown.0:0|
 :skolemid |818|
 :no-pattern (type o@@59)
 :no-pattern (type fld@@14)
 :no-pattern (U_2_int o@@59)
 :no-pattern (U_2_bool o@@59)
 :no-pattern (U_2_int fld@@14)
 :no-pattern (U_2_bool fld@@14)
)))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)))
 :qid |unknown.0:0|
 :skolemid |819|
 :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))
)))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15))))
 (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15))))
 :qid |unknown.0:0|
 :skolemid |820|
 :no-pattern (type o@@60)
 :no-pattern (type fld@@15)
 :no-pattern (U_2_int o@@60)
 :no-pattern (U_2_bool o@@60)
 :no-pattern (U_2_int fld@@15)
 :no-pattern (U_2_bool fld@@15)
)))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)))
 :qid |unknown.0:0|
 :skolemid |821|
 :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))
)))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16))))
 (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16))))
 :qid |unknown.0:0|
 :skolemid |822|
 :no-pattern (type o@@61)
 :no-pattern (type fld@@16)
 :no-pattern (U_2_int o@@61)
 :no-pattern (U_2_bool o@@61)
 :no-pattern (U_2_int fld@@16)
 :no-pattern (U_2_bool fld@@16)
)))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)))
 :qid |unknown.0:0|
 :skolemid |823|
 :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))
)))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType))))
 :qid |unknown.0:0|
 :skolemid |824|
 :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14))
 :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8))
)))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)))
 :qid |unknown.0:0|
 :skolemid |825|
 :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15))
 :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))
)))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |826|
 :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))
))))
 :qid |unknown.0:0|
 :skolemid |827|
 :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)))
)))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58))
 :qid |unknown.0:0|
 :skolemid |828|
 :pattern ( ($IsBox bx@@45 u0@@1))
 :pattern ( ($IsBox bx@@45 t0@@58))
))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34))
 :qid |unknown.0:0|
 :skolemid |829|
 :pattern ( ($IsBox bx@@46 u1@@0))
 :pattern ( ($IsBox bx@@46 t1@@34))
))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2))
 :qid |unknown.0:0|
 :skolemid |830|
 :pattern ( ($IsBox bx@@47 t2@@11))
 :pattern ( ($IsBox bx@@47 u2))
)))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2)))
 :qid |unknown.0:0|
 :skolemid |831|
 :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2)))
)))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc))))
 :qid |unknown.0:0|
 :skolemid |832|
 :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))
))))
 :qid |unknown.0:0|
 :skolemid |833|
 :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11))
 :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11))
))))
 :qid |unknown.0:0|
 :skolemid |834|
 :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37))
)))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38)))
 :qid |unknown.0:0|
 :skolemid |835|
 :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12))
)))
 :qid |unknown.0:0|
 :skolemid |836|
 :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))
)))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2|
 :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30))
)))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|)))
 :qid |unknown.0:0|
 :skolemid |837|
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|))
)))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2_0|
 :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160))
)))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|))
 :qid |unknown.0:0|
 :skolemid |838|
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|))
)))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2_1|
 :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161))
)))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|))
 :qid |unknown.0:0|
 :skolemid |839|
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|))
)))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2_2|
 :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162))
)))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|))
 :qid |unknown.0:0|
 :skolemid |840|
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|))
)))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))))
 :qid |unknown.0:0|
 :skolemid |841|
 :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))
)))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |842|
 :no-pattern (type |x0#0@@1|)
 :no-pattern (type |x1#0|)
 :no-pattern (U_2_int |x0#0@@1|)
 :no-pattern (U_2_bool |x0#0@@1|)
 :no-pattern (U_2_int |x1#0|)
 :no-pattern (U_2_bool |x1#0|)
)))))
 :qid |unknown.0:0|
 :skolemid |843|
 :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)))
)))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)))
 :qid |unknown.0:0|
 :skolemid |844|
 :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))
)))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2|
 :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31))
)))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|)))
 :qid |unknown.0:0|
 :skolemid |845|
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|))
)))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2_0|
 :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164))
)))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|))
 :qid |unknown.0:0|
 :skolemid |846|
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|))
)))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2_1|
 :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165))
)))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|))
 :qid |unknown.0:0|
 :skolemid |847|
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|))
)))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2_2|
 :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166))
)))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|))
 :qid |unknown.0:0|
 :skolemid |848|
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|))
)))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))))
 :qid |unknown.0:0|
 :skolemid |849|
 :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))
)))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|))
 :qid |unknown.0:0|
 :skolemid |850|
 :no-pattern (type |x0#0@@2|)
 :no-pattern (type |x1#0@@0|)
 :no-pattern (U_2_int |x0#0@@2|)
 :no-pattern (U_2_bool |x0#0@@2|)
 :no-pattern (U_2_int |x1#0@@0|)
 :no-pattern (U_2_bool |x1#0@@0|)
)))))
 :qid |unknown.0:0|
 :skolemid |851|
 :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)))
)))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)))
 :qid |unknown.0:0|
 :skolemid |852|
 :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))
)))
(assert (forall ((arg0@@167 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@167 arg1@@80 arg2@@32 arg3@@12)) TyType)
 :qid |funType:Tclass._System.___hFunc3|
 :pattern ( (Tclass._System.___hFunc3 arg0@@167 arg1@@80 arg2@@32 arg3@@12))
)))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) |tytagFamily$_#Func3|)))
 :qid |unknown.0:0|
 :skolemid |853|
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|))
)))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@168)) TyType)
 :qid |funType:Tclass._System.___hFunc3_0|
 :pattern ( (Tclass._System.___hFunc3_0 arg0@@168))
)))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) |#$T0@@35|))
 :qid |unknown.0:0|
 :skolemid |854|
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|))
)))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@169)) TyType)
 :qid |funType:Tclass._System.___hFunc3_1|
 :pattern ( (Tclass._System.___hFunc3_1 arg0@@169))
)))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) |#$T1@@20|))
 :qid |unknown.0:0|
 :skolemid |855|
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|))
)))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@170)) TyType)
 :qid |funType:Tclass._System.___hFunc3_2|
 :pattern ( (Tclass._System.___hFunc3_2 arg0@@170))
)))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) |#$T2@@2|))
 :qid |unknown.0:0|
 :skolemid |856|
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|))
)))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@171)) TyType)
 :qid |funType:Tclass._System.___hFunc3_3|
 :pattern ( (Tclass._System.___hFunc3_3 arg0@@171))
)))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) |#$R@@51|))
 :qid |unknown.0:0|
 :skolemid |857|
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|))
)))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))))
 :qid |unknown.0:0|
 :skolemid |858|
 :pattern ( ($IsBox bx@@50 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@172 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@172 arg1@@81 arg2@@33 arg3@@13 arg4@@4)) 26)
 :qid |ctor:MapType4Type|
)) (forall ((arg0@@173 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@173 arg1@@82 arg2@@34 arg3@@14 arg4@@5)) arg0@@173)
 :qid |typeInv:MapType4TypeInv0|
 :pattern ( (MapType4Type arg0@@173 arg1@@82 arg2@@34 arg3@@14 arg4@@5))
))) (forall ((arg0@@174 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@174 arg1@@83 arg2@@35 arg3@@15 arg4@@6)) arg1@@83)
 :qid |typeInv:MapType4TypeInv1|
 :pattern ( (MapType4Type arg0@@174 arg1@@83 arg2@@35 arg3@@15 arg4@@6))
))) (forall ((arg0@@175 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@175 arg1@@84 arg2@@36 arg3@@16 arg4@@7)) arg2@@36)
 :qid |typeInv:MapType4TypeInv2|
 :pattern ( (MapType4Type arg0@@175 arg1@@84 arg2@@36 arg3@@16 arg4@@7))
))) (forall ((arg0@@176 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@176 arg1@@85 arg2@@37 arg3@@17 arg4@@8)) arg3@@17)
 :qid |typeInv:MapType4TypeInv3|
 :pattern ( (MapType4Type arg0@@176 arg1@@85 arg2@@37 arg3@@17 arg4@@8))
))) (forall ((arg0@@177 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@177 arg1@@86 arg2@@38 arg3@@18 arg4@@9)) arg4@@9)
 :qid |typeInv:MapType4TypeInv4|
 :pattern ( (MapType4Type arg0@@177 arg1@@86 arg2@@38 arg3@@18 arg4@@9))
))) (forall ((arg0@@178 T@U) (arg1@@87 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@178))))
(= (type (MapType4Select arg0@@178 arg1@@87 arg2@@39 arg3@@19 arg4@@10)) aVar4))
 :qid |funType:MapType4Select|
 :pattern ( (MapType4Select arg0@@178 arg1@@87 arg2@@39 arg3@@19 arg4@@10))
))) (forall ((arg0@@179 T@U) (arg1@@88 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1)))
(let ((aVar3@@2 (type arg4@@11)))
(let ((aVar2@@3 (type arg3@@20)))
(let ((aVar1@@4 (type arg2@@40)))
(let ((aVar0@@2 (type arg1@@88)))
(= (type (MapType4Store arg0@@179 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0)))))))
 :qid |funType:MapType4Store|
 :pattern ( (MapType4Store arg0@@179 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1))
))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@54))))
 (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15)))
 :qid |mapAx0:MapType4Select|
 :weight 0
))) (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3)))
 :qid |mapAx1:MapType4Select:0|
 :weight 0
)) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0)))
 :qid |mapAx1:MapType4Select:1|
 :weight 0
))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1)))
 :qid |mapAx1:MapType4Select:2|
 :weight 0
))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2)))
 :qid |mapAx1:MapType4Select:3|
 :weight 0
))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3)))
 :qid |mapAx2:MapType4Select|
 :weight 0
)))) (forall ((arg0@@180 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@180 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType)
 :qid |funType:Apply3|
 :pattern ( (Apply3 arg0@@180 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8))
))) (forall ((arg0@@181 T@U) (arg1@@90 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@181 arg1@@90 arg2@@42)) HandleTypeType)
 :qid |funType:Handle3|
 :pattern ( (Handle3 arg0@@181 arg1@@90 arg2@@42))
))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@16 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2)))
 :qid |unknown.0:0|
 :skolemid |859|
 :pattern ( (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@16 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2))
)))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0))) (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@17 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0))
 :qid |unknown.0:0|
 :skolemid |860|
 :pattern ( (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@17 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0))
)))
(assert (forall ((arg0@@182 T@U) (arg1@@91 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@182 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType))
 :qid |funType:Reads3|
 :pattern ( (Reads3 arg0@@182 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0))
)))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@51) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@18 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@51)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1) bx@@51))))
 :qid |unknown.0:0|
 :skolemid |861|
 :pattern ( (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@18 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@51))
)))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@17 t3@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17))))
 (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17))))
 :qid |unknown.0:0|
 :skolemid |862|
 :no-pattern (type o@@62)
 :no-pattern (type fld@@17)
 :no-pattern (U_2_int o@@62)
 :no-pattern (U_2_bool o@@62)
 :no-pattern (U_2_int fld@@17)
 :no-pattern (U_2_bool fld@@17)
)))) (= (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2)))
 :qid |unknown.0:0|
 :skolemid |863|
 :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2))
)))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@18 t3@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18))))
 (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18))))
 :qid |unknown.0:0|
 :skolemid |864|
 :no-pattern (type o@@63)
 :no-pattern (type fld@@18)
 :no-pattern (U_2_int o@@63)
 :no-pattern (U_2_bool o@@63)
 :no-pattern (U_2_int fld@@18)
 :no-pattern (U_2_bool fld@@18)
)))) (= (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3)))
 :qid |unknown.0:0|
 :skolemid |865|
 :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3))
)))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@19 t3@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19))))
 (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19))))
 :qid |unknown.0:0|
 :skolemid |866|
 :no-pattern (type o@@64)
 :no-pattern (type fld@@19)
 :no-pattern (U_2_int o@@64)
 :no-pattern (U_2_bool o@@64)
 :no-pattern (U_2_int fld@@19)
 :no-pattern (U_2_bool fld@@19)
)))) (= (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4)))
 :qid |unknown.0:0|
 :skolemid |867|
 :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4))
)))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@20 t3@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20))))
 (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20))))
 :qid |unknown.0:0|
 :skolemid |868|
 :no-pattern (type o@@65)
 :no-pattern (type fld@@20)
 :no-pattern (U_2_int o@@65)
 :no-pattern (U_2_bool o@@65)
 :no-pattern (U_2_int fld@@20)
 :no-pattern (U_2_bool fld@@20)
)))) (= (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5)))
 :qid |unknown.0:0|
 :skolemid |869|
 :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5))
)))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@21 t3@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21))))
 (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21))))
 :qid |unknown.0:0|
 :skolemid |870|
 :no-pattern (type o@@66)
 :no-pattern (type fld@@21)
 :no-pattern (U_2_int o@@66)
 :no-pattern (U_2_bool o@@66)
 :no-pattern (U_2_int fld@@21)
 :no-pattern (U_2_bool fld@@21)
)))) (= (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6)))
 :qid |unknown.0:0|
 :skolemid |871|
 :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6))
)))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@22 t3@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22))))
 (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22))))
 :qid |unknown.0:0|
 :skolemid |872|
 :no-pattern (type o@@67)
 :no-pattern (type fld@@22)
 :no-pattern (U_2_int o@@67)
 :no-pattern (U_2_bool o@@67)
 :no-pattern (U_2_int fld@@22)
 :no-pattern (U_2_bool fld@@22)
)))) (= (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7)))
 :qid |unknown.0:0|
 :skolemid |873|
 :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7))
)))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@23 t3@@8))))) (= (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType))))
 :qid |unknown.0:0|
 :skolemid |874|
 :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) ($IsGoodHeap heap@@19))
 :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8))
)))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (|Set#Empty| BoxType)))) (= (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9)))
 :qid |unknown.0:0|
 :skolemid |875|
 :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) ($IsGoodHeap heap@@20))
 :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9))
)))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10))) ($IsBox (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10) t3@@10))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |876|
 :pattern ( (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10))
))))
 :qid |unknown.0:0|
 :skolemid |877|
 :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10)))
)))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u0@@2)) ($IsBox bx@@52 t0@@73))
 :qid |unknown.0:0|
 :skolemid |878|
 :pattern ( ($IsBox bx@@52 u0@@2))
 :pattern ( ($IsBox bx@@52 t0@@73))
))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u1@@1)) ($IsBox bx@@53 t1@@49))
 :qid |unknown.0:0|
 :skolemid |879|
 :pattern ( ($IsBox bx@@53 u1@@1))
 :pattern ( ($IsBox bx@@53 t1@@49))
))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u2@@0)) ($IsBox bx@@54 t2@@26))
 :qid |unknown.0:0|
 :skolemid |880|
 :pattern ( ($IsBox bx@@54 u2@@0))
 :pattern ( ($IsBox bx@@54 t2@@26))
))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t3@@11)) ($IsBox bx@@55 u3))
 :qid |unknown.0:0|
 :skolemid |881|
 :pattern ( ($IsBox bx@@55 t3@@11))
 :pattern ( ($IsBox bx@@55 u3))
)))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3)))
 :qid |unknown.0:0|
 :skolemid |882|
 :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3)))
)))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (=> (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (Requires3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc))))
 :qid |unknown.0:0|
 :skolemid |883|
 :pattern ( (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21)))
))))
 :qid |unknown.0:0|
 :skolemid |884|
 :pattern ( (Apply3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11))
 :pattern ( (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11))
))))
 :qid |unknown.0:0|
 :skolemid |885|
 :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43))
)))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) (Requires3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ($IsAllocBox (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12) t3@@13 h@@44)))
 :qid |unknown.0:0|
 :skolemid |886|
 :pattern ( (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12))
)))
 :qid |unknown.0:0|
 :skolemid |887|
 :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44))
)))
(assert (forall ((arg0@@183 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@183 arg1@@92 arg2@@44 arg3@@23)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3|
 :pattern ( (Tclass._System.___hPartialFunc3 arg0@@183 arg1@@92 arg2@@44 arg3@@23))
)))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) |tytagFamily$_#PartialFunc3|)))
 :qid |unknown.0:0|
 :skolemid |888|
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|))
)))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@184)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3_0|
 :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@184))
)))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) |#$T0@@41|))
 :qid |unknown.0:0|
 :skolemid |889|
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|))
)))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@185)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3_1|
 :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@185))
)))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) |#$T1@@26|))
 :qid |unknown.0:0|
 :skolemid |890|
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|))
)))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@186)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3_2|
 :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@186))
)))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) |#$T2@@8|))
 :qid |unknown.0:0|
 :skolemid |891|
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|))
)))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@187)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3_3|
 :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@187))
)))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) |#$R@@57|))
 :qid |unknown.0:0|
 :skolemid |892|
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|))
)))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))))
 :qid |unknown.0:0|
 :skolemid |893|
 :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|)))
)))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@3| |#$T0@@46|) ($IsBox |x1#0@@1| |#$T1@@30|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |894|
 :no-pattern (type |x0#0@@3|)
 :no-pattern (type |x1#0@@1|)
 :no-pattern (type |x2#0|)
 :no-pattern (U_2_int |x0#0@@3|)
 :no-pattern (U_2_bool |x0#0@@3|)
 :no-pattern (U_2_int |x1#0@@1|)
 :no-pattern (U_2_bool |x1#0@@1|)
 :no-pattern (U_2_int |x2#0|)
 :no-pattern (U_2_bool |x2#0|)
)))))
 :qid |unknown.0:0|
 :skolemid |895|
 :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)))
)))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)))
 :qid |unknown.0:0|
 :skolemid |896|
 :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14))
)))
(assert (forall ((arg0@@188 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@188 arg1@@93 arg2@@45 arg3@@24)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3|
 :pattern ( (Tclass._System.___hTotalFunc3 arg0@@188 arg1@@93 arg2@@45 arg3@@24))
)))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) |tytagFamily$_#TotalFunc3|)))
 :qid |unknown.0:0|
 :skolemid |897|
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|))
)))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@189)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3_0|
 :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@189))
)))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) |#$T0@@49|))
 :qid |unknown.0:0|
 :skolemid |898|
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|))
)))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@190)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3_1|
 :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@190))
)))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) |#$T1@@34|))
 :qid |unknown.0:0|
 :skolemid |899|
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|))
)))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@191)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3_2|
 :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@191))
)))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) |#$T2@@16|))
 :qid |unknown.0:0|
 :skolemid |900|
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|))
)))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@192)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3_3|
 :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@192))
)))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) |#$R@@65|))
 :qid |unknown.0:0|
 :skolemid |901|
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|))
)))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))))
 :qid |unknown.0:0|
 :skolemid |902|
 :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|)))
)))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@4| |#$T0@@54|) ($IsBox |x1#0@@2| |#$T1@@38|)) ($IsBox |x2#0@@0| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0|))
 :qid |unknown.0:0|
 :skolemid |903|
 :no-pattern (type |x0#0@@4|)
 :no-pattern (type |x1#0@@2|)
 :no-pattern (type |x2#0@@0|)
 :no-pattern (U_2_int |x0#0@@4|)
 :no-pattern (U_2_bool |x0#0@@4|)
 :no-pattern (U_2_int |x1#0@@2|)
 :no-pattern (U_2_bool |x1#0@@2|)
 :no-pattern (U_2_int |x2#0@@0|)
 :no-pattern (U_2_bool |x2#0@@0|)
)))))
 :qid |unknown.0:0|
 :skolemid |904|
 :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)))
)))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)))
 :qid |unknown.0:0|
 :skolemid |905|
 :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15))
)))
(assert (forall ((arg0@@193 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@193 arg1@@94 arg2@@46 arg3@@25 arg4@@14)) TyType)
 :qid |funType:Tclass._System.___hFunc4|
 :pattern ( (Tclass._System.___hFunc4 arg0@@193 arg1@@94 arg2@@46 arg3@@25 arg4@@14))
)))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@69|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) |tytagFamily$_#Func4|)))
 :qid |unknown.0:0|
 :skolemid |906|
 :pattern ( (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|))
)))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@194)) TyType)
 :qid |funType:Tclass._System.___hFunc4_0|
 :pattern ( (Tclass._System.___hFunc4_0 arg0@@194))
)))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) |#$T0@@57|))
 :qid |unknown.0:0|
 :skolemid |907|
 :pattern ( (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|))
)))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@195)) TyType)
 :qid |funType:Tclass._System.___hFunc4_1|
 :pattern ( (Tclass._System.___hFunc4_1 arg0@@195))
)))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) |#$T1@@42|))
 :qid |unknown.0:0|
 :skolemid |908|
 :pattern ( (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|))
)))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@196)) TyType)
 :qid |funType:Tclass._System.___hFunc4_2|
 :pattern ( (Tclass._System.___hFunc4_2 arg0@@196))
)))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) |#$T2@@24|))
 :qid |unknown.0:0|
 :skolemid |909|
 :pattern ( (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|))
)))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@197)) TyType)
 :qid |funType:Tclass._System.___hFunc4_3|
 :pattern ( (Tclass._System.___hFunc4_3 arg0@@197))
)))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) |#$T3@@3|))
 :qid |unknown.0:0|
 :skolemid |910|
 :pattern ( (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|))
)))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@198)) TyType)
 :qid |funType:Tclass._System.___hFunc4_4|
 :pattern ( (Tclass._System.___hFunc4_4 arg0@@198))
)))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) |#$R@@74|))
 :qid |unknown.0:0|
 :skolemid |911|
 :pattern ( (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|))
)))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$R@@75| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))))
 :qid |unknown.0:0|
 :skolemid |912|
 :pattern ( ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@199 T@T) (arg1@@95 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@199 arg1@@95 arg2@@47 arg3@@26 arg4@@15 arg5@@4)) 27)
 :qid |ctor:MapType5Type|
)) (forall ((arg0@@200 T@T) (arg1@@96 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@200 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) arg0@@200)
 :qid |typeInv:MapType5TypeInv0|
 :pattern ( (MapType5Type arg0@@200 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5))
))) (forall ((arg0@@201 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@201 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) arg1@@97)
 :qid |typeInv:MapType5TypeInv1|
 :pattern ( (MapType5Type arg0@@201 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6))
))) (forall ((arg0@@202 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@202 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) arg2@@50)
 :qid |typeInv:MapType5TypeInv2|
 :pattern ( (MapType5Type arg0@@202 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7))
))) (forall ((arg0@@203 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@203 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) arg3@@30)
 :qid |typeInv:MapType5TypeInv3|
 :pattern ( (MapType5Type arg0@@203 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8))
))) (forall ((arg0@@204 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@204 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) arg4@@20)
 :qid |typeInv:MapType5TypeInv4|
 :pattern ( (MapType5Type arg0@@204 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9))
))) (forall ((arg0@@205 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@205 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) arg5@@10)
 :qid |typeInv:MapType5TypeInv5|
 :pattern ( (MapType5Type arg0@@205 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10))
))) (forall ((arg0@@206 T@U) (arg1@@102 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@206))))
(= (type (MapType5Select arg0@@206 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) aVar5))
 :qid |funType:MapType5Select|
 :pattern ( (MapType5Select arg0@@206 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11))
))) (forall ((arg0@@207 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3)))
(let ((aVar4@@2 (type arg5@@12)))
(let ((aVar3@@3 (type arg4@@23)))
(let ((aVar2@@4 (type arg3@@34)))
(let ((aVar1@@5 (type arg2@@55)))
(let ((aVar0@@3 (type arg1@@103)))
(= (type (MapType5Store arg0@@207 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0))))))))
 :qid |funType:MapType5Store|
 :pattern ( (MapType5Store arg0@@207 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3))
))) (forall ((m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@60))))
 (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21)))
 :qid |mapAx0:MapType5Select|
 :weight 0
))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@61 y0@@15 y1@@11 y2@@8 y3@@4 y4)))
 :qid |mapAx1:MapType5Select:0|
 :weight 0
)) (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0)))
 :qid |mapAx1:MapType5Select:1|
 :weight 0
))) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1)))
 :qid |mapAx1:MapType5Select:2|
 :weight 0
))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2)))
 :qid |mapAx1:MapType5Select:3|
 :weight 0
))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3)))
 :qid |mapAx1:MapType5Select:4|
 :weight 0
))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4)))
 :qid |mapAx2:MapType5Select|
 :weight 0
)))) (forall ((arg0@@208 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@208 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType)
 :qid |funType:Apply4|
 :pattern ( (Apply4 arg0@@208 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10))
))) (forall ((arg0@@209 T@U) (arg1@@105 T@U) (arg2@@57 T@U) ) (! (= (type (Handle4 arg0@@209 arg1@@105 arg2@@57)) HandleTypeType)
 :qid |funType:Handle4|
 :pattern ( (Handle4 arg0@@209 arg1@@105 arg2@@57))
))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13 bx3)))
 :qid |unknown.0:0|
 :skolemid |913|
 :pattern ( (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3))
)))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14 bx3@@0))) (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0))
 :qid |unknown.0:0|
 :skolemid |914|
 :pattern ( (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0))
)))
(assert (forall ((arg0@@210 T@U) (arg1@@106 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@210 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType))
 :qid |funType:Reads4|
 :pattern ( (Reads4 arg0@@210 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0))
)))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx3@@1 T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@59) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@59)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@59))))
 :qid |unknown.0:0|
 :skolemid |915|
 :pattern ( (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@59))
)))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23))))
 (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23))))
 :qid |unknown.0:0|
 :skolemid |916|
 :no-pattern (type o@@68)
 :no-pattern (type fld@@23)
 :no-pattern (U_2_int o@@68)
 :no-pattern (U_2_bool o@@68)
 :no-pattern (U_2_int fld@@23)
 :no-pattern (U_2_bool fld@@23)
)))) (= (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2)))
 :qid |unknown.0:0|
 :skolemid |917|
 :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2))
)))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24))))
 (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24))))
 :qid |unknown.0:0|
 :skolemid |918|
 :no-pattern (type o@@69)
 :no-pattern (type fld@@24)
 :no-pattern (U_2_int o@@69)
 :no-pattern (U_2_bool o@@69)
 :no-pattern (U_2_int fld@@24)
 :no-pattern (U_2_bool fld@@24)
)))) (= (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3)))
 :qid |unknown.0:0|
 :skolemid |919|
 :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3))
)))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25))))
 (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25))))
 :qid |unknown.0:0|
 :skolemid |920|
 :no-pattern (type o@@70)
 :no-pattern (type fld@@25)
 :no-pattern (U_2_int o@@70)
 :no-pattern (U_2_bool o@@70)
 :no-pattern (U_2_int fld@@25)
 :no-pattern (U_2_bool fld@@25)
)))) (= (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4)))
 :qid |unknown.0:0|
 :skolemid |921|
 :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4))
)))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26))))
 (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26))))
 :qid |unknown.0:0|
 :skolemid |922|
 :no-pattern (type o@@71)
 :no-pattern (type fld@@26)
 :no-pattern (U_2_int o@@71)
 :no-pattern (U_2_bool o@@71)
 :no-pattern (U_2_int fld@@26)
 :no-pattern (U_2_bool fld@@26)
)))) (= (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5)))
 :qid |unknown.0:0|
 :skolemid |923|
 :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5))
)))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27))))
 (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27))))
 :qid |unknown.0:0|
 :skolemid |924|
 :no-pattern (type o@@72)
 :no-pattern (type fld@@27)
 :no-pattern (U_2_int o@@72)
 :no-pattern (U_2_bool o@@72)
 :no-pattern (U_2_int fld@@27)
 :no-pattern (U_2_bool fld@@27)
)))) (= (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6)))
 :qid |unknown.0:0|
 :skolemid |925|
 :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6))
)))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28))))
 (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28))))
 :qid |unknown.0:0|
 :skolemid |926|
 :no-pattern (type o@@73)
 :no-pattern (type fld@@28)
 :no-pattern (U_2_int o@@73)
 :no-pattern (U_2_bool o@@73)
 :no-pattern (U_2_int fld@@28)
 :no-pattern (U_2_bool fld@@28)
)))) (= (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7)))
 :qid |unknown.0:0|
 :skolemid |927|
 :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7))
)))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType))))
 :qid |unknown.0:0|
 :skolemid |928|
 :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) ($IsGoodHeap heap@@24))
 :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8))
)))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9)))
 :qid |unknown.0:0|
 :skolemid |929|
 :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) ($IsGoodHeap heap@@25))
 :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9))
)))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10))) ($IsBox (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10) t4@@10))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |930|
 :pattern ( (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10))
))))
 :qid |unknown.0:0|
 :skolemid |931|
 :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10)))
)))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) (forall ((bx@@60 T@U) ) (!  (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 u0@@3)) ($IsBox bx@@60 t0@@88))
 :qid |unknown.0:0|
 :skolemid |932|
 :pattern ( ($IsBox bx@@60 u0@@3))
 :pattern ( ($IsBox bx@@60 t0@@88))
))) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u1@@2)) ($IsBox bx@@61 t1@@64))
 :qid |unknown.0:0|
 :skolemid |933|
 :pattern ( ($IsBox bx@@61 u1@@2))
 :pattern ( ($IsBox bx@@61 t1@@64))
))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u2@@1)) ($IsBox bx@@62 t2@@41))
 :qid |unknown.0:0|
 :skolemid |934|
 :pattern ( ($IsBox bx@@62 u2@@1))
 :pattern ( ($IsBox bx@@62 t2@@41))
))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u3@@0)) ($IsBox bx@@63 t3@@26))
 :qid |unknown.0:0|
 :skolemid |935|
 :pattern ( ($IsBox bx@@63 u3@@0))
 :pattern ( ($IsBox bx@@63 t3@@26))
))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t4@@11)) ($IsBox bx@@64 u4))
 :qid |unknown.0:0|
 :skolemid |936|
 :pattern ( ($IsBox bx@@64 t4@@11))
 :pattern ( ($IsBox bx@@64 u4))
)))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4)))
 :qid |unknown.0:0|
 :skolemid |937|
 :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4)))
)))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (and ($IsBox bx3@@11 t3@@27) ($IsAllocBox bx3@@11 t3@@27 h@@49))) (Requires4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc))))
 :qid |unknown.0:0|
 :skolemid |938|
 :pattern ( (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25)))
))))
 :qid |unknown.0:0|
 :skolemid |939|
 :pattern ( (Apply4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11))
 :pattern ( (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11))
))))
 :qid |unknown.0:0|
 :skolemid |940|
 :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49))
)))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) ($IsAllocBox bx3@@12 t3@@28 h@@50)) (Requires4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ($IsAllocBox (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12) t4@@13 h@@50)))
 :qid |unknown.0:0|
 :skolemid |941|
 :pattern ( (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12))
)))
 :qid |unknown.0:0|
 :skolemid |942|
 :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50))
)))
(assert (forall ((arg0@@211 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@211 arg1@@107 arg2@@59 arg3@@37 arg4@@26)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc4|
 :pattern ( (Tclass._System.___hPartialFunc4 arg0@@211 arg1@@107 arg2@@59 arg3@@37 arg4@@26))
)))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@76|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) |tytagFamily$_#PartialFunc4|)))
 :qid |unknown.0:0|
 :skolemid |943|
 :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|))
)))
(assert (forall ((arg0@@212 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@212)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc4_0|
 :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@212))
)))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) |#$T0@@64|))
 :qid |unknown.0:0|
 :skolemid |944|
 :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|))
)))
(assert (forall ((arg0@@213 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@213)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc4_1|
 :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@213))
)))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) |#$T1@@49|))
 :qid |unknown.0:0|
 :skolemid |945|
 :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|))
)))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@214)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc4_2|
 :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@214))
)))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) |#$T2@@31|))
 :qid |unknown.0:0|
 :skolemid |946|
 :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|))
)))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@215)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc4_3|
 :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@215))
)))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) |#$T3@@10|))
 :qid |unknown.0:0|
 :skolemid |947|
 :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|))
)))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@216)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc4_4|
 :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@216))
)))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) |#$R@@81|))
 :qid |unknown.0:0|
 :skolemid |948|
 :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|))
)))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@82| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))))
 :qid |unknown.0:0|
 :skolemid |949|
 :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|)))
)))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@5| |#$T0@@70|) ($IsBox |x1#0@@3| |#$T1@@54|)) ($IsBox |x2#0@@1| |#$T2@@35|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1| |x3#0|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |950|
 :no-pattern (type |x0#0@@5|)
 :no-pattern (type |x1#0@@3|)
 :no-pattern (type |x2#0@@1|)
 :no-pattern (type |x3#0|)
 :no-pattern (U_2_int |x0#0@@5|)
 :no-pattern (U_2_bool |x0#0@@5|)
 :no-pattern (U_2_int |x1#0@@3|)
 :no-pattern (U_2_bool |x1#0@@3|)
 :no-pattern (U_2_int |x2#0@@1|)
 :no-pattern (U_2_bool |x2#0@@1|)
 :no-pattern (U_2_int |x3#0|)
 :no-pattern (U_2_bool |x3#0|)
)))))
 :qid |unknown.0:0|
 :skolemid |951|
 :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)))
)))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16)))
 :qid |unknown.0:0|
 :skolemid |952|
 :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16))
)))
(assert (forall ((arg0@@217 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@217 arg1@@108 arg2@@60 arg3@@38 arg4@@27)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc4|
 :pattern ( (Tclass._System.___hTotalFunc4 arg0@@217 arg1@@108 arg2@@60 arg3@@38 arg4@@27))
)))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@85|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) |tytagFamily$_#TotalFunc4|)))
 :qid |unknown.0:0|
 :skolemid |953|
 :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|))
)))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@218)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc4_0|
 :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@218))
)))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) |#$T0@@73|))
 :qid |unknown.0:0|
 :skolemid |954|
 :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|))
)))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@219)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc4_1|
 :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@219))
)))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) |#$T1@@58|))
 :qid |unknown.0:0|
 :skolemid |955|
 :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|))
)))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@220)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc4_2|
 :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@220))
)))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) |#$T2@@40|))
 :qid |unknown.0:0|
 :skolemid |956|
 :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|))
)))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@221)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc4_3|
 :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@221))
)))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) |#$T3@@19|))
 :qid |unknown.0:0|
 :skolemid |957|
 :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|))
)))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@222)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc4_4|
 :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@222))
)))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) |#$R@@90|))
 :qid |unknown.0:0|
 :skolemid |958|
 :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|))
)))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@91| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))))
 :qid |unknown.0:0|
 :skolemid |959|
 :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|)))
)))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@6| |#$T0@@79|) ($IsBox |x1#0@@4| |#$T1@@63|)) ($IsBox |x2#0@@2| |#$T2@@44|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2| |x3#0@@0|))
 :qid |unknown.0:0|
 :skolemid |960|
 :no-pattern (type |x0#0@@6|)
 :no-pattern (type |x1#0@@4|)
 :no-pattern (type |x2#0@@2|)
 :no-pattern (type |x3#0@@0|)
 :no-pattern (U_2_int |x0#0@@6|)
 :no-pattern (U_2_bool |x0#0@@6|)
 :no-pattern (U_2_int |x1#0@@4|)
 :no-pattern (U_2_bool |x1#0@@4|)
 :no-pattern (U_2_int |x2#0@@2|)
 :no-pattern (U_2_bool |x2#0@@2|)
 :no-pattern (U_2_int |x3#0@@0|)
 :no-pattern (U_2_bool |x3#0@@0|)
)))))
 :qid |unknown.0:0|
 :skolemid |961|
 :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)))
)))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17)))
 :qid |unknown.0:0|
 :skolemid |962|
 :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17))
)))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (DatatypeCtorId arg0@@223)) DtCtorIdType)
 :qid |funType:DatatypeCtorId|
 :pattern ( (DatatypeCtorId arg0@@223))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|))
 :qid |unknown.0:0|
 :skolemid |963|
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)))
 :qid |unknown.0:0|
 :skolemid |964|
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|)))
 :qid |unknown.0:0|
 :skolemid |965|
 :no-pattern (type |a#1#0#0|)
 :no-pattern (type |a#1#1#0|)
 :no-pattern (U_2_int |a#1#0#0|)
 :no-pattern (U_2_bool |a#1#0#0|)
 :no-pattern (U_2_int |a#1#1#0|)
 :no-pattern (U_2_bool |a#1#1#0|)
)))
 :qid |unknown.0:0|
 :skolemid |966|
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|)))
 :qid |unknown.0:0|
 :skolemid |967|
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|))
)))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@224)) TyType)
 :qid |funType:Tclass._System.Tuple2_0|
 :pattern ( (Tclass._System.Tuple2_0 arg0@@224))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|))
 :qid |unknown.0:0|
 :skolemid |968|
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))
)))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@225)) TyType)
 :qid |funType:Tclass._System.Tuple2_1|
 :pattern ( (Tclass._System.Tuple2_1 arg0@@225))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|))
 :qid |unknown.0:0|
 :skolemid |969|
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@67)) bx@@67) ($Is ($Unbox DatatypeTypeType bx@@67) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))))
 :qid |unknown.0:0|
 :skolemid |970|
 :pattern ( ($IsBox bx@@67 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|))))
 :qid |unknown.0:0|
 :skolemid |971|
 :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@18)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@18)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@18) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@18))))
 :qid |unknown.0:0|
 :skolemid |972|
 :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@18))
)))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@19) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@19))
 :qid |unknown.0:0|
 :skolemid |973|
 :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@19))
))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@19))
 :qid |unknown.0:0|
 :skolemid |974|
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@19))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@20) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@20))
 :qid |unknown.0:0|
 :skolemid |975|
 :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@20))
))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@20))
 :qid |unknown.0:0|
 :skolemid |976|
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@20))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))))
 :qid |unknown.0:0|
 :skolemid |977|
 :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|))
 :qid |unknown.0:0|
 :skolemid |978|
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))))
 :qid |unknown.0:0|
 :skolemid |979|
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|))
 :qid |unknown.0:0|
 :skolemid |980|
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|))))
 :qid |unknown.0:0|
 :skolemid |981|
 :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4))
 :qid |unknown.0:0|
 :skolemid |982|
 :pattern ( (|$IsA#_System.Tuple2| d@@4))
)))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5))
 :qid |unknown.0:0|
 :skolemid |983|
 :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|)))
)))
(assert (forall ((a@@112 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@112) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@112 b@@61)  (and (= (_System.Tuple2._0 a@@112) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@112) (_System.Tuple2._1 b@@61)))))
 :qid |unknown.0:0|
 :skolemid |984|
 :pattern ( (|_System.Tuple2#Equal| a@@112 b@@61))
)))
(assert (forall ((a@@113 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@113) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@113 b@@62) (= a@@113 b@@62)))
 :qid |unknown.0:0|
 :skolemid |985|
 :pattern ( (|_System.Tuple2#Equal| a@@113 b@@62))
)))
(assert (forall ((arg0@@226 T@U) (arg1@@109 T@U) (arg2@@61 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO arg0@@226 arg1@@109 arg2@@61)) TyType)
 :qid |funType:Tclass._System.___hFunc2OSO|
 :pattern ( (Tclass._System.___hFunc2OSO arg0@@226 arg1@@109 arg2@@61))
)))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$R@@94| T@U) ) (!  (=> (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$R@@94|) TyType)) (and (= (Tag (Tclass._System.___hFunc2OSO |#$T0@@81| |#$T1@@65| |#$R@@94|)) Tagclass._System.___hFunc2OSO) (= (TagFamily (Tclass._System.___hFunc2OSO |#$T0@@81| |#$T1@@65| |#$R@@94|)) |tytagFamily$_#Func2OSO|)))
 :qid |unknown.0:0|
 :skolemid |986|
 :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@81| |#$T1@@65| |#$R@@94|))
)))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_0 arg0@@227)) TyType)
 :qid |funType:Tclass._System.___hFunc2OSO_0|
 :pattern ( (Tclass._System.___hFunc2OSO_0 arg0@@227))
)))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$R@@95| T@U) ) (!  (=> (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$R@@95|) TyType)) (= (Tclass._System.___hFunc2OSO_0 (Tclass._System.___hFunc2OSO |#$T0@@82| |#$T1@@66| |#$R@@95|)) |#$T0@@82|))
 :qid |unknown.0:0|
 :skolemid |987|
 :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@82| |#$T1@@66| |#$R@@95|))
)))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_1 arg0@@228)) TyType)
 :qid |funType:Tclass._System.___hFunc2OSO_1|
 :pattern ( (Tclass._System.___hFunc2OSO_1 arg0@@228))
)))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$R@@96| T@U) ) (!  (=> (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$R@@96|) TyType)) (= (Tclass._System.___hFunc2OSO_1 (Tclass._System.___hFunc2OSO |#$T0@@83| |#$T1@@67| |#$R@@96|)) |#$T1@@67|))
 :qid |unknown.0:0|
 :skolemid |988|
 :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@83| |#$T1@@67| |#$R@@96|))
)))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_2 arg0@@229)) TyType)
 :qid |funType:Tclass._System.___hFunc2OSO_2|
 :pattern ( (Tclass._System.___hFunc2OSO_2 arg0@@229))
)))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$R@@97|) TyType)) (= (Tclass._System.___hFunc2OSO_2 (Tclass._System.___hFunc2OSO |#$T0@@84| |#$T1@@68| |#$R@@97|)) |#$R@@97|))
 :qid |unknown.0:0|
 :skolemid |989|
 :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@84| |#$T1@@68| |#$R@@97|))
)))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$R@@98| T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$R@@98|) TyType)) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.___hFunc2OSO |#$T0@@85| |#$T1@@69| |#$R@@98|))) (and (= ($Box ($Unbox HandleTypeType bx@@68)) bx@@68) ($Is ($Unbox HandleTypeType bx@@68) (Tclass._System.___hFunc2OSO |#$T0@@85| |#$T1@@69| |#$R@@98|))))
 :qid |unknown.0:0|
 :skolemid |990|
 :pattern ( ($IsBox bx@@68 (Tclass._System.___hFunc2OSO |#$T0@@85| |#$T1@@69| |#$R@@98|)))
)))
(assert (forall ((arg0@@230 T@U) (arg1@@110 T@U) (arg2@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO arg0@@230 arg1@@110 arg2@@62)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2OSO|
 :pattern ( (Tclass._System.___hPartialFunc2OSO arg0@@230 arg1@@110 arg2@@62))
)))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$R@@99| T@U) ) (!  (=> (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$R@@99|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2OSO |#$T0@@86| |#$T1@@70| |#$R@@99|)) Tagclass._System.___hPartialFunc2OSO) (= (TagFamily (Tclass._System.___hPartialFunc2OSO |#$T0@@86| |#$T1@@70| |#$R@@99|)) |tytagFamily$_#PartialFunc2OSO|)))
 :qid |unknown.0:0|
 :skolemid |991|
 :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@86| |#$T1@@70| |#$R@@99|))
)))
(assert (forall ((arg0@@231 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_0 arg0@@231)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2OSO_0|
 :pattern ( (Tclass._System.___hPartialFunc2OSO_0 arg0@@231))
)))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_0 (Tclass._System.___hPartialFunc2OSO |#$T0@@87| |#$T1@@71| |#$R@@100|)) |#$T0@@87|))
 :qid |unknown.0:0|
 :skolemid |992|
 :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@87| |#$T1@@71| |#$R@@100|))
)))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_1 arg0@@232)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2OSO_1|
 :pattern ( (Tclass._System.___hPartialFunc2OSO_1 arg0@@232))
)))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$R@@101| T@U) ) (!  (=> (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$R@@101|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_1 (Tclass._System.___hPartialFunc2OSO |#$T0@@88| |#$T1@@72| |#$R@@101|)) |#$T1@@72|))
 :qid |unknown.0:0|
 :skolemid |993|
 :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@88| |#$T1@@72| |#$R@@101|))
)))
(assert (forall ((arg0@@233 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_2 arg0@@233)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2OSO_2|
 :pattern ( (Tclass._System.___hPartialFunc2OSO_2 arg0@@233))
)))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$R@@102|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_2 (Tclass._System.___hPartialFunc2OSO |#$T0@@89| |#$T1@@73| |#$R@@102|)) |#$R@@102|))
 :qid |unknown.0:0|
 :skolemid |994|
 :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@89| |#$T1@@73| |#$R@@102|))
)))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$R@@103| T@U) (bx@@69 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$R@@103|) TyType)) (= (type bx@@69) BoxType)) ($IsBox bx@@69 (Tclass._System.___hPartialFunc2OSO |#$T0@@90| |#$T1@@74| |#$R@@103|))) (and (= ($Box ($Unbox HandleTypeType bx@@69)) bx@@69) ($Is ($Unbox HandleTypeType bx@@69) (Tclass._System.___hPartialFunc2OSO |#$T0@@90| |#$T1@@74| |#$R@@103|))))
 :qid |unknown.0:0|
 :skolemid |995|
 :pattern ( ($IsBox bx@@69 (Tclass._System.___hPartialFunc2OSO |#$T0@@90| |#$T1@@74| |#$R@@103|)))
)))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$R@@104| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$R@@104|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (= ($Is |f#0@@19| (Tclass._System.___hPartialFunc2OSO |#$T0@@91| |#$T1@@75| |#$R@@104|))  (and ($Is |f#0@@19| (Tclass._System.___hFunc2OSO |#$T0@@91| |#$T1@@75| |#$R@@104|)) (forall ((|x0#0@@7| T@U) (|x1#0@@5| T@U) ) (!  (=> (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@5|) BoxType)) (and ($IsBox |x0#0@@7| |#$T0@@91|) ($IsBox |x1#0@@5| |#$T1@@75|))) (|Set#Equal| (Reads2 |#$T0@@91| |#$T1@@75| |#$R@@104| $OneHeap |f#0@@19| |x0#0@@7| |x1#0@@5|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |996|
 :no-pattern (type |x0#0@@7|)
 :no-pattern (type |x1#0@@5|)
 :no-pattern (U_2_int |x0#0@@7|)
 :no-pattern (U_2_bool |x0#0@@7|)
 :no-pattern (U_2_int |x1#0@@5|)
 :no-pattern (U_2_bool |x1#0@@5|)
)))))
 :qid |unknown.0:0|
 :skolemid |997|
 :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc2OSO |#$T0@@91| |#$T1@@75| |#$R@@104|)))
)))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$R@@105| T@U) (|f#0@@20| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$R@@105|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc2OSO |#$T0@@92| |#$T1@@76| |#$R@@105|) $h@@21) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc2OSO |#$T0@@92| |#$T1@@76| |#$R@@105|) $h@@21)))
 :qid |unknown.0:0|
 :skolemid |998|
 :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc2OSO |#$T0@@92| |#$T1@@76| |#$R@@105|) $h@@21))
)))
(assert (forall ((arg0@@234 T@U) (arg1@@111 T@U) (arg2@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO arg0@@234 arg1@@111 arg2@@63)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2OSO|
 :pattern ( (Tclass._System.___hTotalFunc2OSO arg0@@234 arg1@@111 arg2@@63))
)))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$R@@106|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2OSO |#$T0@@93| |#$T1@@77| |#$R@@106|)) Tagclass._System.___hTotalFunc2OSO) (= (TagFamily (Tclass._System.___hTotalFunc2OSO |#$T0@@93| |#$T1@@77| |#$R@@106|)) |tytagFamily$_#TotalFunc2OSO|)))
 :qid |unknown.0:0|
 :skolemid |999|
 :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@93| |#$T1@@77| |#$R@@106|))
)))
(assert (forall ((arg0@@235 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_0 arg0@@235)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2OSO_0|
 :pattern ( (Tclass._System.___hTotalFunc2OSO_0 arg0@@235))
)))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_0 (Tclass._System.___hTotalFunc2OSO |#$T0@@94| |#$T1@@78| |#$R@@107|)) |#$T0@@94|))
 :qid |unknown.0:0|
 :skolemid |1000|
 :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@94| |#$T1@@78| |#$R@@107|))
)))
(assert (forall ((arg0@@236 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_1 arg0@@236)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2OSO_1|
 :pattern ( (Tclass._System.___hTotalFunc2OSO_1 arg0@@236))
)))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$R@@108| T@U) ) (!  (=> (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$R@@108|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_1 (Tclass._System.___hTotalFunc2OSO |#$T0@@95| |#$T1@@79| |#$R@@108|)) |#$T1@@79|))
 :qid |unknown.0:0|
 :skolemid |1001|
 :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@95| |#$T1@@79| |#$R@@108|))
)))
(assert (forall ((arg0@@237 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_2 arg0@@237)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2OSO_2|
 :pattern ( (Tclass._System.___hTotalFunc2OSO_2 arg0@@237))
)))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$R@@109| T@U) ) (!  (=> (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$R@@109|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_2 (Tclass._System.___hTotalFunc2OSO |#$T0@@96| |#$T1@@80| |#$R@@109|)) |#$R@@109|))
 :qid |unknown.0:0|
 :skolemid |1002|
 :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@96| |#$T1@@80| |#$R@@109|))
)))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$R@@110| T@U) (bx@@70 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$R@@110|) TyType)) (= (type bx@@70) BoxType)) ($IsBox bx@@70 (Tclass._System.___hTotalFunc2OSO |#$T0@@97| |#$T1@@81| |#$R@@110|))) (and (= ($Box ($Unbox HandleTypeType bx@@70)) bx@@70) ($Is ($Unbox HandleTypeType bx@@70) (Tclass._System.___hTotalFunc2OSO |#$T0@@97| |#$T1@@81| |#$R@@110|))))
 :qid |unknown.0:0|
 :skolemid |1003|
 :pattern ( ($IsBox bx@@70 (Tclass._System.___hTotalFunc2OSO |#$T0@@97| |#$T1@@81| |#$R@@110|)))
)))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$R@@111| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$R@@111|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (= ($Is |f#0@@21| (Tclass._System.___hTotalFunc2OSO |#$T0@@98| |#$T1@@82| |#$R@@111|))  (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc2OSO |#$T0@@98| |#$T1@@82| |#$R@@111|)) (forall ((|x0#0@@8| T@U) (|x1#0@@6| T@U) ) (!  (=> (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@6|) BoxType)) (and ($IsBox |x0#0@@8| |#$T0@@98|) ($IsBox |x1#0@@6| |#$T1@@82|))) (Requires2 |#$T0@@98| |#$T1@@82| |#$R@@111| $OneHeap |f#0@@21| |x0#0@@8| |x1#0@@6|))
 :qid |unknown.0:0|
 :skolemid |1004|
 :no-pattern (type |x0#0@@8|)
 :no-pattern (type |x1#0@@6|)
 :no-pattern (U_2_int |x0#0@@8|)
 :no-pattern (U_2_bool |x0#0@@8|)
 :no-pattern (U_2_int |x1#0@@6|)
 :no-pattern (U_2_bool |x1#0@@6|)
)))))
 :qid |unknown.0:0|
 :skolemid |1005|
 :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc2OSO |#$T0@@98| |#$T1@@82| |#$R@@111|)))
)))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$R@@112| T@U) (|f#0@@22| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$R@@112|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc2OSO |#$T0@@99| |#$T1@@83| |#$R@@112|) $h@@22) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc2OSO |#$T0@@99| |#$T1@@83| |#$R@@112|) $h@@22)))
 :qid |unknown.0:0|
 :skolemid |1006|
 :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc2OSO |#$T0@@99| |#$T1@@83| |#$R@@112|) $h@@22))
)))
(assert (forall ((arg0@@238 T@U) (arg1@@112 T@U) (arg2@@64 T@U) (arg3@@39 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO arg0@@238 arg1@@112 arg2@@64 arg3@@39)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOO|
 :pattern ( (Tclass._System.___hFunc3LLOO arg0@@238 arg1@@112 arg2@@64 arg3@@39))
)))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@46| T@U) (|#$R@@113| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$R@@113|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOO |#$T0@@100| |#$T1@@84| |#$T2@@46| |#$R@@113|)) Tagclass._System.___hFunc3LLOO) (= (TagFamily (Tclass._System.___hFunc3LLOO |#$T0@@100| |#$T1@@84| |#$T2@@46| |#$R@@113|)) |tytagFamily$_#Func3LLOO|)))
 :qid |unknown.0:0|
 :skolemid |1007|
 :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@100| |#$T1@@84| |#$T2@@46| |#$R@@113|))
)))
(assert (forall ((arg0@@239 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_0 arg0@@239)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOO_0|
 :pattern ( (Tclass._System.___hFunc3LLOO_0 arg0@@239))
)))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@47| T@U) (|#$R@@114| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$R@@114|) TyType)) (= (Tclass._System.___hFunc3LLOO_0 (Tclass._System.___hFunc3LLOO |#$T0@@101| |#$T1@@85| |#$T2@@47| |#$R@@114|)) |#$T0@@101|))
 :qid |unknown.0:0|
 :skolemid |1008|
 :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@101| |#$T1@@85| |#$T2@@47| |#$R@@114|))
)))
(assert (forall ((arg0@@240 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_1 arg0@@240)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOO_1|
 :pattern ( (Tclass._System.___hFunc3LLOO_1 arg0@@240))
)))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@48| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hFunc3LLOO_1 (Tclass._System.___hFunc3LLOO |#$T0@@102| |#$T1@@86| |#$T2@@48| |#$R@@115|)) |#$T1@@86|))
 :qid |unknown.0:0|
 :skolemid |1009|
 :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@102| |#$T1@@86| |#$T2@@48| |#$R@@115|))
)))
(assert (forall ((arg0@@241 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_2 arg0@@241)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOO_2|
 :pattern ( (Tclass._System.___hFunc3LLOO_2 arg0@@241))
)))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@49| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hFunc3LLOO_2 (Tclass._System.___hFunc3LLOO |#$T0@@103| |#$T1@@87| |#$T2@@49| |#$R@@116|)) |#$T2@@49|))
 :qid |unknown.0:0|
 :skolemid |1010|
 :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@103| |#$T1@@87| |#$T2@@49| |#$R@@116|))
)))
(assert (forall ((arg0@@242 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_3 arg0@@242)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOO_3|
 :pattern ( (Tclass._System.___hFunc3LLOO_3 arg0@@242))
)))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@50| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hFunc3LLOO_3 (Tclass._System.___hFunc3LLOO |#$T0@@104| |#$T1@@88| |#$T2@@50| |#$R@@117|)) |#$R@@117|))
 :qid |unknown.0:0|
 :skolemid |1011|
 :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@104| |#$T1@@88| |#$T2@@50| |#$R@@117|))
)))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@51| T@U) (|#$R@@118| T@U) (bx@@71 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$R@@118|) TyType)) (= (type bx@@71) BoxType)) ($IsBox bx@@71 (Tclass._System.___hFunc3LLOO |#$T0@@105| |#$T1@@89| |#$T2@@51| |#$R@@118|))) (and (= ($Box ($Unbox HandleTypeType bx@@71)) bx@@71) ($Is ($Unbox HandleTypeType bx@@71) (Tclass._System.___hFunc3LLOO |#$T0@@105| |#$T1@@89| |#$T2@@51| |#$R@@118|))))
 :qid |unknown.0:0|
 :skolemid |1012|
 :pattern ( ($IsBox bx@@71 (Tclass._System.___hFunc3LLOO |#$T0@@105| |#$T1@@89| |#$T2@@51| |#$R@@118|)))
)))
(assert (forall ((arg0@@243 T@U) (arg1@@113 T@U) (arg2@@65 T@U) (arg3@@40 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO arg0@@243 arg1@@113 arg2@@65 arg3@@40)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOO|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO arg0@@243 arg1@@113 arg2@@65 arg3@@40))
)))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@52| T@U) (|#$R@@119| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$R@@119|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOO |#$T0@@106| |#$T1@@90| |#$T2@@52| |#$R@@119|)) Tagclass._System.___hPartialFunc3LLOO) (= (TagFamily (Tclass._System.___hPartialFunc3LLOO |#$T0@@106| |#$T1@@90| |#$T2@@52| |#$R@@119|)) |tytagFamily$_#PartialFunc3LLOO|)))
 :qid |unknown.0:0|
 :skolemid |1013|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@106| |#$T1@@90| |#$T2@@52| |#$R@@119|))
)))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_0 arg0@@244)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOO_0|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO_0 arg0@@244))
)))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@53| T@U) (|#$R@@120| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$R@@120|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_0 (Tclass._System.___hPartialFunc3LLOO |#$T0@@107| |#$T1@@91| |#$T2@@53| |#$R@@120|)) |#$T0@@107|))
 :qid |unknown.0:0|
 :skolemid |1014|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@107| |#$T1@@91| |#$T2@@53| |#$R@@120|))
)))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_1 arg0@@245)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOO_1|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO_1 arg0@@245))
)))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@54| T@U) (|#$R@@121| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$R@@121|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_1 (Tclass._System.___hPartialFunc3LLOO |#$T0@@108| |#$T1@@92| |#$T2@@54| |#$R@@121|)) |#$T1@@92|))
 :qid |unknown.0:0|
 :skolemid |1015|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@108| |#$T1@@92| |#$T2@@54| |#$R@@121|))
)))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_2 arg0@@246)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOO_2|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO_2 arg0@@246))
)))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$T2@@55| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$R@@122|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_2 (Tclass._System.___hPartialFunc3LLOO |#$T0@@109| |#$T1@@93| |#$T2@@55| |#$R@@122|)) |#$T2@@55|))
 :qid |unknown.0:0|
 :skolemid |1016|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@109| |#$T1@@93| |#$T2@@55| |#$R@@122|))
)))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_3 arg0@@247)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOO_3|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO_3 arg0@@247))
)))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$T2@@56| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_3 (Tclass._System.___hPartialFunc3LLOO |#$T0@@110| |#$T1@@94| |#$T2@@56| |#$R@@123|)) |#$R@@123|))
 :qid |unknown.0:0|
 :skolemid |1017|
 :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@110| |#$T1@@94| |#$T2@@56| |#$R@@123|))
)))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$T2@@57| T@U) (|#$R@@124| T@U) (bx@@72 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$R@@124|) TyType)) (= (type bx@@72) BoxType)) ($IsBox bx@@72 (Tclass._System.___hPartialFunc3LLOO |#$T0@@111| |#$T1@@95| |#$T2@@57| |#$R@@124|))) (and (= ($Box ($Unbox HandleTypeType bx@@72)) bx@@72) ($Is ($Unbox HandleTypeType bx@@72) (Tclass._System.___hPartialFunc3LLOO |#$T0@@111| |#$T1@@95| |#$T2@@57| |#$R@@124|))))
 :qid |unknown.0:0|
 :skolemid |1018|
 :pattern ( ($IsBox bx@@72 (Tclass._System.___hPartialFunc3LLOO |#$T0@@111| |#$T1@@95| |#$T2@@57| |#$R@@124|)))
)))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$T2@@58| T@U) (|#$R@@125| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$R@@125|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (= ($Is |f#0@@23| (Tclass._System.___hPartialFunc3LLOO |#$T0@@112| |#$T1@@96| |#$T2@@58| |#$R@@125|))  (and ($Is |f#0@@23| (Tclass._System.___hFunc3LLOO |#$T0@@112| |#$T1@@96| |#$T2@@58| |#$R@@125|)) (forall ((|x0#0@@9| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@112|) ($IsBox |x1#0@@7| |#$T1@@96|)) ($IsBox |x2#0@@3| |#$T2@@58|))) (|Set#Equal| (Reads3 |#$T0@@112| |#$T1@@96| |#$T2@@58| |#$R@@125| $OneHeap |f#0@@23| |x0#0@@9| |x1#0@@7| |x2#0@@3|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1019|
 :no-pattern (type |x0#0@@9|)
 :no-pattern (type |x1#0@@7|)
 :no-pattern (type |x2#0@@3|)
 :no-pattern (U_2_int |x0#0@@9|)
 :no-pattern (U_2_bool |x0#0@@9|)
 :no-pattern (U_2_int |x1#0@@7|)
 :no-pattern (U_2_bool |x1#0@@7|)
 :no-pattern (U_2_int |x2#0@@3|)
 :no-pattern (U_2_bool |x2#0@@3|)
)))))
 :qid |unknown.0:0|
 :skolemid |1020|
 :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc3LLOO |#$T0@@112| |#$T1@@96| |#$T2@@58| |#$R@@125|)))
)))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$T2@@59| T@U) (|#$R@@126| T@U) (|f#0@@24| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$R@@126|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc3LLOO |#$T0@@113| |#$T1@@97| |#$T2@@59| |#$R@@126|) $h@@23) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc3LLOO |#$T0@@113| |#$T1@@97| |#$T2@@59| |#$R@@126|) $h@@23)))
 :qid |unknown.0:0|
 :skolemid |1021|
 :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc3LLOO |#$T0@@113| |#$T1@@97| |#$T2@@59| |#$R@@126|) $h@@23))
)))
(assert (forall ((arg0@@248 T@U) (arg1@@114 T@U) (arg2@@66 T@U) (arg3@@41 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO arg0@@248 arg1@@114 arg2@@66 arg3@@41)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOO|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO arg0@@248 arg1@@114 arg2@@66 arg3@@41))
)))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$T2@@60| T@U) (|#$R@@127| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$R@@127|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOO |#$T0@@114| |#$T1@@98| |#$T2@@60| |#$R@@127|)) Tagclass._System.___hTotalFunc3LLOO) (= (TagFamily (Tclass._System.___hTotalFunc3LLOO |#$T0@@114| |#$T1@@98| |#$T2@@60| |#$R@@127|)) |tytagFamily$_#TotalFunc3LLOO|)))
 :qid |unknown.0:0|
 :skolemid |1022|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@114| |#$T1@@98| |#$T2@@60| |#$R@@127|))
)))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_0 arg0@@249)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOO_0|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO_0 arg0@@249))
)))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$T2@@61| T@U) (|#$R@@128| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$R@@128|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_0 (Tclass._System.___hTotalFunc3LLOO |#$T0@@115| |#$T1@@99| |#$T2@@61| |#$R@@128|)) |#$T0@@115|))
 :qid |unknown.0:0|
 :skolemid |1023|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@115| |#$T1@@99| |#$T2@@61| |#$R@@128|))
)))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_1 arg0@@250)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOO_1|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO_1 arg0@@250))
)))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$T2@@62| T@U) (|#$R@@129| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$R@@129|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_1 (Tclass._System.___hTotalFunc3LLOO |#$T0@@116| |#$T1@@100| |#$T2@@62| |#$R@@129|)) |#$T1@@100|))
 :qid |unknown.0:0|
 :skolemid |1024|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@116| |#$T1@@100| |#$T2@@62| |#$R@@129|))
)))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_2 arg0@@251)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOO_2|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO_2 arg0@@251))
)))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$T2@@63| T@U) (|#$R@@130| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$R@@130|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_2 (Tclass._System.___hTotalFunc3LLOO |#$T0@@117| |#$T1@@101| |#$T2@@63| |#$R@@130|)) |#$T2@@63|))
 :qid |unknown.0:0|
 :skolemid |1025|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@117| |#$T1@@101| |#$T2@@63| |#$R@@130|))
)))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_3 arg0@@252)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOO_3|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO_3 arg0@@252))
)))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@64| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$R@@131|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_3 (Tclass._System.___hTotalFunc3LLOO |#$T0@@118| |#$T1@@102| |#$T2@@64| |#$R@@131|)) |#$R@@131|))
 :qid |unknown.0:0|
 :skolemid |1026|
 :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@118| |#$T1@@102| |#$T2@@64| |#$R@@131|))
)))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@65| T@U) (|#$R@@132| T@U) (bx@@73 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$R@@132|) TyType)) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass._System.___hTotalFunc3LLOO |#$T0@@119| |#$T1@@103| |#$T2@@65| |#$R@@132|))) (and (= ($Box ($Unbox HandleTypeType bx@@73)) bx@@73) ($Is ($Unbox HandleTypeType bx@@73) (Tclass._System.___hTotalFunc3LLOO |#$T0@@119| |#$T1@@103| |#$T2@@65| |#$R@@132|))))
 :qid |unknown.0:0|
 :skolemid |1027|
 :pattern ( ($IsBox bx@@73 (Tclass._System.___hTotalFunc3LLOO |#$T0@@119| |#$T1@@103| |#$T2@@65| |#$R@@132|)))
)))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@66| T@U) (|#$R@@133| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$R@@133|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (= ($Is |f#0@@25| (Tclass._System.___hTotalFunc3LLOO |#$T0@@120| |#$T1@@104| |#$T2@@66| |#$R@@133|))  (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc3LLOO |#$T0@@120| |#$T1@@104| |#$T2@@66| |#$R@@133|)) (forall ((|x0#0@@10| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@120|) ($IsBox |x1#0@@8| |#$T1@@104|)) ($IsBox |x2#0@@4| |#$T2@@66|))) (Requires3 |#$T0@@120| |#$T1@@104| |#$T2@@66| |#$R@@133| $OneHeap |f#0@@25| |x0#0@@10| |x1#0@@8| |x2#0@@4|))
 :qid |unknown.0:0|
 :skolemid |1028|
 :no-pattern (type |x0#0@@10|)
 :no-pattern (type |x1#0@@8|)
 :no-pattern (type |x2#0@@4|)
 :no-pattern (U_2_int |x0#0@@10|)
 :no-pattern (U_2_bool |x0#0@@10|)
 :no-pattern (U_2_int |x1#0@@8|)
 :no-pattern (U_2_bool |x1#0@@8|)
 :no-pattern (U_2_int |x2#0@@4|)
 :no-pattern (U_2_bool |x2#0@@4|)
)))))
 :qid |unknown.0:0|
 :skolemid |1029|
 :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc3LLOO |#$T0@@120| |#$T1@@104| |#$T2@@66| |#$R@@133|)))
)))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@67| T@U) (|#$R@@134| T@U) (|f#0@@26| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$R@@134|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc3LLOO |#$T0@@121| |#$T1@@105| |#$T2@@67| |#$R@@134|) $h@@24) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc3LLOO |#$T0@@121| |#$T1@@105| |#$T2@@67| |#$R@@134|) $h@@24)))
 :qid |unknown.0:0|
 :skolemid |1030|
 :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc3LLOO |#$T0@@121| |#$T1@@105| |#$T2@@67| |#$R@@134|) $h@@24))
)))
(assert (forall ((arg0@@253 T@U) (arg1@@115 T@U) ) (! (= (type (Tclass._System.___hFunc1OS arg0@@253 arg1@@115)) TyType)
 :qid |funType:Tclass._System.___hFunc1OS|
 :pattern ( (Tclass._System.___hFunc1OS arg0@@253 arg1@@115))
)))
(assert (forall ((|#$T0@@122| T@U) (|#$R@@135| T@U) ) (!  (=> (and (= (type |#$T0@@122|) TyType) (= (type |#$R@@135|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OS |#$T0@@122| |#$R@@135|)) Tagclass._System.___hFunc1OS) (= (TagFamily (Tclass._System.___hFunc1OS |#$T0@@122| |#$R@@135|)) |tytagFamily$_#Func1OS|)))
 :qid |unknown.0:0|
 :skolemid |1031|
 :pattern ( (Tclass._System.___hFunc1OS |#$T0@@122| |#$R@@135|))
)))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_0 arg0@@254)) TyType)
 :qid |funType:Tclass._System.___hFunc1OS_0|
 :pattern ( (Tclass._System.___hFunc1OS_0 arg0@@254))
)))
(assert (forall ((|#$T0@@123| T@U) (|#$R@@136| T@U) ) (!  (=> (and (= (type |#$T0@@123|) TyType) (= (type |#$R@@136|) TyType)) (= (Tclass._System.___hFunc1OS_0 (Tclass._System.___hFunc1OS |#$T0@@123| |#$R@@136|)) |#$T0@@123|))
 :qid |unknown.0:0|
 :skolemid |1032|
 :pattern ( (Tclass._System.___hFunc1OS |#$T0@@123| |#$R@@136|))
)))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_1 arg0@@255)) TyType)
 :qid |funType:Tclass._System.___hFunc1OS_1|
 :pattern ( (Tclass._System.___hFunc1OS_1 arg0@@255))
)))
(assert (forall ((|#$T0@@124| T@U) (|#$R@@137| T@U) ) (!  (=> (and (= (type |#$T0@@124|) TyType) (= (type |#$R@@137|) TyType)) (= (Tclass._System.___hFunc1OS_1 (Tclass._System.___hFunc1OS |#$T0@@124| |#$R@@137|)) |#$R@@137|))
 :qid |unknown.0:0|
 :skolemid |1033|
 :pattern ( (Tclass._System.___hFunc1OS |#$T0@@124| |#$R@@137|))
)))
(assert (forall ((|#$T0@@125| T@U) (|#$R@@138| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$R@@138|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hFunc1OS |#$T0@@125| |#$R@@138|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hFunc1OS |#$T0@@125| |#$R@@138|))))
 :qid |unknown.0:0|
 :skolemid |1034|
 :pattern ( ($IsBox bx@@74 (Tclass._System.___hFunc1OS |#$T0@@125| |#$R@@138|)))
)))
(assert (forall ((arg0@@256 T@U) (arg1@@116 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS arg0@@256 arg1@@116)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1OS|
 :pattern ( (Tclass._System.___hPartialFunc1OS arg0@@256 arg1@@116))
)))
(assert (forall ((|#$T0@@126| T@U) (|#$R@@139| T@U) ) (!  (=> (and (= (type |#$T0@@126|) TyType) (= (type |#$R@@139|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OS |#$T0@@126| |#$R@@139|)) Tagclass._System.___hPartialFunc1OS) (= (TagFamily (Tclass._System.___hPartialFunc1OS |#$T0@@126| |#$R@@139|)) |tytagFamily$_#PartialFunc1OS|)))
 :qid |unknown.0:0|
 :skolemid |1035|
 :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@126| |#$R@@139|))
)))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_0 arg0@@257)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1OS_0|
 :pattern ( (Tclass._System.___hPartialFunc1OS_0 arg0@@257))
)))
(assert (forall ((|#$T0@@127| T@U) (|#$R@@140| T@U) ) (!  (=> (and (= (type |#$T0@@127|) TyType) (= (type |#$R@@140|) TyType)) (= (Tclass._System.___hPartialFunc1OS_0 (Tclass._System.___hPartialFunc1OS |#$T0@@127| |#$R@@140|)) |#$T0@@127|))
 :qid |unknown.0:0|
 :skolemid |1036|
 :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@127| |#$R@@140|))
)))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_1 arg0@@258)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1OS_1|
 :pattern ( (Tclass._System.___hPartialFunc1OS_1 arg0@@258))
)))
(assert (forall ((|#$T0@@128| T@U) (|#$R@@141| T@U) ) (!  (=> (and (= (type |#$T0@@128|) TyType) (= (type |#$R@@141|) TyType)) (= (Tclass._System.___hPartialFunc1OS_1 (Tclass._System.___hPartialFunc1OS |#$T0@@128| |#$R@@141|)) |#$R@@141|))
 :qid |unknown.0:0|
 :skolemid |1037|
 :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@128| |#$R@@141|))
)))
(assert (forall ((|#$T0@@129| T@U) (|#$R@@142| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$R@@142|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc1OS |#$T0@@129| |#$R@@142|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc1OS |#$T0@@129| |#$R@@142|))))
 :qid |unknown.0:0|
 :skolemid |1038|
 :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc1OS |#$T0@@129| |#$R@@142|)))
)))
(assert (forall ((|#$T0@@130| T@U) (|#$R@@143| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@130|) TyType) (= (type |#$R@@143|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (= ($Is |f#0@@27| (Tclass._System.___hPartialFunc1OS |#$T0@@130| |#$R@@143|))  (and ($Is |f#0@@27| (Tclass._System.___hFunc1OS |#$T0@@130| |#$R@@143|)) (forall ((|x0#0@@11| T@U) ) (!  (=> (and (= (type |x0#0@@11|) BoxType) ($IsBox |x0#0@@11| |#$T0@@130|)) (|Set#Equal| (Reads1 |#$T0@@130| |#$R@@143| $OneHeap |f#0@@27| |x0#0@@11|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1039|
 :no-pattern (type |x0#0@@11|)
 :no-pattern (U_2_int |x0#0@@11|)
 :no-pattern (U_2_bool |x0#0@@11|)
)))))
 :qid |unknown.0:0|
 :skolemid |1040|
 :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc1OS |#$T0@@130| |#$R@@143|)))
)))
(assert (forall ((|#$T0@@131| T@U) (|#$R@@144| T@U) (|f#0@@28| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$R@@144|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc1OS |#$T0@@131| |#$R@@144|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc1OS |#$T0@@131| |#$R@@144|) $h@@25)))
 :qid |unknown.0:0|
 :skolemid |1041|
 :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc1OS |#$T0@@131| |#$R@@144|) $h@@25))
)))
(assert (forall ((arg0@@259 T@U) (arg1@@117 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS arg0@@259 arg1@@117)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1OS|
 :pattern ( (Tclass._System.___hTotalFunc1OS arg0@@259 arg1@@117))
)))
(assert (forall ((|#$T0@@132| T@U) (|#$R@@145| T@U) ) (!  (=> (and (= (type |#$T0@@132|) TyType) (= (type |#$R@@145|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OS |#$T0@@132| |#$R@@145|)) Tagclass._System.___hTotalFunc1OS) (= (TagFamily (Tclass._System.___hTotalFunc1OS |#$T0@@132| |#$R@@145|)) |tytagFamily$_#TotalFunc1OS|)))
 :qid |unknown.0:0|
 :skolemid |1042|
 :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@132| |#$R@@145|))
)))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_0 arg0@@260)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1OS_0|
 :pattern ( (Tclass._System.___hTotalFunc1OS_0 arg0@@260))
)))
(assert (forall ((|#$T0@@133| T@U) (|#$R@@146| T@U) ) (!  (=> (and (= (type |#$T0@@133|) TyType) (= (type |#$R@@146|) TyType)) (= (Tclass._System.___hTotalFunc1OS_0 (Tclass._System.___hTotalFunc1OS |#$T0@@133| |#$R@@146|)) |#$T0@@133|))
 :qid |unknown.0:0|
 :skolemid |1043|
 :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@133| |#$R@@146|))
)))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_1 arg0@@261)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1OS_1|
 :pattern ( (Tclass._System.___hTotalFunc1OS_1 arg0@@261))
)))
(assert (forall ((|#$T0@@134| T@U) (|#$R@@147| T@U) ) (!  (=> (and (= (type |#$T0@@134|) TyType) (= (type |#$R@@147|) TyType)) (= (Tclass._System.___hTotalFunc1OS_1 (Tclass._System.___hTotalFunc1OS |#$T0@@134| |#$R@@147|)) |#$R@@147|))
 :qid |unknown.0:0|
 :skolemid |1044|
 :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@134| |#$R@@147|))
)))
(assert (forall ((|#$T0@@135| T@U) (|#$R@@148| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$R@@148|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc1OS |#$T0@@135| |#$R@@148|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc1OS |#$T0@@135| |#$R@@148|))))
 :qid |unknown.0:0|
 :skolemid |1045|
 :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc1OS |#$T0@@135| |#$R@@148|)))
)))
(assert (forall ((|#$T0@@136| T@U) (|#$R@@149| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@136|) TyType) (= (type |#$R@@149|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (= ($Is |f#0@@29| (Tclass._System.___hTotalFunc1OS |#$T0@@136| |#$R@@149|))  (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc1OS |#$T0@@136| |#$R@@149|)) (forall ((|x0#0@@12| T@U) ) (!  (=> (and (= (type |x0#0@@12|) BoxType) ($IsBox |x0#0@@12| |#$T0@@136|)) (Requires1 |#$T0@@136| |#$R@@149| $OneHeap |f#0@@29| |x0#0@@12|))
 :qid |unknown.0:0|
 :skolemid |1046|
 :no-pattern (type |x0#0@@12|)
 :no-pattern (U_2_int |x0#0@@12|)
 :no-pattern (U_2_bool |x0#0@@12|)
)))))
 :qid |unknown.0:0|
 :skolemid |1047|
 :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc1OS |#$T0@@136| |#$R@@149|)))
)))
(assert (forall ((|#$T0@@137| T@U) (|#$R@@150| T@U) (|f#0@@30| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$R@@150|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc1OS |#$T0@@137| |#$R@@150|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc1OS |#$T0@@137| |#$R@@150|) $h@@26)))
 :qid |unknown.0:0|
 :skolemid |1048|
 :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc1OS |#$T0@@137| |#$R@@150|) $h@@26))
)))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (Tclass._System.___hFunc0L arg0@@262)) TyType)
 :qid |funType:Tclass._System.___hFunc0L|
 :pattern ( (Tclass._System.___hFunc0L arg0@@262))
)))
(assert (forall ((|#$R@@151| T@U) ) (!  (=> (= (type |#$R@@151|) TyType) (and (= (Tag (Tclass._System.___hFunc0L |#$R@@151|)) Tagclass._System.___hFunc0L) (= (TagFamily (Tclass._System.___hFunc0L |#$R@@151|)) |tytagFamily$_#Func0L|)))
 :qid |unknown.0:0|
 :skolemid |1049|
 :pattern ( (Tclass._System.___hFunc0L |#$R@@151|))
)))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._System.___hFunc0L_0 arg0@@263)) TyType)
 :qid |funType:Tclass._System.___hFunc0L_0|
 :pattern ( (Tclass._System.___hFunc0L_0 arg0@@263))
)))
(assert (forall ((|#$R@@152| T@U) ) (!  (=> (= (type |#$R@@152|) TyType) (= (Tclass._System.___hFunc0L_0 (Tclass._System.___hFunc0L |#$R@@152|)) |#$R@@152|))
 :qid |unknown.0:0|
 :skolemid |1050|
 :pattern ( (Tclass._System.___hFunc0L |#$R@@152|))
)))
(assert (forall ((|#$R@@153| T@U) (bx@@77 T@U) ) (!  (=> (and (and (= (type |#$R@@153|) TyType) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass._System.___hFunc0L |#$R@@153|))) (and (= ($Box ($Unbox HandleTypeType bx@@77)) bx@@77) ($Is ($Unbox HandleTypeType bx@@77) (Tclass._System.___hFunc0L |#$R@@153|))))
 :qid |unknown.0:0|
 :skolemid |1051|
 :pattern ( ($IsBox bx@@77 (Tclass._System.___hFunc0L |#$R@@153|)))
)))
(assert (forall ((arg0@@264 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L arg0@@264)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc0L|
 :pattern ( (Tclass._System.___hPartialFunc0L arg0@@264))
)))
(assert (forall ((|#$R@@154| T@U) ) (!  (=> (= (type |#$R@@154|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0L |#$R@@154|)) Tagclass._System.___hPartialFunc0L) (= (TagFamily (Tclass._System.___hPartialFunc0L |#$R@@154|)) |tytagFamily$_#PartialFunc0L|)))
 :qid |unknown.0:0|
 :skolemid |1052|
 :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@154|))
)))
(assert (forall ((arg0@@265 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L_0 arg0@@265)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc0L_0|
 :pattern ( (Tclass._System.___hPartialFunc0L_0 arg0@@265))
)))
(assert (forall ((|#$R@@155| T@U) ) (!  (=> (= (type |#$R@@155|) TyType) (= (Tclass._System.___hPartialFunc0L_0 (Tclass._System.___hPartialFunc0L |#$R@@155|)) |#$R@@155|))
 :qid |unknown.0:0|
 :skolemid |1053|
 :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@155|))
)))
(assert (forall ((|#$R@@156| T@U) (bx@@78 T@U) ) (!  (=> (and (and (= (type |#$R@@156|) TyType) (= (type bx@@78) BoxType)) ($IsBox bx@@78 (Tclass._System.___hPartialFunc0L |#$R@@156|))) (and (= ($Box ($Unbox HandleTypeType bx@@78)) bx@@78) ($Is ($Unbox HandleTypeType bx@@78) (Tclass._System.___hPartialFunc0L |#$R@@156|))))
 :qid |unknown.0:0|
 :skolemid |1054|
 :pattern ( ($IsBox bx@@78 (Tclass._System.___hPartialFunc0L |#$R@@156|)))
)))
(assert (forall ((|#$R@@157| T@U) (|f#0@@31| T@U) ) (!  (=> (and (= (type |#$R@@157|) TyType) (= (type |f#0@@31|) HandleTypeType)) (= ($Is |f#0@@31| (Tclass._System.___hPartialFunc0L |#$R@@157|))  (and ($Is |f#0@@31| (Tclass._System.___hFunc0L |#$R@@157|)) (|Set#Equal| (Reads0 |#$R@@157| $OneHeap |f#0@@31|) (|Set#Empty| BoxType)))))
 :qid |unknown.0:0|
 :skolemid |1055|
 :pattern ( ($Is |f#0@@31| (Tclass._System.___hPartialFunc0L |#$R@@157|)))
)))
(assert (forall ((|#$R@@158| T@U) (|f#0@@32| T@U) ($h@@27 T@U) ) (!  (=> (and (and (= (type |#$R@@158|) TyType) (= (type |f#0@@32|) HandleTypeType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc0L |#$R@@158|) $h@@27) ($IsAlloc |f#0@@32| (Tclass._System.___hFunc0L |#$R@@158|) $h@@27)))
 :qid |unknown.0:0|
 :skolemid |1056|
 :pattern ( ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc0L |#$R@@158|) $h@@27))
)))
(assert (forall ((arg0@@266 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L arg0@@266)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc0L|
 :pattern ( (Tclass._System.___hTotalFunc0L arg0@@266))
)))
(assert (forall ((|#$R@@159| T@U) ) (!  (=> (= (type |#$R@@159|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0L |#$R@@159|)) Tagclass._System.___hTotalFunc0L) (= (TagFamily (Tclass._System.___hTotalFunc0L |#$R@@159|)) |tytagFamily$_#TotalFunc0L|)))
 :qid |unknown.0:0|
 :skolemid |1057|
 :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@159|))
)))
(assert (forall ((arg0@@267 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L_0 arg0@@267)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc0L_0|
 :pattern ( (Tclass._System.___hTotalFunc0L_0 arg0@@267))
)))
(assert (forall ((|#$R@@160| T@U) ) (!  (=> (= (type |#$R@@160|) TyType) (= (Tclass._System.___hTotalFunc0L_0 (Tclass._System.___hTotalFunc0L |#$R@@160|)) |#$R@@160|))
 :qid |unknown.0:0|
 :skolemid |1058|
 :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@160|))
)))
(assert (forall ((|#$R@@161| T@U) (bx@@79 T@U) ) (!  (=> (and (and (= (type |#$R@@161|) TyType) (= (type bx@@79) BoxType)) ($IsBox bx@@79 (Tclass._System.___hTotalFunc0L |#$R@@161|))) (and (= ($Box ($Unbox HandleTypeType bx@@79)) bx@@79) ($Is ($Unbox HandleTypeType bx@@79) (Tclass._System.___hTotalFunc0L |#$R@@161|))))
 :qid |unknown.0:0|
 :skolemid |1059|
 :pattern ( ($IsBox bx@@79 (Tclass._System.___hTotalFunc0L |#$R@@161|)))
)))
(assert (forall ((|#$R@@162| T@U) (|f#0@@33| T@U) ) (!  (=> (and (= (type |#$R@@162|) TyType) (= (type |f#0@@33|) HandleTypeType)) (= ($Is |f#0@@33| (Tclass._System.___hTotalFunc0L |#$R@@162|))  (and ($Is |f#0@@33| (Tclass._System.___hPartialFunc0L |#$R@@162|)) (Requires0 |#$R@@162| $OneHeap |f#0@@33|))))
 :qid |unknown.0:0|
 :skolemid |1060|
 :pattern ( ($Is |f#0@@33| (Tclass._System.___hTotalFunc0L |#$R@@162|)))
)))
(assert (forall ((|#$R@@163| T@U) (|f#0@@34| T@U) ($h@@28 T@U) ) (!  (=> (and (and (= (type |#$R@@163|) TyType) (= (type |f#0@@34|) HandleTypeType)) (= (type $h@@28) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc0L |#$R@@163|) $h@@28) ($IsAlloc |f#0@@34| (Tclass._System.___hPartialFunc0L |#$R@@163|) $h@@28)))
 :qid |unknown.0:0|
 :skolemid |1061|
 :pattern ( ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc0L |#$R@@163|) $h@@28))
)))
(assert (forall ((arg0@@268 T@U) (arg1@@118 T@U) (arg2@@67 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO arg0@@268 arg1@@118 arg2@@67)) TyType)
 :qid |funType:Tclass._System.___hFunc2LOO|
 :pattern ( (Tclass._System.___hFunc2LOO arg0@@268 arg1@@118 arg2@@67))
)))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@106| T@U) (|#$R@@164| T@U) ) (!  (=> (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$R@@164|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LOO |#$T0@@138| |#$T1@@106| |#$R@@164|)) Tagclass._System.___hFunc2LOO) (= (TagFamily (Tclass._System.___hFunc2LOO |#$T0@@138| |#$T1@@106| |#$R@@164|)) |tytagFamily$_#Func2LOO|)))
 :qid |unknown.0:0|
 :skolemid |1062|
 :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@138| |#$T1@@106| |#$R@@164|))
)))
(assert (forall ((arg0@@269 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_0 arg0@@269)) TyType)
 :qid |funType:Tclass._System.___hFunc2LOO_0|
 :pattern ( (Tclass._System.___hFunc2LOO_0 arg0@@269))
)))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@107| T@U) (|#$R@@165| T@U) ) (!  (=> (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$R@@165|) TyType)) (= (Tclass._System.___hFunc2LOO_0 (Tclass._System.___hFunc2LOO |#$T0@@139| |#$T1@@107| |#$R@@165|)) |#$T0@@139|))
 :qid |unknown.0:0|
 :skolemid |1063|
 :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@139| |#$T1@@107| |#$R@@165|))
)))
(assert (forall ((arg0@@270 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_1 arg0@@270)) TyType)
 :qid |funType:Tclass._System.___hFunc2LOO_1|
 :pattern ( (Tclass._System.___hFunc2LOO_1 arg0@@270))
)))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@108| T@U) (|#$R@@166| T@U) ) (!  (=> (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$R@@166|) TyType)) (= (Tclass._System.___hFunc2LOO_1 (Tclass._System.___hFunc2LOO |#$T0@@140| |#$T1@@108| |#$R@@166|)) |#$T1@@108|))
 :qid |unknown.0:0|
 :skolemid |1064|
 :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@140| |#$T1@@108| |#$R@@166|))
)))
(assert (forall ((arg0@@271 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_2 arg0@@271)) TyType)
 :qid |funType:Tclass._System.___hFunc2LOO_2|
 :pattern ( (Tclass._System.___hFunc2LOO_2 arg0@@271))
)))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@109| T@U) (|#$R@@167| T@U) ) (!  (=> (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$R@@167|) TyType)) (= (Tclass._System.___hFunc2LOO_2 (Tclass._System.___hFunc2LOO |#$T0@@141| |#$T1@@109| |#$R@@167|)) |#$R@@167|))
 :qid |unknown.0:0|
 :skolemid |1065|
 :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@141| |#$T1@@109| |#$R@@167|))
)))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@110| T@U) (|#$R@@168| T@U) (bx@@80 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$R@@168|) TyType)) (= (type bx@@80) BoxType)) ($IsBox bx@@80 (Tclass._System.___hFunc2LOO |#$T0@@142| |#$T1@@110| |#$R@@168|))) (and (= ($Box ($Unbox HandleTypeType bx@@80)) bx@@80) ($Is ($Unbox HandleTypeType bx@@80) (Tclass._System.___hFunc2LOO |#$T0@@142| |#$T1@@110| |#$R@@168|))))
 :qid |unknown.0:0|
 :skolemid |1066|
 :pattern ( ($IsBox bx@@80 (Tclass._System.___hFunc2LOO |#$T0@@142| |#$T1@@110| |#$R@@168|)))
)))
(assert (forall ((arg0@@272 T@U) (arg1@@119 T@U) (arg2@@68 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO arg0@@272 arg1@@119 arg2@@68)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LOO|
 :pattern ( (Tclass._System.___hPartialFunc2LOO arg0@@272 arg1@@119 arg2@@68))
)))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@111| T@U) (|#$R@@169| T@U) ) (!  (=> (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$R@@169|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LOO |#$T0@@143| |#$T1@@111| |#$R@@169|)) Tagclass._System.___hPartialFunc2LOO) (= (TagFamily (Tclass._System.___hPartialFunc2LOO |#$T0@@143| |#$T1@@111| |#$R@@169|)) |tytagFamily$_#PartialFunc2LOO|)))
 :qid |unknown.0:0|
 :skolemid |1067|
 :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@143| |#$T1@@111| |#$R@@169|))
)))
(assert (forall ((arg0@@273 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_0 arg0@@273)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LOO_0|
 :pattern ( (Tclass._System.___hPartialFunc2LOO_0 arg0@@273))
)))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@112| T@U) (|#$R@@170| T@U) ) (!  (=> (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_0 (Tclass._System.___hPartialFunc2LOO |#$T0@@144| |#$T1@@112| |#$R@@170|)) |#$T0@@144|))
 :qid |unknown.0:0|
 :skolemid |1068|
 :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@144| |#$T1@@112| |#$R@@170|))
)))
(assert (forall ((arg0@@274 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_1 arg0@@274)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LOO_1|
 :pattern ( (Tclass._System.___hPartialFunc2LOO_1 arg0@@274))
)))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@113| T@U) (|#$R@@171| T@U) ) (!  (=> (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$R@@171|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_1 (Tclass._System.___hPartialFunc2LOO |#$T0@@145| |#$T1@@113| |#$R@@171|)) |#$T1@@113|))
 :qid |unknown.0:0|
 :skolemid |1069|
 :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@145| |#$T1@@113| |#$R@@171|))
)))
(assert (forall ((arg0@@275 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_2 arg0@@275)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LOO_2|
 :pattern ( (Tclass._System.___hPartialFunc2LOO_2 arg0@@275))
)))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@114| T@U) (|#$R@@172| T@U) ) (!  (=> (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$R@@172|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_2 (Tclass._System.___hPartialFunc2LOO |#$T0@@146| |#$T1@@114| |#$R@@172|)) |#$R@@172|))
 :qid |unknown.0:0|
 :skolemid |1070|
 :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@146| |#$T1@@114| |#$R@@172|))
)))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@115| T@U) (|#$R@@173| T@U) (bx@@81 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$R@@173|) TyType)) (= (type bx@@81) BoxType)) ($IsBox bx@@81 (Tclass._System.___hPartialFunc2LOO |#$T0@@147| |#$T1@@115| |#$R@@173|))) (and (= ($Box ($Unbox HandleTypeType bx@@81)) bx@@81) ($Is ($Unbox HandleTypeType bx@@81) (Tclass._System.___hPartialFunc2LOO |#$T0@@147| |#$T1@@115| |#$R@@173|))))
 :qid |unknown.0:0|
 :skolemid |1071|
 :pattern ( ($IsBox bx@@81 (Tclass._System.___hPartialFunc2LOO |#$T0@@147| |#$T1@@115| |#$R@@173|)))
)))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@116| T@U) (|#$R@@174| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$R@@174|) TyType)) (= (type |f#0@@35|) HandleTypeType)) (= ($Is |f#0@@35| (Tclass._System.___hPartialFunc2LOO |#$T0@@148| |#$T1@@116| |#$R@@174|))  (and ($Is |f#0@@35| (Tclass._System.___hFunc2LOO |#$T0@@148| |#$T1@@116| |#$R@@174|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) ) (!  (=> (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (and ($IsBox |x0#0@@13| |#$T0@@148|) ($IsBox |x1#0@@9| |#$T1@@116|))) (|Set#Equal| (Reads2 |#$T0@@148| |#$T1@@116| |#$R@@174| $OneHeap |f#0@@35| |x0#0@@13| |x1#0@@9|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1072|
 :no-pattern (type |x0#0@@13|)
 :no-pattern (type |x1#0@@9|)
 :no-pattern (U_2_int |x0#0@@13|)
 :no-pattern (U_2_bool |x0#0@@13|)
 :no-pattern (U_2_int |x1#0@@9|)
 :no-pattern (U_2_bool |x1#0@@9|)
)))))
 :qid |unknown.0:0|
 :skolemid |1073|
 :pattern ( ($Is |f#0@@35| (Tclass._System.___hPartialFunc2LOO |#$T0@@148| |#$T1@@116| |#$R@@174|)))
)))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@117| T@U) (|#$R@@175| T@U) (|f#0@@36| T@U) ($h@@29 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$R@@175|) TyType)) (= (type |f#0@@36|) HandleTypeType)) (= (type $h@@29) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc2LOO |#$T0@@149| |#$T1@@117| |#$R@@175|) $h@@29) ($IsAlloc |f#0@@36| (Tclass._System.___hFunc2LOO |#$T0@@149| |#$T1@@117| |#$R@@175|) $h@@29)))
 :qid |unknown.0:0|
 :skolemid |1074|
 :pattern ( ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc2LOO |#$T0@@149| |#$T1@@117| |#$R@@175|) $h@@29))
)))
(assert (forall ((arg0@@276 T@U) (arg1@@120 T@U) (arg2@@69 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO arg0@@276 arg1@@120 arg2@@69)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LOO|
 :pattern ( (Tclass._System.___hTotalFunc2LOO arg0@@276 arg1@@120 arg2@@69))
)))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@118| T@U) (|#$R@@176| T@U) ) (!  (=> (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$R@@176|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LOO |#$T0@@150| |#$T1@@118| |#$R@@176|)) Tagclass._System.___hTotalFunc2LOO) (= (TagFamily (Tclass._System.___hTotalFunc2LOO |#$T0@@150| |#$T1@@118| |#$R@@176|)) |tytagFamily$_#TotalFunc2LOO|)))
 :qid |unknown.0:0|
 :skolemid |1075|
 :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@150| |#$T1@@118| |#$R@@176|))
)))
(assert (forall ((arg0@@277 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_0 arg0@@277)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LOO_0|
 :pattern ( (Tclass._System.___hTotalFunc2LOO_0 arg0@@277))
)))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@119| T@U) (|#$R@@177| T@U) ) (!  (=> (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$R@@177|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_0 (Tclass._System.___hTotalFunc2LOO |#$T0@@151| |#$T1@@119| |#$R@@177|)) |#$T0@@151|))
 :qid |unknown.0:0|
 :skolemid |1076|
 :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@151| |#$T1@@119| |#$R@@177|))
)))
(assert (forall ((arg0@@278 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_1 arg0@@278)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LOO_1|
 :pattern ( (Tclass._System.___hTotalFunc2LOO_1 arg0@@278))
)))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@120| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$R@@178|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_1 (Tclass._System.___hTotalFunc2LOO |#$T0@@152| |#$T1@@120| |#$R@@178|)) |#$T1@@120|))
 :qid |unknown.0:0|
 :skolemid |1077|
 :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@152| |#$T1@@120| |#$R@@178|))
)))
(assert (forall ((arg0@@279 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_2 arg0@@279)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LOO_2|
 :pattern ( (Tclass._System.___hTotalFunc2LOO_2 arg0@@279))
)))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@121| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_2 (Tclass._System.___hTotalFunc2LOO |#$T0@@153| |#$T1@@121| |#$R@@179|)) |#$R@@179|))
 :qid |unknown.0:0|
 :skolemid |1078|
 :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@153| |#$T1@@121| |#$R@@179|))
)))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@122| T@U) (|#$R@@180| T@U) (bx@@82 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$R@@180|) TyType)) (= (type bx@@82) BoxType)) ($IsBox bx@@82 (Tclass._System.___hTotalFunc2LOO |#$T0@@154| |#$T1@@122| |#$R@@180|))) (and (= ($Box ($Unbox HandleTypeType bx@@82)) bx@@82) ($Is ($Unbox HandleTypeType bx@@82) (Tclass._System.___hTotalFunc2LOO |#$T0@@154| |#$T1@@122| |#$R@@180|))))
 :qid |unknown.0:0|
 :skolemid |1079|
 :pattern ( ($IsBox bx@@82 (Tclass._System.___hTotalFunc2LOO |#$T0@@154| |#$T1@@122| |#$R@@180|)))
)))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@123| T@U) (|#$R@@181| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$R@@181|) TyType)) (= (type |f#0@@37|) HandleTypeType)) (= ($Is |f#0@@37| (Tclass._System.___hTotalFunc2LOO |#$T0@@155| |#$T1@@123| |#$R@@181|))  (and ($Is |f#0@@37| (Tclass._System.___hPartialFunc2LOO |#$T0@@155| |#$T1@@123| |#$R@@181|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) ) (!  (=> (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (and ($IsBox |x0#0@@14| |#$T0@@155|) ($IsBox |x1#0@@10| |#$T1@@123|))) (Requires2 |#$T0@@155| |#$T1@@123| |#$R@@181| $OneHeap |f#0@@37| |x0#0@@14| |x1#0@@10|))
 :qid |unknown.0:0|
 :skolemid |1080|
 :no-pattern (type |x0#0@@14|)
 :no-pattern (type |x1#0@@10|)
 :no-pattern (U_2_int |x0#0@@14|)
 :no-pattern (U_2_bool |x0#0@@14|)
 :no-pattern (U_2_int |x1#0@@10|)
 :no-pattern (U_2_bool |x1#0@@10|)
)))))
 :qid |unknown.0:0|
 :skolemid |1081|
 :pattern ( ($Is |f#0@@37| (Tclass._System.___hTotalFunc2LOO |#$T0@@155| |#$T1@@123| |#$R@@181|)))
)))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@124| T@U) (|#$R@@182| T@U) (|f#0@@38| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$R@@182|) TyType)) (= (type |f#0@@38|) HandleTypeType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc2LOO |#$T0@@156| |#$T1@@124| |#$R@@182|) $h@@30) ($IsAlloc |f#0@@38| (Tclass._System.___hPartialFunc2LOO |#$T0@@156| |#$T1@@124| |#$R@@182|) $h@@30)))
 :qid |unknown.0:0|
 :skolemid |1082|
 :pattern ( ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc2LOO |#$T0@@156| |#$T1@@124| |#$R@@182|) $h@@30))
)))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)))
 :qid |unknown.0:0|
 :skolemid |1083|
 :pattern ( (_System.Tuple0.___hMake0_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|))
 :qid |unknown.0:0|
 :skolemid |1084|
 :pattern ( (_System.Tuple0.___hMake0_q d@@7))
)))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@83)) bx@@83) ($Is ($Unbox DatatypeTypeType bx@@83) Tclass._System.Tuple0)))
 :qid |unknown.0:0|
 :skolemid |1085|
 :pattern ( ($IsBox bx@@83 Tclass._System.Tuple0))
)))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@31 T@U) ) (!  (=> (and (= (type $h@@31) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@31)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@31))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |1086|
 :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@31))
)))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8))
 :qid |unknown.0:0|
 :skolemid |1087|
 :pattern ( (|$IsA#_System.Tuple0| d@@8))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9))
 :qid |unknown.0:0|
 :skolemid |1088|
 :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0))
)))
(assert (forall ((a@@114 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@114 b@@63) true))
 :qid |unknown.0:0|
 :skolemid |1089|
 :pattern ( (|_System.Tuple0#Equal| a@@114 b@@63))
)))
(assert (forall ((a@@115 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@115 b@@64) (= a@@115 b@@64)))
 :qid |unknown.0:0|
 :skolemid |1090|
 :pattern ( (|_System.Tuple0#Equal| a@@115 b@@64))
)))
(assert (forall ((arg0@@280 T@U) (arg1@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1OL arg0@@280 arg1@@121)) TyType)
 :qid |funType:Tclass._System.___hFunc1OL|
 :pattern ( (Tclass._System.___hFunc1OL arg0@@280 arg1@@121))
)))
(assert (forall ((|#$T0@@157| T@U) (|#$R@@183| T@U) ) (!  (=> (and (= (type |#$T0@@157|) TyType) (= (type |#$R@@183|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OL |#$T0@@157| |#$R@@183|)) Tagclass._System.___hFunc1OL) (= (TagFamily (Tclass._System.___hFunc1OL |#$T0@@157| |#$R@@183|)) |tytagFamily$_#Func1OL|)))
 :qid |unknown.0:0|
 :skolemid |1091|
 :pattern ( (Tclass._System.___hFunc1OL |#$T0@@157| |#$R@@183|))
)))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_0 arg0@@281)) TyType)
 :qid |funType:Tclass._System.___hFunc1OL_0|
 :pattern ( (Tclass._System.___hFunc1OL_0 arg0@@281))
)))
(assert (forall ((|#$T0@@158| T@U) (|#$R@@184| T@U) ) (!  (=> (and (= (type |#$T0@@158|) TyType) (= (type |#$R@@184|) TyType)) (= (Tclass._System.___hFunc1OL_0 (Tclass._System.___hFunc1OL |#$T0@@158| |#$R@@184|)) |#$T0@@158|))
 :qid |unknown.0:0|
 :skolemid |1092|
 :pattern ( (Tclass._System.___hFunc1OL |#$T0@@158| |#$R@@184|))
)))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_1 arg0@@282)) TyType)
 :qid |funType:Tclass._System.___hFunc1OL_1|
 :pattern ( (Tclass._System.___hFunc1OL_1 arg0@@282))
)))
(assert (forall ((|#$T0@@159| T@U) (|#$R@@185| T@U) ) (!  (=> (and (= (type |#$T0@@159|) TyType) (= (type |#$R@@185|) TyType)) (= (Tclass._System.___hFunc1OL_1 (Tclass._System.___hFunc1OL |#$T0@@159| |#$R@@185|)) |#$R@@185|))
 :qid |unknown.0:0|
 :skolemid |1093|
 :pattern ( (Tclass._System.___hFunc1OL |#$T0@@159| |#$R@@185|))
)))
(assert (forall ((|#$T0@@160| T@U) (|#$R@@186| T@U) (bx@@84 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$R@@186|) TyType)) (= (type bx@@84) BoxType)) ($IsBox bx@@84 (Tclass._System.___hFunc1OL |#$T0@@160| |#$R@@186|))) (and (= ($Box ($Unbox HandleTypeType bx@@84)) bx@@84) ($Is ($Unbox HandleTypeType bx@@84) (Tclass._System.___hFunc1OL |#$T0@@160| |#$R@@186|))))
 :qid |unknown.0:0|
 :skolemid |1094|
 :pattern ( ($IsBox bx@@84 (Tclass._System.___hFunc1OL |#$T0@@160| |#$R@@186|)))
)))
(assert (forall ((arg0@@283 T@U) (arg1@@122 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL arg0@@283 arg1@@122)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1OL|
 :pattern ( (Tclass._System.___hPartialFunc1OL arg0@@283 arg1@@122))
)))
(assert (forall ((|#$T0@@161| T@U) (|#$R@@187| T@U) ) (!  (=> (and (= (type |#$T0@@161|) TyType) (= (type |#$R@@187|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OL |#$T0@@161| |#$R@@187|)) Tagclass._System.___hPartialFunc1OL) (= (TagFamily (Tclass._System.___hPartialFunc1OL |#$T0@@161| |#$R@@187|)) |tytagFamily$_#PartialFunc1OL|)))
 :qid |unknown.0:0|
 :skolemid |1095|
 :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@161| |#$R@@187|))
)))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_0 arg0@@284)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1OL_0|
 :pattern ( (Tclass._System.___hPartialFunc1OL_0 arg0@@284))
)))
(assert (forall ((|#$T0@@162| T@U) (|#$R@@188| T@U) ) (!  (=> (and (= (type |#$T0@@162|) TyType) (= (type |#$R@@188|) TyType)) (= (Tclass._System.___hPartialFunc1OL_0 (Tclass._System.___hPartialFunc1OL |#$T0@@162| |#$R@@188|)) |#$T0@@162|))
 :qid |unknown.0:0|
 :skolemid |1096|
 :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@162| |#$R@@188|))
)))
(assert (forall ((arg0@@285 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_1 arg0@@285)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1OL_1|
 :pattern ( (Tclass._System.___hPartialFunc1OL_1 arg0@@285))
)))
(assert (forall ((|#$T0@@163| T@U) (|#$R@@189| T@U) ) (!  (=> (and (= (type |#$T0@@163|) TyType) (= (type |#$R@@189|) TyType)) (= (Tclass._System.___hPartialFunc1OL_1 (Tclass._System.___hPartialFunc1OL |#$T0@@163| |#$R@@189|)) |#$R@@189|))
 :qid |unknown.0:0|
 :skolemid |1097|
 :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@163| |#$R@@189|))
)))
(assert (forall ((|#$T0@@164| T@U) (|#$R@@190| T@U) (bx@@85 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$R@@190|) TyType)) (= (type bx@@85) BoxType)) ($IsBox bx@@85 (Tclass._System.___hPartialFunc1OL |#$T0@@164| |#$R@@190|))) (and (= ($Box ($Unbox HandleTypeType bx@@85)) bx@@85) ($Is ($Unbox HandleTypeType bx@@85) (Tclass._System.___hPartialFunc1OL |#$T0@@164| |#$R@@190|))))
 :qid |unknown.0:0|
 :skolemid |1098|
 :pattern ( ($IsBox bx@@85 (Tclass._System.___hPartialFunc1OL |#$T0@@164| |#$R@@190|)))
)))
(assert (forall ((|#$T0@@165| T@U) (|#$R@@191| T@U) (|f#0@@39| T@U) ) (!  (=> (and (and (= (type |#$T0@@165|) TyType) (= (type |#$R@@191|) TyType)) (= (type |f#0@@39|) HandleTypeType)) (= ($Is |f#0@@39| (Tclass._System.___hPartialFunc1OL |#$T0@@165| |#$R@@191|))  (and ($Is |f#0@@39| (Tclass._System.___hFunc1OL |#$T0@@165| |#$R@@191|)) (forall ((|x0#0@@15| T@U) ) (!  (=> (and (= (type |x0#0@@15|) BoxType) ($IsBox |x0#0@@15| |#$T0@@165|)) (|Set#Equal| (Reads1 |#$T0@@165| |#$R@@191| $OneHeap |f#0@@39| |x0#0@@15|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1099|
 :no-pattern (type |x0#0@@15|)
 :no-pattern (U_2_int |x0#0@@15|)
 :no-pattern (U_2_bool |x0#0@@15|)
)))))
 :qid |unknown.0:0|
 :skolemid |1100|
 :pattern ( ($Is |f#0@@39| (Tclass._System.___hPartialFunc1OL |#$T0@@165| |#$R@@191|)))
)))
(assert (forall ((|#$T0@@166| T@U) (|#$R@@192| T@U) (|f#0@@40| T@U) ($h@@32 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$R@@192|) TyType)) (= (type |f#0@@40|) HandleTypeType)) (= (type $h@@32) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1OL |#$T0@@166| |#$R@@192|) $h@@32) ($IsAlloc |f#0@@40| (Tclass._System.___hFunc1OL |#$T0@@166| |#$R@@192|) $h@@32)))
 :qid |unknown.0:0|
 :skolemid |1101|
 :pattern ( ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1OL |#$T0@@166| |#$R@@192|) $h@@32))
)))
(assert (forall ((arg0@@286 T@U) (arg1@@123 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL arg0@@286 arg1@@123)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1OL|
 :pattern ( (Tclass._System.___hTotalFunc1OL arg0@@286 arg1@@123))
)))
(assert (forall ((|#$T0@@167| T@U) (|#$R@@193| T@U) ) (!  (=> (and (= (type |#$T0@@167|) TyType) (= (type |#$R@@193|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OL |#$T0@@167| |#$R@@193|)) Tagclass._System.___hTotalFunc1OL) (= (TagFamily (Tclass._System.___hTotalFunc1OL |#$T0@@167| |#$R@@193|)) |tytagFamily$_#TotalFunc1OL|)))
 :qid |unknown.0:0|
 :skolemid |1102|
 :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@167| |#$R@@193|))
)))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_0 arg0@@287)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1OL_0|
 :pattern ( (Tclass._System.___hTotalFunc1OL_0 arg0@@287))
)))
(assert (forall ((|#$T0@@168| T@U) (|#$R@@194| T@U) ) (!  (=> (and (= (type |#$T0@@168|) TyType) (= (type |#$R@@194|) TyType)) (= (Tclass._System.___hTotalFunc1OL_0 (Tclass._System.___hTotalFunc1OL |#$T0@@168| |#$R@@194|)) |#$T0@@168|))
 :qid |unknown.0:0|
 :skolemid |1103|
 :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@168| |#$R@@194|))
)))
(assert (forall ((arg0@@288 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_1 arg0@@288)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1OL_1|
 :pattern ( (Tclass._System.___hTotalFunc1OL_1 arg0@@288))
)))
(assert (forall ((|#$T0@@169| T@U) (|#$R@@195| T@U) ) (!  (=> (and (= (type |#$T0@@169|) TyType) (= (type |#$R@@195|) TyType)) (= (Tclass._System.___hTotalFunc1OL_1 (Tclass._System.___hTotalFunc1OL |#$T0@@169| |#$R@@195|)) |#$R@@195|))
 :qid |unknown.0:0|
 :skolemid |1104|
 :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@169| |#$R@@195|))
)))
(assert (forall ((|#$T0@@170| T@U) (|#$R@@196| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$R@@196|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hTotalFunc1OL |#$T0@@170| |#$R@@196|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hTotalFunc1OL |#$T0@@170| |#$R@@196|))))
 :qid |unknown.0:0|
 :skolemid |1105|
 :pattern ( ($IsBox bx@@86 (Tclass._System.___hTotalFunc1OL |#$T0@@170| |#$R@@196|)))
)))
(assert (forall ((|#$T0@@171| T@U) (|#$R@@197| T@U) (|f#0@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@171|) TyType) (= (type |#$R@@197|) TyType)) (= (type |f#0@@41|) HandleTypeType)) (= ($Is |f#0@@41| (Tclass._System.___hTotalFunc1OL |#$T0@@171| |#$R@@197|))  (and ($Is |f#0@@41| (Tclass._System.___hPartialFunc1OL |#$T0@@171| |#$R@@197|)) (forall ((|x0#0@@16| T@U) ) (!  (=> (and (= (type |x0#0@@16|) BoxType) ($IsBox |x0#0@@16| |#$T0@@171|)) (Requires1 |#$T0@@171| |#$R@@197| $OneHeap |f#0@@41| |x0#0@@16|))
 :qid |unknown.0:0|
 :skolemid |1106|
 :no-pattern (type |x0#0@@16|)
 :no-pattern (U_2_int |x0#0@@16|)
 :no-pattern (U_2_bool |x0#0@@16|)
)))))
 :qid |unknown.0:0|
 :skolemid |1107|
 :pattern ( ($Is |f#0@@41| (Tclass._System.___hTotalFunc1OL |#$T0@@171| |#$R@@197|)))
)))
(assert (forall ((|#$T0@@172| T@U) (|#$R@@198| T@U) (|f#0@@42| T@U) ($h@@33 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$R@@198|) TyType)) (= (type |f#0@@42|) HandleTypeType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1OL |#$T0@@172| |#$R@@198|) $h@@33) ($IsAlloc |f#0@@42| (Tclass._System.___hPartialFunc1OL |#$T0@@172| |#$R@@198|) $h@@33)))
 :qid |unknown.0:0|
 :skolemid |1108|
 :pattern ( ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1OL |#$T0@@172| |#$R@@198|) $h@@33))
)))
(assert (forall ((arg0@@289 T@U) (arg1@@124 T@U) ) (! (= (type (Tclass._System.___hFunc1LO arg0@@289 arg1@@124)) TyType)
 :qid |funType:Tclass._System.___hFunc1LO|
 :pattern ( (Tclass._System.___hFunc1LO arg0@@289 arg1@@124))
)))
(assert (forall ((|#$T0@@173| T@U) (|#$R@@199| T@U) ) (!  (=> (and (= (type |#$T0@@173|) TyType) (= (type |#$R@@199|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LO |#$T0@@173| |#$R@@199|)) Tagclass._System.___hFunc1LO) (= (TagFamily (Tclass._System.___hFunc1LO |#$T0@@173| |#$R@@199|)) |tytagFamily$_#Func1LO|)))
 :qid |unknown.0:0|
 :skolemid |1109|
 :pattern ( (Tclass._System.___hFunc1LO |#$T0@@173| |#$R@@199|))
)))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_0 arg0@@290)) TyType)
 :qid |funType:Tclass._System.___hFunc1LO_0|
 :pattern ( (Tclass._System.___hFunc1LO_0 arg0@@290))
)))
(assert (forall ((|#$T0@@174| T@U) (|#$R@@200| T@U) ) (!  (=> (and (= (type |#$T0@@174|) TyType) (= (type |#$R@@200|) TyType)) (= (Tclass._System.___hFunc1LO_0 (Tclass._System.___hFunc1LO |#$T0@@174| |#$R@@200|)) |#$T0@@174|))
 :qid |unknown.0:0|
 :skolemid |1110|
 :pattern ( (Tclass._System.___hFunc1LO |#$T0@@174| |#$R@@200|))
)))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_1 arg0@@291)) TyType)
 :qid |funType:Tclass._System.___hFunc1LO_1|
 :pattern ( (Tclass._System.___hFunc1LO_1 arg0@@291))
)))
(assert (forall ((|#$T0@@175| T@U) (|#$R@@201| T@U) ) (!  (=> (and (= (type |#$T0@@175|) TyType) (= (type |#$R@@201|) TyType)) (= (Tclass._System.___hFunc1LO_1 (Tclass._System.___hFunc1LO |#$T0@@175| |#$R@@201|)) |#$R@@201|))
 :qid |unknown.0:0|
 :skolemid |1111|
 :pattern ( (Tclass._System.___hFunc1LO |#$T0@@175| |#$R@@201|))
)))
(assert (forall ((|#$T0@@176| T@U) (|#$R@@202| T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$R@@202|) TyType)) (= (type bx@@87) BoxType)) ($IsBox bx@@87 (Tclass._System.___hFunc1LO |#$T0@@176| |#$R@@202|))) (and (= ($Box ($Unbox HandleTypeType bx@@87)) bx@@87) ($Is ($Unbox HandleTypeType bx@@87) (Tclass._System.___hFunc1LO |#$T0@@176| |#$R@@202|))))
 :qid |unknown.0:0|
 :skolemid |1112|
 :pattern ( ($IsBox bx@@87 (Tclass._System.___hFunc1LO |#$T0@@176| |#$R@@202|)))
)))
(assert (forall ((arg0@@292 T@U) (arg1@@125 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO arg0@@292 arg1@@125)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1LO|
 :pattern ( (Tclass._System.___hPartialFunc1LO arg0@@292 arg1@@125))
)))
(assert (forall ((|#$T0@@177| T@U) (|#$R@@203| T@U) ) (!  (=> (and (= (type |#$T0@@177|) TyType) (= (type |#$R@@203|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LO |#$T0@@177| |#$R@@203|)) Tagclass._System.___hPartialFunc1LO) (= (TagFamily (Tclass._System.___hPartialFunc1LO |#$T0@@177| |#$R@@203|)) |tytagFamily$_#PartialFunc1LO|)))
 :qid |unknown.0:0|
 :skolemid |1113|
 :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@177| |#$R@@203|))
)))
(assert (forall ((arg0@@293 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_0 arg0@@293)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1LO_0|
 :pattern ( (Tclass._System.___hPartialFunc1LO_0 arg0@@293))
)))
(assert (forall ((|#$T0@@178| T@U) (|#$R@@204| T@U) ) (!  (=> (and (= (type |#$T0@@178|) TyType) (= (type |#$R@@204|) TyType)) (= (Tclass._System.___hPartialFunc1LO_0 (Tclass._System.___hPartialFunc1LO |#$T0@@178| |#$R@@204|)) |#$T0@@178|))
 :qid |unknown.0:0|
 :skolemid |1114|
 :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@178| |#$R@@204|))
)))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_1 arg0@@294)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1LO_1|
 :pattern ( (Tclass._System.___hPartialFunc1LO_1 arg0@@294))
)))
(assert (forall ((|#$T0@@179| T@U) (|#$R@@205| T@U) ) (!  (=> (and (= (type |#$T0@@179|) TyType) (= (type |#$R@@205|) TyType)) (= (Tclass._System.___hPartialFunc1LO_1 (Tclass._System.___hPartialFunc1LO |#$T0@@179| |#$R@@205|)) |#$R@@205|))
 :qid |unknown.0:0|
 :skolemid |1115|
 :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@179| |#$R@@205|))
)))
(assert (forall ((|#$T0@@180| T@U) (|#$R@@206| T@U) (bx@@88 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$R@@206|) TyType)) (= (type bx@@88) BoxType)) ($IsBox bx@@88 (Tclass._System.___hPartialFunc1LO |#$T0@@180| |#$R@@206|))) (and (= ($Box ($Unbox HandleTypeType bx@@88)) bx@@88) ($Is ($Unbox HandleTypeType bx@@88) (Tclass._System.___hPartialFunc1LO |#$T0@@180| |#$R@@206|))))
 :qid |unknown.0:0|
 :skolemid |1116|
 :pattern ( ($IsBox bx@@88 (Tclass._System.___hPartialFunc1LO |#$T0@@180| |#$R@@206|)))
)))
(assert (forall ((|#$T0@@181| T@U) (|#$R@@207| T@U) (|f#0@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@181|) TyType) (= (type |#$R@@207|) TyType)) (= (type |f#0@@43|) HandleTypeType)) (= ($Is |f#0@@43| (Tclass._System.___hPartialFunc1LO |#$T0@@181| |#$R@@207|))  (and ($Is |f#0@@43| (Tclass._System.___hFunc1LO |#$T0@@181| |#$R@@207|)) (forall ((|x0#0@@17| T@U) ) (!  (=> (and (= (type |x0#0@@17|) BoxType) ($IsBox |x0#0@@17| |#$T0@@181|)) (|Set#Equal| (Reads1 |#$T0@@181| |#$R@@207| $OneHeap |f#0@@43| |x0#0@@17|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1117|
 :no-pattern (type |x0#0@@17|)
 :no-pattern (U_2_int |x0#0@@17|)
 :no-pattern (U_2_bool |x0#0@@17|)
)))))
 :qid |unknown.0:0|
 :skolemid |1118|
 :pattern ( ($Is |f#0@@43| (Tclass._System.___hPartialFunc1LO |#$T0@@181| |#$R@@207|)))
)))
(assert (forall ((|#$T0@@182| T@U) (|#$R@@208| T@U) (|f#0@@44| T@U) ($h@@34 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@182|) TyType) (= (type |#$R@@208|) TyType)) (= (type |f#0@@44|) HandleTypeType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc1LO |#$T0@@182| |#$R@@208|) $h@@34) ($IsAlloc |f#0@@44| (Tclass._System.___hFunc1LO |#$T0@@182| |#$R@@208|) $h@@34)))
 :qid |unknown.0:0|
 :skolemid |1119|
 :pattern ( ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc1LO |#$T0@@182| |#$R@@208|) $h@@34))
)))
(assert (forall ((arg0@@295 T@U) (arg1@@126 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO arg0@@295 arg1@@126)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1LO|
 :pattern ( (Tclass._System.___hTotalFunc1LO arg0@@295 arg1@@126))
)))
(assert (forall ((|#$T0@@183| T@U) (|#$R@@209| T@U) ) (!  (=> (and (= (type |#$T0@@183|) TyType) (= (type |#$R@@209|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LO |#$T0@@183| |#$R@@209|)) Tagclass._System.___hTotalFunc1LO) (= (TagFamily (Tclass._System.___hTotalFunc1LO |#$T0@@183| |#$R@@209|)) |tytagFamily$_#TotalFunc1LO|)))
 :qid |unknown.0:0|
 :skolemid |1120|
 :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@183| |#$R@@209|))
)))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_0 arg0@@296)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1LO_0|
 :pattern ( (Tclass._System.___hTotalFunc1LO_0 arg0@@296))
)))
(assert (forall ((|#$T0@@184| T@U) (|#$R@@210| T@U) ) (!  (=> (and (= (type |#$T0@@184|) TyType) (= (type |#$R@@210|) TyType)) (= (Tclass._System.___hTotalFunc1LO_0 (Tclass._System.___hTotalFunc1LO |#$T0@@184| |#$R@@210|)) |#$T0@@184|))
 :qid |unknown.0:0|
 :skolemid |1121|
 :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@184| |#$R@@210|))
)))
(assert (forall ((arg0@@297 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_1 arg0@@297)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1LO_1|
 :pattern ( (Tclass._System.___hTotalFunc1LO_1 arg0@@297))
)))
(assert (forall ((|#$T0@@185| T@U) (|#$R@@211| T@U) ) (!  (=> (and (= (type |#$T0@@185|) TyType) (= (type |#$R@@211|) TyType)) (= (Tclass._System.___hTotalFunc1LO_1 (Tclass._System.___hTotalFunc1LO |#$T0@@185| |#$R@@211|)) |#$R@@211|))
 :qid |unknown.0:0|
 :skolemid |1122|
 :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@185| |#$R@@211|))
)))
(assert (forall ((|#$T0@@186| T@U) (|#$R@@212| T@U) (bx@@89 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@186|) TyType) (= (type |#$R@@212|) TyType)) (= (type bx@@89) BoxType)) ($IsBox bx@@89 (Tclass._System.___hTotalFunc1LO |#$T0@@186| |#$R@@212|))) (and (= ($Box ($Unbox HandleTypeType bx@@89)) bx@@89) ($Is ($Unbox HandleTypeType bx@@89) (Tclass._System.___hTotalFunc1LO |#$T0@@186| |#$R@@212|))))
 :qid |unknown.0:0|
 :skolemid |1123|
 :pattern ( ($IsBox bx@@89 (Tclass._System.___hTotalFunc1LO |#$T0@@186| |#$R@@212|)))
)))
(assert (forall ((|#$T0@@187| T@U) (|#$R@@213| T@U) (|f#0@@45| T@U) ) (!  (=> (and (and (= (type |#$T0@@187|) TyType) (= (type |#$R@@213|) TyType)) (= (type |f#0@@45|) HandleTypeType)) (= ($Is |f#0@@45| (Tclass._System.___hTotalFunc1LO |#$T0@@187| |#$R@@213|))  (and ($Is |f#0@@45| (Tclass._System.___hPartialFunc1LO |#$T0@@187| |#$R@@213|)) (forall ((|x0#0@@18| T@U) ) (!  (=> (and (= (type |x0#0@@18|) BoxType) ($IsBox |x0#0@@18| |#$T0@@187|)) (Requires1 |#$T0@@187| |#$R@@213| $OneHeap |f#0@@45| |x0#0@@18|))
 :qid |unknown.0:0|
 :skolemid |1124|
 :no-pattern (type |x0#0@@18|)
 :no-pattern (U_2_int |x0#0@@18|)
 :no-pattern (U_2_bool |x0#0@@18|)
)))))
 :qid |unknown.0:0|
 :skolemid |1125|
 :pattern ( ($Is |f#0@@45| (Tclass._System.___hTotalFunc1LO |#$T0@@187| |#$R@@213|)))
)))
(assert (forall ((|#$T0@@188| T@U) (|#$R@@214| T@U) (|f#0@@46| T@U) ($h@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@188|) TyType) (= (type |#$R@@214|) TyType)) (= (type |f#0@@46|) HandleTypeType)) (= (type $h@@35) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc1LO |#$T0@@188| |#$R@@214|) $h@@35) ($IsAlloc |f#0@@46| (Tclass._System.___hPartialFunc1LO |#$T0@@188| |#$R@@214|) $h@@35)))
 :qid |unknown.0:0|
 :skolemid |1126|
 :pattern ( ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc1LO |#$T0@@188| |#$R@@214|) $h@@35))
)))
(assert (forall ((arg0@@298 T@U) (arg1@@127 T@U) ) (! (= (type (|#_System._tuple#2OLL._#Make2| arg0@@298 arg1@@127)) DatatypeTypeType)
 :qid |funType:#_System._tuple#2OLL._#Make2|
 :pattern ( (|#_System._tuple#2OLL._#Make2| arg0@@298 arg1@@127))
)))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (!  (=> (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|)) |##_System._tuple#2OLL._#Make2|))
 :qid |unknown.0:0|
 :skolemid |1127|
 :pattern ( (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (_System.Tuple2OLL.___hMake2_q d@@10) (= (DatatypeCtorId d@@10) |##_System._tuple#2OLL._#Make2|)))
 :qid |unknown.0:0|
 :skolemid |1128|
 :pattern ( (_System.Tuple2OLL.___hMake2_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (_System.Tuple2OLL.___hMake2_q d@@11)) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= d@@11 (|#_System._tuple#2OLL._#Make2| |a#15#0#0| |a#15#1#0|)))
 :qid |unknown.0:0|
 :skolemid |1129|
 :no-pattern (type |a#15#0#0|)
 :no-pattern (type |a#15#1#0|)
 :no-pattern (U_2_int |a#15#0#0|)
 :no-pattern (U_2_bool |a#15#0#0|)
 :no-pattern (U_2_int |a#15#1#0|)
 :no-pattern (U_2_bool |a#15#1#0|)
)))
 :qid |unknown.0:0|
 :skolemid |1130|
 :pattern ( (_System.Tuple2OLL.___hMake2_q d@@11))
)))
(assert (forall ((arg0@@299 T@U) (arg1@@128 T@U) ) (! (= (type (Tclass._System.Tuple2OLL arg0@@299 arg1@@128)) TyType)
 :qid |funType:Tclass._System.Tuple2OLL|
 :pattern ( (Tclass._System.Tuple2OLL arg0@@299 arg1@@128))
)))
(assert (forall ((|_System._tuple#2OLL$T0| T@U) (|_System._tuple#2OLL$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0|) TyType) (= (type |_System._tuple#2OLL$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) Tagclass._System.Tuple2OLL) (= (TagFamily (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) |tytagFamily$_tuple#2OLL|)))
 :qid |unknown.0:0|
 :skolemid |1131|
 :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|))
)))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_0 arg0@@300)) TyType)
 :qid |funType:Tclass._System.Tuple2OLL_0|
 :pattern ( (Tclass._System.Tuple2OLL_0 arg0@@300))
)))
(assert (forall ((|_System._tuple#2OLL$T0@@0| T@U) (|_System._tuple#2OLL$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@0|) TyType) (= (type |_System._tuple#2OLL$T1@@0|) TyType)) (= (Tclass._System.Tuple2OLL_0 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) |_System._tuple#2OLL$T0@@0|))
 :qid |unknown.0:0|
 :skolemid |1132|
 :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|))
)))
(assert (forall ((arg0@@301 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_1 arg0@@301)) TyType)
 :qid |funType:Tclass._System.Tuple2OLL_1|
 :pattern ( (Tclass._System.Tuple2OLL_1 arg0@@301))
)))
(assert (forall ((|_System._tuple#2OLL$T0@@1| T@U) (|_System._tuple#2OLL$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@1|) TyType) (= (type |_System._tuple#2OLL$T1@@1|) TyType)) (= (Tclass._System.Tuple2OLL_1 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) |_System._tuple#2OLL$T1@@1|))
 :qid |unknown.0:0|
 :skolemid |1133|
 :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|))
)))
(assert (forall ((|_System._tuple#2OLL$T0@@2| T@U) (|_System._tuple#2OLL$T1@@2| T@U) (bx@@90 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@2|) TyType) (= (type |_System._tuple#2OLL$T1@@2|) TyType)) (= (type bx@@90) BoxType)) ($IsBox bx@@90 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@90)) bx@@90) ($Is ($Unbox DatatypeTypeType bx@@90) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))))
 :qid |unknown.0:0|
 :skolemid |1134|
 :pattern ( ($IsBox bx@@90 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|)))
)))
(assert (forall ((|_System._tuple#2OLL$T0@@3| T@U) (|_System._tuple#2OLL$T1@@3| T@U) (|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@3|) TyType) (= (type |_System._tuple#2OLL$T1@@3|) TyType)) (= (type |a#16#0#0|) BoxType)) (= (type |a#16#1#0|) BoxType)) (= ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))  (and ($IsBox |a#16#0#0| |_System._tuple#2OLL$T0@@3|) ($IsBox |a#16#1#0| |_System._tuple#2OLL$T1@@3|))))
 :qid |unknown.0:0|
 :skolemid |1135|
 :pattern ( ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|)))
)))
(assert (forall ((|_System._tuple#2OLL$T0@@4| T@U) (|_System._tuple#2OLL$T1@@4| T@U) (|a#17#0#0| T@U) (|a#17#1#0| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2OLL$T0@@4|) TyType) (= (type |_System._tuple#2OLL$T1@@4|) TyType)) (= (type |a#17#0#0|) BoxType)) (= (type |a#17#1#0|) BoxType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@36)) (= ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@36)  (and ($IsAllocBox |a#17#0#0| |_System._tuple#2OLL$T0@@4| $h@@36) ($IsAllocBox |a#17#1#0| |_System._tuple#2OLL$T1@@4| $h@@36))))
 :qid |unknown.0:0|
 :skolemid |1136|
 :pattern ( ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@36))
)))
(assert (forall ((arg0@@302 T@U) ) (! (= (type (_System.Tuple2OLL._0 arg0@@302)) BoxType)
 :qid |funType:_System.Tuple2OLL._0|
 :pattern ( (_System.Tuple2OLL._0 arg0@@302))
)))
(assert (forall ((d@@12 T@U) (|_System._tuple#2OLL$T0@@5| T@U) ($h@@37 T@U) ) (!  (=> (and (and (and (= (type d@@12) DatatypeTypeType) (= (type |_System._tuple#2OLL$T0@@5|) TyType)) (= (type $h@@37) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@37) (and (_System.Tuple2OLL.___hMake2_q d@@12) (exists ((|_System._tuple#2OLL$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T1@@5|) TyType) ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@37))
 :qid |unknown.0:0|
 :skolemid |1137|
 :pattern ( ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@37))
))))) ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@37))
 :qid |unknown.0:0|
 :skolemid |1138|
 :pattern ( ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@37))
)))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (_System.Tuple2OLL._1 arg0@@303)) BoxType)
 :qid |funType:_System.Tuple2OLL._1|
 :pattern ( (_System.Tuple2OLL._1 arg0@@303))
)))
(assert (forall ((d@@13 T@U) (|_System._tuple#2OLL$T1@@6| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (= (type d@@13) DatatypeTypeType) (= (type |_System._tuple#2OLL$T1@@6|) TyType)) (= (type $h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@38) (and (_System.Tuple2OLL.___hMake2_q d@@13) (exists ((|_System._tuple#2OLL$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T0@@6|) TyType) ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@38))
 :qid |unknown.0:0|
 :skolemid |1139|
 :pattern ( ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@38))
))))) ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@38))
 :qid |unknown.0:0|
 :skolemid |1140|
 :pattern ( ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@38))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|)) (Lit (|#_System._tuple#2OLL._#Make2| |a#18#0#0| |a#18#1#0|))))
 :qid |unknown.0:0|
 :skolemid |1141|
 :pattern ( (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|)))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (_System.Tuple2OLL._0 (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|))
 :qid |unknown.0:0|
 :skolemid |1142|
 :pattern ( (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (!  (=> (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (< (BoxRank |a#20#0#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|))))
 :qid |unknown.0:0|
 :skolemid |1143|
 :pattern ( (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (!  (=> (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (_System.Tuple2OLL._1 (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|))
 :qid |unknown.0:0|
 :skolemid |1144|
 :pattern ( (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|))
)))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (!  (=> (and (= (type |a#22#0#0|) BoxType) (= (type |a#22#1#0|) BoxType)) (< (BoxRank |a#22#1#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|))))
 :qid |unknown.0:0|
 :skolemid |1145|
 :pattern ( (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#_System.Tuple2OLL| d@@14)) (_System.Tuple2OLL.___hMake2_q d@@14))
 :qid |unknown.0:0|
 :skolemid |1146|
 :pattern ( (|$IsA#_System.Tuple2OLL| d@@14))
)))
(assert (forall ((|_System._tuple#2OLL$T0@@7| T@U) (|_System._tuple#2OLL$T1@@7| T@U) (d@@15 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@7|) TyType) (= (type |_System._tuple#2OLL$T1@@7|) TyType)) (= (type d@@15) DatatypeTypeType)) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) (_System.Tuple2OLL.___hMake2_q d@@15))
 :qid |unknown.0:0|
 :skolemid |1147|
 :pattern ( (_System.Tuple2OLL.___hMake2_q d@@15) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|)))
)))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (= (|_System.Tuple2OLL#Equal| a@@116 b@@65)  (and (= (_System.Tuple2OLL._0 a@@116) (_System.Tuple2OLL._0 b@@65)) (= (_System.Tuple2OLL._1 a@@116) (_System.Tuple2OLL._1 b@@65)))))
 :qid |unknown.0:0|
 :skolemid |1148|
 :pattern ( (|_System.Tuple2OLL#Equal| a@@116 b@@65))
)))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (= (|_System.Tuple2OLL#Equal| a@@117 b@@66) (= a@@117 b@@66)))
 :qid |unknown.0:0|
 :skolemid |1149|
 :pattern ( (|_System.Tuple2OLL#Equal| a@@117 b@@66))
)))
(assert (forall ((arg0@@304 T@U) (arg1@@129 T@U) (arg2@@70 T@U) (arg3@@42 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL arg0@@304 arg1@@129 arg2@@70 arg3@@42)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOL|
 :pattern ( (Tclass._System.___hFunc3LLOL arg0@@304 arg1@@129 arg2@@70 arg3@@42))
)))
(assert (forall ((|#$T0@@189| T@U) (|#$T1@@125| T@U) (|#$T2@@68| T@U) (|#$R@@215| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@189|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$R@@215|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOL |#$T0@@189| |#$T1@@125| |#$T2@@68| |#$R@@215|)) Tagclass._System.___hFunc3LLOL) (= (TagFamily (Tclass._System.___hFunc3LLOL |#$T0@@189| |#$T1@@125| |#$T2@@68| |#$R@@215|)) |tytagFamily$_#Func3LLOL|)))
 :qid |unknown.0:0|
 :skolemid |1150|
 :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@189| |#$T1@@125| |#$T2@@68| |#$R@@215|))
)))
(assert (forall ((arg0@@305 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_0 arg0@@305)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOL_0|
 :pattern ( (Tclass._System.___hFunc3LLOL_0 arg0@@305))
)))
(assert (forall ((|#$T0@@190| T@U) (|#$T1@@126| T@U) (|#$T2@@69| T@U) (|#$R@@216| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@190|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$R@@216|) TyType)) (= (Tclass._System.___hFunc3LLOL_0 (Tclass._System.___hFunc3LLOL |#$T0@@190| |#$T1@@126| |#$T2@@69| |#$R@@216|)) |#$T0@@190|))
 :qid |unknown.0:0|
 :skolemid |1151|
 :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@190| |#$T1@@126| |#$T2@@69| |#$R@@216|))
)))
(assert (forall ((arg0@@306 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_1 arg0@@306)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOL_1|
 :pattern ( (Tclass._System.___hFunc3LLOL_1 arg0@@306))
)))
(assert (forall ((|#$T0@@191| T@U) (|#$T1@@127| T@U) (|#$T2@@70| T@U) (|#$R@@217| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@191|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$R@@217|) TyType)) (= (Tclass._System.___hFunc3LLOL_1 (Tclass._System.___hFunc3LLOL |#$T0@@191| |#$T1@@127| |#$T2@@70| |#$R@@217|)) |#$T1@@127|))
 :qid |unknown.0:0|
 :skolemid |1152|
 :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@191| |#$T1@@127| |#$T2@@70| |#$R@@217|))
)))
(assert (forall ((arg0@@307 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_2 arg0@@307)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOL_2|
 :pattern ( (Tclass._System.___hFunc3LLOL_2 arg0@@307))
)))
(assert (forall ((|#$T0@@192| T@U) (|#$T1@@128| T@U) (|#$T2@@71| T@U) (|#$R@@218| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@192|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$R@@218|) TyType)) (= (Tclass._System.___hFunc3LLOL_2 (Tclass._System.___hFunc3LLOL |#$T0@@192| |#$T1@@128| |#$T2@@71| |#$R@@218|)) |#$T2@@71|))
 :qid |unknown.0:0|
 :skolemid |1153|
 :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@192| |#$T1@@128| |#$T2@@71| |#$R@@218|))
)))
(assert (forall ((arg0@@308 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_3 arg0@@308)) TyType)
 :qid |funType:Tclass._System.___hFunc3LLOL_3|
 :pattern ( (Tclass._System.___hFunc3LLOL_3 arg0@@308))
)))
(assert (forall ((|#$T0@@193| T@U) (|#$T1@@129| T@U) (|#$T2@@72| T@U) (|#$R@@219| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@193|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$R@@219|) TyType)) (= (Tclass._System.___hFunc3LLOL_3 (Tclass._System.___hFunc3LLOL |#$T0@@193| |#$T1@@129| |#$T2@@72| |#$R@@219|)) |#$R@@219|))
 :qid |unknown.0:0|
 :skolemid |1154|
 :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@193| |#$T1@@129| |#$T2@@72| |#$R@@219|))
)))
(assert (forall ((|#$T0@@194| T@U) (|#$T1@@130| T@U) (|#$T2@@73| T@U) (|#$R@@220| T@U) (bx@@91 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@194|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$R@@220|) TyType)) (= (type bx@@91) BoxType)) ($IsBox bx@@91 (Tclass._System.___hFunc3LLOL |#$T0@@194| |#$T1@@130| |#$T2@@73| |#$R@@220|))) (and (= ($Box ($Unbox HandleTypeType bx@@91)) bx@@91) ($Is ($Unbox HandleTypeType bx@@91) (Tclass._System.___hFunc3LLOL |#$T0@@194| |#$T1@@130| |#$T2@@73| |#$R@@220|))))
 :qid |unknown.0:0|
 :skolemid |1155|
 :pattern ( ($IsBox bx@@91 (Tclass._System.___hFunc3LLOL |#$T0@@194| |#$T1@@130| |#$T2@@73| |#$R@@220|)))
)))
(assert (forall ((arg0@@309 T@U) (arg1@@130 T@U) (arg2@@71 T@U) (arg3@@43 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL arg0@@309 arg1@@130 arg2@@71 arg3@@43)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOL|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL arg0@@309 arg1@@130 arg2@@71 arg3@@43))
)))
(assert (forall ((|#$T0@@195| T@U) (|#$T1@@131| T@U) (|#$T2@@74| T@U) (|#$R@@221| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@195|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$R@@221|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOL |#$T0@@195| |#$T1@@131| |#$T2@@74| |#$R@@221|)) Tagclass._System.___hPartialFunc3LLOL) (= (TagFamily (Tclass._System.___hPartialFunc3LLOL |#$T0@@195| |#$T1@@131| |#$T2@@74| |#$R@@221|)) |tytagFamily$_#PartialFunc3LLOL|)))
 :qid |unknown.0:0|
 :skolemid |1156|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@195| |#$T1@@131| |#$T2@@74| |#$R@@221|))
)))
(assert (forall ((arg0@@310 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_0 arg0@@310)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOL_0|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL_0 arg0@@310))
)))
(assert (forall ((|#$T0@@196| T@U) (|#$T1@@132| T@U) (|#$T2@@75| T@U) (|#$R@@222| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@196|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$R@@222|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_0 (Tclass._System.___hPartialFunc3LLOL |#$T0@@196| |#$T1@@132| |#$T2@@75| |#$R@@222|)) |#$T0@@196|))
 :qid |unknown.0:0|
 :skolemid |1157|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@196| |#$T1@@132| |#$T2@@75| |#$R@@222|))
)))
(assert (forall ((arg0@@311 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_1 arg0@@311)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOL_1|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL_1 arg0@@311))
)))
(assert (forall ((|#$T0@@197| T@U) (|#$T1@@133| T@U) (|#$T2@@76| T@U) (|#$R@@223| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@197|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$R@@223|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_1 (Tclass._System.___hPartialFunc3LLOL |#$T0@@197| |#$T1@@133| |#$T2@@76| |#$R@@223|)) |#$T1@@133|))
 :qid |unknown.0:0|
 :skolemid |1158|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@197| |#$T1@@133| |#$T2@@76| |#$R@@223|))
)))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_2 arg0@@312)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOL_2|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL_2 arg0@@312))
)))
(assert (forall ((|#$T0@@198| T@U) (|#$T1@@134| T@U) (|#$T2@@77| T@U) (|#$R@@224| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@198|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$R@@224|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_2 (Tclass._System.___hPartialFunc3LLOL |#$T0@@198| |#$T1@@134| |#$T2@@77| |#$R@@224|)) |#$T2@@77|))
 :qid |unknown.0:0|
 :skolemid |1159|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@198| |#$T1@@134| |#$T2@@77| |#$R@@224|))
)))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_3 arg0@@313)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc3LLOL_3|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL_3 arg0@@313))
)))
(assert (forall ((|#$T0@@199| T@U) (|#$T1@@135| T@U) (|#$T2@@78| T@U) (|#$R@@225| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@199|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$R@@225|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_3 (Tclass._System.___hPartialFunc3LLOL |#$T0@@199| |#$T1@@135| |#$T2@@78| |#$R@@225|)) |#$R@@225|))
 :qid |unknown.0:0|
 :skolemid |1160|
 :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@199| |#$T1@@135| |#$T2@@78| |#$R@@225|))
)))
(assert (forall ((|#$T0@@200| T@U) (|#$T1@@136| T@U) (|#$T2@@79| T@U) (|#$R@@226| T@U) (bx@@92 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@200|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$R@@226|) TyType)) (= (type bx@@92) BoxType)) ($IsBox bx@@92 (Tclass._System.___hPartialFunc3LLOL |#$T0@@200| |#$T1@@136| |#$T2@@79| |#$R@@226|))) (and (= ($Box ($Unbox HandleTypeType bx@@92)) bx@@92) ($Is ($Unbox HandleTypeType bx@@92) (Tclass._System.___hPartialFunc3LLOL |#$T0@@200| |#$T1@@136| |#$T2@@79| |#$R@@226|))))
 :qid |unknown.0:0|
 :skolemid |1161|
 :pattern ( ($IsBox bx@@92 (Tclass._System.___hPartialFunc3LLOL |#$T0@@200| |#$T1@@136| |#$T2@@79| |#$R@@226|)))
)))
(assert (forall ((|#$T0@@201| T@U) (|#$T1@@137| T@U) (|#$T2@@80| T@U) (|#$R@@227| T@U) (|f#0@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@201|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$R@@227|) TyType)) (= (type |f#0@@47|) HandleTypeType)) (= ($Is |f#0@@47| (Tclass._System.___hPartialFunc3LLOL |#$T0@@201| |#$T1@@137| |#$T2@@80| |#$R@@227|))  (and ($Is |f#0@@47| (Tclass._System.___hFunc3LLOL |#$T0@@201| |#$T1@@137| |#$T2@@80| |#$R@@227|)) (forall ((|x0#0@@19| T@U) (|x1#0@@11| T@U) (|x2#0@@5| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@19|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@5|) BoxType)) (and (and ($IsBox |x0#0@@19| |#$T0@@201|) ($IsBox |x1#0@@11| |#$T1@@137|)) ($IsBox |x2#0@@5| |#$T2@@80|))) (|Set#Equal| (Reads3 |#$T0@@201| |#$T1@@137| |#$T2@@80| |#$R@@227| $OneHeap |f#0@@47| |x0#0@@19| |x1#0@@11| |x2#0@@5|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1162|
 :no-pattern (type |x0#0@@19|)
 :no-pattern (type |x1#0@@11|)
 :no-pattern (type |x2#0@@5|)
 :no-pattern (U_2_int |x0#0@@19|)
 :no-pattern (U_2_bool |x0#0@@19|)
 :no-pattern (U_2_int |x1#0@@11|)
 :no-pattern (U_2_bool |x1#0@@11|)
 :no-pattern (U_2_int |x2#0@@5|)
 :no-pattern (U_2_bool |x2#0@@5|)
)))))
 :qid |unknown.0:0|
 :skolemid |1163|
 :pattern ( ($Is |f#0@@47| (Tclass._System.___hPartialFunc3LLOL |#$T0@@201| |#$T1@@137| |#$T2@@80| |#$R@@227|)))
)))
(assert (forall ((|#$T0@@202| T@U) (|#$T1@@138| T@U) (|#$T2@@81| T@U) (|#$R@@228| T@U) (|f#0@@48| T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@202|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$R@@228|) TyType)) (= (type |f#0@@48|) HandleTypeType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc3LLOL |#$T0@@202| |#$T1@@138| |#$T2@@81| |#$R@@228|) $h@@39) ($IsAlloc |f#0@@48| (Tclass._System.___hFunc3LLOL |#$T0@@202| |#$T1@@138| |#$T2@@81| |#$R@@228|) $h@@39)))
 :qid |unknown.0:0|
 :skolemid |1164|
 :pattern ( ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc3LLOL |#$T0@@202| |#$T1@@138| |#$T2@@81| |#$R@@228|) $h@@39))
)))
(assert (forall ((arg0@@314 T@U) (arg1@@131 T@U) (arg2@@72 T@U) (arg3@@44 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL arg0@@314 arg1@@131 arg2@@72 arg3@@44)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOL|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL arg0@@314 arg1@@131 arg2@@72 arg3@@44))
)))
(assert (forall ((|#$T0@@203| T@U) (|#$T1@@139| T@U) (|#$T2@@82| T@U) (|#$R@@229| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@203|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$R@@229|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOL |#$T0@@203| |#$T1@@139| |#$T2@@82| |#$R@@229|)) Tagclass._System.___hTotalFunc3LLOL) (= (TagFamily (Tclass._System.___hTotalFunc3LLOL |#$T0@@203| |#$T1@@139| |#$T2@@82| |#$R@@229|)) |tytagFamily$_#TotalFunc3LLOL|)))
 :qid |unknown.0:0|
 :skolemid |1165|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@203| |#$T1@@139| |#$T2@@82| |#$R@@229|))
)))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_0 arg0@@315)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOL_0|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL_0 arg0@@315))
)))
(assert (forall ((|#$T0@@204| T@U) (|#$T1@@140| T@U) (|#$T2@@83| T@U) (|#$R@@230| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@204|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$R@@230|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_0 (Tclass._System.___hTotalFunc3LLOL |#$T0@@204| |#$T1@@140| |#$T2@@83| |#$R@@230|)) |#$T0@@204|))
 :qid |unknown.0:0|
 :skolemid |1166|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@204| |#$T1@@140| |#$T2@@83| |#$R@@230|))
)))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_1 arg0@@316)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOL_1|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL_1 arg0@@316))
)))
(assert (forall ((|#$T0@@205| T@U) (|#$T1@@141| T@U) (|#$T2@@84| T@U) (|#$R@@231| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@205|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$R@@231|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_1 (Tclass._System.___hTotalFunc3LLOL |#$T0@@205| |#$T1@@141| |#$T2@@84| |#$R@@231|)) |#$T1@@141|))
 :qid |unknown.0:0|
 :skolemid |1167|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@205| |#$T1@@141| |#$T2@@84| |#$R@@231|))
)))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_2 arg0@@317)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOL_2|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL_2 arg0@@317))
)))
(assert (forall ((|#$T0@@206| T@U) (|#$T1@@142| T@U) (|#$T2@@85| T@U) (|#$R@@232| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@206|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$R@@232|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_2 (Tclass._System.___hTotalFunc3LLOL |#$T0@@206| |#$T1@@142| |#$T2@@85| |#$R@@232|)) |#$T2@@85|))
 :qid |unknown.0:0|
 :skolemid |1168|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@206| |#$T1@@142| |#$T2@@85| |#$R@@232|))
)))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_3 arg0@@318)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc3LLOL_3|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL_3 arg0@@318))
)))
(assert (forall ((|#$T0@@207| T@U) (|#$T1@@143| T@U) (|#$T2@@86| T@U) (|#$R@@233| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@207|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$R@@233|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_3 (Tclass._System.___hTotalFunc3LLOL |#$T0@@207| |#$T1@@143| |#$T2@@86| |#$R@@233|)) |#$R@@233|))
 :qid |unknown.0:0|
 :skolemid |1169|
 :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@207| |#$T1@@143| |#$T2@@86| |#$R@@233|))
)))
(assert (forall ((|#$T0@@208| T@U) (|#$T1@@144| T@U) (|#$T2@@87| T@U) (|#$R@@234| T@U) (bx@@93 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@208|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$R@@234|) TyType)) (= (type bx@@93) BoxType)) ($IsBox bx@@93 (Tclass._System.___hTotalFunc3LLOL |#$T0@@208| |#$T1@@144| |#$T2@@87| |#$R@@234|))) (and (= ($Box ($Unbox HandleTypeType bx@@93)) bx@@93) ($Is ($Unbox HandleTypeType bx@@93) (Tclass._System.___hTotalFunc3LLOL |#$T0@@208| |#$T1@@144| |#$T2@@87| |#$R@@234|))))
 :qid |unknown.0:0|
 :skolemid |1170|
 :pattern ( ($IsBox bx@@93 (Tclass._System.___hTotalFunc3LLOL |#$T0@@208| |#$T1@@144| |#$T2@@87| |#$R@@234|)))
)))
(assert (forall ((|#$T0@@209| T@U) (|#$T1@@145| T@U) (|#$T2@@88| T@U) (|#$R@@235| T@U) (|f#0@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@209|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$R@@235|) TyType)) (= (type |f#0@@49|) HandleTypeType)) (= ($Is |f#0@@49| (Tclass._System.___hTotalFunc3LLOL |#$T0@@209| |#$T1@@145| |#$T2@@88| |#$R@@235|))  (and ($Is |f#0@@49| (Tclass._System.___hPartialFunc3LLOL |#$T0@@209| |#$T1@@145| |#$T2@@88| |#$R@@235|)) (forall ((|x0#0@@20| T@U) (|x1#0@@12| T@U) (|x2#0@@6| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@20|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@6|) BoxType)) (and (and ($IsBox |x0#0@@20| |#$T0@@209|) ($IsBox |x1#0@@12| |#$T1@@145|)) ($IsBox |x2#0@@6| |#$T2@@88|))) (Requires3 |#$T0@@209| |#$T1@@145| |#$T2@@88| |#$R@@235| $OneHeap |f#0@@49| |x0#0@@20| |x1#0@@12| |x2#0@@6|))
 :qid |unknown.0:0|
 :skolemid |1171|
 :no-pattern (type |x0#0@@20|)
 :no-pattern (type |x1#0@@12|)
 :no-pattern (type |x2#0@@6|)
 :no-pattern (U_2_int |x0#0@@20|)
 :no-pattern (U_2_bool |x0#0@@20|)
 :no-pattern (U_2_int |x1#0@@12|)
 :no-pattern (U_2_bool |x1#0@@12|)
 :no-pattern (U_2_int |x2#0@@6|)
 :no-pattern (U_2_bool |x2#0@@6|)
)))))
 :qid |unknown.0:0|
 :skolemid |1172|
 :pattern ( ($Is |f#0@@49| (Tclass._System.___hTotalFunc3LLOL |#$T0@@209| |#$T1@@145| |#$T2@@88| |#$R@@235|)))
)))
(assert (forall ((|#$T0@@210| T@U) (|#$T1@@146| T@U) (|#$T2@@89| T@U) (|#$R@@236| T@U) (|f#0@@50| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@210|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$R@@236|) TyType)) (= (type |f#0@@50|) HandleTypeType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc3LLOL |#$T0@@210| |#$T1@@146| |#$T2@@89| |#$R@@236|) $h@@40) ($IsAlloc |f#0@@50| (Tclass._System.___hPartialFunc3LLOL |#$T0@@210| |#$T1@@146| |#$T2@@89| |#$R@@236|) $h@@40)))
 :qid |unknown.0:0|
 :skolemid |1173|
 :pattern ( ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc3LLOL |#$T0@@210| |#$T1@@146| |#$T2@@89| |#$R@@236|) $h@@40))
)))
(assert (forall ((arg0@@319 T@U) (arg1@@132 T@U) (arg2@@73 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO arg0@@319 arg1@@132 arg2@@73)) TyType)
 :qid |funType:Tclass._System.___hFunc2SSO|
 :pattern ( (Tclass._System.___hFunc2SSO arg0@@319 arg1@@132 arg2@@73))
)))
(assert (forall ((|#$T0@@211| T@U) (|#$T1@@147| T@U) (|#$R@@237| T@U) ) (!  (=> (and (and (= (type |#$T0@@211|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$R@@237|) TyType)) (and (= (Tag (Tclass._System.___hFunc2SSO |#$T0@@211| |#$T1@@147| |#$R@@237|)) Tagclass._System.___hFunc2SSO) (= (TagFamily (Tclass._System.___hFunc2SSO |#$T0@@211| |#$T1@@147| |#$R@@237|)) |tytagFamily$_#Func2SSO|)))
 :qid |unknown.0:0|
 :skolemid |1174|
 :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@211| |#$T1@@147| |#$R@@237|))
)))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_0 arg0@@320)) TyType)
 :qid |funType:Tclass._System.___hFunc2SSO_0|
 :pattern ( (Tclass._System.___hFunc2SSO_0 arg0@@320))
)))
(assert (forall ((|#$T0@@212| T@U) (|#$T1@@148| T@U) (|#$R@@238| T@U) ) (!  (=> (and (and (= (type |#$T0@@212|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$R@@238|) TyType)) (= (Tclass._System.___hFunc2SSO_0 (Tclass._System.___hFunc2SSO |#$T0@@212| |#$T1@@148| |#$R@@238|)) |#$T0@@212|))
 :qid |unknown.0:0|
 :skolemid |1175|
 :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@212| |#$T1@@148| |#$R@@238|))
)))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_1 arg0@@321)) TyType)
 :qid |funType:Tclass._System.___hFunc2SSO_1|
 :pattern ( (Tclass._System.___hFunc2SSO_1 arg0@@321))
)))
(assert (forall ((|#$T0@@213| T@U) (|#$T1@@149| T@U) (|#$R@@239| T@U) ) (!  (=> (and (and (= (type |#$T0@@213|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$R@@239|) TyType)) (= (Tclass._System.___hFunc2SSO_1 (Tclass._System.___hFunc2SSO |#$T0@@213| |#$T1@@149| |#$R@@239|)) |#$T1@@149|))
 :qid |unknown.0:0|
 :skolemid |1176|
 :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@213| |#$T1@@149| |#$R@@239|))
)))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_2 arg0@@322)) TyType)
 :qid |funType:Tclass._System.___hFunc2SSO_2|
 :pattern ( (Tclass._System.___hFunc2SSO_2 arg0@@322))
)))
(assert (forall ((|#$T0@@214| T@U) (|#$T1@@150| T@U) (|#$R@@240| T@U) ) (!  (=> (and (and (= (type |#$T0@@214|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$R@@240|) TyType)) (= (Tclass._System.___hFunc2SSO_2 (Tclass._System.___hFunc2SSO |#$T0@@214| |#$T1@@150| |#$R@@240|)) |#$R@@240|))
 :qid |unknown.0:0|
 :skolemid |1177|
 :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@214| |#$T1@@150| |#$R@@240|))
)))
(assert (forall ((|#$T0@@215| T@U) (|#$T1@@151| T@U) (|#$R@@241| T@U) (bx@@94 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@215|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$R@@241|) TyType)) (= (type bx@@94) BoxType)) ($IsBox bx@@94 (Tclass._System.___hFunc2SSO |#$T0@@215| |#$T1@@151| |#$R@@241|))) (and (= ($Box ($Unbox HandleTypeType bx@@94)) bx@@94) ($Is ($Unbox HandleTypeType bx@@94) (Tclass._System.___hFunc2SSO |#$T0@@215| |#$T1@@151| |#$R@@241|))))
 :qid |unknown.0:0|
 :skolemid |1178|
 :pattern ( ($IsBox bx@@94 (Tclass._System.___hFunc2SSO |#$T0@@215| |#$T1@@151| |#$R@@241|)))
)))
(assert (forall ((arg0@@323 T@U) (arg1@@133 T@U) (arg2@@74 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO arg0@@323 arg1@@133 arg2@@74)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2SSO|
 :pattern ( (Tclass._System.___hPartialFunc2SSO arg0@@323 arg1@@133 arg2@@74))
)))
(assert (forall ((|#$T0@@216| T@U) (|#$T1@@152| T@U) (|#$R@@242| T@U) ) (!  (=> (and (and (= (type |#$T0@@216|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$R@@242|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2SSO |#$T0@@216| |#$T1@@152| |#$R@@242|)) Tagclass._System.___hPartialFunc2SSO) (= (TagFamily (Tclass._System.___hPartialFunc2SSO |#$T0@@216| |#$T1@@152| |#$R@@242|)) |tytagFamily$_#PartialFunc2SSO|)))
 :qid |unknown.0:0|
 :skolemid |1179|
 :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@216| |#$T1@@152| |#$R@@242|))
)))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_0 arg0@@324)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2SSO_0|
 :pattern ( (Tclass._System.___hPartialFunc2SSO_0 arg0@@324))
)))
(assert (forall ((|#$T0@@217| T@U) (|#$T1@@153| T@U) (|#$R@@243| T@U) ) (!  (=> (and (and (= (type |#$T0@@217|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$R@@243|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_0 (Tclass._System.___hPartialFunc2SSO |#$T0@@217| |#$T1@@153| |#$R@@243|)) |#$T0@@217|))
 :qid |unknown.0:0|
 :skolemid |1180|
 :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@217| |#$T1@@153| |#$R@@243|))
)))
(assert (forall ((arg0@@325 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_1 arg0@@325)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2SSO_1|
 :pattern ( (Tclass._System.___hPartialFunc2SSO_1 arg0@@325))
)))
(assert (forall ((|#$T0@@218| T@U) (|#$T1@@154| T@U) (|#$R@@244| T@U) ) (!  (=> (and (and (= (type |#$T0@@218|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$R@@244|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_1 (Tclass._System.___hPartialFunc2SSO |#$T0@@218| |#$T1@@154| |#$R@@244|)) |#$T1@@154|))
 :qid |unknown.0:0|
 :skolemid |1181|
 :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@218| |#$T1@@154| |#$R@@244|))
)))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_2 arg0@@326)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2SSO_2|
 :pattern ( (Tclass._System.___hPartialFunc2SSO_2 arg0@@326))
)))
(assert (forall ((|#$T0@@219| T@U) (|#$T1@@155| T@U) (|#$R@@245| T@U) ) (!  (=> (and (and (= (type |#$T0@@219|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$R@@245|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_2 (Tclass._System.___hPartialFunc2SSO |#$T0@@219| |#$T1@@155| |#$R@@245|)) |#$R@@245|))
 :qid |unknown.0:0|
 :skolemid |1182|
 :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@219| |#$T1@@155| |#$R@@245|))
)))
(assert (forall ((|#$T0@@220| T@U) (|#$T1@@156| T@U) (|#$R@@246| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@220|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$R@@246|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hPartialFunc2SSO |#$T0@@220| |#$T1@@156| |#$R@@246|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hPartialFunc2SSO |#$T0@@220| |#$T1@@156| |#$R@@246|))))
 :qid |unknown.0:0|
 :skolemid |1183|
 :pattern ( ($IsBox bx@@95 (Tclass._System.___hPartialFunc2SSO |#$T0@@220| |#$T1@@156| |#$R@@246|)))
)))
(assert (forall ((|#$T0@@221| T@U) (|#$T1@@157| T@U) (|#$R@@247| T@U) (|f#0@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@221|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$R@@247|) TyType)) (= (type |f#0@@51|) HandleTypeType)) (= ($Is |f#0@@51| (Tclass._System.___hPartialFunc2SSO |#$T0@@221| |#$T1@@157| |#$R@@247|))  (and ($Is |f#0@@51| (Tclass._System.___hFunc2SSO |#$T0@@221| |#$T1@@157| |#$R@@247|)) (forall ((|x0#0@@21| T@U) (|x1#0@@13| T@U) ) (!  (=> (and (and (= (type |x0#0@@21|) BoxType) (= (type |x1#0@@13|) BoxType)) (and ($IsBox |x0#0@@21| |#$T0@@221|) ($IsBox |x1#0@@13| |#$T1@@157|))) (|Set#Equal| (Reads2 |#$T0@@221| |#$T1@@157| |#$R@@247| $OneHeap |f#0@@51| |x0#0@@21| |x1#0@@13|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1184|
 :no-pattern (type |x0#0@@21|)
 :no-pattern (type |x1#0@@13|)
 :no-pattern (U_2_int |x0#0@@21|)
 :no-pattern (U_2_bool |x0#0@@21|)
 :no-pattern (U_2_int |x1#0@@13|)
 :no-pattern (U_2_bool |x1#0@@13|)
)))))
 :qid |unknown.0:0|
 :skolemid |1185|
 :pattern ( ($Is |f#0@@51| (Tclass._System.___hPartialFunc2SSO |#$T0@@221| |#$T1@@157| |#$R@@247|)))
)))
(assert (forall ((|#$T0@@222| T@U) (|#$T1@@158| T@U) (|#$R@@248| T@U) (|f#0@@52| T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@222|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$R@@248|) TyType)) (= (type |f#0@@52|) HandleTypeType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2SSO |#$T0@@222| |#$T1@@158| |#$R@@248|) $h@@41) ($IsAlloc |f#0@@52| (Tclass._System.___hFunc2SSO |#$T0@@222| |#$T1@@158| |#$R@@248|) $h@@41)))
 :qid |unknown.0:0|
 :skolemid |1186|
 :pattern ( ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2SSO |#$T0@@222| |#$T1@@158| |#$R@@248|) $h@@41))
)))
(assert (forall ((arg0@@327 T@U) (arg1@@134 T@U) (arg2@@75 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO arg0@@327 arg1@@134 arg2@@75)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2SSO|
 :pattern ( (Tclass._System.___hTotalFunc2SSO arg0@@327 arg1@@134 arg2@@75))
)))
(assert (forall ((|#$T0@@223| T@U) (|#$T1@@159| T@U) (|#$R@@249| T@U) ) (!  (=> (and (and (= (type |#$T0@@223|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$R@@249|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2SSO |#$T0@@223| |#$T1@@159| |#$R@@249|)) Tagclass._System.___hTotalFunc2SSO) (= (TagFamily (Tclass._System.___hTotalFunc2SSO |#$T0@@223| |#$T1@@159| |#$R@@249|)) |tytagFamily$_#TotalFunc2SSO|)))
 :qid |unknown.0:0|
 :skolemid |1187|
 :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@223| |#$T1@@159| |#$R@@249|))
)))
(assert (forall ((arg0@@328 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_0 arg0@@328)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2SSO_0|
 :pattern ( (Tclass._System.___hTotalFunc2SSO_0 arg0@@328))
)))
(assert (forall ((|#$T0@@224| T@U) (|#$T1@@160| T@U) (|#$R@@250| T@U) ) (!  (=> (and (and (= (type |#$T0@@224|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$R@@250|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_0 (Tclass._System.___hTotalFunc2SSO |#$T0@@224| |#$T1@@160| |#$R@@250|)) |#$T0@@224|))
 :qid |unknown.0:0|
 :skolemid |1188|
 :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@224| |#$T1@@160| |#$R@@250|))
)))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_1 arg0@@329)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2SSO_1|
 :pattern ( (Tclass._System.___hTotalFunc2SSO_1 arg0@@329))
)))
(assert (forall ((|#$T0@@225| T@U) (|#$T1@@161| T@U) (|#$R@@251| T@U) ) (!  (=> (and (and (= (type |#$T0@@225|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$R@@251|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_1 (Tclass._System.___hTotalFunc2SSO |#$T0@@225| |#$T1@@161| |#$R@@251|)) |#$T1@@161|))
 :qid |unknown.0:0|
 :skolemid |1189|
 :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@225| |#$T1@@161| |#$R@@251|))
)))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_2 arg0@@330)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2SSO_2|
 :pattern ( (Tclass._System.___hTotalFunc2SSO_2 arg0@@330))
)))
(assert (forall ((|#$T0@@226| T@U) (|#$T1@@162| T@U) (|#$R@@252| T@U) ) (!  (=> (and (and (= (type |#$T0@@226|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$R@@252|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_2 (Tclass._System.___hTotalFunc2SSO |#$T0@@226| |#$T1@@162| |#$R@@252|)) |#$R@@252|))
 :qid |unknown.0:0|
 :skolemid |1190|
 :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@226| |#$T1@@162| |#$R@@252|))
)))
(assert (forall ((|#$T0@@227| T@U) (|#$T1@@163| T@U) (|#$R@@253| T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@227|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$R@@253|) TyType)) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass._System.___hTotalFunc2SSO |#$T0@@227| |#$T1@@163| |#$R@@253|))) (and (= ($Box ($Unbox HandleTypeType bx@@96)) bx@@96) ($Is ($Unbox HandleTypeType bx@@96) (Tclass._System.___hTotalFunc2SSO |#$T0@@227| |#$T1@@163| |#$R@@253|))))
 :qid |unknown.0:0|
 :skolemid |1191|
 :pattern ( ($IsBox bx@@96 (Tclass._System.___hTotalFunc2SSO |#$T0@@227| |#$T1@@163| |#$R@@253|)))
)))
(assert (forall ((|#$T0@@228| T@U) (|#$T1@@164| T@U) (|#$R@@254| T@U) (|f#0@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@228|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$R@@254|) TyType)) (= (type |f#0@@53|) HandleTypeType)) (= ($Is |f#0@@53| (Tclass._System.___hTotalFunc2SSO |#$T0@@228| |#$T1@@164| |#$R@@254|))  (and ($Is |f#0@@53| (Tclass._System.___hPartialFunc2SSO |#$T0@@228| |#$T1@@164| |#$R@@254|)) (forall ((|x0#0@@22| T@U) (|x1#0@@14| T@U) ) (!  (=> (and (and (= (type |x0#0@@22|) BoxType) (= (type |x1#0@@14|) BoxType)) (and ($IsBox |x0#0@@22| |#$T0@@228|) ($IsBox |x1#0@@14| |#$T1@@164|))) (Requires2 |#$T0@@228| |#$T1@@164| |#$R@@254| $OneHeap |f#0@@53| |x0#0@@22| |x1#0@@14|))
 :qid |unknown.0:0|
 :skolemid |1192|
 :no-pattern (type |x0#0@@22|)
 :no-pattern (type |x1#0@@14|)
 :no-pattern (U_2_int |x0#0@@22|)
 :no-pattern (U_2_bool |x0#0@@22|)
 :no-pattern (U_2_int |x1#0@@14|)
 :no-pattern (U_2_bool |x1#0@@14|)
)))))
 :qid |unknown.0:0|
 :skolemid |1193|
 :pattern ( ($Is |f#0@@53| (Tclass._System.___hTotalFunc2SSO |#$T0@@228| |#$T1@@164| |#$R@@254|)))
)))
(assert (forall ((|#$T0@@229| T@U) (|#$T1@@165| T@U) (|#$R@@255| T@U) (|f#0@@54| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@229|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$R@@255|) TyType)) (= (type |f#0@@54|) HandleTypeType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2SSO |#$T0@@229| |#$T1@@165| |#$R@@255|) $h@@42) ($IsAlloc |f#0@@54| (Tclass._System.___hPartialFunc2SSO |#$T0@@229| |#$T1@@165| |#$R@@255|) $h@@42)))
 :qid |unknown.0:0|
 :skolemid |1194|
 :pattern ( ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2SSO |#$T0@@229| |#$T1@@165| |#$R@@255|) $h@@42))
)))
(assert (forall ((arg0@@331 T@U) (arg1@@135 T@U) (arg2@@76 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO arg0@@331 arg1@@135 arg2@@76)) TyType)
 :qid |funType:Tclass._System.___hFunc2LLO|
 :pattern ( (Tclass._System.___hFunc2LLO arg0@@331 arg1@@135 arg2@@76))
)))
(assert (forall ((|#$T0@@230| T@U) (|#$T1@@166| T@U) (|#$R@@256| T@U) ) (!  (=> (and (and (= (type |#$T0@@230|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$R@@256|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LLO |#$T0@@230| |#$T1@@166| |#$R@@256|)) Tagclass._System.___hFunc2LLO) (= (TagFamily (Tclass._System.___hFunc2LLO |#$T0@@230| |#$T1@@166| |#$R@@256|)) |tytagFamily$_#Func2LLO|)))
 :qid |unknown.0:0|
 :skolemid |1195|
 :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@230| |#$T1@@166| |#$R@@256|))
)))
(assert (forall ((arg0@@332 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_0 arg0@@332)) TyType)
 :qid |funType:Tclass._System.___hFunc2LLO_0|
 :pattern ( (Tclass._System.___hFunc2LLO_0 arg0@@332))
)))
(assert (forall ((|#$T0@@231| T@U) (|#$T1@@167| T@U) (|#$R@@257| T@U) ) (!  (=> (and (and (= (type |#$T0@@231|) TyType) (= (type |#$T1@@167|) TyType)) (= (type |#$R@@257|) TyType)) (= (Tclass._System.___hFunc2LLO_0 (Tclass._System.___hFunc2LLO |#$T0@@231| |#$T1@@167| |#$R@@257|)) |#$T0@@231|))
 :qid |unknown.0:0|
 :skolemid |1196|
 :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@231| |#$T1@@167| |#$R@@257|))
)))
(assert (forall ((arg0@@333 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_1 arg0@@333)) TyType)
 :qid |funType:Tclass._System.___hFunc2LLO_1|
 :pattern ( (Tclass._System.___hFunc2LLO_1 arg0@@333))
)))
(assert (forall ((|#$T0@@232| T@U) (|#$T1@@168| T@U) (|#$R@@258| T@U) ) (!  (=> (and (and (= (type |#$T0@@232|) TyType) (= (type |#$T1@@168|) TyType)) (= (type |#$R@@258|) TyType)) (= (Tclass._System.___hFunc2LLO_1 (Tclass._System.___hFunc2LLO |#$T0@@232| |#$T1@@168| |#$R@@258|)) |#$T1@@168|))
 :qid |unknown.0:0|
 :skolemid |1197|
 :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@232| |#$T1@@168| |#$R@@258|))
)))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_2 arg0@@334)) TyType)
 :qid |funType:Tclass._System.___hFunc2LLO_2|
 :pattern ( (Tclass._System.___hFunc2LLO_2 arg0@@334))
)))
(assert (forall ((|#$T0@@233| T@U) (|#$T1@@169| T@U) (|#$R@@259| T@U) ) (!  (=> (and (and (= (type |#$T0@@233|) TyType) (= (type |#$T1@@169|) TyType)) (= (type |#$R@@259|) TyType)) (= (Tclass._System.___hFunc2LLO_2 (Tclass._System.___hFunc2LLO |#$T0@@233| |#$T1@@169| |#$R@@259|)) |#$R@@259|))
 :qid |unknown.0:0|
 :skolemid |1198|
 :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@233| |#$T1@@169| |#$R@@259|))
)))
(assert (forall ((|#$T0@@234| T@U) (|#$T1@@170| T@U) (|#$R@@260| T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@234|) TyType) (= (type |#$T1@@170|) TyType)) (= (type |#$R@@260|) TyType)) (= (type bx@@97) BoxType)) ($IsBox bx@@97 (Tclass._System.___hFunc2LLO |#$T0@@234| |#$T1@@170| |#$R@@260|))) (and (= ($Box ($Unbox HandleTypeType bx@@97)) bx@@97) ($Is ($Unbox HandleTypeType bx@@97) (Tclass._System.___hFunc2LLO |#$T0@@234| |#$T1@@170| |#$R@@260|))))
 :qid |unknown.0:0|
 :skolemid |1199|
 :pattern ( ($IsBox bx@@97 (Tclass._System.___hFunc2LLO |#$T0@@234| |#$T1@@170| |#$R@@260|)))
)))
(assert (forall ((arg0@@335 T@U) (arg1@@136 T@U) (arg2@@77 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO arg0@@335 arg1@@136 arg2@@77)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LLO|
 :pattern ( (Tclass._System.___hPartialFunc2LLO arg0@@335 arg1@@136 arg2@@77))
)))
(assert (forall ((|#$T0@@235| T@U) (|#$T1@@171| T@U) (|#$R@@261| T@U) ) (!  (=> (and (and (= (type |#$T0@@235|) TyType) (= (type |#$T1@@171|) TyType)) (= (type |#$R@@261|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LLO |#$T0@@235| |#$T1@@171| |#$R@@261|)) Tagclass._System.___hPartialFunc2LLO) (= (TagFamily (Tclass._System.___hPartialFunc2LLO |#$T0@@235| |#$T1@@171| |#$R@@261|)) |tytagFamily$_#PartialFunc2LLO|)))
 :qid |unknown.0:0|
 :skolemid |1200|
 :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@235| |#$T1@@171| |#$R@@261|))
)))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_0 arg0@@336)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LLO_0|
 :pattern ( (Tclass._System.___hPartialFunc2LLO_0 arg0@@336))
)))
(assert (forall ((|#$T0@@236| T@U) (|#$T1@@172| T@U) (|#$R@@262| T@U) ) (!  (=> (and (and (= (type |#$T0@@236|) TyType) (= (type |#$T1@@172|) TyType)) (= (type |#$R@@262|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_0 (Tclass._System.___hPartialFunc2LLO |#$T0@@236| |#$T1@@172| |#$R@@262|)) |#$T0@@236|))
 :qid |unknown.0:0|
 :skolemid |1201|
 :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@236| |#$T1@@172| |#$R@@262|))
)))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_1 arg0@@337)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LLO_1|
 :pattern ( (Tclass._System.___hPartialFunc2LLO_1 arg0@@337))
)))
(assert (forall ((|#$T0@@237| T@U) (|#$T1@@173| T@U) (|#$R@@263| T@U) ) (!  (=> (and (and (= (type |#$T0@@237|) TyType) (= (type |#$T1@@173|) TyType)) (= (type |#$R@@263|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_1 (Tclass._System.___hPartialFunc2LLO |#$T0@@237| |#$T1@@173| |#$R@@263|)) |#$T1@@173|))
 :qid |unknown.0:0|
 :skolemid |1202|
 :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@237| |#$T1@@173| |#$R@@263|))
)))
(assert (forall ((arg0@@338 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_2 arg0@@338)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc2LLO_2|
 :pattern ( (Tclass._System.___hPartialFunc2LLO_2 arg0@@338))
)))
(assert (forall ((|#$T0@@238| T@U) (|#$T1@@174| T@U) (|#$R@@264| T@U) ) (!  (=> (and (and (= (type |#$T0@@238|) TyType) (= (type |#$T1@@174|) TyType)) (= (type |#$R@@264|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_2 (Tclass._System.___hPartialFunc2LLO |#$T0@@238| |#$T1@@174| |#$R@@264|)) |#$R@@264|))
 :qid |unknown.0:0|
 :skolemid |1203|
 :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@238| |#$T1@@174| |#$R@@264|))
)))
(assert (forall ((|#$T0@@239| T@U) (|#$T1@@175| T@U) (|#$R@@265| T@U) (bx@@98 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@239|) TyType) (= (type |#$T1@@175|) TyType)) (= (type |#$R@@265|) TyType)) (= (type bx@@98) BoxType)) ($IsBox bx@@98 (Tclass._System.___hPartialFunc2LLO |#$T0@@239| |#$T1@@175| |#$R@@265|))) (and (= ($Box ($Unbox HandleTypeType bx@@98)) bx@@98) ($Is ($Unbox HandleTypeType bx@@98) (Tclass._System.___hPartialFunc2LLO |#$T0@@239| |#$T1@@175| |#$R@@265|))))
 :qid |unknown.0:0|
 :skolemid |1204|
 :pattern ( ($IsBox bx@@98 (Tclass._System.___hPartialFunc2LLO |#$T0@@239| |#$T1@@175| |#$R@@265|)))
)))
(assert (forall ((|#$T0@@240| T@U) (|#$T1@@176| T@U) (|#$R@@266| T@U) (|f#0@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@240|) TyType) (= (type |#$T1@@176|) TyType)) (= (type |#$R@@266|) TyType)) (= (type |f#0@@55|) HandleTypeType)) (= ($Is |f#0@@55| (Tclass._System.___hPartialFunc2LLO |#$T0@@240| |#$T1@@176| |#$R@@266|))  (and ($Is |f#0@@55| (Tclass._System.___hFunc2LLO |#$T0@@240| |#$T1@@176| |#$R@@266|)) (forall ((|x0#0@@23| T@U) (|x1#0@@15| T@U) ) (!  (=> (and (and (= (type |x0#0@@23|) BoxType) (= (type |x1#0@@15|) BoxType)) (and ($IsBox |x0#0@@23| |#$T0@@240|) ($IsBox |x1#0@@15| |#$T1@@176|))) (|Set#Equal| (Reads2 |#$T0@@240| |#$T1@@176| |#$R@@266| $OneHeap |f#0@@55| |x0#0@@23| |x1#0@@15|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1205|
 :no-pattern (type |x0#0@@23|)
 :no-pattern (type |x1#0@@15|)
 :no-pattern (U_2_int |x0#0@@23|)
 :no-pattern (U_2_bool |x0#0@@23|)
 :no-pattern (U_2_int |x1#0@@15|)
 :no-pattern (U_2_bool |x1#0@@15|)
)))))
 :qid |unknown.0:0|
 :skolemid |1206|
 :pattern ( ($Is |f#0@@55| (Tclass._System.___hPartialFunc2LLO |#$T0@@240| |#$T1@@176| |#$R@@266|)))
)))
(assert (forall ((|#$T0@@241| T@U) (|#$T1@@177| T@U) (|#$R@@267| T@U) (|f#0@@56| T@U) ($h@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@241|) TyType) (= (type |#$T1@@177|) TyType)) (= (type |#$R@@267|) TyType)) (= (type |f#0@@56|) HandleTypeType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc2LLO |#$T0@@241| |#$T1@@177| |#$R@@267|) $h@@43) ($IsAlloc |f#0@@56| (Tclass._System.___hFunc2LLO |#$T0@@241| |#$T1@@177| |#$R@@267|) $h@@43)))
 :qid |unknown.0:0|
 :skolemid |1207|
 :pattern ( ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc2LLO |#$T0@@241| |#$T1@@177| |#$R@@267|) $h@@43))
)))
(assert (forall ((arg0@@339 T@U) (arg1@@137 T@U) (arg2@@78 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO arg0@@339 arg1@@137 arg2@@78)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LLO|
 :pattern ( (Tclass._System.___hTotalFunc2LLO arg0@@339 arg1@@137 arg2@@78))
)))
(assert (forall ((|#$T0@@242| T@U) (|#$T1@@178| T@U) (|#$R@@268| T@U) ) (!  (=> (and (and (= (type |#$T0@@242|) TyType) (= (type |#$T1@@178|) TyType)) (= (type |#$R@@268|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LLO |#$T0@@242| |#$T1@@178| |#$R@@268|)) Tagclass._System.___hTotalFunc2LLO) (= (TagFamily (Tclass._System.___hTotalFunc2LLO |#$T0@@242| |#$T1@@178| |#$R@@268|)) |tytagFamily$_#TotalFunc2LLO|)))
 :qid |unknown.0:0|
 :skolemid |1208|
 :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@242| |#$T1@@178| |#$R@@268|))
)))
(assert (forall ((arg0@@340 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_0 arg0@@340)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LLO_0|
 :pattern ( (Tclass._System.___hTotalFunc2LLO_0 arg0@@340))
)))
(assert (forall ((|#$T0@@243| T@U) (|#$T1@@179| T@U) (|#$R@@269| T@U) ) (!  (=> (and (and (= (type |#$T0@@243|) TyType) (= (type |#$T1@@179|) TyType)) (= (type |#$R@@269|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_0 (Tclass._System.___hTotalFunc2LLO |#$T0@@243| |#$T1@@179| |#$R@@269|)) |#$T0@@243|))
 :qid |unknown.0:0|
 :skolemid |1209|
 :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@243| |#$T1@@179| |#$R@@269|))
)))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_1 arg0@@341)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LLO_1|
 :pattern ( (Tclass._System.___hTotalFunc2LLO_1 arg0@@341))
)))
(assert (forall ((|#$T0@@244| T@U) (|#$T1@@180| T@U) (|#$R@@270| T@U) ) (!  (=> (and (and (= (type |#$T0@@244|) TyType) (= (type |#$T1@@180|) TyType)) (= (type |#$R@@270|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_1 (Tclass._System.___hTotalFunc2LLO |#$T0@@244| |#$T1@@180| |#$R@@270|)) |#$T1@@180|))
 :qid |unknown.0:0|
 :skolemid |1210|
 :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@244| |#$T1@@180| |#$R@@270|))
)))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_2 arg0@@342)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc2LLO_2|
 :pattern ( (Tclass._System.___hTotalFunc2LLO_2 arg0@@342))
)))
(assert (forall ((|#$T0@@245| T@U) (|#$T1@@181| T@U) (|#$R@@271| T@U) ) (!  (=> (and (and (= (type |#$T0@@245|) TyType) (= (type |#$T1@@181|) TyType)) (= (type |#$R@@271|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_2 (Tclass._System.___hTotalFunc2LLO |#$T0@@245| |#$T1@@181| |#$R@@271|)) |#$R@@271|))
 :qid |unknown.0:0|
 :skolemid |1211|
 :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@245| |#$T1@@181| |#$R@@271|))
)))
(assert (forall ((|#$T0@@246| T@U) (|#$T1@@182| T@U) (|#$R@@272| T@U) (bx@@99 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@246|) TyType) (= (type |#$T1@@182|) TyType)) (= (type |#$R@@272|) TyType)) (= (type bx@@99) BoxType)) ($IsBox bx@@99 (Tclass._System.___hTotalFunc2LLO |#$T0@@246| |#$T1@@182| |#$R@@272|))) (and (= ($Box ($Unbox HandleTypeType bx@@99)) bx@@99) ($Is ($Unbox HandleTypeType bx@@99) (Tclass._System.___hTotalFunc2LLO |#$T0@@246| |#$T1@@182| |#$R@@272|))))
 :qid |unknown.0:0|
 :skolemid |1212|
 :pattern ( ($IsBox bx@@99 (Tclass._System.___hTotalFunc2LLO |#$T0@@246| |#$T1@@182| |#$R@@272|)))
)))
(assert (forall ((|#$T0@@247| T@U) (|#$T1@@183| T@U) (|#$R@@273| T@U) (|f#0@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@247|) TyType) (= (type |#$T1@@183|) TyType)) (= (type |#$R@@273|) TyType)) (= (type |f#0@@57|) HandleTypeType)) (= ($Is |f#0@@57| (Tclass._System.___hTotalFunc2LLO |#$T0@@247| |#$T1@@183| |#$R@@273|))  (and ($Is |f#0@@57| (Tclass._System.___hPartialFunc2LLO |#$T0@@247| |#$T1@@183| |#$R@@273|)) (forall ((|x0#0@@24| T@U) (|x1#0@@16| T@U) ) (!  (=> (and (and (= (type |x0#0@@24|) BoxType) (= (type |x1#0@@16|) BoxType)) (and ($IsBox |x0#0@@24| |#$T0@@247|) ($IsBox |x1#0@@16| |#$T1@@183|))) (Requires2 |#$T0@@247| |#$T1@@183| |#$R@@273| $OneHeap |f#0@@57| |x0#0@@24| |x1#0@@16|))
 :qid |unknown.0:0|
 :skolemid |1213|
 :no-pattern (type |x0#0@@24|)
 :no-pattern (type |x1#0@@16|)
 :no-pattern (U_2_int |x0#0@@24|)
 :no-pattern (U_2_bool |x0#0@@24|)
 :no-pattern (U_2_int |x1#0@@16|)
 :no-pattern (U_2_bool |x1#0@@16|)
)))))
 :qid |unknown.0:0|
 :skolemid |1214|
 :pattern ( ($Is |f#0@@57| (Tclass._System.___hTotalFunc2LLO |#$T0@@247| |#$T1@@183| |#$R@@273|)))
)))
(assert (forall ((|#$T0@@248| T@U) (|#$T1@@184| T@U) (|#$R@@274| T@U) (|f#0@@58| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@248|) TyType) (= (type |#$T1@@184|) TyType)) (= (type |#$R@@274|) TyType)) (= (type |f#0@@58|) HandleTypeType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc2LLO |#$T0@@248| |#$T1@@184| |#$R@@274|) $h@@44) ($IsAlloc |f#0@@58| (Tclass._System.___hPartialFunc2LLO |#$T0@@248| |#$T1@@184| |#$R@@274|) $h@@44)))
 :qid |unknown.0:0|
 :skolemid |1215|
 :pattern ( ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc2LLO |#$T0@@248| |#$T1@@184| |#$R@@274|) $h@@44))
)))
(assert (forall ((arg0@@343 T@U) (arg1@@138 T@U) ) (! (= (type (Tclass._System.___hFunc1SS arg0@@343 arg1@@138)) TyType)
 :qid |funType:Tclass._System.___hFunc1SS|
 :pattern ( (Tclass._System.___hFunc1SS arg0@@343 arg1@@138))
)))
(assert (forall ((|#$T0@@249| T@U) (|#$R@@275| T@U) ) (!  (=> (and (= (type |#$T0@@249|) TyType) (= (type |#$R@@275|) TyType)) (and (= (Tag (Tclass._System.___hFunc1SS |#$T0@@249| |#$R@@275|)) Tagclass._System.___hFunc1SS) (= (TagFamily (Tclass._System.___hFunc1SS |#$T0@@249| |#$R@@275|)) |tytagFamily$_#Func1SS|)))
 :qid |unknown.0:0|
 :skolemid |1216|
 :pattern ( (Tclass._System.___hFunc1SS |#$T0@@249| |#$R@@275|))
)))
(assert (forall ((arg0@@344 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_0 arg0@@344)) TyType)
 :qid |funType:Tclass._System.___hFunc1SS_0|
 :pattern ( (Tclass._System.___hFunc1SS_0 arg0@@344))
)))
(assert (forall ((|#$T0@@250| T@U) (|#$R@@276| T@U) ) (!  (=> (and (= (type |#$T0@@250|) TyType) (= (type |#$R@@276|) TyType)) (= (Tclass._System.___hFunc1SS_0 (Tclass._System.___hFunc1SS |#$T0@@250| |#$R@@276|)) |#$T0@@250|))
 :qid |unknown.0:0|
 :skolemid |1217|
 :pattern ( (Tclass._System.___hFunc1SS |#$T0@@250| |#$R@@276|))
)))
(assert (forall ((arg0@@345 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_1 arg0@@345)) TyType)
 :qid |funType:Tclass._System.___hFunc1SS_1|
 :pattern ( (Tclass._System.___hFunc1SS_1 arg0@@345))
)))
(assert (forall ((|#$T0@@251| T@U) (|#$R@@277| T@U) ) (!  (=> (and (= (type |#$T0@@251|) TyType) (= (type |#$R@@277|) TyType)) (= (Tclass._System.___hFunc1SS_1 (Tclass._System.___hFunc1SS |#$T0@@251| |#$R@@277|)) |#$R@@277|))
 :qid |unknown.0:0|
 :skolemid |1218|
 :pattern ( (Tclass._System.___hFunc1SS |#$T0@@251| |#$R@@277|))
)))
(assert (forall ((|#$T0@@252| T@U) (|#$R@@278| T@U) (bx@@100 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@252|) TyType) (= (type |#$R@@278|) TyType)) (= (type bx@@100) BoxType)) ($IsBox bx@@100 (Tclass._System.___hFunc1SS |#$T0@@252| |#$R@@278|))) (and (= ($Box ($Unbox HandleTypeType bx@@100)) bx@@100) ($Is ($Unbox HandleTypeType bx@@100) (Tclass._System.___hFunc1SS |#$T0@@252| |#$R@@278|))))
 :qid |unknown.0:0|
 :skolemid |1219|
 :pattern ( ($IsBox bx@@100 (Tclass._System.___hFunc1SS |#$T0@@252| |#$R@@278|)))
)))
(assert (forall ((arg0@@346 T@U) (arg1@@139 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS arg0@@346 arg1@@139)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1SS|
 :pattern ( (Tclass._System.___hPartialFunc1SS arg0@@346 arg1@@139))
)))
(assert (forall ((|#$T0@@253| T@U) (|#$R@@279| T@U) ) (!  (=> (and (= (type |#$T0@@253|) TyType) (= (type |#$R@@279|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1SS |#$T0@@253| |#$R@@279|)) Tagclass._System.___hPartialFunc1SS) (= (TagFamily (Tclass._System.___hPartialFunc1SS |#$T0@@253| |#$R@@279|)) |tytagFamily$_#PartialFunc1SS|)))
 :qid |unknown.0:0|
 :skolemid |1220|
 :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@253| |#$R@@279|))
)))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_0 arg0@@347)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1SS_0|
 :pattern ( (Tclass._System.___hPartialFunc1SS_0 arg0@@347))
)))
(assert (forall ((|#$T0@@254| T@U) (|#$R@@280| T@U) ) (!  (=> (and (= (type |#$T0@@254|) TyType) (= (type |#$R@@280|) TyType)) (= (Tclass._System.___hPartialFunc1SS_0 (Tclass._System.___hPartialFunc1SS |#$T0@@254| |#$R@@280|)) |#$T0@@254|))
 :qid |unknown.0:0|
 :skolemid |1221|
 :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@254| |#$R@@280|))
)))
(assert (forall ((arg0@@348 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_1 arg0@@348)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1SS_1|
 :pattern ( (Tclass._System.___hPartialFunc1SS_1 arg0@@348))
)))
(assert (forall ((|#$T0@@255| T@U) (|#$R@@281| T@U) ) (!  (=> (and (= (type |#$T0@@255|) TyType) (= (type |#$R@@281|) TyType)) (= (Tclass._System.___hPartialFunc1SS_1 (Tclass._System.___hPartialFunc1SS |#$T0@@255| |#$R@@281|)) |#$R@@281|))
 :qid |unknown.0:0|
 :skolemid |1222|
 :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@255| |#$R@@281|))
)))
(assert (forall ((|#$T0@@256| T@U) (|#$R@@282| T@U) (bx@@101 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@256|) TyType) (= (type |#$R@@282|) TyType)) (= (type bx@@101) BoxType)) ($IsBox bx@@101 (Tclass._System.___hPartialFunc1SS |#$T0@@256| |#$R@@282|))) (and (= ($Box ($Unbox HandleTypeType bx@@101)) bx@@101) ($Is ($Unbox HandleTypeType bx@@101) (Tclass._System.___hPartialFunc1SS |#$T0@@256| |#$R@@282|))))
 :qid |unknown.0:0|
 :skolemid |1223|
 :pattern ( ($IsBox bx@@101 (Tclass._System.___hPartialFunc1SS |#$T0@@256| |#$R@@282|)))
)))
(assert (forall ((|#$T0@@257| T@U) (|#$R@@283| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (= (type |#$T0@@257|) TyType) (= (type |#$R@@283|) TyType)) (= (type |f#0@@59|) HandleTypeType)) (= ($Is |f#0@@59| (Tclass._System.___hPartialFunc1SS |#$T0@@257| |#$R@@283|))  (and ($Is |f#0@@59| (Tclass._System.___hFunc1SS |#$T0@@257| |#$R@@283|)) (forall ((|x0#0@@25| T@U) ) (!  (=> (and (= (type |x0#0@@25|) BoxType) ($IsBox |x0#0@@25| |#$T0@@257|)) (|Set#Equal| (Reads1 |#$T0@@257| |#$R@@283| $OneHeap |f#0@@59| |x0#0@@25|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1224|
 :no-pattern (type |x0#0@@25|)
 :no-pattern (U_2_int |x0#0@@25|)
 :no-pattern (U_2_bool |x0#0@@25|)
)))))
 :qid |unknown.0:0|
 :skolemid |1225|
 :pattern ( ($Is |f#0@@59| (Tclass._System.___hPartialFunc1SS |#$T0@@257| |#$R@@283|)))
)))
(assert (forall ((|#$T0@@258| T@U) (|#$R@@284| T@U) (|f#0@@60| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@258|) TyType) (= (type |#$R@@284|) TyType)) (= (type |f#0@@60|) HandleTypeType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc1SS |#$T0@@258| |#$R@@284|) $h@@45) ($IsAlloc |f#0@@60| (Tclass._System.___hFunc1SS |#$T0@@258| |#$R@@284|) $h@@45)))
 :qid |unknown.0:0|
 :skolemid |1226|
 :pattern ( ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc1SS |#$T0@@258| |#$R@@284|) $h@@45))
)))
(assert (forall ((arg0@@349 T@U) (arg1@@140 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS arg0@@349 arg1@@140)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1SS|
 :pattern ( (Tclass._System.___hTotalFunc1SS arg0@@349 arg1@@140))
)))
(assert (forall ((|#$T0@@259| T@U) (|#$R@@285| T@U) ) (!  (=> (and (= (type |#$T0@@259|) TyType) (= (type |#$R@@285|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1SS |#$T0@@259| |#$R@@285|)) Tagclass._System.___hTotalFunc1SS) (= (TagFamily (Tclass._System.___hTotalFunc1SS |#$T0@@259| |#$R@@285|)) |tytagFamily$_#TotalFunc1SS|)))
 :qid |unknown.0:0|
 :skolemid |1227|
 :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@259| |#$R@@285|))
)))
(assert (forall ((arg0@@350 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_0 arg0@@350)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1SS_0|
 :pattern ( (Tclass._System.___hTotalFunc1SS_0 arg0@@350))
)))
(assert (forall ((|#$T0@@260| T@U) (|#$R@@286| T@U) ) (!  (=> (and (= (type |#$T0@@260|) TyType) (= (type |#$R@@286|) TyType)) (= (Tclass._System.___hTotalFunc1SS_0 (Tclass._System.___hTotalFunc1SS |#$T0@@260| |#$R@@286|)) |#$T0@@260|))
 :qid |unknown.0:0|
 :skolemid |1228|
 :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@260| |#$R@@286|))
)))
(assert (forall ((arg0@@351 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_1 arg0@@351)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1SS_1|
 :pattern ( (Tclass._System.___hTotalFunc1SS_1 arg0@@351))
)))
(assert (forall ((|#$T0@@261| T@U) (|#$R@@287| T@U) ) (!  (=> (and (= (type |#$T0@@261|) TyType) (= (type |#$R@@287|) TyType)) (= (Tclass._System.___hTotalFunc1SS_1 (Tclass._System.___hTotalFunc1SS |#$T0@@261| |#$R@@287|)) |#$R@@287|))
 :qid |unknown.0:0|
 :skolemid |1229|
 :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@261| |#$R@@287|))
)))
(assert (forall ((|#$T0@@262| T@U) (|#$R@@288| T@U) (bx@@102 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@262|) TyType) (= (type |#$R@@288|) TyType)) (= (type bx@@102) BoxType)) ($IsBox bx@@102 (Tclass._System.___hTotalFunc1SS |#$T0@@262| |#$R@@288|))) (and (= ($Box ($Unbox HandleTypeType bx@@102)) bx@@102) ($Is ($Unbox HandleTypeType bx@@102) (Tclass._System.___hTotalFunc1SS |#$T0@@262| |#$R@@288|))))
 :qid |unknown.0:0|
 :skolemid |1230|
 :pattern ( ($IsBox bx@@102 (Tclass._System.___hTotalFunc1SS |#$T0@@262| |#$R@@288|)))
)))
(assert (forall ((|#$T0@@263| T@U) (|#$R@@289| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (= (type |#$T0@@263|) TyType) (= (type |#$R@@289|) TyType)) (= (type |f#0@@61|) HandleTypeType)) (= ($Is |f#0@@61| (Tclass._System.___hTotalFunc1SS |#$T0@@263| |#$R@@289|))  (and ($Is |f#0@@61| (Tclass._System.___hPartialFunc1SS |#$T0@@263| |#$R@@289|)) (forall ((|x0#0@@26| T@U) ) (!  (=> (and (= (type |x0#0@@26|) BoxType) ($IsBox |x0#0@@26| |#$T0@@263|)) (Requires1 |#$T0@@263| |#$R@@289| $OneHeap |f#0@@61| |x0#0@@26|))
 :qid |unknown.0:0|
 :skolemid |1231|
 :no-pattern (type |x0#0@@26|)
 :no-pattern (U_2_int |x0#0@@26|)
 :no-pattern (U_2_bool |x0#0@@26|)
)))))
 :qid |unknown.0:0|
 :skolemid |1232|
 :pattern ( ($Is |f#0@@61| (Tclass._System.___hTotalFunc1SS |#$T0@@263| |#$R@@289|)))
)))
(assert (forall ((|#$T0@@264| T@U) (|#$R@@290| T@U) (|f#0@@62| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@264|) TyType) (= (type |#$R@@290|) TyType)) (= (type |f#0@@62|) HandleTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc1SS |#$T0@@264| |#$R@@290|) $h@@46) ($IsAlloc |f#0@@62| (Tclass._System.___hPartialFunc1SS |#$T0@@264| |#$R@@290|) $h@@46)))
 :qid |unknown.0:0|
 :skolemid |1233|
 :pattern ( ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc1SS |#$T0@@264| |#$R@@290|) $h@@46))
)))
(assert (forall ((arg0@@352 T@U) (arg1@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1LL arg0@@352 arg1@@141)) TyType)
 :qid |funType:Tclass._System.___hFunc1LL|
 :pattern ( (Tclass._System.___hFunc1LL arg0@@352 arg1@@141))
)))
(assert (forall ((|#$T0@@265| T@U) (|#$R@@291| T@U) ) (!  (=> (and (= (type |#$T0@@265|) TyType) (= (type |#$R@@291|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LL |#$T0@@265| |#$R@@291|)) Tagclass._System.___hFunc1LL) (= (TagFamily (Tclass._System.___hFunc1LL |#$T0@@265| |#$R@@291|)) |tytagFamily$_#Func1LL|)))
 :qid |unknown.0:0|
 :skolemid |1234|
 :pattern ( (Tclass._System.___hFunc1LL |#$T0@@265| |#$R@@291|))
)))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_0 arg0@@353)) TyType)
 :qid |funType:Tclass._System.___hFunc1LL_0|
 :pattern ( (Tclass._System.___hFunc1LL_0 arg0@@353))
)))
(assert (forall ((|#$T0@@266| T@U) (|#$R@@292| T@U) ) (!  (=> (and (= (type |#$T0@@266|) TyType) (= (type |#$R@@292|) TyType)) (= (Tclass._System.___hFunc1LL_0 (Tclass._System.___hFunc1LL |#$T0@@266| |#$R@@292|)) |#$T0@@266|))
 :qid |unknown.0:0|
 :skolemid |1235|
 :pattern ( (Tclass._System.___hFunc1LL |#$T0@@266| |#$R@@292|))
)))
(assert (forall ((arg0@@354 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_1 arg0@@354)) TyType)
 :qid |funType:Tclass._System.___hFunc1LL_1|
 :pattern ( (Tclass._System.___hFunc1LL_1 arg0@@354))
)))
(assert (forall ((|#$T0@@267| T@U) (|#$R@@293| T@U) ) (!  (=> (and (= (type |#$T0@@267|) TyType) (= (type |#$R@@293|) TyType)) (= (Tclass._System.___hFunc1LL_1 (Tclass._System.___hFunc1LL |#$T0@@267| |#$R@@293|)) |#$R@@293|))
 :qid |unknown.0:0|
 :skolemid |1236|
 :pattern ( (Tclass._System.___hFunc1LL |#$T0@@267| |#$R@@293|))
)))
(assert (forall ((|#$T0@@268| T@U) (|#$R@@294| T@U) (bx@@103 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@268|) TyType) (= (type |#$R@@294|) TyType)) (= (type bx@@103) BoxType)) ($IsBox bx@@103 (Tclass._System.___hFunc1LL |#$T0@@268| |#$R@@294|))) (and (= ($Box ($Unbox HandleTypeType bx@@103)) bx@@103) ($Is ($Unbox HandleTypeType bx@@103) (Tclass._System.___hFunc1LL |#$T0@@268| |#$R@@294|))))
 :qid |unknown.0:0|
 :skolemid |1237|
 :pattern ( ($IsBox bx@@103 (Tclass._System.___hFunc1LL |#$T0@@268| |#$R@@294|)))
)))
(assert (forall ((arg0@@355 T@U) (arg1@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL arg0@@355 arg1@@142)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1LL|
 :pattern ( (Tclass._System.___hPartialFunc1LL arg0@@355 arg1@@142))
)))
(assert (forall ((|#$T0@@269| T@U) (|#$R@@295| T@U) ) (!  (=> (and (= (type |#$T0@@269|) TyType) (= (type |#$R@@295|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LL |#$T0@@269| |#$R@@295|)) Tagclass._System.___hPartialFunc1LL) (= (TagFamily (Tclass._System.___hPartialFunc1LL |#$T0@@269| |#$R@@295|)) |tytagFamily$_#PartialFunc1LL|)))
 :qid |unknown.0:0|
 :skolemid |1238|
 :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@269| |#$R@@295|))
)))
(assert (forall ((arg0@@356 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_0 arg0@@356)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1LL_0|
 :pattern ( (Tclass._System.___hPartialFunc1LL_0 arg0@@356))
)))
(assert (forall ((|#$T0@@270| T@U) (|#$R@@296| T@U) ) (!  (=> (and (= (type |#$T0@@270|) TyType) (= (type |#$R@@296|) TyType)) (= (Tclass._System.___hPartialFunc1LL_0 (Tclass._System.___hPartialFunc1LL |#$T0@@270| |#$R@@296|)) |#$T0@@270|))
 :qid |unknown.0:0|
 :skolemid |1239|
 :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@270| |#$R@@296|))
)))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_1 arg0@@357)) TyType)
 :qid |funType:Tclass._System.___hPartialFunc1LL_1|
 :pattern ( (Tclass._System.___hPartialFunc1LL_1 arg0@@357))
)))
(assert (forall ((|#$T0@@271| T@U) (|#$R@@297| T@U) ) (!  (=> (and (= (type |#$T0@@271|) TyType) (= (type |#$R@@297|) TyType)) (= (Tclass._System.___hPartialFunc1LL_1 (Tclass._System.___hPartialFunc1LL |#$T0@@271| |#$R@@297|)) |#$R@@297|))
 :qid |unknown.0:0|
 :skolemid |1240|
 :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@271| |#$R@@297|))
)))
(assert (forall ((|#$T0@@272| T@U) (|#$R@@298| T@U) (bx@@104 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@272|) TyType) (= (type |#$R@@298|) TyType)) (= (type bx@@104) BoxType)) ($IsBox bx@@104 (Tclass._System.___hPartialFunc1LL |#$T0@@272| |#$R@@298|))) (and (= ($Box ($Unbox HandleTypeType bx@@104)) bx@@104) ($Is ($Unbox HandleTypeType bx@@104) (Tclass._System.___hPartialFunc1LL |#$T0@@272| |#$R@@298|))))
 :qid |unknown.0:0|
 :skolemid |1241|
 :pattern ( ($IsBox bx@@104 (Tclass._System.___hPartialFunc1LL |#$T0@@272| |#$R@@298|)))
)))
(assert (forall ((|#$T0@@273| T@U) (|#$R@@299| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (= (type |#$T0@@273|) TyType) (= (type |#$R@@299|) TyType)) (= (type |f#0@@63|) HandleTypeType)) (= ($Is |f#0@@63| (Tclass._System.___hPartialFunc1LL |#$T0@@273| |#$R@@299|))  (and ($Is |f#0@@63| (Tclass._System.___hFunc1LL |#$T0@@273| |#$R@@299|)) (forall ((|x0#0@@27| T@U) ) (!  (=> (and (= (type |x0#0@@27|) BoxType) ($IsBox |x0#0@@27| |#$T0@@273|)) (|Set#Equal| (Reads1 |#$T0@@273| |#$R@@299| $OneHeap |f#0@@63| |x0#0@@27|) (|Set#Empty| BoxType)))
 :qid |unknown.0:0|
 :skolemid |1242|
 :no-pattern (type |x0#0@@27|)
 :no-pattern (U_2_int |x0#0@@27|)
 :no-pattern (U_2_bool |x0#0@@27|)
)))))
 :qid |unknown.0:0|
 :skolemid |1243|
 :pattern ( ($Is |f#0@@63| (Tclass._System.___hPartialFunc1LL |#$T0@@273| |#$R@@299|)))
)))
(assert (forall ((|#$T0@@274| T@U) (|#$R@@300| T@U) (|f#0@@64| T@U) ($h@@47 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@274|) TyType) (= (type |#$R@@300|) TyType)) (= (type |f#0@@64|) HandleTypeType)) (= (type $h@@47) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1LL |#$T0@@274| |#$R@@300|) $h@@47) ($IsAlloc |f#0@@64| (Tclass._System.___hFunc1LL |#$T0@@274| |#$R@@300|) $h@@47)))
 :qid |unknown.0:0|
 :skolemid |1244|
 :pattern ( ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1LL |#$T0@@274| |#$R@@300|) $h@@47))
)))
(assert (forall ((arg0@@358 T@U) (arg1@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL arg0@@358 arg1@@143)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1LL|
 :pattern ( (Tclass._System.___hTotalFunc1LL arg0@@358 arg1@@143))
)))
(assert (forall ((|#$T0@@275| T@U) (|#$R@@301| T@U) ) (!  (=> (and (= (type |#$T0@@275|) TyType) (= (type |#$R@@301|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LL |#$T0@@275| |#$R@@301|)) Tagclass._System.___hTotalFunc1LL) (= (TagFamily (Tclass._System.___hTotalFunc1LL |#$T0@@275| |#$R@@301|)) |tytagFamily$_#TotalFunc1LL|)))
 :qid |unknown.0:0|
 :skolemid |1245|
 :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@275| |#$R@@301|))
)))
(assert (forall ((arg0@@359 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_0 arg0@@359)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1LL_0|
 :pattern ( (Tclass._System.___hTotalFunc1LL_0 arg0@@359))
)))
(assert (forall ((|#$T0@@276| T@U) (|#$R@@302| T@U) ) (!  (=> (and (= (type |#$T0@@276|) TyType) (= (type |#$R@@302|) TyType)) (= (Tclass._System.___hTotalFunc1LL_0 (Tclass._System.___hTotalFunc1LL |#$T0@@276| |#$R@@302|)) |#$T0@@276|))
 :qid |unknown.0:0|
 :skolemid |1246|
 :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@276| |#$R@@302|))
)))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_1 arg0@@360)) TyType)
 :qid |funType:Tclass._System.___hTotalFunc1LL_1|
 :pattern ( (Tclass._System.___hTotalFunc1LL_1 arg0@@360))
)))
(assert (forall ((|#$T0@@277| T@U) (|#$R@@303| T@U) ) (!  (=> (and (= (type |#$T0@@277|) TyType) (= (type |#$R@@303|) TyType)) (= (Tclass._System.___hTotalFunc1LL_1 (Tclass._System.___hTotalFunc1LL |#$T0@@277| |#$R@@303|)) |#$R@@303|))
 :qid |unknown.0:0|
 :skolemid |1247|
 :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@277| |#$R@@303|))
)))
(assert (forall ((|#$T0@@278| T@U) (|#$R@@304| T@U) (bx@@105 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@278|) TyType) (= (type |#$R@@304|) TyType)) (= (type bx@@105) BoxType)) ($IsBox bx@@105 (Tclass._System.___hTotalFunc1LL |#$T0@@278| |#$R@@304|))) (and (= ($Box ($Unbox HandleTypeType bx@@105)) bx@@105) ($Is ($Unbox HandleTypeType bx@@105) (Tclass._System.___hTotalFunc1LL |#$T0@@278| |#$R@@304|))))
 :qid |unknown.0:0|
 :skolemid |1248|
 :pattern ( ($IsBox bx@@105 (Tclass._System.___hTotalFunc1LL |#$T0@@278| |#$R@@304|)))
)))
(assert (forall ((|#$T0@@279| T@U) (|#$R@@305| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (= (type |#$T0@@279|) TyType) (= (type |#$R@@305|) TyType)) (= (type |f#0@@65|) HandleTypeType)) (= ($Is |f#0@@65| (Tclass._System.___hTotalFunc1LL |#$T0@@279| |#$R@@305|))  (and ($Is |f#0@@65| (Tclass._System.___hPartialFunc1LL |#$T0@@279| |#$R@@305|)) (forall ((|x0#0@@28| T@U) ) (!  (=> (and (= (type |x0#0@@28|) BoxType) ($IsBox |x0#0@@28| |#$T0@@279|)) (Requires1 |#$T0@@279| |#$R@@305| $OneHeap |f#0@@65| |x0#0@@28|))
 :qid |unknown.0:0|
 :skolemid |1249|
 :no-pattern (type |x0#0@@28|)
 :no-pattern (U_2_int |x0#0@@28|)
 :no-pattern (U_2_bool |x0#0@@28|)
)))))
 :qid |unknown.0:0|
 :skolemid |1250|
 :pattern ( ($Is |f#0@@65| (Tclass._System.___hTotalFunc1LL |#$T0@@279| |#$R@@305|)))
)))
(assert (forall ((|#$T0@@280| T@U) (|#$R@@306| T@U) (|f#0@@66| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@280|) TyType) (= (type |#$R@@306|) TyType)) (= (type |f#0@@66|) HandleTypeType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1LL |#$T0@@280| |#$R@@306|) $h@@48) ($IsAlloc |f#0@@66| (Tclass._System.___hPartialFunc1LL |#$T0@@280| |#$R@@306|) $h@@48)))
 :qid |unknown.0:0|
 :skolemid |1251|
 :pattern ( ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1LL |#$T0@@280| |#$R@@306|) $h@@48))
)))
(assert (= (type Tclass.CoordinationSystemRefinement.__default) TyType))
(assert (= (Tag Tclass.CoordinationSystemRefinement.__default) Tagclass.CoordinationSystemRefinement.__default))
(assert (= (TagFamily Tclass.CoordinationSystemRefinement.__default) tytagFamily$_default))
(assert (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 Tclass.CoordinationSystemRefinement.__default)) (and (= ($Box ($Unbox refType bx@@106)) bx@@106) ($Is ($Unbox refType bx@@106) Tclass.CoordinationSystemRefinement.__default)))
 :qid |unknown.0:0|
 :skolemid |1252|
 :pattern ( ($IsBox bx@@106 Tclass.CoordinationSystemRefinement.__default))
)))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.CoordinationSystemRefinement.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.CoordinationSystemRefinement.__default))))
 :qid |unknown.0:0|
 :skolemid |1253|
 :pattern ( ($Is $o@@9 Tclass.CoordinationSystemRefinement.__default))
)))
(assert (forall (($o@@10 T@U) ($h@@49 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.CoordinationSystemRefinement.__default $h@@49)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@10) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1254|
 :pattern ( ($IsAlloc $o@@10 Tclass.CoordinationSystemRefinement.__default $h@@49))
)))
(assert (= (type Tclass.CrashTolerantJournal.Variables) TyType))
(assert (= (Tag Tclass.CrashTolerantJournal.Variables) Tagclass.CrashTolerantJournal.Variables))
(assert (= (TagFamily Tclass.CrashTolerantJournal.Variables) tytagFamily$Variables))
(assert (forall ((bx@@107 T@U) ) (!  (=> (and (= (type bx@@107) BoxType) ($IsBox bx@@107 Tclass.CrashTolerantJournal.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@107)) bx@@107) ($Is ($Unbox DatatypeTypeType bx@@107) Tclass.CrashTolerantJournal.Variables)))
 :qid |unknown.0:0|
 :skolemid |1255|
 :pattern ( ($IsBox bx@@107 Tclass.CrashTolerantJournal.Variables))
)))
(assert (= (type Tclass.MsgHistoryMod.MsgHistory) TyType))
(assert (= (Tag Tclass.MsgHistoryMod.MsgHistory) Tagclass.MsgHistoryMod.MsgHistory))
(assert (= (TagFamily Tclass.MsgHistoryMod.MsgHistory) tytagFamily$MsgHistory))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass.MsgHistoryMod.MsgHistory)) (and (= ($Box ($Unbox DatatypeTypeType bx@@108)) bx@@108) ($Is ($Unbox DatatypeTypeType bx@@108) Tclass.MsgHistoryMod.MsgHistory)))
 :qid |unknown.0:0|
 :skolemid |1256|
 :pattern ( ($IsBox bx@@108 Tclass.MsgHistoryMod.MsgHistory))
)))
(assert  (and (forall ((arg0@@361 T@U) ) (! (= (type (CoordinationSystemRefinement.__default.IEJ arg0@@361)) DatatypeTypeType)
 :qid |funType:CoordinationSystemRefinement.__default.IEJ|
 :pattern ( (CoordinationSystemRefinement.__default.IEJ arg0@@361))
)) (forall ((arg0@@362 T@U) ) (! (= (type (CrashTolerantJournal.Variables.ephemeral arg0@@362)) DatatypeTypeType)
 :qid |funType:CrashTolerantJournal.Variables.ephemeral|
 :pattern ( (CrashTolerantJournal.Variables.ephemeral arg0@@362))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|ctj#0| T@U) ) (!  (=> (and (= (type |ctj#0|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.IEJ#canCall| |ctj#0|) (and (not (= 3 $FunctionContextHeight)) (and ($Is |ctj#0| Tclass.CrashTolerantJournal.Variables) (and (CrashTolerantJournal.Variables.WF |ctj#0|) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |ctj#0|))))))) (and (MsgHistoryMod.MsgHistory.WF (CoordinationSystemRefinement.__default.IEJ |ctj#0|)) ($Is (CoordinationSystemRefinement.__default.IEJ |ctj#0|) Tclass.MsgHistoryMod.MsgHistory)))
 :qid |CoordinationSystemRefinementminidfy.25:16|
 :skolemid |1257|
 :pattern ( (CoordinationSystemRefinement.__default.IEJ |ctj#0|))
))))
(assert (forall ((|ctj#0@@0| T@U) ) (!  (=> (and (= (type |ctj#0@@0|) DatatypeTypeType) ($Is |ctj#0@@0| Tclass.CrashTolerantJournal.Variables)) (= (|CoordinationSystemRefinement.__default.IEJ#requires| |ctj#0@@0|)  (and (CrashTolerantJournal.Variables.WF |ctj#0@@0|) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |ctj#0@@0|)))))
 :qid |CoordinationSystemRefinementminidfy.25:16|
 :skolemid |1258|
 :pattern ( (|CoordinationSystemRefinement.__default.IEJ#requires| |ctj#0@@0|))
)))
(assert  (and (forall ((arg0@@363 T@U) ) (! (= (type (CrashTolerantJournal.Ephemeral.v arg0@@363)) DatatypeTypeType)
 :qid |funType:CrashTolerantJournal.Ephemeral.v|
 :pattern ( (CrashTolerantJournal.Ephemeral.v arg0@@363))
)) (forall ((arg0@@364 T@U) ) (! (= (type (AbstractJournal.Variables.journal arg0@@364)) DatatypeTypeType)
 :qid |funType:AbstractJournal.Variables.journal|
 :pattern ( (AbstractJournal.Variables.journal arg0@@364))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|ctj#0@@1| T@U) ) (!  (=> (and (= (type |ctj#0@@1|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.IEJ#canCall| |ctj#0@@1|) (and (not (= 3 $FunctionContextHeight)) (and ($Is |ctj#0@@1| Tclass.CrashTolerantJournal.Variables) (and (CrashTolerantJournal.Variables.WF |ctj#0@@1|) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |ctj#0@@1|))))))) (and (and (CrashTolerantJournal.Variables.Variables_q |ctj#0@@1|) (AbstractJournal.Variables.Variables_q (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |ctj#0@@1|)))) (= (CoordinationSystemRefinement.__default.IEJ |ctj#0@@1|) (AbstractJournal.Variables.journal (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |ctj#0@@1|))))))
 :qid |CoordinationSystemRefinementminidfy.25:16|
 :skolemid |1259|
 :pattern ( (CoordinationSystemRefinement.__default.IEJ |ctj#0@@1|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|ctj#0@@2| T@U) ) (!  (=> (and (= (type |ctj#0@@2|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit |ctj#0@@2|)) (and (not (= 3 $FunctionContextHeight)) (and ($Is |ctj#0@@2| Tclass.CrashTolerantJournal.Variables) (and (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |ctj#0@@2|))))) (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |ctj#0@@2|)))))))))))) (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |ctj#0@@2|)) (AbstractJournal.Variables.Variables_q (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |ctj#0@@2|))))))) (= (CoordinationSystemRefinement.__default.IEJ (Lit |ctj#0@@2|)) (Lit (AbstractJournal.Variables.journal (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |ctj#0@@2|))))))))))
 :qid |CoordinationSystemRefinementminidfy.25:16|
 :weight 3
 :skolemid |1260|
 :pattern ( (CoordinationSystemRefinement.__default.IEJ (Lit |ctj#0@@2|)))
))))
(assert (= (type Tclass.CrashTolerantMap.Variables) TyType))
(assert (= (Tag Tclass.CrashTolerantMap.Variables) Tagclass.CrashTolerantMap.Variables))
(assert (= (TagFamily Tclass.CrashTolerantMap.Variables) tytagFamily$Variables))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass.CrashTolerantMap.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) Tclass.CrashTolerantMap.Variables)))
 :qid |unknown.0:0|
 :skolemid |1262|
 :pattern ( ($IsBox bx@@109 Tclass.CrashTolerantMap.Variables))
)))
(assert (= (type Tclass.TotalKMMapMod.TotalMap) TyType))
(assert (= (Tag Tclass.TotalKMMapMod.TotalMap) Tagclass.TotalKMMapMod.TotalMap))
(assert (= (TagFamily Tclass.TotalKMMapMod.TotalMap) tytagFamily$TotalMap))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass.TotalKMMapMod.TotalMap)) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@110)) bx@@110) ($Is ($Unbox (IMapType BoxType BoxType) bx@@110) Tclass.TotalKMMapMod.TotalMap)))
 :qid |unknown.0:0|
 :skolemid |1263|
 :pattern ( ($IsBox bx@@110 Tclass.TotalKMMapMod.TotalMap))
)))
(assert (forall ((arg0@@365 T@U) ) (! (= (type (Tclass.StampedMod.Stamped arg0@@365)) TyType)
 :qid |funType:Tclass.StampedMod.Stamped|
 :pattern ( (Tclass.StampedMod.Stamped arg0@@365))
)))
(assert (forall ((StampedMod.Stamped$T T@U) ) (!  (=> (= (type StampedMod.Stamped$T) TyType) (and (= (Tag (Tclass.StampedMod.Stamped StampedMod.Stamped$T)) Tagclass.StampedMod.Stamped) (= (TagFamily (Tclass.StampedMod.Stamped StampedMod.Stamped$T)) tytagFamily$Stamped)))
 :qid |unknown.0:0|
 :skolemid |1264|
 :pattern ( (Tclass.StampedMod.Stamped StampedMod.Stamped$T))
)))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (Tclass.StampedMod.Stamped_0 arg0@@366)) TyType)
 :qid |funType:Tclass.StampedMod.Stamped_0|
 :pattern ( (Tclass.StampedMod.Stamped_0 arg0@@366))
)))
(assert (forall ((StampedMod.Stamped$T@@0 T@U) ) (!  (=> (= (type StampedMod.Stamped$T@@0) TyType) (= (Tclass.StampedMod.Stamped_0 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@0)) StampedMod.Stamped$T@@0))
 :qid |unknown.0:0|
 :skolemid |1265|
 :pattern ( (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@0))
)))
(assert (forall ((StampedMod.Stamped$T@@1 T@U) (bx@@111 T@U) ) (!  (=> (and (and (= (type StampedMod.Stamped$T@@1) TyType) (= (type bx@@111) BoxType)) ($IsBox bx@@111 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@1))))
 :qid |unknown.0:0|
 :skolemid |1266|
 :pattern ( ($IsBox bx@@111 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@1)))
)))
(assert  (and (forall ((arg0@@367 T@U) ) (! (= (type (CoordinationSystemRefinement.__default.IMap arg0@@367)) DatatypeTypeType)
 :qid |funType:CoordinationSystemRefinement.__default.IMap|
 :pattern ( (CoordinationSystemRefinement.__default.IMap arg0@@367))
)) (forall ((arg0@@368 T@U) ) (! (= (type (CrashTolerantMap.Variables.ephemeral arg0@@368)) DatatypeTypeType)
 :qid |funType:CrashTolerantMap.Variables.ephemeral|
 :pattern ( (CrashTolerantMap.Variables.ephemeral arg0@@368))
))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|ctm#0| T@U) ) (!  (=> (and (= (type |ctm#0|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.IMap#canCall| |ctm#0|) (and (not (= 6 $FunctionContextHeight)) (and ($Is |ctm#0| Tclass.CrashTolerantMap.Variables) (and (CrashTolerantMap.Variables.WF |ctm#0|) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |ctm#0|))))))) ($Is (CoordinationSystemRefinement.__default.IMap |ctm#0|) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))
 :qid |CoordinationSystemRefinementminidfy.33:17|
 :skolemid |1267|
 :pattern ( (CoordinationSystemRefinement.__default.IMap |ctm#0|))
))))
(assert (forall ((|ctm#0@@0| T@U) ) (!  (=> (and (= (type |ctm#0@@0|) DatatypeTypeType) ($Is |ctm#0@@0| Tclass.CrashTolerantMap.Variables)) (= (|CoordinationSystemRefinement.__default.IMap#requires| |ctm#0@@0|)  (and (CrashTolerantMap.Variables.WF |ctm#0@@0|) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |ctm#0@@0|)))))
 :qid |CoordinationSystemRefinementminidfy.33:17|
 :skolemid |1268|
 :pattern ( (|CoordinationSystemRefinement.__default.IMap#requires| |ctm#0@@0|))
)))
(assert  (and (forall ((arg0@@369 T@U) ) (! (= (type (CrashTolerantMap.Ephemeral.v arg0@@369)) DatatypeTypeType)
 :qid |funType:CrashTolerantMap.Ephemeral.v|
 :pattern ( (CrashTolerantMap.Ephemeral.v arg0@@369))
)) (forall ((arg0@@370 T@U) ) (! (= (type (AbstractMap.Variables.stampedMap arg0@@370)) DatatypeTypeType)
 :qid |funType:AbstractMap.Variables.stampedMap|
 :pattern ( (AbstractMap.Variables.stampedMap arg0@@370))
))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|ctm#0@@1| T@U) ) (!  (=> (and (= (type |ctm#0@@1|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.IMap#canCall| |ctm#0@@1|) (and (not (= 6 $FunctionContextHeight)) (and ($Is |ctm#0@@1| Tclass.CrashTolerantMap.Variables) (and (CrashTolerantMap.Variables.WF |ctm#0@@1|) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |ctm#0@@1|))))))) (and (and (CrashTolerantMap.Variables.Variables_q |ctm#0@@1|) (AbstractMap.Variables.Variables_q (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |ctm#0@@1|)))) (= (CoordinationSystemRefinement.__default.IMap |ctm#0@@1|) (AbstractMap.Variables.stampedMap (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |ctm#0@@1|))))))
 :qid |CoordinationSystemRefinementminidfy.33:17|
 :skolemid |1269|
 :pattern ( (CoordinationSystemRefinement.__default.IMap |ctm#0@@1|))
))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|ctm#0@@2| T@U) ) (!  (=> (and (= (type |ctm#0@@2|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.IMap#canCall| (Lit |ctm#0@@2|)) (and (not (= 6 $FunctionContextHeight)) (and ($Is |ctm#0@@2| Tclass.CrashTolerantMap.Variables) (and (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |ctm#0@@2|))))) (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |ctm#0@@2|)))))))))))) (and (and (CrashTolerantMap.Variables.Variables_q (Lit |ctm#0@@2|)) (AbstractMap.Variables.Variables_q (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |ctm#0@@2|))))))) (= (CoordinationSystemRefinement.__default.IMap (Lit |ctm#0@@2|)) (Lit (AbstractMap.Variables.stampedMap (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |ctm#0@@2|))))))))))
 :qid |CoordinationSystemRefinementminidfy.33:17|
 :weight 3
 :skolemid |1270|
 :pattern ( (CoordinationSystemRefinement.__default.IMap (Lit |ctm#0@@2|)))
))))
(assert (= (type Tclass.CoordinationSystem.Variables) TyType))
(assert (= (Tag Tclass.CoordinationSystem.Variables) Tagclass.CoordinationSystem.Variables))
(assert (= (TagFamily Tclass.CoordinationSystem.Variables) tytagFamily$Variables))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass.CoordinationSystem.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@112)) bx@@112) ($Is ($Unbox DatatypeTypeType bx@@112) Tclass.CoordinationSystem.Variables)))
 :qid |unknown.0:0|
 :skolemid |1272|
 :pattern ( ($IsBox bx@@112 Tclass.CoordinationSystem.Variables))
)))
(assert (forall ((arg0@@371 T@U) ) (! (= (type (CoordinationSystem.Variables.journal arg0@@371)) DatatypeTypeType)
 :qid |funType:CoordinationSystem.Variables.journal|
 :pattern ( (CoordinationSystem.Variables.journal arg0@@371))
)))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| |v#0|) (and (not (= 9 $FunctionContextHeight)) (and ($Is |v#0| Tclass.CoordinationSystem.Variables) (and (CoordinationSystem.Variables.WF |v#0|) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v#0|)))))))) (INTERNAL_le_boogie 0 (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0|)))
 :qid |CoordinationSystemRefinementminidfy.43:28|
 :skolemid |1273|
 :pattern ( (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0|))
))))
(assert (forall ((|v#0@@0| T@U) ) (!  (=> (and (= (type |v#0@@0|) DatatypeTypeType) ($Is |v#0@@0| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#requires| |v#0@@0|)  (and (CoordinationSystem.Variables.WF |v#0@@0|) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v#0@@0|))))))
 :qid |CoordinationSystemRefinementminidfy.43:28|
 :skolemid |1274|
 :pattern ( (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#requires| |v#0@@0|))
)))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|v#0@@1| T@U) ) (!  (=> (and (= (type |v#0@@1|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| |v#0@@1|) (and (not (= 9 $FunctionContextHeight)) (and ($Is |v#0@@1| Tclass.CoordinationSystem.Variables) (and (CoordinationSystem.Variables.WF |v#0@@1|) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v#0@@1|)))))))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@1|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@1|))) (MsgHistoryMod.MsgHistory.MsgHistory_q (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@1|)))) (= (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0@@1|) (MsgHistoryMod.MsgHistory.seqEnd (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@1|))))))
 :qid |CoordinationSystemRefinementminidfy.43:28|
 :skolemid |1275|
 :pattern ( (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0@@1|))
))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|v#0@@2| T@U) ) (!  (=> (and (= (type |v#0@@2|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| (Lit |v#0@@2|)) (and (not (= 9 $FunctionContextHeight)) (and ($Is |v#0@@2| Tclass.CoordinationSystem.Variables) (U_2_bool (Lit (bool_2_U  (and (CoordinationSystem.Variables.WF (Lit |v#0@@2|)) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@2|)))))))))))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@2|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@2|))))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@2|))))))) (= (CoordinationSystemRefinement.__default.EphemeralSeqEnd (Lit |v#0@@2|)) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@2|))))))))))
 :qid |CoordinationSystemRefinementminidfy.43:28|
 :weight 3
 :skolemid |1276|
 :pattern ( (CoordinationSystemRefinement.__default.EphemeralSeqEnd (Lit |v#0@@2|)))
))))
(assert (= (type |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) TyType))
(assert (= (Tag |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) |Tagclass.AsyncMod_6#MapSpecMod#.PersistentState|))
(assert (= (TagFamily |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) tytagFamily$PersistentState))
(assert (forall ((bx@@113 T@U) ) (!  (=> (and (= (type bx@@113) BoxType) ($IsBox bx@@113 |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)) (and (= ($Box ($Unbox DatatypeTypeType bx@@113)) bx@@113) ($Is ($Unbox DatatypeTypeType bx@@113) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)))
 :qid |unknown.0:0|
 :skolemid |1279|
 :pattern ( ($IsBox bx@@113 |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))
)))
(assert (forall ((arg0@@372 T@U) ) (! (= (type (CoordinationSystemRefinement.__default.StampedMapToVersion arg0@@372)) DatatypeTypeType)
 :qid |funType:CoordinationSystemRefinement.__default.StampedMapToVersion|
 :pattern ( (CoordinationSystemRefinement.__default.StampedMapToVersion arg0@@372))
)))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|sm#0| T@U) ) (!  (=> (and (= (type |sm#0|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.StampedMapToVersion#canCall| |sm#0|) (and (not (= 11 $FunctionContextHeight)) ($Is |sm#0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) ($Is (CoordinationSystemRefinement.__default.StampedMapToVersion |sm#0|) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))
 :qid |CoordinationSystemRefinementminidfy.49:32|
 :skolemid |1280|
 :pattern ( (CoordinationSystemRefinement.__default.StampedMapToVersion |sm#0|))
))))
(assert (forall ((|sm#0@@0| T@U) ) (!  (=> (and (= (type |sm#0@@0|) DatatypeTypeType) ($Is |sm#0@@0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))) (= (|CoordinationSystemRefinement.__default.StampedMapToVersion#requires| |sm#0@@0|) true))
 :qid |CoordinationSystemRefinementminidfy.49:32|
 :skolemid |1281|
 :pattern ( (|CoordinationSystemRefinement.__default.StampedMapToVersion#requires| |sm#0@@0|))
)))
(assert  (and (and (forall ((arg0@@373 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| arg0@@373)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| arg0@@373))
)) (forall ((arg0@@374 T@U) ) (! (= (type (|#MapSpecMod.Variables.Variables| arg0@@374)) DatatypeTypeType)
 :qid |funType:#MapSpecMod.Variables.Variables|
 :pattern ( (|#MapSpecMod.Variables.Variables| arg0@@374))
))) (forall ((arg0@@375 T@U) ) (! (= (type (StampedMod.Stamped.value arg0@@375)) BoxType)
 :qid |funType:StampedMod.Stamped.value|
 :pattern ( (StampedMod.Stamped.value arg0@@375))
))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|sm#0@@1| T@U) ) (!  (=> (and (= (type |sm#0@@1|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.StampedMapToVersion#canCall| |sm#0@@1|) (and (not (= 11 $FunctionContextHeight)) ($Is |sm#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) (and (StampedMod.Stamped.Stamped_q |sm#0@@1|) (= (CoordinationSystemRefinement.__default.StampedMapToVersion |sm#0@@1|) (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| (|#MapSpecMod.Variables.Variables| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |sm#0@@1|)))))))
 :qid |CoordinationSystemRefinementminidfy.49:32|
 :skolemid |1282|
 :pattern ( (CoordinationSystemRefinement.__default.StampedMapToVersion |sm#0@@1|))
))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|sm#0@@2| T@U) ) (!  (=> (and (= (type |sm#0@@2|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.StampedMapToVersion#canCall| (Lit |sm#0@@2|)) (and (not (= 11 $FunctionContextHeight)) ($Is |sm#0@@2| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) (and (StampedMod.Stamped.Stamped_q (Lit |sm#0@@2|)) (= (CoordinationSystemRefinement.__default.StampedMapToVersion (Lit |sm#0@@2|)) (Lit (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| (Lit (|#MapSpecMod.Variables.Variables| (Lit ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value (Lit |sm#0@@2|)))))))))))
 :qid |CoordinationSystemRefinementminidfy.49:32|
 :weight 3
 :skolemid |1283|
 :pattern ( (CoordinationSystemRefinement.__default.StampedMapToVersion (Lit |sm#0@@2|)))
))))
(assert (forall ((arg0@@376 T@U) ) (! (= (type (Tclass.FloatingSeqMod.FloatingSeq arg0@@376)) TyType)
 :qid |funType:Tclass.FloatingSeqMod.FloatingSeq|
 :pattern ( (Tclass.FloatingSeqMod.FloatingSeq arg0@@376))
)))
(assert (forall ((FloatingSeqMod.FloatingSeq$T T@U) ) (!  (=> (= (type FloatingSeqMod.FloatingSeq$T) TyType) (and (= (Tag (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T)) Tagclass.FloatingSeqMod.FloatingSeq) (= (TagFamily (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T)) tytagFamily$FloatingSeq)))
 :qid |unknown.0:0|
 :skolemid |1284|
 :pattern ( (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T))
)))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (Tclass.FloatingSeqMod.FloatingSeq_0 arg0@@377)) TyType)
 :qid |funType:Tclass.FloatingSeqMod.FloatingSeq_0|
 :pattern ( (Tclass.FloatingSeqMod.FloatingSeq_0 arg0@@377))
)))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@0 T@U) ) (!  (=> (= (type FloatingSeqMod.FloatingSeq$T@@0) TyType) (= (Tclass.FloatingSeqMod.FloatingSeq_0 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@0)) FloatingSeqMod.FloatingSeq$T@@0))
 :qid |unknown.0:0|
 :skolemid |1285|
 :pattern ( (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@0))
)))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@1 T@U) (bx@@114 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@1) TyType) (= (type bx@@114) BoxType)) ($IsBox bx@@114 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@114)) bx@@114) ($Is ($Unbox DatatypeTypeType bx@@114) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@1))))
 :qid |unknown.0:0|
 :skolemid |1286|
 :pattern ( ($IsBox bx@@114 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@1)))
)))
(assert (forall ((arg0@@378 T@U) (arg1@@144 T@U) (arg2@@79 Int) ) (! (= (type (CoordinationSystemRefinement.__default.FloatingVersions arg0@@378 arg1@@144 arg2@@79)) DatatypeTypeType)
 :qid |funType:CoordinationSystemRefinement.__default.FloatingVersions|
 :pattern ( (CoordinationSystemRefinement.__default.FloatingVersions arg0@@378 arg1@@144 arg2@@79))
)))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|base#0| T@U) (|msgHistory#0| T@U) (|stableLSN#0| Int) ) (!  (=> (and (and (= (type |base#0|) DatatypeTypeType) (= (type |msgHistory#0|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.FloatingVersions#canCall| |base#0| |msgHistory#0| |stableLSN#0|) (and (not (= 13 $FunctionContextHeight)) (and (and (and ($Is |base#0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |msgHistory#0| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |stableLSN#0|)) (and (and (MsgHistoryMod.MsgHistory.WF |msgHistory#0|) (MsgHistoryMod.MsgHistory.CanFollow |msgHistory#0| (StampedMod.Stamped.seqEnd |base#0|))) (MsgHistoryMod.MsgHistory.CanDiscardTo |msgHistory#0| |stableLSN#0|)))))) (and (= (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CoordinationSystemRefinement.__default.FloatingVersions |base#0| |msgHistory#0| |stableLSN#0|)) (INTERNAL_add_boogie (MsgHistoryMod.MsgHistory.seqEnd |msgHistory#0|) 1)) ($Is (CoordinationSystemRefinement.__default.FloatingVersions |base#0| |msgHistory#0| |stableLSN#0|) (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))))
 :qid |CoordinationSystemRefinementminidfy.54:29|
 :skolemid |1287|
 :pattern ( (CoordinationSystemRefinement.__default.FloatingVersions |base#0| |msgHistory#0| |stableLSN#0|))
))))
(assert (forall ((|base#0@@0| T@U) (|msgHistory#0@@0| T@U) (|stableLSN#0@@0| Int) ) (!  (=> (and (= (type |base#0@@0|) DatatypeTypeType) (= (type |msgHistory#0@@0|) DatatypeTypeType)) (=> (and (and ($Is |base#0@@0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |msgHistory#0@@0| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |stableLSN#0@@0|)) (= (|CoordinationSystemRefinement.__default.FloatingVersions#requires| |base#0@@0| |msgHistory#0@@0| |stableLSN#0@@0|)  (and (and (MsgHistoryMod.MsgHistory.WF |msgHistory#0@@0|) (MsgHistoryMod.MsgHistory.CanFollow |msgHistory#0@@0| (StampedMod.Stamped.seqEnd |base#0@@0|))) (MsgHistoryMod.MsgHistory.CanDiscardTo |msgHistory#0@@0| |stableLSN#0@@0|)))))
 :qid |CoordinationSystemRefinementminidfy.54:29|
 :skolemid |1288|
 :pattern ( (|CoordinationSystemRefinement.__default.FloatingVersions#requires| |base#0@@0| |msgHistory#0@@0| |stableLSN#0@@0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (= (type |AsyncMod_6#MapSpecMod#.__default.InitPersistentState|) DatatypeTypeType) (forall ((arg0@@379 T@U) (arg1@@145 Int) ) (! (= (type (MsgHistoryMod.MsgHistory.DiscardRecent arg0@@379 arg1@@145)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.MsgHistory.DiscardRecent|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardRecent arg0@@379 arg1@@145))
))) (forall ((arg0@@380 T@U) (arg1@@146 T@U) ) (! (= (type (MsgHistoryMod.__default.MapPlusHistory arg0@@380 arg1@@146)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.__default.MapPlusHistory|
 :pattern ( (MsgHistoryMod.__default.MapPlusHistory arg0@@380 arg1@@146))
))) (forall ((arg0@@381 T@U) ) (! (= (type (|lambda#10| arg0@@381)) (MapType0Type LayerTypeType HandleTypeType))
 :qid |funType:lambda#10|
 :pattern ( (|lambda#10| arg0@@381))
))) (forall ((arg0@@382 Int) (arg1@@147 Int) (arg2@@80 T@U) (arg3@@45 T@U) (arg4@@28 T@U) ) (! (= (type (|lambda#6| arg0@@382 arg1@@147 arg2@@80 arg3@@45 arg4@@28)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))
 :qid |funType:lambda#6|
 :pattern ( (|lambda#6| arg0@@382 arg1@@147 arg2@@80 arg3@@45 arg4@@28))
))) (forall ((arg0@@383 T@U) ) (! (= (type (|lambda#7| arg0@@383)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))
 :qid |funType:lambda#7|
 :pattern ( (|lambda#7| arg0@@383))
))) (forall ((arg0@@384 T@U) ) (! (= (type (|lambda#9| arg0@@384)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))
 :qid |funType:lambda#9|
 :pattern ( (|lambda#9| arg0@@384))
))) (forall ((arg0@@385 Bool) ) (! (= (type (|lambda#8| arg0@@385)) (MapType0Type refType boolType))
 :qid |funType:lambda#8|
 :pattern ( (|lambda#8| arg0@@385))
))) (= (type $LZ) LayerTypeType)) (forall ((arg0@@386 T@U) (arg1@@148 Int) (arg2@@81 Int) (arg3@@46 T@U) ) (! (= (type (FloatingSeqMod.__default.floatingSeq arg0@@386 arg1@@148 arg2@@81 arg3@@46)) DatatypeTypeType)
 :qid |funType:FloatingSeqMod.__default.floatingSeq|
 :pattern ( (FloatingSeqMod.__default.floatingSeq arg0@@386 arg1@@148 arg2@@81 arg3@@46))
))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|base#0@@1| T@U) (|msgHistory#0@@1| T@U) (|stableLSN#0@@1| Int) ) (!  (=> (and (and (= (type |base#0@@1|) DatatypeTypeType) (= (type |msgHistory#0@@1|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.FloatingVersions#canCall| |base#0@@1| |msgHistory#0@@1| |stableLSN#0@@1|) (and (not (= 13 $FunctionContextHeight)) (and (and (and ($Is |base#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |msgHistory#0@@1| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |stableLSN#0@@1|)) (and (and (MsgHistoryMod.MsgHistory.WF |msgHistory#0@@1|) (MsgHistoryMod.MsgHistory.CanFollow |msgHistory#0@@1| (StampedMod.Stamped.seqEnd |base#0@@1|))) (MsgHistoryMod.MsgHistory.CanDiscardTo |msgHistory#0@@1| |stableLSN#0@@1|)))))) (and (and |AsyncMod_6#MapSpecMod#.__default.InitPersistentState#canCall| (let ((|arbitrary#0| (Lit |AsyncMod_6#MapSpecMod#.__default.InitPersistentState|)))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q |msgHistory#0@@1|) (forall ((|$l#1#lsn#0| Int) ) (!  (and (=> (INTERNAL_le_boogie |stableLSN#0@@1| |$l#1#lsn#0|) (MsgHistoryMod.MsgHistory.MsgHistory_q |msgHistory#0@@1|)) (=> (and (INTERNAL_le_boogie |stableLSN#0@@1| |$l#1#lsn#0|) (INTERNAL_le_boogie |$l#1#lsn#0| (MsgHistoryMod.MsgHistory.seqEnd |msgHistory#0@@1|))) (and (and (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| |msgHistory#0@@1| |$l#1#lsn#0|) (|MsgHistoryMod.__default.MapPlusHistory#canCall| |base#0@@1| (MsgHistoryMod.MsgHistory.DiscardRecent |msgHistory#0@@1| |$l#1#lsn#0|))) (|CoordinationSystemRefinement.__default.StampedMapToVersion#canCall| (MsgHistoryMod.__default.MapPlusHistory |base#0@@1| (MsgHistoryMod.MsgHistory.DiscardRecent |msgHistory#0@@1| |$l#1#lsn#0|))))))
 :qid |unknown.0:0|
 :skolemid |1289|
 :no-pattern (INTERNAL_le_boogie |$l#1#lsn#0| (MsgHistoryMod.MsgHistory.seqEnd |msgHistory#0@@1|))
 :no-pattern (INTERNAL_le_boogie |stableLSN#0@@1| |$l#1#lsn#0|)
 :no-pattern (INTERNAL_le_boogie |stableLSN#0@@1| |$l#1#lsn#0|)
))) (|FloatingSeqMod.__default.floatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |stableLSN#0@@1| (INTERNAL_add_boogie (MsgHistoryMod.MsgHistory.seqEnd |msgHistory#0@@1|) 1) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#6| |stableLSN#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |msgHistory#0@@1|) |base#0@@1| |msgHistory#0@@1| |arbitrary#0|) (|lambda#7| TInt) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))))))) (= (CoordinationSystemRefinement.__default.FloatingVersions |base#0@@1| |msgHistory#0@@1| |stableLSN#0@@1|) (let ((|arbitrary#0@@0| (Lit |AsyncMod_6#MapSpecMod#.__default.InitPersistentState|)))
(FloatingSeqMod.__default.floatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |stableLSN#0@@1| (INTERNAL_add_boogie (MsgHistoryMod.MsgHistory.seqEnd |msgHistory#0@@1|) 1) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#6| |stableLSN#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |msgHistory#0@@1|) |base#0@@1| |msgHistory#0@@1| |arbitrary#0@@0|) (|lambda#7| TInt) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))))))))
 :qid |CoordinationSystemRefinementminidfy.54:29|
 :skolemid |1290|
 :pattern ( (CoordinationSystemRefinement.__default.FloatingVersions |base#0@@1| |msgHistory#0@@1| |stableLSN#0@@1|))
))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|base#0@@2| T@U) (|msgHistory#0@@2| T@U) (|stableLSN#0@@2| Int) ) (!  (=> (and (and (= (type |base#0@@2|) DatatypeTypeType) (= (type |msgHistory#0@@2|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.FloatingVersions#canCall| (Lit |base#0@@2|) (Lit |msgHistory#0@@2|) (LitInt |stableLSN#0@@2|)) (and (not (= 13 $FunctionContextHeight)) (and (and (and ($Is |base#0@@2| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |msgHistory#0@@2| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |stableLSN#0@@2|)) (and (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit |msgHistory#0@@2|))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit |msgHistory#0@@2|) (LitInt (StampedMod.Stamped.seqEnd (Lit |base#0@@2|)))))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit |msgHistory#0@@2|) (LitInt |stableLSN#0@@2|)))))))))) (and (and |AsyncMod_6#MapSpecMod#.__default.InitPersistentState#canCall| (let ((|arbitrary#1| (Lit |AsyncMod_6#MapSpecMod#.__default.InitPersistentState|)))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |msgHistory#0@@2|)) (forall ((|$l#4#lsn#0| Int) ) (!  (and (=> (INTERNAL_le_boogie |stableLSN#0@@2| |$l#4#lsn#0|) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |msgHistory#0@@2|))) (=> (and (INTERNAL_le_boogie |stableLSN#0@@2| |$l#4#lsn#0|) (INTERNAL_le_boogie |$l#4#lsn#0| (MsgHistoryMod.MsgHistory.seqEnd (Lit |msgHistory#0@@2|)))) (and (and (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit |msgHistory#0@@2|) |$l#4#lsn#0|) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (Lit |base#0@@2|) (MsgHistoryMod.MsgHistory.DiscardRecent (Lit |msgHistory#0@@2|) |$l#4#lsn#0|))) (|CoordinationSystemRefinement.__default.StampedMapToVersion#canCall| (MsgHistoryMod.__default.MapPlusHistory (Lit |base#0@@2|) (MsgHistoryMod.MsgHistory.DiscardRecent (Lit |msgHistory#0@@2|) |$l#4#lsn#0|))))))
 :qid |unknown.0:0|
 :skolemid |1291|
 :no-pattern (INTERNAL_le_boogie |$l#4#lsn#0| (MsgHistoryMod.MsgHistory.seqEnd (Lit |msgHistory#0@@2|)))
 :no-pattern (INTERNAL_le_boogie |stableLSN#0@@2| |$l#4#lsn#0|)
 :no-pattern (INTERNAL_le_boogie |stableLSN#0@@2| |$l#4#lsn#0|)
))) (|FloatingSeqMod.__default.floatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (LitInt |stableLSN#0@@2|) (LitInt (INTERNAL_add_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit |msgHistory#0@@2|)) 1)) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#6| |stableLSN#0@@2| (MsgHistoryMod.MsgHistory.seqEnd (Lit |msgHistory#0@@2|)) (Lit |base#0@@2|) (Lit |msgHistory#0@@2|) |arbitrary#1|) (|lambda#7| TInt) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))))))) (= (CoordinationSystemRefinement.__default.FloatingVersions (Lit |base#0@@2|) (Lit |msgHistory#0@@2|) (LitInt |stableLSN#0@@2|)) (let ((|arbitrary#1@@0| (Lit |AsyncMod_6#MapSpecMod#.__default.InitPersistentState|)))
(Lit (FloatingSeqMod.__default.floatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (LitInt |stableLSN#0@@2|) (LitInt (INTERNAL_add_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit |msgHistory#0@@2|)) 1)) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#6| |stableLSN#0@@2| (MsgHistoryMod.MsgHistory.seqEnd (Lit |msgHistory#0@@2|)) (Lit |base#0@@2|) (Lit |msgHistory#0@@2|) |arbitrary#1@@0|) (|lambda#7| TInt) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ)))))))))
 :qid |CoordinationSystemRefinementminidfy.54:29|
 :weight 3
 :skolemid |1292|
 :pattern ( (CoordinationSystemRefinement.__default.FloatingVersions (Lit |base#0@@2|) (Lit |msgHistory#0@@2|) (LitInt |stableLSN#0@@2|)))
))))
(assert (= (type Tclass.CrashTolerantMapSpecMod.Constants) TyType))
(assert (= (Tag Tclass.CrashTolerantMapSpecMod.Constants) Tagclass.CrashTolerantMapSpecMod.Constants))
(assert (= (TagFamily Tclass.CrashTolerantMapSpecMod.Constants) tytagFamily$Constants))
(assert (forall ((bx@@115 T@U) ) (!  (=> (and (= (type bx@@115) BoxType) ($IsBox bx@@115 Tclass.CrashTolerantMapSpecMod.Constants)) (and (= ($Box ($Unbox DatatypeTypeType bx@@115)) bx@@115) ($Is ($Unbox DatatypeTypeType bx@@115) Tclass.CrashTolerantMapSpecMod.Constants)))
 :qid |unknown.0:0|
 :skolemid |1306|
 :pattern ( ($IsBox bx@@115 Tclass.CrashTolerantMapSpecMod.Constants))
)))
(assert (= (type CoordinationSystemRefinement.__default.Ic) DatatypeTypeType))
(assert  (=> (<= 15 $FunctionContextHeight) (=> (or |CoordinationSystemRefinement.__default.Ic#canCall| (not (= 15 $FunctionContextHeight))) ($Is CoordinationSystemRefinement.__default.Ic Tclass.CrashTolerantMapSpecMod.Constants))))
(assert (= |CoordinationSystemRefinement.__default.Ic#requires| true))
(assert (= (type |#CrashTolerantMapSpecMod.Constants.Constants|) DatatypeTypeType))
(assert  (=> (<= 15 $FunctionContextHeight) (=> (or |CoordinationSystemRefinement.__default.Ic#canCall| (not (= 15 $FunctionContextHeight))) (= CoordinationSystemRefinement.__default.Ic (Lit |#CrashTolerantMapSpecMod.Constants.Constants|)))))
(assert  (=> (<= 15 $FunctionContextHeight) (=> (or |CoordinationSystemRefinement.__default.Ic#canCall| (not (= 15 $FunctionContextHeight))) (= CoordinationSystemRefinement.__default.Ic (Lit |#CrashTolerantMapSpecMod.Constants.Constants|)))))
(assert (= (type Tclass.CrashTolerantMapSpecMod.Variables) TyType))
(assert (= (Tag Tclass.CrashTolerantMapSpecMod.Variables) Tagclass.CrashTolerantMapSpecMod.Variables))
(assert (= (TagFamily Tclass.CrashTolerantMapSpecMod.Variables) tytagFamily$Variables))
(assert (forall ((bx@@116 T@U) ) (!  (=> (and (= (type bx@@116) BoxType) ($IsBox bx@@116 Tclass.CrashTolerantMapSpecMod.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@116)) bx@@116) ($Is ($Unbox DatatypeTypeType bx@@116) Tclass.CrashTolerantMapSpecMod.Variables)))
 :qid |unknown.0:0|
 :skolemid |1307|
 :pattern ( ($IsBox bx@@116 Tclass.CrashTolerantMapSpecMod.Variables))
)))
(assert (forall ((arg0@@387 T@U) ) (! (= (type (CoordinationSystemRefinement.__default.I arg0@@387)) DatatypeTypeType)
 :qid |funType:CoordinationSystemRefinement.__default.I|
 :pattern ( (CoordinationSystemRefinement.__default.I arg0@@387))
)))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((|v#0@@3| T@U) ) (!  (=> (and (= (type |v#0@@3|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.I#canCall| |v#0@@3|) (and (not (= 28 $FunctionContextHeight)) ($Is |v#0@@3| Tclass.CoordinationSystem.Variables)))) ($Is (CoordinationSystemRefinement.__default.I |v#0@@3|) Tclass.CrashTolerantMapSpecMod.Variables))
 :qid |CoordinationSystemRefinementminidfy.74:14|
 :skolemid |1308|
 :pattern ( (CoordinationSystemRefinement.__default.I |v#0@@3|))
))))
(assert (forall ((|v#0@@4| T@U) ) (!  (=> (and (= (type |v#0@@4|) DatatypeTypeType) ($Is |v#0@@4| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.I#requires| |v#0@@4|) true))
 :qid |CoordinationSystemRefinementminidfy.74:14|
 :skolemid |1309|
 :pattern ( (|CoordinationSystemRefinement.__default.I#requires| |v#0@@4|))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@388 T@U) ) (! (= (type (CrashTolerantJournal.Variables.persistent arg0@@388)) DatatypeTypeType)
 :qid |funType:CrashTolerantJournal.Variables.persistent|
 :pattern ( (CrashTolerantJournal.Variables.persistent arg0@@388))
)) (forall ((arg0@@389 T@U) ) (! (= (type (CoordinationSystem.Variables.ephemeral arg0@@389)) DatatypeTypeType)
 :qid |funType:CoordinationSystem.Variables.ephemeral|
 :pattern ( (CoordinationSystem.Variables.ephemeral arg0@@389))
))) (forall ((arg0@@390 T@U) ) (! (= (type (CoordinationSystem.Variables.mapadt arg0@@390)) DatatypeTypeType)
 :qid |funType:CoordinationSystem.Variables.mapadt|
 :pattern ( (CoordinationSystem.Variables.mapadt arg0@@390))
))) (forall ((arg0@@391 T@U) ) (! (= (type (CrashTolerantMap.Variables.persistent arg0@@391)) DatatypeTypeType)
 :qid |funType:CrashTolerantMap.Variables.persistent|
 :pattern ( (CrashTolerantMap.Variables.persistent arg0@@391))
))) (= (type CrashTolerantMapSpecMod.__default.InitState) DatatypeTypeType)) (forall ((arg0@@392 T@U) (arg1@@149 T@U) (arg2@@82 T@U) ) (! (= (type (|#CrashTolerantMapSpecMod.Variables.Variables| arg0@@392 arg1@@149 arg2@@82)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMapSpecMod.Variables.Variables|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| arg0@@392 arg1@@149 arg2@@82))
))) (forall ((arg0@@393 T@U) ) (! (= (type (CoordinationSystem.Ephemeral.progress arg0@@393)) DatatypeTypeType)
 :qid |funType:CoordinationSystem.Ephemeral.progress|
 :pattern ( (CoordinationSystem.Ephemeral.progress arg0@@393))
))) (forall ((arg0@@394 T@U) ) (! (= (type (CoordinationSystem.Ephemeral.syncReqs arg0@@394)) (MapType BoxType BoxType))
 :qid |funType:CoordinationSystem.Ephemeral.syncReqs|
 :pattern ( (CoordinationSystem.Ephemeral.syncReqs arg0@@394))
))) (= (type |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|) DatatypeTypeType)))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((|v#0@@5| T@U) ) (!  (=> (and (= (type |v#0@@5|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.I#canCall| |v#0@@5|) (and (not (= 28 $FunctionContextHeight)) ($Is |v#0@@5| Tclass.CoordinationSystem.Variables)))) (and (and (and (|CoordinationSystemRefinement.__default.Inv#canCall| |v#0@@5|) (=> (not (CoordinationSystemRefinement.__default.Inv |v#0@@5|)) |CrashTolerantMapSpecMod.__default.InitState#canCall|)) (=> (CoordinationSystemRefinement.__default.Inv |v#0@@5|) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@5|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@5|))) (MsgHistoryMod.MsgHistory.MsgHistory_q (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@5|)))) (let ((|stableLSN#0@@3| (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@5|)))))
 (and (and (CoordinationSystem.Variables.Variables_q |v#0@@5|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@5|)) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@5|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@5|))) (and (CoordinationSystem.Variables.Variables_q |v#0@@5|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@5|)))) (|CoordinationSystemRefinement.__default.FloatingVersions#canCall| (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@5|)) (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@5|)) |stableLSN#0@@3|)) (CoordinationSystem.Variables.Variables_q |v#0@@5|)) (CoordinationSystem.Variables.Variables_q |v#0@@5|)))) (=> (not (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@5|))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@5|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@5|))) (and (CoordinationSystem.Variables.Variables_q |v#0@@5|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@5|)))) (|CoordinationSystemRefinement.__default.FloatingVersions#canCall| (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@5|)) (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@5|)) |stableLSN#0@@3|)) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall|))))))) (= (CoordinationSystemRefinement.__default.I |v#0@@5|) (ite  (not (CoordinationSystemRefinement.__default.Inv |v#0@@5|)) CrashTolerantMapSpecMod.__default.InitState (let ((|stableLSN#0@@4| (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@5|)))))
(ite (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@5|)) (|#CrashTolerantMapSpecMod.Variables.Variables| (CoordinationSystemRefinement.__default.FloatingVersions (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@5|)) (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@5|)) |stableLSN#0@@4|) (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@5|)) (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@5|))) (|#CrashTolerantMapSpecMod.Variables.Variables| (CoordinationSystemRefinement.__default.FloatingVersions (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@5|)) (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@5|)) |stableLSN#0@@4|) (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|) (Lit (|Map#Empty| BoxType BoxType)))))))))
 :qid |CoordinationSystemRefinementminidfy.74:14|
 :skolemid |1310|
 :pattern ( (CoordinationSystemRefinement.__default.I |v#0@@5|))
))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((|v#0@@6| T@U) ) (!  (=> (and (= (type |v#0@@6|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.I#canCall| (Lit |v#0@@6|)) (and (not (= 28 $FunctionContextHeight)) ($Is |v#0@@6| Tclass.CoordinationSystem.Variables)))) (and (and (and (|CoordinationSystemRefinement.__default.Inv#canCall| (Lit |v#0@@6|)) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.Inv (Lit |v#0@@6|)))))) |CrashTolerantMapSpecMod.__default.InitState#canCall|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.Inv (Lit |v#0@@6|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|))))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|))))))) (let ((|stableLSN#1| (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|)))))))))
 (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@6|))))))) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@6|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|)))))) (|CoordinationSystemRefinement.__default.FloatingVersions#canCall| (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@6|))))) (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|))))) |stableLSN#1|)) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|))))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@6|)))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@6|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@6|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|)))))) (|CoordinationSystemRefinement.__default.FloatingVersions#canCall| (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@6|))))) (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|))))) |stableLSN#1|)) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall|))))))) (= (CoordinationSystemRefinement.__default.I (Lit |v#0@@6|)) (ite  (not (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.Inv (Lit |v#0@@6|)))))) CrashTolerantMapSpecMod.__default.InitState (let ((|stableLSN#1@@0| (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|)))))))))
(ite (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@6|)))) (|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (CoordinationSystemRefinement.__default.FloatingVersions (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@6|))))) (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|))))) |stableLSN#1@@0|)) (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@6|))))) (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@6|)))))) (|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (CoordinationSystemRefinement.__default.FloatingVersions (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@6|))))) (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@6|))))) |stableLSN#1@@0|)) (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|) (Lit (|Map#Empty| BoxType BoxType)))))))))
 :qid |CoordinationSystemRefinementminidfy.74:14|
 :weight 3
 :skolemid |1311|
 :pattern ( (CoordinationSystemRefinement.__default.I (Lit |v#0@@6|)))
))))
(assert (forall (($ly T@U) (|j0#0| T@U) (|j1#0| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type |j0#0|) DatatypeTypeType)) (= (type |j1#0|) DatatypeTypeType)) (= (CoordinationSystemRefinement.__default.JournalOverlapsAgree ($LS $ly) |j0#0| |j1#0|) (CoordinationSystemRefinement.__default.JournalOverlapsAgree $ly |j0#0| |j1#0|)))
 :qid |CoordinationSystemRefinementminidfy.90:23|
 :skolemid |1322|
 :pattern ( (CoordinationSystemRefinement.__default.JournalOverlapsAgree ($LS $ly) |j0#0| |j1#0|))
)))
(assert (forall ((arg0@@395 T@U) ) (! (= (type (AsFuelBottom arg0@@395)) LayerTypeType)
 :qid |funType:AsFuelBottom|
 :pattern ( (AsFuelBottom arg0@@395))
)))
(assert (forall (($ly@@0 T@U) (|j0#0@@0| T@U) (|j1#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type |j0#0@@0|) DatatypeTypeType)) (= (type |j1#0@@0|) DatatypeTypeType)) (= (CoordinationSystemRefinement.__default.JournalOverlapsAgree $ly@@0 |j0#0@@0| |j1#0@@0|) (CoordinationSystemRefinement.__default.JournalOverlapsAgree $LZ |j0#0@@0| |j1#0@@0|)))
 :qid |CoordinationSystemRefinementminidfy.90:23|
 :skolemid |1323|
 :pattern ( (CoordinationSystemRefinement.__default.JournalOverlapsAgree (AsFuelBottom $ly@@0) |j0#0@@0| |j1#0@@0|))
)))
(assert  (=> (<= 21 $FunctionContextHeight) (forall (($ly@@1 T@U) (|j0#0@@1| T@U) (|j1#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |j0#0@@1|) DatatypeTypeType)) (= (type |j1#0@@1|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| |j0#0@@1| |j1#0@@1|) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |j0#0@@1| Tclass.MsgHistoryMod.MsgHistory) ($Is |j1#0@@1| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF |j0#0@@1|) (MsgHistoryMod.MsgHistory.WF |j1#0@@1|)))))) true)
 :qid |CoordinationSystemRefinementminidfy.90:23|
 :skolemid |1324|
 :pattern ( (CoordinationSystemRefinement.__default.JournalOverlapsAgree $ly@@1 |j0#0@@1| |j1#0@@1|))
))))
(assert (forall (($ly@@2 T@U) (|j0#0@@2| T@U) (|j1#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |j0#0@@2|) DatatypeTypeType)) (= (type |j1#0@@2|) DatatypeTypeType)) (and ($Is |j0#0@@2| Tclass.MsgHistoryMod.MsgHistory) ($Is |j1#0@@2| Tclass.MsgHistoryMod.MsgHistory))) (= (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#requires| $ly@@2 |j0#0@@2| |j1#0@@2|)  (and (MsgHistoryMod.MsgHistory.WF |j0#0@@2|) (MsgHistoryMod.MsgHistory.WF |j1#0@@2|))))
 :qid |CoordinationSystemRefinementminidfy.90:23|
 :skolemid |1325|
 :pattern ( (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#requires| $ly@@2 |j0#0@@2| |j1#0@@2|))
)))
(assert (forall ((arg0@@396 T@U) ) (! (= (type (MsgHistoryMod.MsgHistory.msgs arg0@@396)) (MapType BoxType BoxType))
 :qid |funType:MsgHistoryMod.MsgHistory.msgs|
 :pattern ( (MsgHistoryMod.MsgHistory.msgs arg0@@396))
)))
(assert  (=> (<= 21 $FunctionContextHeight) (forall (($ly@@3 T@U) (|j0#0@@3| T@U) (|j1#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |j0#0@@3|) DatatypeTypeType)) (= (type |j1#0@@3|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| |j0#0@@3| |j1#0@@3|) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |j0#0@@3| Tclass.MsgHistoryMod.MsgHistory) ($Is |j1#0@@3| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF |j0#0@@3|) (MsgHistoryMod.MsgHistory.WF |j1#0@@3|)))))) (and (forall ((|lsn#0| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#0|) (and (and (|MsgHistoryMod.MsgHistory.Contains#canCall| |j0#0@@3| |lsn#0|) (=> (MsgHistoryMod.MsgHistory.Contains |j0#0@@3| |lsn#0|) (|MsgHistoryMod.MsgHistory.Contains#canCall| |j1#0@@3| |lsn#0|))) (=> (and (MsgHistoryMod.MsgHistory.Contains |j0#0@@3| |lsn#0|) (MsgHistoryMod.MsgHistory.Contains |j1#0@@3| |lsn#0|)) (and (and (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j0#0@@3|)) ($Box (int_2_U |lsn#0|))))) (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j1#0@@3|)) ($Box (int_2_U |lsn#0|)))))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q |j0#0@@3|) (MsgHistoryMod.MsgHistory.MsgHistory_q |j1#0@@3|))))))
 :qid |CoordinationSystemRefinementminidfy.93:12|
 :skolemid |1327|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j1#0@@3|)) ($Box (int_2_U |lsn#0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j0#0@@3|)) ($Box (int_2_U |lsn#0|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j1#0@@3| |lsn#0|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j0#0@@3| |lsn#0|))
)) (= (CoordinationSystemRefinement.__default.JournalOverlapsAgree ($LS $ly@@3) |j0#0@@3| |j1#0@@3|) (forall ((|lsn#0@@0| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |lsn#0@@0|) (and (MsgHistoryMod.MsgHistory.Contains |j0#0@@3| |lsn#0@@0|) (MsgHistoryMod.MsgHistory.Contains |j1#0@@3| |lsn#0@@0|))) (|MsgHistoryMod.KeyedMessage#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j0#0@@3|)) ($Box (int_2_U |lsn#0@@0|)))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j1#0@@3|)) ($Box (int_2_U |lsn#0@@0|))))))
 :qid |CoordinationSystemRefinementminidfy.93:12|
 :skolemid |1326|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j1#0@@3|)) ($Box (int_2_U |lsn#0@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j0#0@@3|)) ($Box (int_2_U |lsn#0@@0|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j1#0@@3| |lsn#0@@0|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j0#0@@3| |lsn#0@@0|))
)))))
 :qid |CoordinationSystemRefinementminidfy.90:23|
 :skolemid |1328|
 :pattern ( (CoordinationSystemRefinement.__default.JournalOverlapsAgree ($LS $ly@@3) |j0#0@@3| |j1#0@@3|))
))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall (($ly@@4 T@U) (|j0#0@@4| T@U) (|j1#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |j0#0@@4|) DatatypeTypeType)) (= (type |j1#0@@4|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| (Lit |j0#0@@4|) (Lit |j1#0@@4|)) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |j0#0@@4| Tclass.MsgHistoryMod.MsgHistory) ($Is |j1#0@@4| Tclass.MsgHistoryMod.MsgHistory)) (U_2_bool (Lit (bool_2_U  (and (MsgHistoryMod.MsgHistory.WF (Lit |j0#0@@4|)) (MsgHistoryMod.MsgHistory.WF (Lit |j1#0@@4|)))))))))) (and (forall ((|lsn#1| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#1|) (and (and (|MsgHistoryMod.MsgHistory.Contains#canCall| (Lit |j0#0@@4|) |lsn#1|) (=> (MsgHistoryMod.MsgHistory.Contains (Lit |j0#0@@4|) |lsn#1|) (|MsgHistoryMod.MsgHistory.Contains#canCall| (Lit |j1#0@@4|) |lsn#1|))) (=> (and (MsgHistoryMod.MsgHistory.Contains (Lit |j0#0@@4|) |lsn#1|) (MsgHistoryMod.MsgHistory.Contains (Lit |j1#0@@4|) |lsn#1|)) (and (and (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |j0#0@@4|)))) ($Box (int_2_U |lsn#1|))))) (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |j1#0@@4|)))) ($Box (int_2_U |lsn#1|)))))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |j0#0@@4|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |j1#0@@4|)))))))
 :qid |CoordinationSystemRefinementminidfy.93:12|
 :skolemid |1330|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j1#0@@4|)) ($Box (int_2_U |lsn#1|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j0#0@@4|)) ($Box (int_2_U |lsn#1|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j1#0@@4| |lsn#1|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j0#0@@4| |lsn#1|))
)) (= (CoordinationSystemRefinement.__default.JournalOverlapsAgree ($LS $ly@@4) (Lit |j0#0@@4|) (Lit |j1#0@@4|)) (forall ((|lsn#1@@0| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |lsn#1@@0|) (and (MsgHistoryMod.MsgHistory.Contains (Lit |j0#0@@4|) |lsn#1@@0|) (MsgHistoryMod.MsgHistory.Contains (Lit |j1#0@@4|) |lsn#1@@0|))) (|MsgHistoryMod.KeyedMessage#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |j0#0@@4|)))) ($Box (int_2_U |lsn#1@@0|)))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |j1#0@@4|)))) ($Box (int_2_U |lsn#1@@0|))))))
 :qid |CoordinationSystemRefinementminidfy.93:12|
 :skolemid |1329|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j1#0@@4|)) ($Box (int_2_U |lsn#1@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |j0#0@@4|)) ($Box (int_2_U |lsn#1@@0|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j1#0@@4| |lsn#1@@0|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |j0#0@@4| |lsn#1@@0|))
)))))
 :qid |CoordinationSystemRefinementminidfy.90:23|
 :weight 3
 :skolemid |1331|
 :pattern ( (CoordinationSystemRefinement.__default.JournalOverlapsAgree ($LS $ly@@4) (Lit |j0#0@@4|) (Lit |j1#0@@4|)))
))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|jlong#0| T@U) (|jshort#0| T@U) (|startLsn#0| Int) ) (!  (=> (and (and (= (type |jlong#0|) DatatypeTypeType) (= (type |jshort#0|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.JournalExtendsJournal#canCall| |jlong#0| |jshort#0| |startLsn#0|) (and (not (= 29 $FunctionContextHeight)) (and (and (and ($Is |jlong#0| Tclass.MsgHistoryMod.MsgHistory) ($Is |jshort#0| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |startLsn#0|)) (and (and (and (MsgHistoryMod.MsgHistory.WF |jlong#0|) (MsgHistoryMod.MsgHistory.WF |jshort#0|)) (MsgHistoryMod.MsgHistory.CanFollow |jlong#0| |startLsn#0|)) (MsgHistoryMod.MsgHistory.CanFollow |jshort#0| |startLsn#0|)))))) true)
 :qid |CoordinationSystemRefinementminidfy.96:35|
 :skolemid |1338|
 :pattern ( (CoordinationSystemRefinement.__default.JournalExtendsJournal |jlong#0| |jshort#0| |startLsn#0|))
))))
(assert (forall ((|jlong#0@@0| T@U) (|jshort#0@@0| T@U) (|startLsn#0@@0| Int) ) (!  (=> (and (= (type |jlong#0@@0|) DatatypeTypeType) (= (type |jshort#0@@0|) DatatypeTypeType)) (=> (and (and ($Is |jlong#0@@0| Tclass.MsgHistoryMod.MsgHistory) ($Is |jshort#0@@0| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |startLsn#0@@0|)) (= (|CoordinationSystemRefinement.__default.JournalExtendsJournal#requires| |jlong#0@@0| |jshort#0@@0| |startLsn#0@@0|)  (and (and (and (MsgHistoryMod.MsgHistory.WF |jlong#0@@0|) (MsgHistoryMod.MsgHistory.WF |jshort#0@@0|)) (MsgHistoryMod.MsgHistory.CanFollow |jlong#0@@0| |startLsn#0@@0|)) (MsgHistoryMod.MsgHistory.CanFollow |jshort#0@@0| |startLsn#0@@0|)))))
 :qid |CoordinationSystemRefinementminidfy.96:35|
 :skolemid |1339|
 :pattern ( (|CoordinationSystemRefinement.__default.JournalExtendsJournal#requires| |jlong#0@@0| |jshort#0@@0| |startLsn#0@@0|))
)))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|jlong#0@@1| T@U) (|jshort#0@@1| T@U) (|startLsn#0@@1| Int) ) (!  (=> (and (and (= (type |jlong#0@@1|) DatatypeTypeType) (= (type |jshort#0@@1|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.JournalExtendsJournal#canCall| |jlong#0@@1| |jshort#0@@1| |startLsn#0@@1|) (and (not (= 29 $FunctionContextHeight)) (and (and (and ($Is |jlong#0@@1| Tclass.MsgHistoryMod.MsgHistory) ($Is |jshort#0@@1| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |startLsn#0@@1|)) (and (and (and (MsgHistoryMod.MsgHistory.WF |jlong#0@@1|) (MsgHistoryMod.MsgHistory.WF |jshort#0@@1|)) (MsgHistoryMod.MsgHistory.CanFollow |jlong#0@@1| |startLsn#0@@1|)) (MsgHistoryMod.MsgHistory.CanFollow |jshort#0@@1| |startLsn#0@@1|)))))) (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q |jshort#0@@1|) (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| |jlong#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |jshort#0@@1|))) (=> (MsgHistoryMod.MsgHistory.CanDiscardTo |jlong#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |jshort#0@@1|)) (and (and (|$IsA#MsgHistoryMod.MsgHistory| (MsgHistoryMod.MsgHistory.DiscardRecent |jlong#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |jshort#0@@1|))) (|$IsA#MsgHistoryMod.MsgHistory| |jshort#0@@1|)) (and (MsgHistoryMod.MsgHistory.MsgHistory_q |jshort#0@@1|) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| |jlong#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |jshort#0@@1|)))))) (= (CoordinationSystemRefinement.__default.JournalExtendsJournal |jlong#0@@1| |jshort#0@@1| |startLsn#0@@1|)  (and (MsgHistoryMod.MsgHistory.CanDiscardTo |jlong#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |jshort#0@@1|)) (|MsgHistoryMod.MsgHistory#Equal| (MsgHistoryMod.MsgHistory.DiscardRecent |jlong#0@@1| (MsgHistoryMod.MsgHistory.seqEnd |jshort#0@@1|)) |jshort#0@@1|)))))
 :qid |CoordinationSystemRefinementminidfy.96:35|
 :skolemid |1340|
 :pattern ( (CoordinationSystemRefinement.__default.JournalExtendsJournal |jlong#0@@1| |jshort#0@@1| |startLsn#0@@1|))
))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|jlong#0@@2| T@U) (|jshort#0@@2| T@U) (|startLsn#0@@2| Int) ) (!  (=> (and (and (= (type |jlong#0@@2|) DatatypeTypeType) (= (type |jshort#0@@2|) DatatypeTypeType)) (or (|CoordinationSystemRefinement.__default.JournalExtendsJournal#canCall| (Lit |jlong#0@@2|) (Lit |jshort#0@@2|) (LitInt |startLsn#0@@2|)) (and (not (= 29 $FunctionContextHeight)) (and (and (and ($Is |jlong#0@@2| Tclass.MsgHistoryMod.MsgHistory) ($Is |jshort#0@@2| Tclass.MsgHistoryMod.MsgHistory)) (INTERNAL_le_boogie 0 |startLsn#0@@2|)) (and (and (U_2_bool (Lit (bool_2_U  (and (MsgHistoryMod.MsgHistory.WF (Lit |jlong#0@@2|)) (MsgHistoryMod.MsgHistory.WF (Lit |jshort#0@@2|)))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit |jlong#0@@2|) (LitInt |startLsn#0@@2|)))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit |jshort#0@@2|) (LitInt |startLsn#0@@2|)))))))))) (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |jshort#0@@2|)) (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (Lit |jlong#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |jshort#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit |jlong#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |jshort#0@@2|))))))) (and (and (|$IsA#MsgHistoryMod.MsgHistory| (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit |jlong#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |jshort#0@@2|)))))) (|$IsA#MsgHistoryMod.MsgHistory| (Lit |jshort#0@@2|))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |jshort#0@@2|)) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit |jlong#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |jshort#0@@2|)))))))) (= (CoordinationSystemRefinement.__default.JournalExtendsJournal (Lit |jlong#0@@2|) (Lit |jshort#0@@2|) (LitInt |startLsn#0@@2|))  (and (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit |jlong#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |jshort#0@@2|)))) (|MsgHistoryMod.MsgHistory#Equal| (MsgHistoryMod.MsgHistory.DiscardRecent (Lit |jlong#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |jshort#0@@2|)))) |jshort#0@@2|)))))
 :qid |CoordinationSystemRefinementminidfy.96:35|
 :weight 3
 :skolemid |1341|
 :pattern ( (CoordinationSystemRefinement.__default.JournalExtendsJournal (Lit |jlong#0@@2|) (Lit |jshort#0@@2|) (LitInt |startLsn#0@@2|)))
))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|v#0@@7| T@U) ) (!  (=> (and (= (type |v#0@@7|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| |v#0@@7|) (and (not (= 17 $FunctionContextHeight)) (and ($Is |v#0@@7| Tclass.CoordinationSystem.Variables) (CoordinationSystem.Variables.WF |v#0@@7|))))) true)
 :qid |CoordinationSystemRefinementminidfy.105:42|
 :skolemid |1350|
 :pattern ( (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v#0@@7|))
))))
(assert (forall ((|v#0@@8| T@U) ) (!  (=> (and (= (type |v#0@@8|) DatatypeTypeType) ($Is |v#0@@8| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#requires| |v#0@@8|) (CoordinationSystem.Variables.WF |v#0@@8|)))
 :qid |CoordinationSystemRefinementminidfy.105:42|
 :skolemid |1351|
 :pattern ( (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#requires| |v#0@@8|))
)))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|v#0@@9| T@U) ) (!  (=> (and (= (type |v#0@@9|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| |v#0@@9|) (and (not (= 17 $FunctionContextHeight)) (and ($Is |v#0@@9| Tclass.CoordinationSystem.Variables) (CoordinationSystem.Variables.WF |v#0@@9|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@9|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@9|))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@9|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@9|))) (StampedMod.Stamped.Stamped_q (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@9|))))) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@9|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@9|)))))) (= (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v#0@@9|)  (and true (MsgHistoryMod.MsgHistory.CanFollow (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@9|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@9|))))))))
 :qid |CoordinationSystemRefinementminidfy.105:42|
 :skolemid |1352|
 :pattern ( (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v#0@@9|))
))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|v#0@@10| T@U) ) (!  (=> (and (= (type |v#0@@10|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| (Lit |v#0@@10|)) (and (not (= 17 $FunctionContextHeight)) (and ($Is |v#0@@10| Tclass.CoordinationSystem.Variables) (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@10|))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@10|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@10|))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@10|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@10|))))) (StampedMod.Stamped.Stamped_q (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@10|)))))))) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@10|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@10|)))))))))) (= (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry (Lit |v#0@@10|)) (U_2_bool (Lit (bool_2_U  (and true (MsgHistoryMod.MsgHistory.CanFollow (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@10|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@10|)))))))))))))))
 :qid |CoordinationSystemRefinementminidfy.105:42|
 :weight 3
 :skolemid |1353|
 :pattern ( (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry (Lit |v#0@@10|)))
))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|v#0@@11| T@U) ) (!  (=> (and (= (type |v#0@@11|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v#0@@11|) (and (not (= 20 $FunctionContextHeight)) (and ($Is |v#0@@11| Tclass.CoordinationSystem.Variables) (and (CoordinationSystem.Variables.WF |v#0@@11|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@11|))))))) true)
 :qid |CoordinationSystemRefinementminidfy.111:34|
 :skolemid |1356|
 :pattern ( (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@11|))
))))
(assert (forall ((|v#0@@12| T@U) ) (!  (=> (and (= (type |v#0@@12|) DatatypeTypeType) ($Is |v#0@@12| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#requires| |v#0@@12|)  (and (CoordinationSystem.Variables.WF |v#0@@12|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@12|)))))
 :qid |CoordinationSystemRefinementminidfy.111:34|
 :skolemid |1357|
 :pattern ( (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#requires| |v#0@@12|))
)))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|v#0@@13| T@U) ) (!  (=> (and (= (type |v#0@@13|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v#0@@13|) (and (not (= 20 $FunctionContextHeight)) (and ($Is |v#0@@13| Tclass.CoordinationSystem.Variables) (and (CoordinationSystem.Variables.WF |v#0@@13|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@13|))))))) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@13|))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@13|))) (StampedMod.Stamped.Stamped_q (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@13|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (=> (MsgHistoryMod.MsgHistory.CanFollow (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@13|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@13|)))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@13|))) (StampedMod.Stamped.Stamped_q (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@13|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (|CoordinationSystemRefinement.__default.IMap#canCall| (CoordinationSystem.Variables.mapadt |v#0@@13|))) (StampedMod.Stamped.Stamped_q (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@13|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@13|)))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@13|))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (|CoordinationSystemRefinement.__default.IMap#canCall| (CoordinationSystem.Variables.mapadt |v#0@@13|))) (StampedMod.Stamped.Stamped_q (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@13|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (=> (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@13|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@13|)))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@13|))) (MsgHistoryMod.MsgHistory.MsgHistory_q (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@13|)))) (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| |v#0@@13|)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@13|))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0@@13|)) (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@13|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@13|))) (AbstractMap.Variables.Variables_q (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (StampedMod.Stamped.Stamped_q (AbstractMap.Variables.stampedMap (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v#0@@13|))))))))))))))) (= (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@13|)  (and (and (and (and (MsgHistoryMod.MsgHistory.CanFollow (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@13|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@13|)))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@13|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@13|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@13|))))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@13|))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0@@13|))) (= (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@13|)) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v#0@@13|))))))))))
 :qid |CoordinationSystemRefinementminidfy.111:34|
 :skolemid |1358|
 :pattern ( (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@13|))
))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|v#0@@14| T@U) ) (!  (=> (and (= (type |v#0@@14|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| (Lit |v#0@@14|)) (and (not (= 20 $FunctionContextHeight)) (and ($Is |v#0@@14| Tclass.CoordinationSystem.Variables) (U_2_bool (Lit (bool_2_U  (and (CoordinationSystem.Variables.WF (Lit |v#0@@14|)) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@14|)))))))))))) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))) (StampedMod.Stamped.Stamped_q (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))))) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))) (StampedMod.Stamped.Stamped_q (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (|CoordinationSystemRefinement.__default.IMap#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))) (StampedMod.Stamped.Stamped_q (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))))) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))) (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (|CoordinationSystemRefinement.__default.IMap#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))) (StampedMod.Stamped.Stamped_q (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))))) (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))))) (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| (Lit |v#0@@14|))) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|)))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd (Lit |v#0@@14|))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@14|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))) (AbstractMap.Variables.Variables_q (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))))) (StampedMod.Stamped.Stamped_q (Lit (AbstractMap.Variables.stampedMap (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))))))))))))))))) (= (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@14|))  (and (and (and (and (MsgHistoryMod.MsgHistory.CanFollow (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))) (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|)))))))) (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@14|)))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd (Lit |v#0@@14|)))) (= (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@14|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@14|))))))))))))))))
 :qid |CoordinationSystemRefinementminidfy.111:34|
 :weight 3
 :skolemid |1359|
 :pattern ( (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@14|)))
))))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((|v#0@@15| T@U) ) (!  (=> (and (= (type |v#0@@15|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| |v#0@@15|) (and (not (= 22 $FunctionContextHeight)) (and ($Is |v#0@@15| Tclass.CoordinationSystem.Variables) (and (and (CoordinationSystem.Variables.WF |v#0@@15|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@15|))) (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@15|)))))) true)
 :qid |CoordinationSystemRefinementminidfy.128:40|
 :skolemid |1368|
 :pattern ( (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v#0@@15|))
))))
(assert (forall ((|v#0@@16| T@U) ) (!  (=> (and (= (type |v#0@@16|) DatatypeTypeType) ($Is |v#0@@16| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#requires| |v#0@@16|)  (and (and (CoordinationSystem.Variables.WF |v#0@@16|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@16|))) (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@16|))))
 :qid |CoordinationSystemRefinementminidfy.128:40|
 :skolemid |1369|
 :pattern ( (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#requires| |v#0@@16|))
)))
(assert (= (type StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree) LayerTypeType))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((|v#0@@17| T@U) ) (!  (=> (and (= (type |v#0@@17|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| |v#0@@17|) (and (not (= 22 $FunctionContextHeight)) (and ($Is |v#0@@17| Tclass.CoordinationSystem.Variables) (and (and (CoordinationSystem.Variables.WF |v#0@@17|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@17|))) (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@17|)))))) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@17|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@17|))) (and (CoordinationSystem.Variables.Variables_q |v#0@@17|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@17|)))) (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@17|)) (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@17|)))) (=> (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@17|)) (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@17|))) (and (and (|$IsA#StampedMod.Stamped| (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@17|))) (|$IsA#StampedMod.Stamped| (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@17|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@17|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@17|))))))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@17|) (|CoordinationSystemRefinement.__default.IMap#canCall| (CoordinationSystem.Variables.mapadt |v#0@@17|))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@17|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@17|))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@17|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@17|))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@17|) (|CoordinationSystemRefinement.__default.IMap#canCall| (CoordinationSystem.Variables.mapadt |v#0@@17|))) (StampedMod.Stamped.Stamped_q (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@17|))))) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@17|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@17|)))))) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@17|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@17|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@17|)))))))))) (= (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v#0@@17|)  (and (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@17|)) (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@17|))) (|StampedMod.Stamped#Equal| (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@17|)) (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@17|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@17|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v#0@@17|))))))))))
 :qid |CoordinationSystemRefinementminidfy.128:40|
 :skolemid |1370|
 :pattern ( (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v#0@@17|))
))))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((|v#0@@18| T@U) ) (!  (=> (and (= (type |v#0@@18|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| (Lit |v#0@@18|)) (and (not (= 22 $FunctionContextHeight)) (and ($Is |v#0@@18| Tclass.CoordinationSystem.Variables) (and (U_2_bool (Lit (bool_2_U  (and (CoordinationSystem.Variables.WF (Lit |v#0@@18|)) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@18|)))))))) (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@18|)))))))))) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@18|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@18|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|)))))) (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))))) (=> (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|)))))) (and (and (|$IsA#StampedMod.Stamped| (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|)))))) (|$IsA#StampedMod.Stamped| (Lit (MsgHistoryMod.__default.MapPlusHistory (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))))))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@18|)) (|CoordinationSystemRefinement.__default.IMap#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@18|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@18|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@18|)) (|CoordinationSystemRefinement.__default.IMap#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))) (StampedMod.Stamped.Stamped_q (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|)))))))) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|)))))))))) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))))))))))))) (= (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement (Lit |v#0@@18|))  (and (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|)))))) (|StampedMod.Stamped#Equal| (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|)))) (MsgHistoryMod.__default.MapPlusHistory (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|))))) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@18|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CoordinationSystemRefinement.__default.IMap (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@18|)))))))))))))))
 :qid |CoordinationSystemRefinementminidfy.128:40|
 :weight 3
 :skolemid |1371|
 :pattern ( (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement (Lit |v#0@@18|)))
))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|v#0@@19| T@U) ) (!  (=> (and (= (type |v#0@@19|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.MapIsFrozen#canCall| |v#0@@19|) (and (not (= 18 $FunctionContextHeight)) ($Is |v#0@@19| Tclass.CoordinationSystem.Variables)))) true)
 :qid |CoordinationSystemRefinementminidfy.138:25|
 :skolemid |1389|
 :pattern ( (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@19|))
))))
(assert (forall ((|v#0@@20| T@U) ) (!  (=> (and (= (type |v#0@@20|) DatatypeTypeType) ($Is |v#0@@20| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.MapIsFrozen#requires| |v#0@@20|) true))
 :qid |CoordinationSystemRefinementminidfy.138:25|
 :skolemid |1390|
 :pattern ( (|CoordinationSystemRefinement.__default.MapIsFrozen#requires| |v#0@@20|))
)))
(assert (forall ((arg0@@397 T@U) ) (! (= (type (CrashTolerantMap.Variables.inFlight arg0@@397)) DatatypeTypeType)
 :qid |funType:CrashTolerantMap.Variables.inFlight|
 :pattern ( (CrashTolerantMap.Variables.inFlight arg0@@397))
)))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|v#0@@21| T@U) ) (!  (=> (and (= (type |v#0@@21|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.MapIsFrozen#canCall| |v#0@@21|) (and (not (= 18 $FunctionContextHeight)) ($Is |v#0@@21| Tclass.CoordinationSystem.Variables)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@21|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@21|))) (= (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@21|) (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@21|))))))
 :qid |CoordinationSystemRefinementminidfy.138:25|
 :skolemid |1391|
 :pattern ( (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@21|))
))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|v#0@@22| T@U) ) (!  (=> (and (= (type |v#0@@22|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.MapIsFrozen#canCall| (Lit |v#0@@22|)) (and (not (= 18 $FunctionContextHeight)) ($Is |v#0@@22| Tclass.CoordinationSystem.Variables)))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@22|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@22|))))) (= (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@22|)) (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@22|))))))))))))
 :qid |CoordinationSystemRefinementminidfy.138:25|
 :weight 3
 :skolemid |1392|
 :pattern ( (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@22|)))
))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|v#0@@23| T@U) ) (!  (=> (and (= (type |v#0@@23|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.CommitStarted#canCall| |v#0@@23|) (and (not (= 19 $FunctionContextHeight)) ($Is |v#0@@23| Tclass.CoordinationSystem.Variables)))) true)
 :qid |CoordinationSystemRefinementminidfy.143:27|
 :skolemid |1393|
 :pattern ( (CoordinationSystemRefinement.__default.CommitStarted |v#0@@23|))
))))
(assert (forall ((|v#0@@24| T@U) ) (!  (=> (and (= (type |v#0@@24|) DatatypeTypeType) ($Is |v#0@@24| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.CommitStarted#requires| |v#0@@24|) true))
 :qid |CoordinationSystemRefinementminidfy.143:27|
 :skolemid |1394|
 :pattern ( (|CoordinationSystemRefinement.__default.CommitStarted#requires| |v#0@@24|))
)))
(assert (forall ((arg0@@398 T@U) ) (! (= (type (CrashTolerantJournal.Variables.inFlight arg0@@398)) DatatypeTypeType)
 :qid |funType:CrashTolerantJournal.Variables.inFlight|
 :pattern ( (CrashTolerantJournal.Variables.inFlight arg0@@398))
)))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|v#0@@25| T@U) ) (!  (=> (and (= (type |v#0@@25|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.CommitStarted#canCall| |v#0@@25|) (and (not (= 19 $FunctionContextHeight)) ($Is |v#0@@25| Tclass.CoordinationSystem.Variables)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@25|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@25|))) (= (CoordinationSystemRefinement.__default.CommitStarted |v#0@@25|) (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v#0@@25|))))))
 :qid |CoordinationSystemRefinementminidfy.143:27|
 :skolemid |1395|
 :pattern ( (CoordinationSystemRefinement.__default.CommitStarted |v#0@@25|))
))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|v#0@@26| T@U) ) (!  (=> (and (= (type |v#0@@26|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.CommitStarted#canCall| (Lit |v#0@@26|)) (and (not (= 19 $FunctionContextHeight)) ($Is |v#0@@26| Tclass.CoordinationSystem.Variables)))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@26|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@26|))))) (= (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@26|)) (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@26|))))))))))))
 :qid |CoordinationSystemRefinementminidfy.143:27|
 :weight 3
 :skolemid |1396|
 :pattern ( (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@26|)))
))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|v#0@@27| T@U) ) (!  (=> (and (= (type |v#0@@27|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| |v#0@@27|) (and (not (= 23 $FunctionContextHeight)) (and ($Is |v#0@@27| Tclass.CoordinationSystem.Variables) (and (and (CoordinationSystem.Variables.WF |v#0@@27|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@27|))) (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@27|)))))) true)
 :qid |CoordinationSystemRefinementminidfy.148:34|
 :skolemid |1397|
 :pattern ( (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@27|))
))))
(assert (forall ((|v#0@@28| T@U) ) (!  (=> (and (= (type |v#0@@28|) DatatypeTypeType) ($Is |v#0@@28| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#requires| |v#0@@28|)  (and (and (CoordinationSystem.Variables.WF |v#0@@28|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@28|))) (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@28|))))
 :qid |CoordinationSystemRefinementminidfy.148:34|
 :skolemid |1398|
 :pattern ( (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#requires| |v#0@@28|))
)))
(assert (forall ((arg0@@399 T@U) ) (! (= (type (Options.Option.value arg0@@399)) BoxType)
 :qid |funType:Options.Option.value|
 :pattern ( (Options.Option.value arg0@@399))
)))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|v#0@@29| T@U) ) (!  (=> (and (= (type |v#0@@29|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| |v#0@@29|) (and (not (= 23 $FunctionContextHeight)) (and ($Is |v#0@@29| Tclass.CoordinationSystem.Variables) (and (and (CoordinationSystem.Variables.WF |v#0@@29|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@29|))) (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@29|)))))) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@29|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@29|))) (StampedMod.Stamped.Stamped_q ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@29|)))))) (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| |v#0@@29|)) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@29|))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0@@29|)) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@29|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@29|))) (StampedMod.Stamped.Stamped_q (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@29|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@29|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@29|))) (StampedMod.Stamped.Stamped_q ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@29|))))))))) (= (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@29|)  (and (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@29|))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0@@29|)) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@29|))) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@29|))))))))))
 :qid |CoordinationSystemRefinementminidfy.148:34|
 :skolemid |1399|
 :pattern ( (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@29|))
))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|v#0@@30| T@U) ) (!  (=> (and (= (type |v#0@@30|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| (Lit |v#0@@30|)) (and (not (= 23 $FunctionContextHeight)) (and ($Is |v#0@@30| Tclass.CoordinationSystem.Variables) (and (U_2_bool (Lit (bool_2_U  (and (CoordinationSystem.Variables.WF (Lit |v#0@@30|)) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@30|)))))))) (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@30|)))))))))) (and (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@30|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))) (StampedMod.Stamped.Stamped_q (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|)))))))))) (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| (Lit |v#0@@30|))) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd (Lit |v#0@@30|))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@30|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))) (StampedMod.Stamped.Stamped_q (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@30|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))) (StampedMod.Stamped.Stamped_q (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))))))))))) (= (CoordinationSystemRefinement.__default.InvFrozenMapGeometry (Lit |v#0@@30|))  (and (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd (Lit |v#0@@30|))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|)))))) (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@30|))))))))))))))
 :qid |CoordinationSystemRefinementminidfy.148:34|
 :weight 3
 :skolemid |1400|
 :pattern ( (CoordinationSystemRefinement.__default.InvFrozenMapGeometry (Lit |v#0@@30|)))
))))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((|v#0@@31| T@U) ) (!  (=> (and (= (type |v#0@@31|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| |v#0@@31|) (and (not (= 24 $FunctionContextHeight)) (and ($Is |v#0@@31| Tclass.CoordinationSystem.Variables) (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@31|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@31|))) (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@31|)) (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@31|)) (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@31|)))))) true)
 :qid |CoordinationSystemRefinementminidfy.158:40|
 :skolemid |1404|
 :pattern ( (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v#0@@31|))
))))
(assert (forall ((|v#0@@32| T@U) ) (!  (=> (and (= (type |v#0@@32|) DatatypeTypeType) ($Is |v#0@@32| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#requires| |v#0@@32|)  (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@32|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@32|))) (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@32|)) (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@32|)) (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@32|))))
 :qid |CoordinationSystemRefinementminidfy.158:40|
 :skolemid |1405|
 :pattern ( (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#requires| |v#0@@32|))
)))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((|v#0@@33| T@U) ) (!  (=> (and (= (type |v#0@@33|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| |v#0@@33|) (and (not (= 24 $FunctionContextHeight)) (and ($Is |v#0@@33| Tclass.CoordinationSystem.Variables) (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@33|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@33|))) (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@33|)) (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@33|)) (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@33|)))))) (and (and (and (|$IsA#StampedMod.Stamped| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@33|))))) (|$IsA#StampedMod.Stamped| (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@33|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@33|)) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@33|))))))))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@33|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@33|))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@33|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@33|))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@33|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@33|))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@33|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@33|))) (StampedMod.Stamped.Stamped_q ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@33|))))))) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@33|)) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@33|)))))))) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@33|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@33|)) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@33|)))))))))) (= (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v#0@@33|) (|StampedMod.Stamped#Equal| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@33|)))) (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@33|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@33|)) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@33|)))))))))))
 :qid |CoordinationSystemRefinementminidfy.158:40|
 :skolemid |1406|
 :pattern ( (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v#0@@33|))
))))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((|v#0@@34| T@U) ) (!  (=> (and (= (type |v#0@@34|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| (Lit |v#0@@34|)) (and (not (= 24 $FunctionContextHeight)) (and ($Is |v#0@@34| Tclass.CoordinationSystem.Variables) (and (and (and (and (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@34|))))) (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@34|)))))))) (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@34|)))))) (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@34|)))))) (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvFrozenMapGeometry (Lit |v#0@@34|)))))))))) (and (and (and (|$IsA#StampedMod.Stamped| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))))))) (|$IsA#StampedMod.Stamped| (Lit (MsgHistoryMod.__default.MapPlusHistory (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@34|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|)))))))))))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@34|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@34|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@34|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@34|))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@34|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))) (StampedMod.Stamped.Stamped_q (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))))))))) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@34|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))))))))))) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@34|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|)))))))))))))))) (= (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement (Lit |v#0@@34|)) (|StampedMod.Stamped#Equal| ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))))) (MsgHistoryMod.__default.MapPlusHistory (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|))))) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@34|))))) (LitInt (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@34|)))))))))))))))))
 :qid |CoordinationSystemRefinementminidfy.158:40|
 :weight 3
 :skolemid |1407|
 :pattern ( (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement (Lit |v#0@@34|)))
))))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((|v#0@@35| T@U) ) (!  (=> (and (= (type |v#0@@35|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v#0@@35|) (and (not (= 25 $FunctionContextHeight)) (and ($Is |v#0@@35| Tclass.CoordinationSystem.Variables) (and (CoordinationSystem.Variables.WF |v#0@@35|) (CoordinationSystemRefinement.__default.CommitStarted |v#0@@35|)))))) true)
 :qid |CoordinationSystemRefinementminidfy.171:38|
 :skolemid |1419|
 :pattern ( (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@35|))
))))
(assert (forall ((|v#0@@36| T@U) ) (!  (=> (and (= (type |v#0@@36|) DatatypeTypeType) ($Is |v#0@@36| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#requires| |v#0@@36|)  (and (CoordinationSystem.Variables.WF |v#0@@36|) (CoordinationSystemRefinement.__default.CommitStarted |v#0@@36|))))
 :qid |CoordinationSystemRefinementminidfy.171:38|
 :skolemid |1420|
 :pattern ( (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#requires| |v#0@@36|))
)))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((|v#0@@37| T@U) ) (!  (=> (and (= (type |v#0@@37|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v#0@@37|) (and (not (= 25 $FunctionContextHeight)) (and ($Is |v#0@@37| Tclass.CoordinationSystem.Variables) (and (CoordinationSystem.Variables.WF |v#0@@37|) (CoordinationSystemRefinement.__default.CommitStarted |v#0@@37|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@37|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@37|))) (let ((|ifMap#0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@37|))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@37|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@37|))) (let ((|ifJournal#0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v#0@@37|))))))
 (and (CoordinationSystem.Variables.Variables_q |v#0@@37|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@37|)) (and (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v#0@@37|) (=> (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@37|) (and (and (StampedMod.Stamped.Stamped_q |ifMap#0|) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| |ifJournal#0| (StampedMod.Stamped.seqEnd |ifMap#0|))) (=> (MsgHistoryMod.MsgHistory.CanFollow |ifJournal#0| (StampedMod.Stamped.seqEnd |ifMap#0|)) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@37|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@37|))) (MsgHistoryMod.MsgHistory.MsgHistory_q (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@37|)))) (MsgHistoryMod.MsgHistory.MsgHistory_q |ifJournal#0|)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@37|))) (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#0|)) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@37|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@37|))) (StampedMod.Stamped.Stamped_q (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@37|)))) (StampedMod.Stamped.Stamped_q |ifMap#0|)) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@37|))) (StampedMod.Stamped.seqEnd |ifMap#0|)) (and (MsgHistoryMod.MsgHistory.MsgHistory_q |ifJournal#0|) (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| |v#0@@37|)))))))))))))))))) (= (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@37|)  (and true (let ((|ifMap#0@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@37|))))))
 (and true (let ((|ifJournal#0@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v#0@@37|))))))
 (and (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@37|)) (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@37|)) (MsgHistoryMod.MsgHistory.CanFollow |ifJournal#0@@0| (StampedMod.Stamped.seqEnd |ifMap#0@@0|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@37|))) (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#0@@0|))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@37|))) (StampedMod.Stamped.seqEnd |ifMap#0@@0|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#0@@0|) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v#0@@37|))))))))))
 :qid |CoordinationSystemRefinementminidfy.171:38|
 :skolemid |1421|
 :pattern ( (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@37|))
))))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((|v#0@@38| T@U) ) (!  (=> (and (= (type |v#0@@38|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| (Lit |v#0@@38|)) (and (not (= 25 $FunctionContextHeight)) (and ($Is |v#0@@38| Tclass.CoordinationSystem.Variables) (and (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@38|))))) (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@38|)))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@38|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@38|))))) (let ((|ifMap#1| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@38|))))))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@38|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@38|))))) (let ((|ifJournal#1| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@38|))))))))))
 (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@38|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@38|))))))) (and (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| (Lit |v#0@@38|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@38|))))) (and (and (StampedMod.Stamped.Stamped_q |ifMap#1|) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| |ifJournal#1| (StampedMod.Stamped.seqEnd |ifMap#1|))) (=> (MsgHistoryMod.MsgHistory.CanFollow |ifJournal#1| (StampedMod.Stamped.seqEnd |ifMap#1|)) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@38|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@38|))))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@38|))))))) (MsgHistoryMod.MsgHistory.MsgHistory_q |ifJournal#1|)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@38|)))))) (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#1|)) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@38|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@38|))))) (StampedMod.Stamped.Stamped_q (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@38|))))))) (StampedMod.Stamped.Stamped_q |ifMap#1|)) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@38|)))))) (StampedMod.Stamped.seqEnd |ifMap#1|)) (and (MsgHistoryMod.MsgHistory.MsgHistory_q |ifJournal#1|) (|CoordinationSystemRefinement.__default.EphemeralSeqEnd#canCall| (Lit |v#0@@38|))))))))))))))))))) (= (CoordinationSystemRefinement.__default.InvCommitStartedGeometry (Lit |v#0@@38|))  (and true (let ((|ifMap#1@@0| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@38|))))))))))
 (and true (let ((|ifJournal#1@@0| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@38|))))))))))
 (and (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@38|)))) (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@38|))) (MsgHistoryMod.MsgHistory.CanFollow |ifJournal#1@@0| (LitInt (StampedMod.Stamped.seqEnd |ifMap#1@@0|)))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@38|)))))) (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#1@@0|))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@38|)))))) (StampedMod.Stamped.seqEnd |ifMap#1@@0|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#1@@0|) (CoordinationSystemRefinement.__default.EphemeralSeqEnd (Lit |v#0@@38|)))))))))))
 :qid |CoordinationSystemRefinementminidfy.171:38|
 :weight 3
 :skolemid |1422|
 :pattern ( (CoordinationSystemRefinement.__default.InvCommitStartedGeometry (Lit |v#0@@38|)))
))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((|v#0@@39| T@U) ) (!  (=> (and (= (type |v#0@@39|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v#0@@39|) (and (not (= 26 $FunctionContextHeight)) (and ($Is |v#0@@39| Tclass.CoordinationSystem.Variables) (and (and (CoordinationSystem.Variables.WF |v#0@@39|) (CoordinationSystemRefinement.__default.CommitStarted |v#0@@39|)) (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@39|)))))) true)
 :qid |CoordinationSystemRefinementminidfy.195:44|
 :skolemid |1428|
 :pattern ( (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v#0@@39|))
))))
(assert (forall ((|v#0@@40| T@U) ) (!  (=> (and (= (type |v#0@@40|) DatatypeTypeType) ($Is |v#0@@40| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#requires| |v#0@@40|)  (and (and (CoordinationSystem.Variables.WF |v#0@@40|) (CoordinationSystemRefinement.__default.CommitStarted |v#0@@40|)) (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@40|))))
 :qid |CoordinationSystemRefinementminidfy.195:44|
 :skolemid |1429|
 :pattern ( (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#requires| |v#0@@40|))
)))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((|v#0@@41| T@U) ) (!  (=> (and (= (type |v#0@@41|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v#0@@41|) (and (not (= 26 $FunctionContextHeight)) (and ($Is |v#0@@41| Tclass.CoordinationSystem.Variables) (and (and (CoordinationSystem.Variables.WF |v#0@@41|) (CoordinationSystemRefinement.__default.CommitStarted |v#0@@41|)) (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@41|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@41|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@41|))) (let ((|ifMap#0@@1| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@41|))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@41|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@41|))) (let ((|ifJournal#0@@1| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v#0@@41|))))))
 (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@41|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v#0@@41|))) (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| |ifJournal#0@@1| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@41|)))) (=> (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#0@@1| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@41|))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@41|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@41|))) (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| |ifJournal#0@@1| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@41|)))) (=> (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#0@@1| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@41|))) (and (and (|$IsA#StampedMod.Stamped| |ifMap#0@@1|) (|$IsA#StampedMod.Stamped| (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@41|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@41|)) (StampedMod.Stamped.seqEnd |ifMap#0@@1|))))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@41|) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt |v#0@@41|))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@41|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@41|))) (StampedMod.Stamped.Stamped_q |ifMap#0@@1|)) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@41|)) (StampedMod.Stamped.seqEnd |ifMap#0@@1|)))) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@41|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@41|)) (StampedMod.Stamped.seqEnd |ifMap#0@@1|))))))))))))))) (= (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v#0@@41|)  (and true (let ((|ifMap#0@@2| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v#0@@41|))))))
 (and true (let ((|ifJournal#0@@2| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v#0@@41|))))))
 (and (and (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#0@@2| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v#0@@41|))) (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#0@@2| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@41|)))) (|StampedMod.Stamped#Equal| |ifMap#0@@2| (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v#0@@41|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@41|)) (StampedMod.Stamped.seqEnd |ifMap#0@@2|))))))))))))
 :qid |CoordinationSystemRefinementminidfy.195:44|
 :skolemid |1430|
 :pattern ( (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v#0@@41|))
))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((|v#0@@42| T@U) ) (!  (=> (and (= (type |v#0@@42|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| (Lit |v#0@@42|)) (and (not (= 26 $FunctionContextHeight)) (and ($Is |v#0@@42| Tclass.CoordinationSystem.Variables) (and (U_2_bool (Lit (bool_2_U  (and (CoordinationSystem.Variables.WF (Lit |v#0@@42|)) (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@42|)))))) (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvCommitStartedGeometry (Lit |v#0@@42|)))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@42|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@42|))))) (let ((|ifMap#1@@1| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@42|))))))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@42|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (let ((|ifJournal#1@@1| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))))))))
 (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@42|)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| |ifJournal#1@@1| (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))))) (=> (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#1@@1| (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|)))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@42|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (|CoordinationSystemRefinement.__default.JournalOverlapsAgree#canCall| |ifJournal#1@@1| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))))) (=> (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#1@@1| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|)))))) (and (and (|$IsA#StampedMod.Stamped| |ifMap#1@@1|) (|$IsA#StampedMod.Stamped| (MsgHistoryMod.__default.MapPlusHistory (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@42|))))) (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (StampedMod.Stamped.seqEnd |ifMap#1@@1|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@42|)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@42|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@42|)) (|CoordinationSystemRefinement.__default.IEJ#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (StampedMod.Stamped.Stamped_q |ifMap#1@@1|)) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (StampedMod.Stamped.seqEnd |ifMap#1@@1|)))) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@42|))))) (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (StampedMod.Stamped.seqEnd |ifMap#1@@1|))))))))))))))) (= (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement (Lit |v#0@@42|))  (and true (let ((|ifMap#1@@2| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@42|))))))))))
 (and true (let ((|ifJournal#1@@2| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))))))))
 (and (and (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#1@@2| (Lit (CrashTolerantJournal.Variables.persistent (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|)))))) (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#1@@2| (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))))) (|StampedMod.Stamped#Equal| |ifMap#1@@2| (MsgHistoryMod.__default.MapPlusHistory (Lit (CrashTolerantMap.Variables.persistent (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@42|))))) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit (CoordinationSystemRefinement.__default.IEJ (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@42|))))) (LitInt (StampedMod.Stamped.seqEnd |ifMap#1@@2|))))))))))))))
 :qid |CoordinationSystemRefinementminidfy.195:44|
 :weight 3
 :skolemid |1431|
 :pattern ( (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement (Lit |v#0@@42|)))
))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|v#0@@43| T@U) ) (!  (=> (and (= (type |v#0@@43|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.Inv#canCall| |v#0@@43|) (and (not (= 27 $FunctionContextHeight)) ($Is |v#0@@43| Tclass.CoordinationSystem.Variables)))) true)
 :qid |CoordinationSystemRefinementminidfy.211:17|
 :skolemid |1453|
 :pattern ( (CoordinationSystemRefinement.__default.Inv |v#0@@43|))
))))
(assert (forall ((|v#0@@44| T@U) ) (!  (=> (and (= (type |v#0@@44|) DatatypeTypeType) ($Is |v#0@@44| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystemRefinement.__default.Inv#requires| |v#0@@44|) true))
 :qid |CoordinationSystemRefinementminidfy.211:17|
 :skolemid |1454|
 :pattern ( (|CoordinationSystemRefinement.__default.Inv#requires| |v#0@@44|))
)))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|v#0@@45| T@U) ) (!  (=> (and (= (type |v#0@@45|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.Inv#canCall| |v#0@@45|) (and (not (= 27 $FunctionContextHeight)) ($Is |v#0@@45| Tclass.CoordinationSystem.Variables)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@45|) (=> (CoordinationSystem.Variables.WF |v#0@@45|) (and (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| |v#0@@45|) (=> (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v#0@@45|) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@45|) (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v#0@@45|)) (and (|CoordinationSystemRefinement.__default.MapIsFrozen#canCall| |v#0@@45|) (=> (not (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@45|)) (|CoordinationSystemRefinement.__default.CommitStarted#canCall| |v#0@@45|))))) (=> (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v#0@@45|)) (and (not (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@45|)) (not (CoordinationSystemRefinement.__default.CommitStarted |v#0@@45|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@45|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@45|)) (and (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v#0@@45|) (=> (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@45|) (and (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| |v#0@@45|) (=> (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v#0@@45|) (and (|CoordinationSystemRefinement.__default.MapIsFrozen#canCall| |v#0@@45|) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@45|) (and (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| |v#0@@45|) (=> (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@45|) (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| |v#0@@45|))))))))))) (=> (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@45|)) (and (and (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@45|) (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v#0@@45|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@45|) (and (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@45|) (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v#0@@45|))))) (and (|CoordinationSystemRefinement.__default.CommitStarted#canCall| |v#0@@45|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v#0@@45|) (and (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v#0@@45|) (=> (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@45|) (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v#0@@45|))))))))))))) (= (CoordinationSystemRefinement.__default.Inv |v#0@@45|)  (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@45|) (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v#0@@45|)) (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v#0@@45|)) (and (not (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@45|)) (not (CoordinationSystemRefinement.__default.CommitStarted |v#0@@45|))))) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@45|)) (and (and (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@45|) (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v#0@@45|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@45|) (and (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@45|) (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v#0@@45|)))))) (=> (CoordinationSystemRefinement.__default.CommitStarted |v#0@@45|) (and (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@45|) (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v#0@@45|)))))))
 :qid |CoordinationSystemRefinementminidfy.211:17|
 :skolemid |1455|
 :pattern ( (CoordinationSystemRefinement.__default.Inv |v#0@@45|))
))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|v#0@@46| T@U) ) (!  (=> (and (= (type |v#0@@46|) DatatypeTypeType) (or (|CoordinationSystemRefinement.__default.Inv#canCall| (Lit |v#0@@46|)) (and (not (= 27 $FunctionContextHeight)) ($Is |v#0@@46| Tclass.CoordinationSystem.Variables)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@46|))))) (and (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry (Lit |v#0@@46|))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Unknown_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@46|))))))) (and (|CoordinationSystemRefinement.__default.MapIsFrozen#canCall| (Lit |v#0@@46|)) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@46|)))))) (|CoordinationSystemRefinement.__default.CommitStarted#canCall| (Lit |v#0@@46|)))))) (=> (=> (CoordinationSystem.Ephemeral.Unknown_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@46|)))) (and (not (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@46|)))))) (not (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@46|)))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@46|))))))) (and (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@46|))))) (and (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement (Lit |v#0@@46|))))) (and (|CoordinationSystemRefinement.__default.MapIsFrozen#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@46|))))) (and (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvFrozenMapGeometry (Lit |v#0@@46|))))) (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| (Lit |v#0@@46|)))))))))))) (=> (U_2_bool (Lit (bool_2_U  (=> (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@46|)))) (and (and (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@46|)) (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement (Lit |v#0@@46|))) (=> (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@46|)) (and (CoordinationSystemRefinement.__default.InvFrozenMapGeometry (Lit |v#0@@46|)) (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement (Lit |v#0@@46|))))))))) (and (|CoordinationSystemRefinement.__default.CommitStarted#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@46|))))) (and (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| (Lit |v#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.InvCommitStartedGeometry (Lit |v#0@@46|))))) (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| (Lit |v#0@@46|)))))))))))))) (= (CoordinationSystemRefinement.__default.Inv (Lit |v#0@@46|))  (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@46|)) (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry (Lit |v#0@@46|))) (=> (CoordinationSystem.Ephemeral.Unknown_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@46|)))) (and (not (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@46|)))))) (not (U_2_bool (Lit (bool_2_U (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@46|))))))))) (=> (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@46|)))) (and (and (CoordinationSystemRefinement.__default.InvEphemeralGeometry (Lit |v#0@@46|)) (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement (Lit |v#0@@46|))) (=> (CoordinationSystemRefinement.__default.MapIsFrozen (Lit |v#0@@46|)) (and (CoordinationSystemRefinement.__default.InvFrozenMapGeometry (Lit |v#0@@46|)) (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement (Lit |v#0@@46|))))))) (=> (CoordinationSystemRefinement.__default.CommitStarted (Lit |v#0@@46|)) (and (CoordinationSystemRefinement.__default.InvCommitStartedGeometry (Lit |v#0@@46|)) (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement (Lit |v#0@@46|))))))))
 :qid |CoordinationSystemRefinementminidfy.211:17|
 :weight 3
 :skolemid |1456|
 :pattern ( (CoordinationSystemRefinement.__default.Inv (Lit |v#0@@46|)))
))))
(assert (= (type |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) TyType))
(assert (= (Tag |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
(assert (= (TagFamily |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) tytagFamily$UIOp))
(assert (forall ((bx@@117 T@U) ) (!  (=> (and (= (type bx@@117) BoxType) ($IsBox bx@@117 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (and (= ($Box ($Unbox DatatypeTypeType bx@@117)) bx@@117) ($Is ($Unbox DatatypeTypeType bx@@117) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))
 :qid |unknown.0:0|
 :skolemid |1469|
 :pattern ( ($IsBox bx@@117 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
)))
(assert (= (type Tclass.CoordinationSystem.Step) TyType))
(assert (= (Tag Tclass.CoordinationSystem.Step) Tagclass.CoordinationSystem.Step))
(assert (= (TagFamily Tclass.CoordinationSystem.Step) tytagFamily$Step))
(assert (forall ((bx@@118 T@U) ) (!  (=> (and (= (type bx@@118) BoxType) ($IsBox bx@@118 Tclass.CoordinationSystem.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@118)) bx@@118) ($Is ($Unbox DatatypeTypeType bx@@118) Tclass.CoordinationSystem.Step)))
 :qid |unknown.0:0|
 :skolemid |1470|
 :pattern ( ($IsBox bx@@118 Tclass.CoordinationSystem.Step))
)))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (= (TagFamily Tclass.KeyType.Key) tytagFamily$Key))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@119)) bx@@119) ($Is ($Unbox (SeqType BoxType) bx@@119) Tclass.KeyType.Key)))
 :qid |unknown.0:0|
 :skolemid |1519|
 :pattern ( ($IsBox bx@@119 Tclass.KeyType.Key))
)))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (= (TagFamily Tclass.ValueType.Value) tytagFamily$Value))
(assert (forall ((bx@@120 T@U) ) (!  (=> (and (= (type bx@@120) BoxType) ($IsBox bx@@120 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@120)) bx@@120) ($Is ($Unbox (SeqType BoxType) bx@@120) Tclass.ValueType.Value)))
 :qid |unknown.0:0|
 :skolemid |1520|
 :pattern ( ($IsBox bx@@120 Tclass.ValueType.Value))
)))
(assert (= (type Tclass.MsgHistoryMod.KeyedMessage) TyType))
(assert (= (Tag Tclass.MsgHistoryMod.KeyedMessage) Tagclass.MsgHistoryMod.KeyedMessage))
(assert (= (TagFamily Tclass.MsgHistoryMod.KeyedMessage) tytagFamily$KeyedMessage))
(assert (forall ((bx@@121 T@U) ) (!  (=> (and (= (type bx@@121) BoxType) ($IsBox bx@@121 Tclass.MsgHistoryMod.KeyedMessage)) (and (= ($Box ($Unbox DatatypeTypeType bx@@121)) bx@@121) ($Is ($Unbox DatatypeTypeType bx@@121) Tclass.MsgHistoryMod.KeyedMessage)))
 :qid |unknown.0:0|
 :skolemid |1521|
 :pattern ( ($IsBox bx@@121 Tclass.MsgHistoryMod.KeyedMessage))
)))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@122 T@U) ) (!  (=> (and (= (type bx@@122) BoxType) ($IsBox bx@@122 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@122)) bx@@122) ($Is ($Unbox refType bx@@122) Tclass.SequencesLite.__default)))
 :qid |unknown.0:0|
 :skolemid |1731|
 :pattern ( ($IsBox bx@@122 Tclass.SequencesLite.__default))
)))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.SequencesLite.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.SequencesLite.__default))))
 :qid |unknown.0:0|
 :skolemid |1732|
 :pattern ( ($Is $o@@11 Tclass.SequencesLite.__default))
)))
(assert (forall (($o@@12 T@U) ($h@@50 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@50) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.SequencesLite.__default $h@@50)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@50 $o@@12) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1733|
 :pattern ( ($IsAlloc $o@@12 Tclass.SequencesLite.__default $h@@50))
)))
(assert (forall ((arg0@@400 T@U) (arg1@@150 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@400 arg1@@150)) BoxType)
 :qid |funType:SequencesLite.__default.Last|
 :pattern ( (SequencesLite.__default.Last arg0@@400 arg1@@150))
)))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0|) (and ($Is |run#0| (TSeq SequencesLite._default.Last$E)) (INTERNAL_gt_boogie (|Seq#Length| |run#0|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|) SequencesLite._default.Last$E))
 :qid |unknown.0:0|
 :skolemid |1734|
 :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|))
))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@0|) 0)))
 :qid |unknown.0:0|
 :skolemid |1735|
 :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|))
)))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq SequencesLite._default.Last$E@@1)) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@1|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (INTERNAL_sub_boogie (|Seq#Length| |run#0@@1|) 1))))
 :qid |unknown.0:0|
 :skolemid |1736|
 :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|))
))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq SequencesLite._default.Last$E@@2)) (INTERNAL_gt_boogie (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |run#0@@2|)) 1))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1737|
 :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)))
))))
(assert (forall ((arg0@@401 T@U) (arg1@@151 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@401 arg1@@151)) (SeqType BoxType))
 :qid |funType:SequencesLite.__default.DropLast|
 :pattern ( (SequencesLite.__default.DropLast arg0@@401 arg1@@151))
)))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq SequencesLite._default.DropLast$E)) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@3|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|) (TSeq SequencesLite._default.DropLast$E)))
 :qid |unknown.0:0|
 :skolemid |1738|
 :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|))
))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@4|) 0)))
 :qid |unknown.0:0|
 :skolemid |1739|
 :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|))
)))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq SequencesLite._default.DropLast$E@@1)) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@5|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (INTERNAL_sub_boogie (|Seq#Length| |run#0@@5|) 1))))
 :qid |unknown.0:0|
 :skolemid |1740|
 :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|))
))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq SequencesLite._default.DropLast$E@@2)) (INTERNAL_gt_boogie (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |run#0@@6|)) 1))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1741|
 :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)))
))))
(assert (forall ((arg0@@402 Int) (arg1@@152 T@U) ) (! (= (type (|#FloatingSeqMod.FloatingSeq.FloatingSeq| arg0@@402 arg1@@152)) DatatypeTypeType)
 :qid |funType:#FloatingSeqMod.FloatingSeq.FloatingSeq|
 :pattern ( (|#FloatingSeqMod.FloatingSeq.FloatingSeq| arg0@@402 arg1@@152))
)))
(assert (forall ((|a#0#0#0@@0| Int) (|a#0#1#0@@0| T@U) ) (!  (=> (= (type |a#0#1#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#0#0#0@@0| |a#0#1#0@@0|)) |##FloatingSeqMod.FloatingSeq.FloatingSeq|))
 :qid |FloatingSeqsdfy.18:5|
 :skolemid |1742|
 :pattern ( (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#0#0#0@@0| |a#0#1#0@@0|))
)))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (= (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@16) (= (DatatypeCtorId d@@16) |##FloatingSeqMod.FloatingSeq.FloatingSeq|)))
 :qid |unknown.0:0|
 :skolemid |1743|
 :pattern ( (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@16))
)))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@17)) (exists ((|a#1#0#0@@0| Int) (|a#1#1#0@@0| T@U) ) (!  (and (= (type |a#1#1#0@@0|) (SeqType BoxType)) (= d@@17 (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#1#0#0@@0| |a#1#1#0@@0|)))
 :qid |FloatingSeqsdfy.18:5|
 :skolemid |1744|
 :no-pattern (type |a#1#1#0@@0|)
 :no-pattern (U_2_int |a#1#1#0@@0|)
 :no-pattern (U_2_bool |a#1#1#0@@0|)
)))
 :qid |unknown.0:0|
 :skolemid |1745|
 :pattern ( (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@17))
)))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@2 T@U) (|a#2#0#0@@0| Int) (|a#2#1#0@@0| T@U) ) (!  (=> (and (= (type FloatingSeqMod.FloatingSeq$T@@2) TyType) (= (type |a#2#1#0@@0|) (SeqType BoxType))) (= ($Is (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@2))  (and ($Is (int_2_U |a#2#0#0@@0|) Tclass._System.nat) ($Is |a#2#1#0@@0| (TSeq FloatingSeqMod.FloatingSeq$T@@2)))))
 :qid |unknown.0:0|
 :skolemid |1746|
 :pattern ( ($Is (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@2)))
)))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@3 T@U) (|a#3#0#0@@0| Int) (|a#3#1#0@@0| T@U) ($h@@51 T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod.FloatingSeq$T@@3) TyType) (= (type |a#3#1#0@@0|) (SeqType BoxType))) (= (type $h@@51) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@51)) (= ($IsAlloc (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#3#0#0@@0| |a#3#1#0@@0|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@3) $h@@51)  (and ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass._System.nat $h@@51) ($IsAlloc |a#3#1#0@@0| (TSeq FloatingSeqMod.FloatingSeq$T@@3) $h@@51))))
 :qid |unknown.0:0|
 :skolemid |1747|
 :pattern ( ($IsAlloc (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#3#0#0@@0| |a#3#1#0@@0|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@3) $h@@51))
)))
(assert (forall ((d@@18 T@U) ($h@@52 T@U) ) (!  (=> (and (and (= (type d@@18) DatatypeTypeType) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@52) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@18) (exists ((FloatingSeqMod.FloatingSeq$T@@4 T@U) ) (!  (and (= (type FloatingSeqMod.FloatingSeq$T@@4) TyType) ($IsAlloc d@@18 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@4) $h@@52))
 :qid |unknown.0:0|
 :skolemid |1748|
 :pattern ( ($IsAlloc d@@18 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@4) $h@@52))
))))) ($IsAlloc (int_2_U (FloatingSeqMod.FloatingSeq.start d@@18)) Tclass._System.nat $h@@52))
 :qid |unknown.0:0|
 :skolemid |1749|
 :pattern ( ($IsAlloc (int_2_U (FloatingSeqMod.FloatingSeq.start d@@18)) Tclass._System.nat $h@@52))
)))
(assert (forall ((arg0@@403 T@U) ) (! (= (type (FloatingSeqMod.FloatingSeq.entries arg0@@403)) (SeqType BoxType))
 :qid |funType:FloatingSeqMod.FloatingSeq.entries|
 :pattern ( (FloatingSeqMod.FloatingSeq.entries arg0@@403))
)))
(assert (forall ((d@@19 T@U) (FloatingSeqMod.FloatingSeq$T@@5 T@U) ($h@@53 T@U) ) (!  (=> (and (and (and (= (type d@@19) DatatypeTypeType) (= (type FloatingSeqMod.FloatingSeq$T@@5) TyType)) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@53) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@19) ($IsAlloc d@@19 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@5) $h@@53)))) ($IsAlloc (FloatingSeqMod.FloatingSeq.entries d@@19) (TSeq FloatingSeqMod.FloatingSeq$T@@5) $h@@53))
 :qid |unknown.0:0|
 :skolemid |1750|
 :pattern ( ($IsAlloc (FloatingSeqMod.FloatingSeq.entries d@@19) (TSeq FloatingSeqMod.FloatingSeq$T@@5) $h@@53))
)))
(assert (forall ((|a#4#0#0@@0| Int) (|a#4#1#0@@0| T@U) ) (!  (=> (= (type |a#4#1#0@@0|) (SeqType BoxType)) (= (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt |a#4#0#0@@0|) (Lit |a#4#1#0@@0|)) (Lit (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#4#0#0@@0| |a#4#1#0@@0|))))
 :qid |FloatingSeqsdfy.18:5|
 :skolemid |1751|
 :pattern ( (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt |a#4#0#0@@0|) (Lit |a#4#1#0@@0|)))
)))
(assert (forall ((|a#5#0#0@@0| Int) (|a#5#1#0@@0| T@U) ) (!  (=> (= (type |a#5#1#0@@0|) (SeqType BoxType)) (= (FloatingSeqMod.FloatingSeq.start (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#5#0#0@@0| |a#5#1#0@@0|)) |a#5#0#0@@0|))
 :qid |FloatingSeqsdfy.18:5|
 :skolemid |1752|
 :pattern ( (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((|a#6#0#0@@0| Int) (|a#6#1#0@@0| T@U) ) (!  (=> (= (type |a#6#1#0@@0|) (SeqType BoxType)) (= (FloatingSeqMod.FloatingSeq.entries (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#6#0#0@@0| |a#6#1#0@@0|)) |a#6#1#0@@0|))
 :qid |FloatingSeqsdfy.18:5|
 :skolemid |1753|
 :pattern ( (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((|a#7#0#0@@0| Int) (|a#7#1#0@@0| T@U) (i@@25 Int) ) (!  (=> (= (type |a#7#1#0@@0|) (SeqType BoxType)) (=> (and (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#7#1#0@@0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#7#1#0@@0| i@@25))) (DtRank (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#7#0#0@@0| |a#7#1#0@@0|)))))
 :qid |FloatingSeqsdfy.18:5|
 :skolemid |1754|
 :pattern ( (|Seq#Index| |a#7#1#0@@0| i@@25) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#7#0#0@@0| |a#7#1#0@@0|))
)))
(assert (forall ((|a#8#0#0@@0| Int) (|a#8#1#0@@0| T@U) ) (!  (=> (= (type |a#8#1#0@@0|) (SeqType BoxType)) (< (|Seq#Rank| |a#8#1#0@@0|) (DtRank (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#8#0#0@@0| |a#8#1#0@@0|))))
 :qid |FloatingSeqsdfy.18:5|
 :skolemid |1755|
 :pattern ( (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |a#8#0#0@@0| |a#8#1#0@@0|))
)))
(assert (forall ((d@@20 T@U) ) (!  (=> (and (= (type d@@20) DatatypeTypeType) (|$IsA#FloatingSeqMod.FloatingSeq| d@@20)) (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@20))
 :qid |unknown.0:0|
 :skolemid |1756|
 :pattern ( (|$IsA#FloatingSeqMod.FloatingSeq| d@@20))
)))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@6 T@U) (d@@21 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@6) TyType) (= (type d@@21) DatatypeTypeType)) ($Is d@@21 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@6))) (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@21))
 :qid |unknown.0:0|
 :skolemid |1757|
 :pattern ( (FloatingSeqMod.FloatingSeq.FloatingSeq_q d@@21) ($Is d@@21 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@6)))
)))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) true) (= (|FloatingSeqMod.FloatingSeq#Equal| a@@118 b@@67)  (and (= (FloatingSeqMod.FloatingSeq.start a@@118) (FloatingSeqMod.FloatingSeq.start b@@67)) (|Seq#Equal| (FloatingSeqMod.FloatingSeq.entries a@@118) (FloatingSeqMod.FloatingSeq.entries b@@67)))))
 :qid |unknown.0:0|
 :skolemid |1758|
 :pattern ( (|FloatingSeqMod.FloatingSeq#Equal| a@@118 b@@67))
)))
(assert (forall ((a@@119 T@U) (b@@68 T@U) ) (!  (=> (and (= (type a@@119) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (= (|FloatingSeqMod.FloatingSeq#Equal| a@@119 b@@68) (= a@@119 b@@68)))
 :qid |unknown.0:0|
 :skolemid |1759|
 :pattern ( (|FloatingSeqMod.FloatingSeq#Equal| a@@119 b@@68))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@7 T@U) (this T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@7) TyType) (= (type this) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@7 this) ($Is this (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@7)))) (INTERNAL_le_boogie 0 (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@7 this)))
 :qid |unknown.0:0|
 :skolemid |1760|
 :pattern ( (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@7 this))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@8 T@U) (this@@0 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@8) TyType) (= (type this@@0) DatatypeTypeType)) ($Is this@@0 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@8))) (= (|FloatingSeqMod.FloatingSeq.Len#requires| FloatingSeqMod.FloatingSeq$T@@8 this@@0) true))
 :qid |unknown.0:0|
 :skolemid |1761|
 :pattern ( (|FloatingSeqMod.FloatingSeq.Len#requires| FloatingSeqMod.FloatingSeq$T@@8 this@@0))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@9 T@U) (this@@1 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@9) TyType) (= (type this@@1) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@9 this@@1) ($Is this@@1 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@9)))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@1) (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@1)) (= (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@9 this@@1) (INTERNAL_add_boogie (FloatingSeqMod.FloatingSeq.start this@@1) (|Seq#Length| (FloatingSeqMod.FloatingSeq.entries this@@1))))))
 :qid |unknown.0:0|
 :skolemid |1762|
 :pattern ( (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@9 this@@1))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@10 T@U) (this@@2 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@10) TyType) (= (type this@@2) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@10 (Lit this@@2)) ($Is this@@2 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@10)))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@2)) (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@2))) (= (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@10 (Lit this@@2)) (INTERNAL_add_boogie (FloatingSeqMod.FloatingSeq.start (Lit this@@2)) (|Seq#Length| (Lit (FloatingSeqMod.FloatingSeq.entries (Lit this@@2))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1763|
 :pattern ( (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@10 (Lit this@@2)))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@11 T@U) (this@@3 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@11) TyType) (= (type this@@3) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.FirstActiveIndex#canCall| FloatingSeqMod.FloatingSeq$T@@11 this@@3) ($Is this@@3 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@11)))) (INTERNAL_le_boogie 0 (FloatingSeqMod.FloatingSeq.FirstActiveIndex FloatingSeqMod.FloatingSeq$T@@11 this@@3)))
 :qid |unknown.0:0|
 :skolemid |1764|
 :pattern ( (FloatingSeqMod.FloatingSeq.FirstActiveIndex FloatingSeqMod.FloatingSeq$T@@11 this@@3))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@12 T@U) (this@@4 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@12) TyType) (= (type this@@4) DatatypeTypeType)) ($Is this@@4 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@12))) (= (|FloatingSeqMod.FloatingSeq.FirstActiveIndex#requires| FloatingSeqMod.FloatingSeq$T@@12 this@@4) true))
 :qid |unknown.0:0|
 :skolemid |1765|
 :pattern ( (|FloatingSeqMod.FloatingSeq.FirstActiveIndex#requires| FloatingSeqMod.FloatingSeq$T@@12 this@@4))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@13 T@U) (this@@5 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@13) TyType) (= (type this@@5) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.FirstActiveIndex#canCall| FloatingSeqMod.FloatingSeq$T@@13 this@@5) ($Is this@@5 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@13)))) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@5) (= (FloatingSeqMod.FloatingSeq.FirstActiveIndex FloatingSeqMod.FloatingSeq$T@@13 this@@5) (FloatingSeqMod.FloatingSeq.start this@@5))))
 :qid |unknown.0:0|
 :skolemid |1766|
 :pattern ( (FloatingSeqMod.FloatingSeq.FirstActiveIndex FloatingSeqMod.FloatingSeq$T@@13 this@@5))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@14 T@U) (this@@6 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@14) TyType) (= (type this@@6) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.FirstActiveIndex#canCall| FloatingSeqMod.FloatingSeq$T@@14 (Lit this@@6)) ($Is this@@6 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@14)))) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@6)) (= (FloatingSeqMod.FloatingSeq.FirstActiveIndex FloatingSeqMod.FloatingSeq$T@@14 (Lit this@@6)) (LitInt (FloatingSeqMod.FloatingSeq.start (Lit this@@6))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1767|
 :pattern ( (FloatingSeqMod.FloatingSeq.FirstActiveIndex FloatingSeqMod.FloatingSeq$T@@14 (Lit this@@6)))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@15 T@U) (this@@7 T@U) (|i#0| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@15) TyType) (= (type this@@7) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.IsActive#canCall| FloatingSeqMod.FloatingSeq$T@@15 this@@7 |i#0|) (and ($Is this@@7 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@15)) (INTERNAL_le_boogie 0 |i#0|)))) true)
 :qid |unknown.0:0|
 :skolemid |1768|
 :pattern ( (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@15 this@@7 |i#0|))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@16 T@U) (this@@8 T@U) (|i#0@@0| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@16) TyType) (= (type this@@8) DatatypeTypeType)) (and ($Is this@@8 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@16)) (INTERNAL_le_boogie 0 |i#0@@0|))) (= (|FloatingSeqMod.FloatingSeq.IsActive#requires| FloatingSeqMod.FloatingSeq$T@@16 this@@8 |i#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |1769|
 :pattern ( (|FloatingSeqMod.FloatingSeq.IsActive#requires| FloatingSeqMod.FloatingSeq$T@@16 this@@8 |i#0@@0|))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@17 T@U) (this@@9 T@U) (|i#0@@1| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@17) TyType) (= (type this@@9) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.IsActive#canCall| FloatingSeqMod.FloatingSeq$T@@17 this@@9 |i#0@@1|) (and ($Is this@@9 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@17)) (INTERNAL_le_boogie 0 |i#0@@1|)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@9) (=> (INTERNAL_le_boogie (FloatingSeqMod.FloatingSeq.start this@@9) |i#0@@1|) (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@17 this@@9)))) (= (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@17 this@@9 |i#0@@1|)  (and true (and (INTERNAL_le_boogie (FloatingSeqMod.FloatingSeq.start this@@9) |i#0@@1|) (INTERNAL_lt_boogie |i#0@@1| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@17 this@@9)))))))
 :qid |unknown.0:0|
 :skolemid |1770|
 :pattern ( (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@17 this@@9 |i#0@@1|))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@18 T@U) (this@@10 T@U) (|i#0@@2| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@18) TyType) (= (type this@@10) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.IsActive#canCall| FloatingSeqMod.FloatingSeq$T@@18 (Lit this@@10) (LitInt |i#0@@2|)) (and ($Is this@@10 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@18)) (INTERNAL_le_boogie 0 |i#0@@2|)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@10)) (=> (INTERNAL_le_boogie (FloatingSeqMod.FloatingSeq.start (Lit this@@10)) |i#0@@2|) (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@18 (Lit this@@10))))) (= (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@18 (Lit this@@10) (LitInt |i#0@@2|))  (and true (and (INTERNAL_le_boogie (FloatingSeqMod.FloatingSeq.start (Lit this@@10)) |i#0@@2|) (INTERNAL_lt_boogie |i#0@@2| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@18 (Lit this@@10))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1771|
 :pattern ( (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@18 (Lit this@@10) (LitInt |i#0@@2|)))
))))
(assert (forall ((arg0@@404 T@U) (arg1@@153 T@U) (arg2@@83 Int) ) (! (= (type (FloatingSeqMod.FloatingSeq.Get arg0@@404 arg1@@153 arg2@@83)) BoxType)
 :qid |funType:FloatingSeqMod.FloatingSeq.Get|
 :pattern ( (FloatingSeqMod.FloatingSeq.Get arg0@@404 arg1@@153 arg2@@83))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@19 T@U) (this@@11 T@U) (|i#0@@3| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@19) TyType) (= (type this@@11) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Get#canCall| FloatingSeqMod.FloatingSeq$T@@19 this@@11 |i#0@@3|) (and (and ($Is this@@11 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@19)) (INTERNAL_le_boogie 0 |i#0@@3|)) (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@19 this@@11 |i#0@@3|)))) ($IsBox (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@19 this@@11 |i#0@@3|) FloatingSeqMod.FloatingSeq$T@@19))
 :qid |unknown.0:0|
 :skolemid |1772|
 :pattern ( (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@19 this@@11 |i#0@@3|))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@20 T@U) (this@@12 T@U) (|i#0@@4| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@20) TyType) (= (type this@@12) DatatypeTypeType)) (and ($Is this@@12 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@20)) (INTERNAL_le_boogie 0 |i#0@@4|))) (= (|FloatingSeqMod.FloatingSeq.Get#requires| FloatingSeqMod.FloatingSeq$T@@20 this@@12 |i#0@@4|) (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@20 this@@12 |i#0@@4|)))
 :qid |unknown.0:0|
 :skolemid |1773|
 :pattern ( (|FloatingSeqMod.FloatingSeq.Get#requires| FloatingSeqMod.FloatingSeq$T@@20 this@@12 |i#0@@4|))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@21 T@U) (this@@13 T@U) (|i#0@@5| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@21) TyType) (= (type this@@13) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Get#canCall| FloatingSeqMod.FloatingSeq$T@@21 this@@13 |i#0@@5|) (and (and ($Is this@@13 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@21)) (INTERNAL_le_boogie 0 |i#0@@5|)) (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@21 this@@13 |i#0@@5|)))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@13) (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@13)) (= (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@21 this@@13 |i#0@@5|) (|Seq#Index| (FloatingSeqMod.FloatingSeq.entries this@@13) (INTERNAL_sub_boogie |i#0@@5| (FloatingSeqMod.FloatingSeq.start this@@13))))))
 :qid |unknown.0:0|
 :skolemid |1774|
 :pattern ( (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@21 this@@13 |i#0@@5|))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@22 T@U) (this@@14 T@U) (|i#0@@6| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@22) TyType) (= (type this@@14) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Get#canCall| FloatingSeqMod.FloatingSeq$T@@22 (Lit this@@14) (LitInt |i#0@@6|)) (and (and ($Is this@@14 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@22)) (INTERNAL_le_boogie 0 |i#0@@6|)) (U_2_bool (Lit (bool_2_U (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@22 (Lit this@@14) (LitInt |i#0@@6|)))))))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@14)) (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@14))) (= (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@22 (Lit this@@14) (LitInt |i#0@@6|)) (|Seq#Index| (Lit (FloatingSeqMod.FloatingSeq.entries (Lit this@@14))) (LitInt (INTERNAL_sub_boogie |i#0@@6| (FloatingSeqMod.FloatingSeq.start (Lit this@@14))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1775|
 :pattern ( (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@22 (Lit this@@14) (LitInt |i#0@@6|)))
))))
(assert (forall ((arg0@@405 T@U) (arg1@@154 T@U) (arg2@@84 Int) ) (! (= (type (FloatingSeqMod.FloatingSeq.GetPrefix arg0@@405 arg1@@154 arg2@@84)) DatatypeTypeType)
 :qid |funType:FloatingSeqMod.FloatingSeq.GetPrefix|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetPrefix arg0@@405 arg1@@154 arg2@@84))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@23 T@U) (this@@15 T@U) (|count#0| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@23) TyType) (= (type this@@15) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.GetPrefix#canCall| FloatingSeqMod.FloatingSeq$T@@23 this@@15 |count#0|) (and (and ($Is this@@15 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@23)) (INTERNAL_le_boogie 0 |count#0|)) (INTERNAL_le_boogie |count#0| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@23 this@@15))))) ($Is (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@23 this@@15 |count#0|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@23)))
 :qid |unknown.0:0|
 :skolemid |1776|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@23 this@@15 |count#0|))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@24 T@U) (this@@16 T@U) (|count#0@@0| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@24) TyType) (= (type this@@16) DatatypeTypeType)) (and ($Is this@@16 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@24)) (INTERNAL_le_boogie 0 |count#0@@0|))) (= (|FloatingSeqMod.FloatingSeq.GetPrefix#requires| FloatingSeqMod.FloatingSeq$T@@24 this@@16 |count#0@@0|) (INTERNAL_le_boogie |count#0@@0| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@24 this@@16))))
 :qid |unknown.0:0|
 :skolemid |1777|
 :pattern ( (|FloatingSeqMod.FloatingSeq.GetPrefix#requires| FloatingSeqMod.FloatingSeq$T@@24 this@@16 |count#0@@0|))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@25 T@U) (this@@17 T@U) (|count#0@@1| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@25) TyType) (= (type this@@17) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.GetPrefix#canCall| FloatingSeqMod.FloatingSeq$T@@25 this@@17 |count#0@@1|) (and (and ($Is this@@17 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@25)) (INTERNAL_le_boogie 0 |count#0@@1|)) (INTERNAL_le_boogie |count#0@@1| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@25 this@@17))))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@17) (=> (not (INTERNAL_le_boogie |count#0@@1| (FloatingSeqMod.FloatingSeq.start this@@17))) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@17) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@17) (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@17))))) (= (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@25 this@@17 |count#0@@1|) (ite (INTERNAL_le_boogie |count#0@@1| (FloatingSeqMod.FloatingSeq.start this@@17)) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |count#0@@1| (Lit (|Seq#Empty| BoxType))) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (FloatingSeqMod.FloatingSeq.start this@@17) (|Seq#Take| (FloatingSeqMod.FloatingSeq.entries this@@17) (INTERNAL_sub_boogie |count#0@@1| (FloatingSeqMod.FloatingSeq.start this@@17))))))))
 :qid |unknown.0:0|
 :skolemid |1778|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@25 this@@17 |count#0@@1|))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@26 T@U) (this@@18 T@U) (|count#0@@2| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@26) TyType) (= (type this@@18) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.GetPrefix#canCall| FloatingSeqMod.FloatingSeq$T@@26 (Lit this@@18) (LitInt |count#0@@2|)) (and (and ($Is this@@18 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@26)) (INTERNAL_le_boogie 0 |count#0@@2|)) (INTERNAL_le_boogie |count#0@@2| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@26 (Lit this@@18)))))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@18)) (=> (not (INTERNAL_le_boogie |count#0@@2| (FloatingSeqMod.FloatingSeq.start (Lit this@@18)))) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@18)) (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@18)) (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@18)))))) (= (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@26 (Lit this@@18) (LitInt |count#0@@2|)) (ite (INTERNAL_le_boogie |count#0@@2| (FloatingSeqMod.FloatingSeq.start (Lit this@@18))) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt |count#0@@2|) (Lit (|Seq#Empty| BoxType))) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt (FloatingSeqMod.FloatingSeq.start (Lit this@@18))) (Lit (|Seq#Take| (Lit (FloatingSeqMod.FloatingSeq.entries (Lit this@@18))) (LitInt (INTERNAL_sub_boogie |count#0@@2| (FloatingSeqMod.FloatingSeq.start (Lit this@@18)))))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1779|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@26 (Lit this@@18) (LitInt |count#0@@2|)))
))))
(assert (forall ((arg0@@406 T@U) (arg1@@155 T@U) (arg2@@85 Int) ) (! (= (type (FloatingSeqMod.FloatingSeq.GetSuffix arg0@@406 arg1@@155 arg2@@85)) DatatypeTypeType)
 :qid |funType:FloatingSeqMod.FloatingSeq.GetSuffix|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetSuffix arg0@@406 arg1@@155 arg2@@85))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@27 T@U) (this@@19 T@U) (|newStart#0| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@27) TyType) (= (type this@@19) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.GetSuffix#canCall| FloatingSeqMod.FloatingSeq$T@@27 this@@19 |newStart#0|) (and (and ($Is this@@19 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@27)) (INTERNAL_le_boogie 0 |newStart#0|)) (or (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@27 this@@19 |newStart#0|) (= |newStart#0| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@27 this@@19)))))) ($Is (FloatingSeqMod.FloatingSeq.GetSuffix FloatingSeqMod.FloatingSeq$T@@27 this@@19 |newStart#0|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@27)))
 :qid |unknown.0:0|
 :skolemid |1780|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetSuffix FloatingSeqMod.FloatingSeq$T@@27 this@@19 |newStart#0|))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@28 T@U) (this@@20 T@U) (|newStart#0@@0| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@28) TyType) (= (type this@@20) DatatypeTypeType)) (and ($Is this@@20 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@28)) (INTERNAL_le_boogie 0 |newStart#0@@0|))) (= (|FloatingSeqMod.FloatingSeq.GetSuffix#requires| FloatingSeqMod.FloatingSeq$T@@28 this@@20 |newStart#0@@0|)  (or (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@28 this@@20 |newStart#0@@0|) (= |newStart#0@@0| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@28 this@@20)))))
 :qid |unknown.0:0|
 :skolemid |1781|
 :pattern ( (|FloatingSeqMod.FloatingSeq.GetSuffix#requires| FloatingSeqMod.FloatingSeq$T@@28 this@@20 |newStart#0@@0|))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@29 T@U) (this@@21 T@U) (|newStart#0@@1| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@29) TyType) (= (type this@@21) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.GetSuffix#canCall| FloatingSeqMod.FloatingSeq$T@@29 this@@21 |newStart#0@@1|) (and (and ($Is this@@21 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@29)) (INTERNAL_le_boogie 0 |newStart#0@@1|)) (or (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@29 this@@21 |newStart#0@@1|) (= |newStart#0@@1| (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@29 this@@21)))))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@21) (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@21)) (= (FloatingSeqMod.FloatingSeq.GetSuffix FloatingSeqMod.FloatingSeq$T@@29 this@@21 |newStart#0@@1|) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |newStart#0@@1| (|Seq#Drop| (FloatingSeqMod.FloatingSeq.entries this@@21) (INTERNAL_sub_boogie |newStart#0@@1| (FloatingSeqMod.FloatingSeq.start this@@21)))))))
 :qid |unknown.0:0|
 :skolemid |1782|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetSuffix FloatingSeqMod.FloatingSeq$T@@29 this@@21 |newStart#0@@1|))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@30 T@U) (this@@22 T@U) (|newStart#0@@2| Int) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@30) TyType) (= (type this@@22) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.GetSuffix#canCall| FloatingSeqMod.FloatingSeq$T@@30 (Lit this@@22) (LitInt |newStart#0@@2|)) (and (and ($Is this@@22 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@30)) (INTERNAL_le_boogie 0 |newStart#0@@2|)) (or (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@30 (Lit this@@22) (LitInt |newStart#0@@2|)) (= (LitInt |newStart#0@@2|) (LitInt (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@30 (Lit this@@22)))))))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@22)) (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@22))) (= (FloatingSeqMod.FloatingSeq.GetSuffix FloatingSeqMod.FloatingSeq$T@@30 (Lit this@@22) (LitInt |newStart#0@@2|)) (Lit (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt |newStart#0@@2|) (Lit (|Seq#Drop| (Lit (FloatingSeqMod.FloatingSeq.entries (Lit this@@22))) (LitInt (INTERNAL_sub_boogie |newStart#0@@2| (FloatingSeqMod.FloatingSeq.start (Lit this@@22)))))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1783|
 :pattern ( (FloatingSeqMod.FloatingSeq.GetSuffix FloatingSeqMod.FloatingSeq$T@@30 (Lit this@@22) (LitInt |newStart#0@@2|)))
))))
(assert (forall ((arg0@@407 T@U) (arg1@@156 T@U) (arg2@@86 T@U) ) (! (= (type (FloatingSeqMod.FloatingSeq.Append arg0@@407 arg1@@156 arg2@@86)) DatatypeTypeType)
 :qid |funType:FloatingSeqMod.FloatingSeq.Append|
 :pattern ( (FloatingSeqMod.FloatingSeq.Append arg0@@407 arg1@@156 arg2@@86))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@31 T@U) (this@@23 T@U) (|elts#0| T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod.FloatingSeq$T@@31) TyType) (= (type this@@23) DatatypeTypeType)) (= (type |elts#0|) (SeqType BoxType))) (or (|FloatingSeqMod.FloatingSeq.Append#canCall| FloatingSeqMod.FloatingSeq$T@@31 this@@23 |elts#0|) (and ($Is this@@23 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@31)) ($Is |elts#0| (TSeq FloatingSeqMod.FloatingSeq$T@@31))))) ($Is (FloatingSeqMod.FloatingSeq.Append FloatingSeqMod.FloatingSeq$T@@31 this@@23 |elts#0|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@31)))
 :qid |unknown.0:0|
 :skolemid |1784|
 :pattern ( (FloatingSeqMod.FloatingSeq.Append FloatingSeqMod.FloatingSeq$T@@31 this@@23 |elts#0|))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@32 T@U) (this@@24 T@U) (|elts#0@@0| T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod.FloatingSeq$T@@32) TyType) (= (type this@@24) DatatypeTypeType)) (= (type |elts#0@@0|) (SeqType BoxType))) (and ($Is this@@24 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@32)) ($Is |elts#0@@0| (TSeq FloatingSeqMod.FloatingSeq$T@@32)))) (= (|FloatingSeqMod.FloatingSeq.Append#requires| FloatingSeqMod.FloatingSeq$T@@32 this@@24 |elts#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |1785|
 :pattern ( (|FloatingSeqMod.FloatingSeq.Append#requires| FloatingSeqMod.FloatingSeq$T@@32 this@@24 |elts#0@@0|))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@33 T@U) (this@@25 T@U) (|elts#0@@1| T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod.FloatingSeq$T@@33) TyType) (= (type this@@25) DatatypeTypeType)) (= (type |elts#0@@1|) (SeqType BoxType))) (or (|FloatingSeqMod.FloatingSeq.Append#canCall| FloatingSeqMod.FloatingSeq$T@@33 this@@25 |elts#0@@1|) (and ($Is this@@25 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@33)) ($Is |elts#0@@1| (TSeq FloatingSeqMod.FloatingSeq$T@@33))))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@25) (FloatingSeqMod.FloatingSeq.FloatingSeq_q this@@25)) (= (FloatingSeqMod.FloatingSeq.Append FloatingSeqMod.FloatingSeq$T@@33 this@@25 |elts#0@@1|) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (FloatingSeqMod.FloatingSeq.start this@@25) (|Seq#Append| (FloatingSeqMod.FloatingSeq.entries this@@25) |elts#0@@1|)))))
 :qid |unknown.0:0|
 :skolemid |1786|
 :pattern ( (FloatingSeqMod.FloatingSeq.Append FloatingSeqMod.FloatingSeq$T@@33 this@@25 |elts#0@@1|))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@34 T@U) (this@@26 T@U) (|elts#0@@2| T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod.FloatingSeq$T@@34) TyType) (= (type this@@26) DatatypeTypeType)) (= (type |elts#0@@2|) (SeqType BoxType))) (or (|FloatingSeqMod.FloatingSeq.Append#canCall| FloatingSeqMod.FloatingSeq$T@@34 (Lit this@@26) (Lit |elts#0@@2|)) (and ($Is this@@26 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@34)) ($Is |elts#0@@2| (TSeq FloatingSeqMod.FloatingSeq$T@@34))))) (and (and (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@26)) (FloatingSeqMod.FloatingSeq.FloatingSeq_q (Lit this@@26))) (= (FloatingSeqMod.FloatingSeq.Append FloatingSeqMod.FloatingSeq$T@@34 (Lit this@@26) (Lit |elts#0@@2|)) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt (FloatingSeqMod.FloatingSeq.start (Lit this@@26))) (|Seq#Append| (FloatingSeqMod.FloatingSeq.entries (Lit this@@26)) |elts#0@@2|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1787|
 :pattern ( (FloatingSeqMod.FloatingSeq.Append FloatingSeqMod.FloatingSeq$T@@34 (Lit this@@26) (Lit |elts#0@@2|)))
))))
(assert (forall ((arg0@@408 T@U) (arg1@@157 T@U) ) (! (= (type (FloatingSeqMod.FloatingSeq.Last arg0@@408 arg1@@157)) BoxType)
 :qid |funType:FloatingSeqMod.FloatingSeq.Last|
 :pattern ( (FloatingSeqMod.FloatingSeq.Last arg0@@408 arg1@@157))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@35 T@U) (this@@27 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@35) TyType) (= (type this@@27) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Last#canCall| FloatingSeqMod.FloatingSeq$T@@35 this@@27) (and ($Is this@@27 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@35)) (and (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@35 this@@27) 0) (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@35 this@@27 (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@35 this@@27) 1)))))) ($IsBox (FloatingSeqMod.FloatingSeq.Last FloatingSeqMod.FloatingSeq$T@@35 this@@27) FloatingSeqMod.FloatingSeq$T@@35))
 :qid |unknown.0:0|
 :skolemid |1788|
 :pattern ( (FloatingSeqMod.FloatingSeq.Last FloatingSeqMod.FloatingSeq$T@@35 this@@27))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@36 T@U) (this@@28 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@36) TyType) (= (type this@@28) DatatypeTypeType)) ($Is this@@28 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@36))) (= (|FloatingSeqMod.FloatingSeq.Last#requires| FloatingSeqMod.FloatingSeq$T@@36 this@@28)  (and (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@36 this@@28) 0) (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@36 this@@28 (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@36 this@@28) 1)))))
 :qid |unknown.0:0|
 :skolemid |1789|
 :pattern ( (|FloatingSeqMod.FloatingSeq.Last#requires| FloatingSeqMod.FloatingSeq$T@@36 this@@28))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@37 T@U) (this@@29 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@37) TyType) (= (type this@@29) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Last#canCall| FloatingSeqMod.FloatingSeq$T@@37 this@@29) (and ($Is this@@29 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@37)) (and (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@37 this@@29) 0) (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@37 this@@29 (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@37 this@@29) 1)))))) (and (and (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@37 this@@29) (|FloatingSeqMod.FloatingSeq.Get#canCall| FloatingSeqMod.FloatingSeq$T@@37 this@@29 (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@37 this@@29) 1))) (= (FloatingSeqMod.FloatingSeq.Last FloatingSeqMod.FloatingSeq$T@@37 this@@29) (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@37 this@@29 (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@37 this@@29) 1)))))
 :qid |unknown.0:0|
 :skolemid |1790|
 :pattern ( (FloatingSeqMod.FloatingSeq.Last FloatingSeqMod.FloatingSeq$T@@37 this@@29))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@38 T@U) (this@@30 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@38) TyType) (= (type this@@30) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.Last#canCall| FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)) (and ($Is this@@30 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@38)) (and (U_2_bool (Lit (bool_2_U (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)) 0)))) (U_2_bool (Lit (bool_2_U (FloatingSeqMod.FloatingSeq.IsActive FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30) (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)) 1)))))))))) (and (and (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)) (|FloatingSeqMod.FloatingSeq.Get#canCall| FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30) (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)) 1)))) (= (FloatingSeqMod.FloatingSeq.Last FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)) (Lit (FloatingSeqMod.FloatingSeq.Get FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30) (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)) 1)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1791|
 :pattern ( (FloatingSeqMod.FloatingSeq.Last FloatingSeqMod.FloatingSeq$T@@38 (Lit this@@30)))
))))
(assert (forall ((arg0@@409 T@U) (arg1@@158 T@U) ) (! (= (type (FloatingSeqMod.FloatingSeq.DropLast arg0@@409 arg1@@158)) DatatypeTypeType)
 :qid |funType:FloatingSeqMod.FloatingSeq.DropLast|
 :pattern ( (FloatingSeqMod.FloatingSeq.DropLast arg0@@409 arg1@@158))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@39 T@U) (this@@31 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@39) TyType) (= (type this@@31) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.DropLast#canCall| FloatingSeqMod.FloatingSeq$T@@39 this@@31) (and ($Is this@@31 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@39)) (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@39 this@@31) 0)))) ($Is (FloatingSeqMod.FloatingSeq.DropLast FloatingSeqMod.FloatingSeq$T@@39 this@@31) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@39)))
 :qid |unknown.0:0|
 :skolemid |1792|
 :pattern ( (FloatingSeqMod.FloatingSeq.DropLast FloatingSeqMod.FloatingSeq$T@@39 this@@31))
))))
(assert (forall ((FloatingSeqMod.FloatingSeq$T@@40 T@U) (this@@32 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@40) TyType) (= (type this@@32) DatatypeTypeType)) ($Is this@@32 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@40))) (= (|FloatingSeqMod.FloatingSeq.DropLast#requires| FloatingSeqMod.FloatingSeq$T@@40 this@@32) (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@40 this@@32) 0)))
 :qid |unknown.0:0|
 :skolemid |1793|
 :pattern ( (|FloatingSeqMod.FloatingSeq.DropLast#requires| FloatingSeqMod.FloatingSeq$T@@40 this@@32))
)))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@41 T@U) (this@@33 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@41) TyType) (= (type this@@33) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.DropLast#canCall| FloatingSeqMod.FloatingSeq$T@@41 this@@33) (and ($Is this@@33 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@41)) (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@41 this@@33) 0)))) (and (and (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@41 this@@33) (|FloatingSeqMod.FloatingSeq.GetPrefix#canCall| FloatingSeqMod.FloatingSeq$T@@41 this@@33 (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@41 this@@33) 1))) (= (FloatingSeqMod.FloatingSeq.DropLast FloatingSeqMod.FloatingSeq$T@@41 this@@33) (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@41 this@@33 (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@41 this@@33) 1)))))
 :qid |unknown.0:0|
 :skolemid |1794|
 :pattern ( (FloatingSeqMod.FloatingSeq.DropLast FloatingSeqMod.FloatingSeq$T@@41 this@@33))
))))
(assert  (=> true (forall ((FloatingSeqMod.FloatingSeq$T@@42 T@U) (this@@34 T@U) ) (!  (=> (and (and (= (type FloatingSeqMod.FloatingSeq$T@@42) TyType) (= (type this@@34) DatatypeTypeType)) (or (|FloatingSeqMod.FloatingSeq.DropLast#canCall| FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34)) (and ($Is this@@34 (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod.FloatingSeq$T@@42)) (U_2_bool (Lit (bool_2_U (INTERNAL_gt_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34)) 0))))))) (and (and (|FloatingSeqMod.FloatingSeq.Len#canCall| FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34)) (|FloatingSeqMod.FloatingSeq.GetPrefix#canCall| FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34) (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34)) 1)))) (= (FloatingSeqMod.FloatingSeq.DropLast FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34)) (Lit (FloatingSeqMod.FloatingSeq.GetPrefix FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34) (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.FloatingSeq.Len FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34)) 1)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1795|
 :pattern ( (FloatingSeqMod.FloatingSeq.DropLast FloatingSeqMod.FloatingSeq$T@@42 (Lit this@@34)))
))))
(assert (= (type Tclass.FloatingSeqMod.__default) TyType))
(assert (= (Tag Tclass.FloatingSeqMod.__default) Tagclass.FloatingSeqMod.__default))
(assert (= (TagFamily Tclass.FloatingSeqMod.__default) tytagFamily$_default))
(assert (forall ((bx@@123 T@U) ) (!  (=> (and (= (type bx@@123) BoxType) ($IsBox bx@@123 Tclass.FloatingSeqMod.__default)) (and (= ($Box ($Unbox refType bx@@123)) bx@@123) ($Is ($Unbox refType bx@@123) Tclass.FloatingSeqMod.__default)))
 :qid |unknown.0:0|
 :skolemid |1797|
 :pattern ( ($IsBox bx@@123 Tclass.FloatingSeqMod.__default))
)))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.FloatingSeqMod.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.FloatingSeqMod.__default))))
 :qid |unknown.0:0|
 :skolemid |1798|
 :pattern ( ($Is $o@@13 Tclass.FloatingSeqMod.__default))
)))
(assert (forall (($o@@14 T@U) ($h@@54 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@54) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.FloatingSeqMod.__default $h@@54)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@54 $o@@14) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1799|
 :pattern ( ($IsAlloc $o@@14 Tclass.FloatingSeqMod.__default $h@@54))
)))
(assert  (=> true (forall ((|FloatingSeqMod._default.operator'cardinality?FloatingSeq$T| T@U) (|fs#0| T@U) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T|) TyType) (= (type |fs#0|) DatatypeTypeType)) (or (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T| |fs#0|) ($Is |fs#0| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T|)))) (INTERNAL_le_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T| |fs#0|)))
 :qid |unknown.0:0|
 :skolemid |1800|
 :pattern ( (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T| |fs#0|))
))))
(assert (forall ((|FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@0| T@U) (|fs#0@@0| T@U) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@0|) TyType) (= (type |fs#0@@0|) DatatypeTypeType)) ($Is |fs#0@@0| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@0|))) (= (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#requires| |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@0| |fs#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |1801|
 :pattern ( (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#requires| |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@0| |fs#0@@0|))
)))
(assert  (=> true (forall ((|FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1| T@U) (|fs#0@@1| T@U) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1|) TyType) (= (type |fs#0@@1|) DatatypeTypeType)) (or (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1| |fs#0@@1|) ($Is |fs#0@@1| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1|)))) (and (|FloatingSeqMod.FloatingSeq.Len#canCall| |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1| |fs#0@@1|) (= (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1| |fs#0@@1|) (FloatingSeqMod.FloatingSeq.Len |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1| |fs#0@@1|))))
 :qid |unknown.0:0|
 :skolemid |1802|
 :pattern ( (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@1| |fs#0@@1|))
))))
(assert  (=> true (forall ((|FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2| T@U) (|fs#0@@2| T@U) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2|) TyType) (= (type |fs#0@@2|) DatatypeTypeType)) (or (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2| (Lit |fs#0@@2|)) ($Is |fs#0@@2| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2|)))) (and (|FloatingSeqMod.FloatingSeq.Len#canCall| |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2| (Lit |fs#0@@2|)) (= (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2| (Lit |fs#0@@2|)) (LitInt (FloatingSeqMod.FloatingSeq.Len |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2| (Lit |fs#0@@2|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1803|
 :pattern ( (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |FloatingSeqMod._default.operator'cardinality?FloatingSeq$T@@2| (Lit |fs#0@@2|)))
))))
(assert (forall ((arg0@@410 T@U) (arg1@@159 T@U) (arg2@@87 Int) ) (! (= (type (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq arg0@@410 arg1@@159 arg2@@87)) BoxType)
 :qid |funType:FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq|
 :pattern ( (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq arg0@@410 arg1@@159 arg2@@87))
)))
(assert  (=> true (forall ((|FloatingSeqMod._default.operator'subscript?FloatingSeq$T| T@U) (|fs#0@@3| T@U) (|i#0@@7| Int) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'subscript?FloatingSeq$T|) TyType) (= (type |fs#0@@3|) DatatypeTypeType)) (or (|FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq#canCall| |FloatingSeqMod._default.operator'subscript?FloatingSeq$T| |fs#0@@3| |i#0@@7|) (and (and ($Is |fs#0@@3| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T|)) (INTERNAL_le_boogie 0 |i#0@@7|)) (FloatingSeqMod.FloatingSeq.IsActive |FloatingSeqMod._default.operator'subscript?FloatingSeq$T| |fs#0@@3| |i#0@@7|)))) ($IsBox (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T| |fs#0@@3| |i#0@@7|) |FloatingSeqMod._default.operator'subscript?FloatingSeq$T|))
 :qid |unknown.0:0|
 :skolemid |1804|
 :pattern ( (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T| |fs#0@@3| |i#0@@7|))
))))
(assert (forall ((|FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@0| T@U) (|fs#0@@4| T@U) (|i#0@@8| Int) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@0|) TyType) (= (type |fs#0@@4|) DatatypeTypeType)) (and ($Is |fs#0@@4| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@0|)) (INTERNAL_le_boogie 0 |i#0@@8|))) (= (|FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq#requires| |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@0| |fs#0@@4| |i#0@@8|) (FloatingSeqMod.FloatingSeq.IsActive |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@0| |fs#0@@4| |i#0@@8|)))
 :qid |unknown.0:0|
 :skolemid |1805|
 :pattern ( (|FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq#requires| |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@0| |fs#0@@4| |i#0@@8|))
)))
(assert  (=> true (forall ((|FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1| T@U) (|fs#0@@5| T@U) (|i#0@@9| Int) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1|) TyType) (= (type |fs#0@@5|) DatatypeTypeType)) (or (|FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq#canCall| |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1| |fs#0@@5| |i#0@@9|) (and (and ($Is |fs#0@@5| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1|)) (INTERNAL_le_boogie 0 |i#0@@9|)) (FloatingSeqMod.FloatingSeq.IsActive |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1| |fs#0@@5| |i#0@@9|)))) (and (|FloatingSeqMod.FloatingSeq.Get#canCall| |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1| |fs#0@@5| |i#0@@9|) (= (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1| |fs#0@@5| |i#0@@9|) (FloatingSeqMod.FloatingSeq.Get |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1| |fs#0@@5| |i#0@@9|))))
 :qid |unknown.0:0|
 :skolemid |1806|
 :pattern ( (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@1| |fs#0@@5| |i#0@@9|))
))))
(assert  (=> true (forall ((|FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2| T@U) (|fs#0@@6| T@U) (|i#0@@10| Int) ) (!  (=> (and (and (= (type |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2|) TyType) (= (type |fs#0@@6|) DatatypeTypeType)) (or (|FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq#canCall| |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2| (Lit |fs#0@@6|) (LitInt |i#0@@10|)) (and (and ($Is |fs#0@@6| (Tclass.FloatingSeqMod.FloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2|)) (INTERNAL_le_boogie 0 |i#0@@10|)) (U_2_bool (Lit (bool_2_U (FloatingSeqMod.FloatingSeq.IsActive |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2| (Lit |fs#0@@6|) (LitInt |i#0@@10|)))))))) (and (|FloatingSeqMod.FloatingSeq.Get#canCall| |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2| (Lit |fs#0@@6|) (LitInt |i#0@@10|)) (= (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2| (Lit |fs#0@@6|) (LitInt |i#0@@10|)) (Lit (FloatingSeqMod.FloatingSeq.Get |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2| (Lit |fs#0@@6|) (LitInt |i#0@@10|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1807|
 :pattern ( (FloatingSeqMod.__default.operator_ksubscript_qFloatingSeq |FloatingSeqMod._default.operator'subscript?FloatingSeq$T@@2| (Lit |fs#0@@6|) (LitInt |i#0@@10|)))
))))
(assert  (=> true (forall ((FloatingSeqMod._default.floatingSeq$T T@U) (|start#0| Int) (|length#0| Int) (|f#0@@67| T@U) ) (!  (=> (and (and (= (type FloatingSeqMod._default.floatingSeq$T) TyType) (= (type |f#0@@67|) HandleTypeType)) (or (|FloatingSeqMod.__default.floatingSeq#canCall| FloatingSeqMod._default.floatingSeq$T |start#0| |length#0| |f#0@@67|) (and (and (and (INTERNAL_le_boogie 0 |start#0|) (INTERNAL_le_boogie 0 |length#0|)) ($Is |f#0@@67| (Tclass._System.___hTotalFunc1 TInt FloatingSeqMod._default.floatingSeq$T))) (INTERNAL_le_boogie |start#0| |length#0|)))) ($Is (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T |start#0| |length#0| |f#0@@67|) (Tclass.FloatingSeqMod.FloatingSeq FloatingSeqMod._default.floatingSeq$T)))
 :qid |unknown.0:0|
 :skolemid |1808|
 :pattern ( (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T |start#0| |length#0| |f#0@@67|))
))))
(assert (forall ((FloatingSeqMod._default.floatingSeq$T@@0 T@U) ($Heap T@U) (|start#0@@0| Int) (|length#0@@0| Int) (|f#0@@68| T@U) ) (!  (=> (and (and (= (type FloatingSeqMod._default.floatingSeq$T@@0) TyType) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |f#0@@68|) HandleTypeType)) (=> (and (and (and ($IsGoodHeap $Heap) (INTERNAL_le_boogie 0 |start#0@@0|)) (INTERNAL_le_boogie 0 |length#0@@0|)) ($Is |f#0@@68| (Tclass._System.___hTotalFunc1 TInt FloatingSeqMod._default.floatingSeq$T@@0))) (= (|FloatingSeqMod.__default.floatingSeq#requires| FloatingSeqMod._default.floatingSeq$T@@0 |start#0@@0| |length#0@@0| |f#0@@68|) (INTERNAL_le_boogie |start#0@@0| |length#0@@0|))))
 :qid |unknown.0:0|
 :skolemid |1809|
 :pattern ( (|FloatingSeqMod.__default.floatingSeq#requires| FloatingSeqMod._default.floatingSeq$T@@0 |start#0@@0| |length#0@@0| |f#0@@68|) ($IsGoodHeap $Heap))
)))
(assert  (and (forall ((arg0@@411 T@U) (arg1@@160 T@U) (arg2@@88 T@U) (arg3@@47 Int) ) (! (= (type (|lambda#91| arg0@@411 arg1@@160 arg2@@88 arg3@@47)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))
 :qid |funType:lambda#91|
 :pattern ( (|lambda#91| arg0@@411 arg1@@160 arg2@@88 arg3@@47))
)) (forall ((arg0@@412 T@U) (arg1@@161 Int) (arg2@@89 Int) ) (! (= (type (|lambda#92| arg0@@412 arg1@@161 arg2@@89)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))
 :qid |funType:lambda#92|
 :pattern ( (|lambda#92| arg0@@412 arg1@@161 arg2@@89))
))))
(assert  (=> true (forall ((FloatingSeqMod._default.floatingSeq$T@@1 T@U) ($Heap@@0 T@U) (|start#0@@1| Int) (|length#0@@1| Int) (|f#0@@69| T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod._default.floatingSeq$T@@1) TyType) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |f#0@@69|) HandleTypeType)) (or (|FloatingSeqMod.__default.floatingSeq#canCall| FloatingSeqMod._default.floatingSeq$T@@1 |start#0@@1| |length#0@@1| |f#0@@69|) (and (and (and (and ($IsGoodHeap $Heap@@0) (INTERNAL_le_boogie 0 |start#0@@1|)) (INTERNAL_le_boogie 0 |length#0@@1|)) ($Is |f#0@@69| (Tclass._System.___hTotalFunc1 TInt FloatingSeqMod._default.floatingSeq$T@@1))) (INTERNAL_le_boogie |start#0@@1| |length#0@@1|)))) (= (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T@@1 |start#0@@1| |length#0@@1| |f#0@@69|) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| |start#0@@1| (|Seq#Create| FloatingSeqMod._default.floatingSeq$T@@1 $Heap@@0 (INTERNAL_sub_boogie |length#0@@1| |start#0@@1|) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#91| TInt FloatingSeqMod._default.floatingSeq$T@@1 |f#0@@69| |start#0@@1|) (|lambda#92| TInt 0 (INTERNAL_sub_boogie |length#0@@1| |start#0@@1|)) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :skolemid |1810|
 :pattern ( (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T@@1 |start#0@@1| |length#0@@1| |f#0@@69|) ($IsGoodHeap $Heap@@0))
))))
(assert  (=> true (forall ((FloatingSeqMod._default.floatingSeq$T@@2 T@U) ($Heap@@1 T@U) (|start#0@@2| Int) (|length#0@@2| Int) (|f#0@@70| T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod._default.floatingSeq$T@@2) TyType) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@70|) HandleTypeType)) (or (|FloatingSeqMod.__default.floatingSeq#canCall| FloatingSeqMod._default.floatingSeq$T@@2 (LitInt |start#0@@2|) (LitInt |length#0@@2|) |f#0@@70|) (and (and (and (and ($IsGoodHeap $Heap@@1) (INTERNAL_le_boogie 0 |start#0@@2|)) (INTERNAL_le_boogie 0 |length#0@@2|)) ($Is |f#0@@70| (Tclass._System.___hTotalFunc1 TInt FloatingSeqMod._default.floatingSeq$T@@2))) (INTERNAL_le_boogie |start#0@@2| |length#0@@2|)))) (= (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T@@2 (LitInt |start#0@@2|) (LitInt |length#0@@2|) |f#0@@70|) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt |start#0@@2|) (|Seq#Create| FloatingSeqMod._default.floatingSeq$T@@2 $Heap@@1 (LitInt (INTERNAL_sub_boogie |length#0@@2| |start#0@@2|)) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#91| TInt FloatingSeqMod._default.floatingSeq$T@@2 |f#0@@70| |start#0@@2|) (|lambda#92| TInt 0 (INTERNAL_sub_boogie |length#0@@2| |start#0@@2|)) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1811|
 :pattern ( (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T@@2 (LitInt |start#0@@2|) (LitInt |length#0@@2|) |f#0@@70|) ($IsGoodHeap $Heap@@1))
))))
(assert  (=> true (forall ((FloatingSeqMod._default.floatingSeq$T@@3 T@U) ($Heap@@2 T@U) (|start#0@@3| Int) (|length#0@@3| Int) (|f#0@@71| T@U) ) (!  (=> (and (and (and (= (type FloatingSeqMod._default.floatingSeq$T@@3) TyType) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@71|) HandleTypeType)) (or (|FloatingSeqMod.__default.floatingSeq#canCall| FloatingSeqMod._default.floatingSeq$T@@3 (LitInt |start#0@@3|) (LitInt |length#0@@3|) (Lit |f#0@@71|)) (and (and (and (and ($IsGoodHeap $Heap@@2) (INTERNAL_le_boogie 0 |start#0@@3|)) (INTERNAL_le_boogie 0 |length#0@@3|)) ($Is |f#0@@71| (Tclass._System.___hTotalFunc1 TInt FloatingSeqMod._default.floatingSeq$T@@3))) (INTERNAL_le_boogie |start#0@@3| |length#0@@3|)))) (= (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T@@3 (LitInt |start#0@@3|) (LitInt |length#0@@3|) (Lit |f#0@@71|)) (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt |start#0@@3|) (|Seq#Create| FloatingSeqMod._default.floatingSeq$T@@3 $Heap@@2 (LitInt (INTERNAL_sub_boogie |length#0@@3| |start#0@@3|)) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#91| TInt FloatingSeqMod._default.floatingSeq$T@@3 (Lit |f#0@@71|) |start#0@@3|) (|lambda#92| TInt 0 (INTERNAL_sub_boogie |length#0@@3| |start#0@@3|)) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1812|
 :pattern ( (FloatingSeqMod.__default.floatingSeq FloatingSeqMod._default.floatingSeq$T@@3 (LitInt |start#0@@3|) (LitInt |length#0@@3|) (Lit |f#0@@71|)) ($IsGoodHeap $Heap@@2))
))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@22 T@U) ) (!  (=> (= (type d@@22) DatatypeTypeType) (= (Options.Option.None_q d@@22) (= (DatatypeCtorId d@@22) |##Options.Option.None|)))
 :qid |unknown.0:0|
 :skolemid |1813|
 :pattern ( (Options.Option.None_q d@@22))
)))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (Options.Option.None_q d@@23)) (= d@@23 |#Options.Option.None|))
 :qid |unknown.0:0|
 :skolemid |1814|
 :pattern ( (Options.Option.None_q d@@23))
)))
(assert (forall ((arg0@@413 T@U) ) (! (= (type (Tclass.Options.Option arg0@@413)) TyType)
 :qid |funType:Tclass.Options.Option|
 :pattern ( (Tclass.Options.Option arg0@@413))
)))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option)))
 :qid |unknown.0:0|
 :skolemid |1815|
 :pattern ( (Tclass.Options.Option Options.Option$V))
)))
(assert (forall ((arg0@@414 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@414)) TyType)
 :qid |funType:Tclass.Options.Option_0|
 :pattern ( (Tclass.Options.Option_0 arg0@@414))
)))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0))
 :qid |unknown.0:0|
 :skolemid |1816|
 :pattern ( (Tclass.Options.Option Options.Option$V@@0))
)))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@124 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@124) BoxType)) ($IsBox bx@@124 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@124)) bx@@124) ($Is ($Unbox DatatypeTypeType bx@@124) (Tclass.Options.Option Options.Option$V@@1))))
 :qid |unknown.0:0|
 :skolemid |1817|
 :pattern ( ($IsBox bx@@124 (Tclass.Options.Option Options.Option$V@@1)))
)))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2)))
 :qid |unknown.0:0|
 :skolemid |1818|
 :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2)))
)))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@55 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@55)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@55))
 :qid |unknown.0:0|
 :skolemid |1819|
 :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@55))
)))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@415 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@415)) DatatypeTypeType)
 :qid |funType:#Options.Option.Some|
 :pattern ( (|#Options.Option.Some| arg0@@415))
)))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@1|)) |##Options.Option.Some|))
 :qid |Optionsdfy.5:36|
 :skolemid |1820|
 :pattern ( (|#Options.Option.Some| |a#5#0#0@@1|))
)))
(assert (forall ((d@@24 T@U) ) (!  (=> (= (type d@@24) DatatypeTypeType) (= (Options.Option.Some_q d@@24) (= (DatatypeCtorId d@@24) |##Options.Option.Some|)))
 :qid |unknown.0:0|
 :skolemid |1821|
 :pattern ( (Options.Option.Some_q d@@24))
)))
(assert (forall ((d@@25 T@U) ) (!  (=> (and (= (type d@@25) DatatypeTypeType) (Options.Option.Some_q d@@25)) (exists ((|a#6#0#0@@1| T@U) ) (!  (and (= (type |a#6#0#0@@1|) BoxType) (= d@@25 (|#Options.Option.Some| |a#6#0#0@@1|)))
 :qid |Optionsdfy.5:36|
 :skolemid |1822|
 :no-pattern (type |a#6#0#0@@1|)
 :no-pattern (U_2_int |a#6#0#0@@1|)
 :no-pattern (U_2_bool |a#6#0#0@@1|)
)))
 :qid |unknown.0:0|
 :skolemid |1823|
 :pattern ( (Options.Option.Some_q d@@25))
)))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@1| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@1|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@1| Options.Option$V@@4)))
 :qid |unknown.0:0|
 :skolemid |1824|
 :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4)))
)))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@1| T@U) ($h@@56 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@1|) BoxType)) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@56)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@56) ($IsAllocBox |a#8#0#0@@1| Options.Option$V@@5 $h@@56)))
 :qid |unknown.0:0|
 :skolemid |1825|
 :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@56))
)))
(assert (forall ((d@@26 T@U) (Options.Option$V@@6 T@U) ($h@@57 T@U) ) (!  (=> (and (and (and (= (type d@@26) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@57) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@57) (and (Options.Option.Some_q d@@26) ($IsAlloc d@@26 (Tclass.Options.Option Options.Option$V@@6) $h@@57)))) ($IsAllocBox (Options.Option.value d@@26) Options.Option$V@@6 $h@@57))
 :qid |unknown.0:0|
 :skolemid |1826|
 :pattern ( ($IsAllocBox (Options.Option.value d@@26) Options.Option$V@@6 $h@@57))
)))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|))))
 :qid |Optionsdfy.5:36|
 :skolemid |1827|
 :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|)))
)))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|))
 :qid |Optionsdfy.5:36|
 :skolemid |1828|
 :pattern ( (|#Options.Option.Some| |a#10#0#0|))
)))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|))))
 :qid |Optionsdfy.5:36|
 :skolemid |1829|
 :pattern ( (|#Options.Option.Some| |a#11#0#0|))
)))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (|$IsA#Options.Option| d@@27)) (or (Options.Option.None_q d@@27) (Options.Option.Some_q d@@27)))
 :qid |unknown.0:0|
 :skolemid |1830|
 :pattern ( (|$IsA#Options.Option| d@@27))
)))
(assert (forall ((Options.Option$V@@7 T@U) (d@@28 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@28) DatatypeTypeType)) ($Is d@@28 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@28) (Options.Option.Some_q d@@28)))
 :qid |unknown.0:0|
 :skolemid |1831|
 :pattern ( (Options.Option.Some_q d@@28) ($Is d@@28 (Tclass.Options.Option Options.Option$V@@7)))
 :pattern ( (Options.Option.None_q d@@28) ($Is d@@28 (Tclass.Options.Option Options.Option$V@@7)))
)))
(assert (forall ((a@@120 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@120) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (Options.Option.None_q a@@120) (Options.Option.None_q b@@69))) (= (|Options.Option#Equal| a@@120 b@@69) true))
 :qid |unknown.0:0|
 :skolemid |1832|
 :pattern ( (|Options.Option#Equal| a@@120 b@@69) (Options.Option.None_q a@@120))
 :pattern ( (|Options.Option#Equal| a@@120 b@@69) (Options.Option.None_q b@@69))
)))
(assert (forall ((a@@121 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@121) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (Options.Option.Some_q a@@121) (Options.Option.Some_q b@@70))) (= (|Options.Option#Equal| a@@121 b@@70) (= (Options.Option.value a@@121) (Options.Option.value b@@70))))
 :qid |unknown.0:0|
 :skolemid |1833|
 :pattern ( (|Options.Option#Equal| a@@121 b@@70) (Options.Option.Some_q a@@121))
 :pattern ( (|Options.Option#Equal| a@@121 b@@70) (Options.Option.Some_q b@@70))
)))
(assert (forall ((a@@122 T@U) (b@@71 T@U) ) (!  (=> (and (= (type a@@122) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (= (|Options.Option#Equal| a@@122 b@@71) (= a@@122 b@@71)))
 :qid |unknown.0:0|
 :skolemid |1834|
 :pattern ( (|Options.Option#Equal| a@@122 b@@71))
)))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@125)) bx@@125) ($Is ($Unbox refType bx@@125) Tclass.Options.__default)))
 :qid |unknown.0:0|
 :skolemid |1835|
 :pattern ( ($IsBox bx@@125 Tclass.Options.__default))
)))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (= ($Is $o@@15 Tclass.Options.__default)  (or (= $o@@15 null) (= (dtype $o@@15) Tclass.Options.__default))))
 :qid |unknown.0:0|
 :skolemid |1836|
 :pattern ( ($Is $o@@15 Tclass.Options.__default))
)))
(assert (forall (($o@@16 T@U) ($h@@58 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@58) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@16 Tclass.Options.__default $h@@58)  (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@58 $o@@16) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1837|
 :pattern ( ($IsAlloc $o@@16 Tclass.Options.__default $h@@58))
)))
(assert (forall ((arg0@@416 T@U) (arg1@@162 T@U) (arg2@@90 T@U) (arg3@@48 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.MapOption arg0@@416 arg1@@162 arg2@@90 arg3@@48 arg4@@29)) DatatypeTypeType)
 :qid |funType:Options.__default.MapOption|
 :pattern ( (Options.__default.MapOption arg0@@416 arg1@@162 arg2@@90 arg3@@48 arg4@@29))
)))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@72| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@72|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@72|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@72| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@17 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f))))
 (=> (and (and (= (type $o@@17) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@17 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@72| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@17))))) (= (MapType1Select (MapType0Select $h0 $o@@17) $f) (MapType1Select (MapType0Select $h1 $o@@17) $f))))
 :qid |unknown.0:0|
 :skolemid |1838|
 :no-pattern (type $o@@17)
 :no-pattern (type $f)
 :no-pattern (U_2_int $o@@17)
 :no-pattern (U_2_bool $o@@17)
 :no-pattern (U_2_int $f)
 :no-pattern (U_2_bool $f)
))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@72|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@72|)))
 :qid |unknown.0:0|
 :skolemid |1839|
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@72|))
)))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@3 T@U) (|opt#0@@0| T@U) (|f#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@73|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@73|) (and (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@73| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |f#0@@73| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@73|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@73|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@73|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |f#0@@73| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@73|) (Tclass.Options.Option Options._default.MapOption$V1@@0))))
 :qid |unknown.0:0|
 :skolemid |1840|
 :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@3 |opt#0@@0| |f#0@@73|))
))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@4 T@U) (|opt#0@@1| T@U) (|f#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@74|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@74| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |opt#0@@1| |f#0@@74|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |f#0@@74| (Options.Option.value |opt#0@@1|)))))
 :qid |unknown.0:0|
 :skolemid |1841|
 :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@4 |opt#0@@1| |f#0@@74|) ($IsGoodHeap $Heap@@4))
)))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@5 T@U) (|opt#0@@2| T@U) (|f#0@@75| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@75|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |opt#0@@2| |f#0@@75|) (and (and (and ($IsGoodHeap $Heap@@5) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@75| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |f#0@@75| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |opt#0@@2| |f#0@@75|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0@@47| (Options.Option.value |opt#0@@2|)))
(|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |f#0@@75| |v#0@@47|))))))
 :qid |unknown.0:0|
 :skolemid |1842|
 :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@5 |opt#0@@2| |f#0@@75|) ($IsGoodHeap $Heap@@5))
))))
(assert (forall ((arg0@@417 T@U) (arg1@@163 T@U) (arg2@@91 T@U) (arg3@@49 T@U) (arg4@@30 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@417 arg1@@163 arg2@@91 arg3@@49 arg4@@30)) DatatypeTypeType)
 :qid |funType:Options.__default.FlatMapOption|
 :pattern ( (Options.__default.FlatMapOption arg0@@417 arg1@@163 arg2@@91 arg3@@49 arg4@@30))
)))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@76| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@76|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@76|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@76| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@18 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0))))
 (=> (and (and (= (type $o@@18) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@18 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@76| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@18))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@18) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@18) $f@@0))))
 :qid |unknown.0:0|
 :skolemid |1843|
 :no-pattern (type $o@@18)
 :no-pattern (type $f@@0)
 :no-pattern (U_2_int $o@@18)
 :no-pattern (U_2_bool $o@@18)
 :no-pattern (U_2_int $f@@0)
 :no-pattern (U_2_bool $f@@0)
))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@76|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@76|)))
 :qid |unknown.0:0|
 :skolemid |1844|
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@76|))
)))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@6 T@U) (|opt#0@@4| T@U) (|f#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@77|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@77|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@77| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@77| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@77| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@77|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@77| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@77|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@6 |f#0@@77| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@77|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0))))
 :qid |unknown.0:0|
 :skolemid |1845|
 :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@6 |opt#0@@4| |f#0@@77|))
))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@7 T@U) (|opt#0@@5| T@U) (|f#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@78|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@7) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@78| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@7 |opt#0@@5| |f#0@@78|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@7 |f#0@@78| (Options.Option.value |opt#0@@5|)))))
 :qid |unknown.0:0|
 :skolemid |1846|
 :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@7 |opt#0@@5| |f#0@@78|) ($IsGoodHeap $Heap@@7))
)))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@8 T@U) (|opt#0@@6| T@U) (|f#0@@79| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@79|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@8 |opt#0@@6| |f#0@@79|) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@79| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@8 |f#0@@79| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@8 |opt#0@@6| |f#0@@79|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@48| (Options.Option.value |opt#0@@6|)))
($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@8 |f#0@@79| |v#0@@48|))))))
 :qid |unknown.0:0|
 :skolemid |1847|
 :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@8 |opt#0@@6| |f#0@@79|) ($IsGoodHeap $Heap@@8))
))))
(assert (= (type Tclass.MapRemove_s.__default) TyType))
(assert (= (Tag Tclass.MapRemove_s.__default) Tagclass.MapRemove_s.__default))
(assert (= (TagFamily Tclass.MapRemove_s.__default) tytagFamily$_default))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.MapRemove_s.__default)) (and (= ($Box ($Unbox refType bx@@126)) bx@@126) ($Is ($Unbox refType bx@@126) Tclass.MapRemove_s.__default)))
 :qid |unknown.0:0|
 :skolemid |1848|
 :pattern ( ($IsBox bx@@126 Tclass.MapRemove_s.__default))
)))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.MapRemove_s.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.MapRemove_s.__default))))
 :qid |unknown.0:0|
 :skolemid |1849|
 :pattern ( ($Is $o@@19 Tclass.MapRemove_s.__default))
)))
(assert (forall (($o@@20 T@U) ($h@@59 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@59) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.MapRemove_s.__default $h@@59)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@59 $o@@20) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1850|
 :pattern ( ($IsAlloc $o@@20 Tclass.MapRemove_s.__default $h@@59))
)))
(assert (forall ((arg0@@418 T@U) (arg1@@164 T@U) (arg2@@92 T@U) (arg3@@50 T@U) (arg4@@31 T@U) ) (! (= (type (MapRemove_s.__default.MapRemove1 arg0@@418 arg1@@164 arg2@@92 arg3@@50 arg4@@31)) (MapType BoxType BoxType))
 :qid |funType:MapRemove_s.__default.MapRemove1|
 :pattern ( (MapRemove_s.__default.MapRemove1 arg0@@418 arg1@@164 arg2@@92 arg3@@50 arg4@@31))
)))
(assert (forall ((MapRemove_s._default.MapRemove1$K T@U) (MapRemove_s._default.MapRemove1$V T@U) ($ly@@5 T@U) (|m#0| T@U) (|k#0| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K) TyType) (= (type MapRemove_s._default.MapRemove1$V) TyType)) (= (type $ly@@5) LayerTypeType)) (= (type |m#0|) (MapType BoxType BoxType))) (= (type |k#0|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@5) |m#0| |k#0|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V $ly@@5 |m#0| |k#0|)))
 :qid |unknown.0:0|
 :skolemid |1851|
 :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@5) |m#0| |k#0|))
)))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@0 T@U) (MapRemove_s._default.MapRemove1$V@@0 T@U) ($ly@@6 T@U) (|m#0@@0| T@U) (|k#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@0) TyType) (= (type MapRemove_s._default.MapRemove1$V@@0) TyType)) (= (type $ly@@6) LayerTypeType)) (= (type |m#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $ly@@6 |m#0@@0| |k#0@@0|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $LZ |m#0@@0| |k#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |1852|
 :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 (AsFuelBottom $ly@@6) |m#0@@0| |k#0@@0|))
)))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@1 T@U) (MapRemove_s._default.MapRemove1$V@@1 T@U) ($ly@@7 T@U) (|m#0@@1| T@U) (|k#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@1) TyType) (= (type MapRemove_s._default.MapRemove1$V@@1) TyType)) (= (type $ly@@7) LayerTypeType)) (= (type |m#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 |m#0@@1| |k#0@@1|) (and ($Is |m#0@@1| (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)) ($IsBox |k#0@@1| MapRemove_s._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0| T@U) ) (!  (=> (and (and (= (type |j#0|) BoxType) ($IsBox |j#0| MapRemove_s._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#0|)) (not (= |j#0| |k#0@@1|)))) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#0|)))
 :qid |MapRemovesdfy.15:20|
 :skolemid |1853|
 :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#0|))
 :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#0|))
)) (forall ((|j#1| T@U) ) (!  (=> (and (= (type |j#1|) BoxType) ($IsBox |j#1| MapRemove_s._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#1|)) (not (= |j#1| |k#0@@1|)))))
 :qid |MapRemovesdfy.16:20|
 :skolemid |1854|
 :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#1|))
 :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#1|))
))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| MapRemove_s._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#2|))) (= (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@1|) |j#2|)))
 :qid |MapRemovesdfy.17:20|
 :skolemid |1855|
 :pattern ( (MapType0Select (|Map#Elements| |m#0@@1|) |j#2|))
 :pattern ( (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#2|))
 :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) |j#2|))
))) (INTERNAL_le_boogie (|Set#Card| (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@1|)) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) (INTERNAL_sub_boogie (|Map#Card| |m#0@@1|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@1|))) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|)) (|Map#Card| |m#0@@1|)))) ($Is (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|) (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1))))
 :qid |unknown.0:0|
 :skolemid |1856|
 :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@7 |m#0@@1| |k#0@@1|))
))))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@2 T@U) (MapRemove_s._default.MapRemove1$V@@2 T@U) ($ly@@8 T@U) (|m#0@@2| T@U) (|k#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@2) TyType) (= (type MapRemove_s._default.MapRemove1$V@@2) TyType)) (= (type $ly@@8) LayerTypeType)) (= (type |m#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (and ($Is |m#0@@2| (TMap MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2)) ($IsBox |k#0@@2| MapRemove_s._default.MapRemove1$K@@2))) (= (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@8 |m#0@@2| |k#0@@2|) true))
 :qid |unknown.0:0|
 :skolemid |1857|
 :pattern ( (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@8 |m#0@@2| |k#0@@2|))
)))
(assert  (and (forall ((arg0@@419 T@U) (arg1@@165 T@U) (arg2@@93 T@U) ) (! (= (type (|lambda#106| arg0@@419 arg1@@165 arg2@@93)) (MapType0Type BoxType boolType))
 :qid |funType:lambda#106|
 :pattern ( (|lambda#106| arg0@@419 arg1@@165 arg2@@93))
)) (forall ((arg0@@420 T@U) ) (! (= (type (|lambda#107| arg0@@420)) (MapType0Type BoxType BoxType))
 :qid |funType:lambda#107|
 :pattern ( (|lambda#107| arg0@@420))
))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@3 T@U) (MapRemove_s._default.MapRemove1$V@@3 T@U) ($ly@@9 T@U) (|m#0@@3| T@U) (|k#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@3) TyType) (= (type MapRemove_s._default.MapRemove1$V@@3) TyType)) (= (type $ly@@9) LayerTypeType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 |m#0@@3| |k#0@@3|) (and ($Is |m#0@@3| (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)) ($IsBox |k#0@@3| MapRemove_s._default.MapRemove1$K@@3)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@9) |m#0@@3| |k#0@@3|) (let ((|m'#0| (|Map#Glue| (|lambda#106| MapRemove_s._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@3|) |k#0@@3|) (|lambda#107| (|Map#Elements| |m#0@@3|)) (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3))))
|m'#0|)))
 :qid |unknown.0:0|
 :skolemid |1858|
 :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@9) |m#0@@3| |k#0@@3|))
))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@4 T@U) (MapRemove_s._default.MapRemove1$V@@4 T@U) ($ly@@10 T@U) (|m#0@@4| T@U) (|k#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@4) TyType) (= (type MapRemove_s._default.MapRemove1$V@@4) TyType)) (= (type $ly@@10) LayerTypeType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 (Lit |m#0@@4|) |k#0@@4|) (and ($Is |m#0@@4| (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)) ($IsBox |k#0@@4| MapRemove_s._default.MapRemove1$K@@4)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@10) (Lit |m#0@@4|) |k#0@@4|) (let ((|m'#1| (|Map#Glue| (|lambda#106| MapRemove_s._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@4|) |k#0@@4|) (|lambda#107| (|Map#Elements| (Lit |m#0@@4|))) (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4))))
|m'#1|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1859|
 :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@10) (Lit |m#0@@4|) |k#0@@4|))
))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@5 T@U) (MapRemove_s._default.MapRemove1$V@@5 T@U) ($ly@@11 T@U) (|m#0@@5| T@U) (|k#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@5) TyType) (= (type MapRemove_s._default.MapRemove1$V@@5) TyType)) (= (type $ly@@11) LayerTypeType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 (Lit |m#0@@5|) (Lit |k#0@@5|)) (and ($Is |m#0@@5| (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)) ($IsBox |k#0@@5| MapRemove_s._default.MapRemove1$K@@5)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@11) (Lit |m#0@@5|) (Lit |k#0@@5|)) (let ((|m'#2| (|Map#Glue| (|lambda#106| MapRemove_s._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@5|) |k#0@@5|) (|lambda#107| (|Map#Elements| (Lit |m#0@@5|))) (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5))))
|m'#2|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1860|
 :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@11) (Lit |m#0@@5|) (Lit |k#0@@5|)))
))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@127)) bx@@127) ($Is ($Unbox intType bx@@127) Tclass.NativeTypes.sbyte)))
 :qid |unknown.0:0|
 :skolemid |1861|
 :pattern ( ($IsBox bx@@127 Tclass.NativeTypes.sbyte))
)))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (= ($Is |i#0@@11| Tclass.NativeTypes.sbyte)  (and (INTERNAL_le_boogie (- 0 128) (U_2_int |i#0@@11|)) (INTERNAL_lt_boogie (U_2_int |i#0@@11|) 128))))
 :qid |unknown.0:0|
 :skolemid |1862|
 :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.sbyte))
)))
(assert (forall ((|i#0@@12| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.sbyte $h@@60))
 :qid |unknown.0:0|
 :skolemid |1863|
 :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.sbyte $h@@60))
)))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@128 T@U) ) (!  (=> (and (= (type bx@@128) BoxType) ($IsBox bx@@128 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@128)) bx@@128) ($Is ($Unbox intType bx@@128) Tclass.NativeTypes.byte)))
 :qid |unknown.0:0|
 :skolemid |1864|
 :pattern ( ($IsBox bx@@128 Tclass.NativeTypes.byte))
)))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (= ($Is |i#0@@13| Tclass.NativeTypes.byte)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@13|)) (INTERNAL_lt_boogie (U_2_int |i#0@@13|) 256))))
 :qid |unknown.0:0|
 :skolemid |1865|
 :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.byte))
)))
(assert (forall ((|i#0@@14| T@U) ($h@@61 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@61) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.byte $h@@61))
 :qid |unknown.0:0|
 :skolemid |1866|
 :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.byte $h@@61))
)))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@129 T@U) ) (!  (=> (and (= (type bx@@129) BoxType) ($IsBox bx@@129 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@129)) bx@@129) ($Is ($Unbox intType bx@@129) Tclass.NativeTypes.int16)))
 :qid |unknown.0:0|
 :skolemid |1867|
 :pattern ( ($IsBox bx@@129 Tclass.NativeTypes.int16))
)))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (= ($Is |i#0@@15| Tclass.NativeTypes.int16)  (and (INTERNAL_le_boogie (- 0 32768) (U_2_int |i#0@@15|)) (INTERNAL_lt_boogie (U_2_int |i#0@@15|) 32768))))
 :qid |unknown.0:0|
 :skolemid |1868|
 :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.int16))
)))
(assert (forall ((|i#0@@16| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.int16 $h@@62))
 :qid |unknown.0:0|
 :skolemid |1869|
 :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.int16 $h@@62))
)))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@130 T@U) ) (!  (=> (and (= (type bx@@130) BoxType) ($IsBox bx@@130 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@130)) bx@@130) ($Is ($Unbox intType bx@@130) Tclass.NativeTypes.uint16)))
 :qid |unknown.0:0|
 :skolemid |1870|
 :pattern ( ($IsBox bx@@130 Tclass.NativeTypes.uint16))
)))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (= ($Is |i#0@@17| Tclass.NativeTypes.uint16)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@17|)) (INTERNAL_lt_boogie (U_2_int |i#0@@17|) 65536))))
 :qid |unknown.0:0|
 :skolemid |1871|
 :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.uint16))
)))
(assert (forall ((|i#0@@18| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.uint16 $h@@63))
 :qid |unknown.0:0|
 :skolemid |1872|
 :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.uint16 $h@@63))
)))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@131)) bx@@131) ($Is ($Unbox intType bx@@131) Tclass.NativeTypes.int32)))
 :qid |unknown.0:0|
 :skolemid |1873|
 :pattern ( ($IsBox bx@@131 Tclass.NativeTypes.int32))
)))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (= ($Is |i#0@@19| Tclass.NativeTypes.int32)  (and (INTERNAL_le_boogie (- 0 2147483648) (U_2_int |i#0@@19|)) (INTERNAL_lt_boogie (U_2_int |i#0@@19|) 2147483648))))
 :qid |unknown.0:0|
 :skolemid |1874|
 :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.int32))
)))
(assert (forall ((|i#0@@20| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.int32 $h@@64))
 :qid |unknown.0:0|
 :skolemid |1875|
 :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.int32 $h@@64))
)))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@132 T@U) ) (!  (=> (and (= (type bx@@132) BoxType) ($IsBox bx@@132 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@132)) bx@@132) ($Is ($Unbox intType bx@@132) Tclass.NativeTypes.uint32)))
 :qid |unknown.0:0|
 :skolemid |1876|
 :pattern ( ($IsBox bx@@132 Tclass.NativeTypes.uint32))
)))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (= ($Is |i#0@@21| Tclass.NativeTypes.uint32)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@21|)) (INTERNAL_lt_boogie (U_2_int |i#0@@21|) 4294967296))))
 :qid |unknown.0:0|
 :skolemid |1877|
 :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.uint32))
)))
(assert (forall ((|i#0@@22| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.uint32 $h@@65))
 :qid |unknown.0:0|
 :skolemid |1878|
 :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.uint32 $h@@65))
)))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@133 T@U) ) (!  (=> (and (= (type bx@@133) BoxType) ($IsBox bx@@133 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@133)) bx@@133) ($Is ($Unbox intType bx@@133) Tclass.NativeTypes.int64)))
 :qid |unknown.0:0|
 :skolemid |1879|
 :pattern ( ($IsBox bx@@133 Tclass.NativeTypes.int64))
)))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (= ($Is |i#0@@23| Tclass.NativeTypes.int64)  (and (INTERNAL_le_boogie (- 0 9223372036854775808) (U_2_int |i#0@@23|)) (INTERNAL_lt_boogie (U_2_int |i#0@@23|) 9223372036854775808))))
 :qid |unknown.0:0|
 :skolemid |1880|
 :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.int64))
)))
(assert (forall ((|i#0@@24| T@U) ($h@@66 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@66) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.int64 $h@@66))
 :qid |unknown.0:0|
 :skolemid |1881|
 :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.int64 $h@@66))
)))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@134)) bx@@134) ($Is ($Unbox intType bx@@134) Tclass.NativeTypes.uint64)))
 :qid |unknown.0:0|
 :skolemid |1882|
 :pattern ( ($IsBox bx@@134 Tclass.NativeTypes.uint64))
)))
(assert (forall ((|i#0@@25| T@U) ) (!  (=> (= (type |i#0@@25|) intType) (= ($Is |i#0@@25| Tclass.NativeTypes.uint64)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@25|)) (INTERNAL_lt_boogie (U_2_int |i#0@@25|) 18446744073709551616))))
 :qid |unknown.0:0|
 :skolemid |1883|
 :pattern ( ($Is |i#0@@25| Tclass.NativeTypes.uint64))
)))
(assert (forall ((|i#0@@26| T@U) ($h@@67 T@U) ) (!  (=> (and (= (type |i#0@@26|) intType) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@26| Tclass.NativeTypes.uint64 $h@@67))
 :qid |unknown.0:0|
 :skolemid |1884|
 :pattern ( ($IsAlloc |i#0@@26| Tclass.NativeTypes.uint64 $h@@67))
)))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@135)) bx@@135) ($Is ($Unbox intType bx@@135) Tclass.NativeTypes.nat8)))
 :qid |unknown.0:0|
 :skolemid |1885|
 :pattern ( ($IsBox bx@@135 Tclass.NativeTypes.nat8))
)))
(assert (forall ((|i#0@@27| T@U) ) (!  (=> (= (type |i#0@@27|) intType) (= ($Is |i#0@@27| Tclass.NativeTypes.nat8)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@27|)) (INTERNAL_lt_boogie (U_2_int |i#0@@27|) 128))))
 :qid |unknown.0:0|
 :skolemid |1886|
 :pattern ( ($Is |i#0@@27| Tclass.NativeTypes.nat8))
)))
(assert (forall ((|i#0@@28| T@U) ($h@@68 T@U) ) (!  (=> (and (= (type |i#0@@28|) intType) (= (type $h@@68) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@28| Tclass.NativeTypes.nat8 $h@@68))
 :qid |unknown.0:0|
 :skolemid |1887|
 :pattern ( ($IsAlloc |i#0@@28| Tclass.NativeTypes.nat8 $h@@68))
)))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@136)) bx@@136) ($Is ($Unbox intType bx@@136) Tclass.NativeTypes.nat16)))
 :qid |unknown.0:0|
 :skolemid |1888|
 :pattern ( ($IsBox bx@@136 Tclass.NativeTypes.nat16))
)))
(assert (forall ((|i#0@@29| T@U) ) (!  (=> (= (type |i#0@@29|) intType) (= ($Is |i#0@@29| Tclass.NativeTypes.nat16)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@29|)) (INTERNAL_lt_boogie (U_2_int |i#0@@29|) 32768))))
 :qid |unknown.0:0|
 :skolemid |1889|
 :pattern ( ($Is |i#0@@29| Tclass.NativeTypes.nat16))
)))
(assert (forall ((|i#0@@30| T@U) ($h@@69 T@U) ) (!  (=> (and (= (type |i#0@@30|) intType) (= (type $h@@69) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@30| Tclass.NativeTypes.nat16 $h@@69))
 :qid |unknown.0:0|
 :skolemid |1890|
 :pattern ( ($IsAlloc |i#0@@30| Tclass.NativeTypes.nat16 $h@@69))
)))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@137)) bx@@137) ($Is ($Unbox intType bx@@137) Tclass.NativeTypes.nat32)))
 :qid |unknown.0:0|
 :skolemid |1891|
 :pattern ( ($IsBox bx@@137 Tclass.NativeTypes.nat32))
)))
(assert (forall ((|i#0@@31| T@U) ) (!  (=> (= (type |i#0@@31|) intType) (= ($Is |i#0@@31| Tclass.NativeTypes.nat32)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@31|)) (INTERNAL_lt_boogie (U_2_int |i#0@@31|) 2147483648))))
 :qid |unknown.0:0|
 :skolemid |1892|
 :pattern ( ($Is |i#0@@31| Tclass.NativeTypes.nat32))
)))
(assert (forall ((|i#0@@32| T@U) ($h@@70 T@U) ) (!  (=> (and (= (type |i#0@@32|) intType) (= (type $h@@70) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@32| Tclass.NativeTypes.nat32 $h@@70))
 :qid |unknown.0:0|
 :skolemid |1893|
 :pattern ( ($IsAlloc |i#0@@32| Tclass.NativeTypes.nat32 $h@@70))
)))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@138)) bx@@138) ($Is ($Unbox intType bx@@138) Tclass.NativeTypes.nat64)))
 :qid |unknown.0:0|
 :skolemid |1894|
 :pattern ( ($IsBox bx@@138 Tclass.NativeTypes.nat64))
)))
(assert (forall ((|i#0@@33| T@U) ) (!  (=> (= (type |i#0@@33|) intType) (= ($Is |i#0@@33| Tclass.NativeTypes.nat64)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@33|)) (INTERNAL_lt_boogie (U_2_int |i#0@@33|) 9223372036854775808))))
 :qid |unknown.0:0|
 :skolemid |1895|
 :pattern ( ($Is |i#0@@33| Tclass.NativeTypes.nat64))
)))
(assert (forall ((|i#0@@34| T@U) ($h@@71 T@U) ) (!  (=> (and (= (type |i#0@@34|) intType) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@34| Tclass.NativeTypes.nat64 $h@@71))
 :qid |unknown.0:0|
 :skolemid |1896|
 :pattern ( ($IsAlloc |i#0@@34| Tclass.NativeTypes.nat64 $h@@71))
)))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@139)) bx@@139) ($Is ($Unbox intType bx@@139) Tclass.NativeTypes.uint128)))
 :qid |unknown.0:0|
 :skolemid |1897|
 :pattern ( ($IsBox bx@@139 Tclass.NativeTypes.uint128))
)))
(assert (forall ((|i#0@@35| T@U) ) (!  (=> (= (type |i#0@@35|) intType) (= ($Is |i#0@@35| Tclass.NativeTypes.uint128)  (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@35|)) (INTERNAL_lt_boogie (U_2_int |i#0@@35|) 340282366920938463463374607431768211456))))
 :qid |unknown.0:0|
 :skolemid |1898|
 :pattern ( ($Is |i#0@@35| Tclass.NativeTypes.uint128))
)))
(assert (forall ((|i#0@@36| T@U) ($h@@72 T@U) ) (!  (=> (and (= (type |i#0@@36|) intType) (= (type $h@@72) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@36| Tclass.NativeTypes.uint128 $h@@72))
 :qid |unknown.0:0|
 :skolemid |1899|
 :pattern ( ($IsAlloc |i#0@@36| Tclass.NativeTypes.uint128 $h@@72))
)))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@140)) bx@@140) ($Is ($Unbox refType bx@@140) Tclass.NativeTypes.__default)))
 :qid |unknown.0:0|
 :skolemid |1900|
 :pattern ( ($IsBox bx@@140 Tclass.NativeTypes.__default))
)))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.NativeTypes.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.NativeTypes.__default))))
 :qid |unknown.0:0|
 :skolemid |1901|
 :pattern ( ($Is $o@@21 Tclass.NativeTypes.__default))
)))
(assert (forall (($o@@22 T@U) ($h@@73 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.NativeTypes.__default $h@@73)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@22) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1902|
 :pattern ( ($IsAlloc $o@@22 Tclass.NativeTypes.__default $h@@73))
)))
(assert  (=> true (=> true (and (INTERNAL_le_boogie 0 NativeTypes.__default.Uint64Size) (INTERNAL_lt_boogie NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (INTERNAL_le_boogie 0 NativeTypes.__default.Uint32Size) (INTERNAL_lt_boogie NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (INTERNAL_le_boogie 0 NativeTypes.__default.Uint16Size) (INTERNAL_lt_boogie NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (and (INTERNAL_le_boogie 0 NativeTypes.__default.Uint8UpperBound) (INTERNAL_lt_boogie NativeTypes.__default.Uint8UpperBound 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint8UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint8UpperBound (LitInt 256)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint8UpperBound (LitInt 256)))))
(assert (forall ((|s#0| T@U) ) (!  (=> (= (type |s#0|) (SeqType BoxType)) (= ($Is |s#0| Tclass.ValueType.Value)  (and ($Is |s#0| (TSeq Tclass.NativeTypes.byte)) (INTERNAL_le_boogie (|Seq#Length| |s#0|) 1024))))
 :qid |unknown.0:0|
 :skolemid |1903|
 :pattern ( ($Is |s#0| Tclass.ValueType.Value))
)))
(assert (forall ((|s#0@@0| T@U) ($h@@74 T@U) ) (!  (=> (and (= (type |s#0@@0|) (SeqType BoxType)) (= (type $h@@74) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@0| Tclass.ValueType.Value $h@@74) ($IsAlloc |s#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@74)))
 :qid |unknown.0:0|
 :skolemid |1904|
 :pattern ( ($IsAlloc |s#0@@0| Tclass.ValueType.Value $h@@74))
)))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (= (TagFamily Tclass.ValueType.__default) tytagFamily$_default))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (= ($Is $o@@23 Tclass.ValueType.__default)  (or (= $o@@23 null) (= (dtype $o@@23) Tclass.ValueType.__default))))
 :qid |unknown.0:0|
 :skolemid |1905|
 :pattern ( ($Is $o@@23 Tclass.ValueType.__default))
)))
(assert (forall (($o@@24 T@U) ($h@@75 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@24 Tclass.ValueType.__default $h@@75)  (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@75 $o@@24) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1906|
 :pattern ( ($IsAlloc $o@@24 Tclass.ValueType.__default $h@@75))
)))
(assert  (=> true (=> true (and (INTERNAL_le_boogie 0 ValueType.__default.MaxLen) (INTERNAL_lt_boogie ValueType.__default.MaxLen 18446744073709551616)))))
(assert (= |ValueType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0@@49| T@U) ) (!  (=> (and (= (type |v#0@@49|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@49|) ($Is |v#0@@49| Tclass.ValueType.Value))) (INTERNAL_le_boogie 0 (ValueType.__default.Len |v#0@@49|)))
 :qid |KeyTypesdfy.20:15|
 :skolemid |1907|
 :pattern ( (ValueType.__default.Len |v#0@@49|))
))))
(assert (forall ((|v#0@@50| T@U) ) (!  (=> (and (= (type |v#0@@50|) (SeqType BoxType)) ($Is |v#0@@50| Tclass.ValueType.Value)) (= (|ValueType.__default.Len#requires| |v#0@@50|) true))
 :qid |KeyTypesdfy.20:15|
 :skolemid |1908|
 :pattern ( (|ValueType.__default.Len#requires| |v#0@@50|))
)))
(assert  (=> true (forall ((|v#0@@51| T@U) ) (!  (=> (and (= (type |v#0@@51|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@51|) ($Is |v#0@@51| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@51|) (|Seq#Length| |v#0@@51|)))
 :qid |KeyTypesdfy.20:15|
 :skolemid |1909|
 :pattern ( (ValueType.__default.Len |v#0@@51|))
))))
(assert  (=> true (forall ((|v#0@@52| T@U) ) (!  (=> (and (= (type |v#0@@52|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@52|)) ($Is |v#0@@52| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@52|)) (|Seq#Length| (Lit |v#0@@52|))))
 :qid |KeyTypesdfy.20:15|
 :weight 3
 :skolemid |1910|
 :pattern ( (ValueType.__default.Len (Lit |v#0@@52|)))
))))
(assert  (=> true (forall ((|s#0@@1| T@U) ) (!  (=> (and (= (type |s#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@1|) ($Is |s#0@@1| (TSeq Tclass.NativeTypes.byte)))) true)
 :qid |KeyTypesdfy.22:36|
 :skolemid |1911|
 :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@1|))
))))
(assert (forall ((|s#0@@2| T@U) ) (!  (=> (and (= (type |s#0@@2|) (SeqType BoxType)) ($Is |s#0@@2| (TSeq Tclass.NativeTypes.byte))) (= (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@2|) true))
 :qid |KeyTypesdfy.22:36|
 :skolemid |1912|
 :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@2|))
)))
(assert  (=> true (forall ((|s#0@@3| T@U) ) (!  (=> (and (= (type |s#0@@3|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@3|) ($Is |s#0@@3| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring |s#0@@3|) (INTERNAL_le_boogie (|Seq#Length| |s#0@@3|) ValueType.__default.MaxLen))))
 :qid |KeyTypesdfy.22:36|
 :skolemid |1913|
 :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@3|))
))))
(assert  (=> true (forall ((|s#0@@4| T@U) ) (!  (=> (and (= (type |s#0@@4|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@4|)) ($Is |s#0@@4| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring (Lit |s#0@@4|)) (INTERNAL_le_boogie (|Seq#Length| (Lit |s#0@@4|)) ValueType.__default.MaxLen))))
 :qid |KeyTypesdfy.22:36|
 :weight 3
 :skolemid |1914|
 :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@4|)))
))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true)
 :qid |KeyTypesdfy.27:37|
 :skolemid |1915|
 :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|))
))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true))
 :qid |KeyTypesdfy.27:37|
 :skolemid |1916|
 :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|))
)))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@37| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@37|) (INTERNAL_lt_boogie |i#0@@37| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@37|))))
 :qid |KeyTypesdfy.29:12|
 :skolemid |1918|
 :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@37|)))
)) (= (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@38| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@38|) (INTERNAL_lt_boogie |i#0@@38| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@38|))))
 :qid |KeyTypesdfy.29:12|
 :skolemid |1917|
 :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@38|)))
)))))
 :qid |KeyTypesdfy.27:37|
 :skolemid |1919|
 :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|))
))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1|) (INTERNAL_lt_boogie |i#1| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1|))))
 :qid |KeyTypesdfy.29:12|
 :skolemid |1921|
 :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1|)))
)) (= (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@0| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@0|) (INTERNAL_lt_boogie |i#1@@0| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@0|))))
 :qid |KeyTypesdfy.29:12|
 :skolemid |1920|
 :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@0|)))
)))))
 :qid |KeyTypesdfy.27:37|
 :weight 3
 :skolemid |1922|
 :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)))
))))
(assert (= (type Tclass.LinearMaybe.__default) TyType))
(assert (= (Tag Tclass.LinearMaybe.__default) Tagclass.LinearMaybe.__default))
(assert (= (TagFamily Tclass.LinearMaybe.__default) tytagFamily$_default))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.LinearMaybe.__default)) (and (= ($Box ($Unbox refType bx@@141)) bx@@141) ($Is ($Unbox refType bx@@141) Tclass.LinearMaybe.__default)))
 :qid |unknown.0:0|
 :skolemid |1923|
 :pattern ( ($IsBox bx@@141 Tclass.LinearMaybe.__default))
)))
(assert (forall (($o@@25 T@U) ) (!  (=> (= (type $o@@25) refType) (= ($Is $o@@25 Tclass.LinearMaybe.__default)  (or (= $o@@25 null) (= (dtype $o@@25) Tclass.LinearMaybe.__default))))
 :qid |unknown.0:0|
 :skolemid |1924|
 :pattern ( ($Is $o@@25 Tclass.LinearMaybe.__default))
)))
(assert (forall (($o@@26 T@U) ($h@@76 T@U) ) (!  (=> (and (= (type $o@@26) refType) (= (type $h@@76) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@26 Tclass.LinearMaybe.__default $h@@76)  (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@76 $o@@26) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1925|
 :pattern ( ($IsAlloc $o@@26 Tclass.LinearMaybe.__default $h@@76))
)))
(assert (forall ((arg0@@421 T@U) ) (! (= (type (|#$maybe| arg0@@421)) TyType)
 :qid |funType:#$maybe|
 :pattern ( (|#$maybe| arg0@@421))
)))
(assert  (=> true (forall ((LinearMaybe._default.has$A T@U) (|m#0@@6| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A) TyType) (= (type |m#0@@6|) BoxType)) (or (|LinearMaybe.__default.has#canCall| LinearMaybe._default.has$A |m#0@@6|) ($IsBox |m#0@@6| (|#$maybe| LinearMaybe._default.has$A)))) true)
 :qid |unknown.0:0|
 :skolemid |1926|
 :pattern ( (LinearMaybe.__default.has LinearMaybe._default.has$A |m#0@@6|))
))))
(assert (forall ((LinearMaybe._default.has$A@@0 T@U) (|m#0@@7| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A@@0) TyType) (= (type |m#0@@7|) BoxType)) ($IsBox |m#0@@7| (|#$maybe| LinearMaybe._default.has$A@@0))) (= (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@7|) true))
 :qid |unknown.0:0|
 :skolemid |1927|
 :pattern ( (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@7|))
)))
(assert (forall ((arg0@@422 T@U) (arg1@@166 T@U) ) (! (= (type (LinearMaybe.__default.read arg0@@422 arg1@@166)) BoxType)
 :qid |funType:LinearMaybe.__default.read|
 :pattern ( (LinearMaybe.__default.read arg0@@422 arg1@@166))
)))
(assert  (=> true (forall ((LinearMaybe._default.read$A T@U) (|m#0@@8| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A) TyType) (= (type |m#0@@8|) BoxType)) (or (|LinearMaybe.__default.read#canCall| LinearMaybe._default.read$A |m#0@@8|) ($IsBox |m#0@@8| (|#$maybe| LinearMaybe._default.read$A)))) ($IsBox (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@8|) LinearMaybe._default.read$A))
 :qid |unknown.0:0|
 :skolemid |1928|
 :pattern ( (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@8|))
))))
(assert (forall ((LinearMaybe._default.read$A@@0 T@U) (|m#0@@9| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A@@0) TyType) (= (type |m#0@@9|) BoxType)) ($IsBox |m#0@@9| (|#$maybe| LinearMaybe._default.read$A@@0))) (= (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@9|) true))
 :qid |unknown.0:0|
 :skolemid |1929|
 :pattern ( (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@9|))
)))
(assert (forall ((arg0@@423 T@U) (arg1@@167 T@U) ) (! (= (type (LinearMaybe.__default.peek arg0@@423 arg1@@167)) BoxType)
 :qid |funType:LinearMaybe.__default.peek|
 :pattern ( (LinearMaybe.__default.peek arg0@@423 arg1@@167))
)))
(assert  (=> true (forall ((LinearMaybe._default.peek$A T@U) (|m#0@@10| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A) TyType) (= (type |m#0@@10|) BoxType)) (or (|LinearMaybe.__default.peek#canCall| LinearMaybe._default.peek$A |m#0@@10|) (and ($IsBox |m#0@@10| (|#$maybe| LinearMaybe._default.peek$A)) (LinearMaybe.__default.has LinearMaybe._default.peek$A |m#0@@10|)))) (and (= (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@10|) (LinearMaybe.__default.read LinearMaybe._default.peek$A |m#0@@10|)) ($IsBox (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@10|) LinearMaybe._default.peek$A)))
 :qid |unknown.0:0|
 :skolemid |1930|
 :pattern ( (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@10|))
))))
(assert (forall ((LinearMaybe._default.peek$A@@0 T@U) (|m#0@@11| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A@@0) TyType) (= (type |m#0@@11|) BoxType)) ($IsBox |m#0@@11| (|#$maybe| LinearMaybe._default.peek$A@@0))) (= (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@11|) (LinearMaybe.__default.has LinearMaybe._default.peek$A@@0 |m#0@@11|)))
 :qid |unknown.0:0|
 :skolemid |1931|
 :pattern ( (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@11|))
)))
(assert (forall ((arg0@@424 T@U) (arg1@@168 T@U) ) (! (= (type (LinearMaybe.__default.unwrap arg0@@424 arg1@@168)) BoxType)
 :qid |funType:LinearMaybe.__default.unwrap|
 :pattern ( (LinearMaybe.__default.unwrap arg0@@424 arg1@@168))
)))
(assert  (=> true (forall ((LinearMaybe._default.unwrap$A T@U) (|m#0@@12| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A) TyType) (= (type |m#0@@12|) BoxType)) (or (|LinearMaybe.__default.unwrap#canCall| LinearMaybe._default.unwrap$A |m#0@@12|) (and ($IsBox |m#0@@12| (|#$maybe| LinearMaybe._default.unwrap$A)) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A |m#0@@12|)))) (and (= (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@12|) (LinearMaybe.__default.read LinearMaybe._default.unwrap$A |m#0@@12|)) ($IsBox (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@12|) LinearMaybe._default.unwrap$A)))
 :qid |unknown.0:0|
 :skolemid |1932|
 :pattern ( (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@12|))
))))
(assert (forall ((LinearMaybe._default.unwrap$A@@0 T@U) (|m#0@@13| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A@@0) TyType) (= (type |m#0@@13|) BoxType)) ($IsBox |m#0@@13| (|#$maybe| LinearMaybe._default.unwrap$A@@0))) (= (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@13|) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A@@0 |m#0@@13|)))
 :qid |unknown.0:0|
 :skolemid |1933|
 :pattern ( (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@13|))
)))
(assert (forall ((arg0@@425 T@U) (arg1@@169 T@U) (arg2@@94 T@U) ) (! (= (type (LinearMaybe.__default.give arg0@@425 arg1@@169 arg2@@94)) BoxType)
 :qid |funType:LinearMaybe.__default.give|
 :pattern ( (LinearMaybe.__default.give arg0@@425 arg1@@169 arg2@@94))
)))
(assert (forall ((LinearMaybe._default.give$A T@U) ($ly@@12 T@U) (|a#0@@1| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A) TyType) (= (type $ly@@12) LayerTypeType)) (= (type |a#0@@1|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@12) |a#0@@1|) (LinearMaybe.__default.give LinearMaybe._default.give$A $ly@@12 |a#0@@1|)))
 :qid |unknown.0:0|
 :skolemid |1934|
 :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@12) |a#0@@1|))
)))
(assert (forall ((LinearMaybe._default.give$A@@0 T@U) ($ly@@13 T@U) (|a#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A@@0) TyType) (= (type $ly@@13) LayerTypeType)) (= (type |a#0@@2|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $ly@@13 |a#0@@2|) (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $LZ |a#0@@2|)))
 :qid |unknown.0:0|
 :skolemid |1935|
 :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 (AsFuelBottom $ly@@13) |a#0@@2|))
)))
(assert  (=> true (forall ((LinearMaybe._default.give$A@@1 T@U) ($ly@@14 T@U) (|a#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@1) TyType) (= (type $ly@@14) LayerTypeType)) (= (type |a#0@@3|) BoxType)) (or (|LinearMaybe.__default.give#canCall| LinearMaybe._default.give$A@@1 |a#0@@3|) ($IsBox |a#0@@3| LinearMaybe._default.give$A@@1))) (and (and (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@14 |a#0@@3|)) (= (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@14 |a#0@@3|)) |a#0@@3|)) (forall ((|x#0@@1| T@U) ) (!  (=> (= (type |x#0@@1|) BoxType) (=> (and ($IsBox |x#0@@1| (|#$maybe| LinearMaybe._default.give$A@@1)) (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 |x#0@@1|) (= |a#0@@3| (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|)))) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@14 |a#0@@3|) |x#0@@1|)))
 :qid |LinearMaybesdfy.25:20|
 :skolemid |1936|
 :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@14 (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|)))
))) ($IsBox (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@14 |a#0@@3|) (|#$maybe| LinearMaybe._default.give$A@@1))))
 :qid |unknown.0:0|
 :skolemid |1937|
 :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@14 |a#0@@3|))
))))
(assert (forall ((LinearMaybe._default.give$A@@2 T@U) ($ly@@15 T@U) (|a#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@2) TyType) (= (type $ly@@15) LayerTypeType)) (= (type |a#0@@4|) BoxType)) ($IsBox |a#0@@4| LinearMaybe._default.give$A@@2)) (= (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@15 |a#0@@4|) true))
 :qid |unknown.0:0|
 :skolemid |1938|
 :pattern ( (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@15 |a#0@@4|))
)))
(assert (forall ((arg0@@426 T@U) ) (! (= (type (LinearMaybe.__default.empty arg0@@426)) BoxType)
 :qid |funType:LinearMaybe.__default.empty|
 :pattern ( (LinearMaybe.__default.empty arg0@@426))
)))
(assert  (=> true (forall ((LinearMaybe._default.empty$A T@U) ) (!  (=> (and (= (type LinearMaybe._default.empty$A) TyType) true) (and (not (LinearMaybe.__default.has LinearMaybe._default.empty$A (LinearMaybe.__default.empty LinearMaybe._default.empty$A))) ($IsBox (LinearMaybe.__default.empty LinearMaybe._default.empty$A) (|#$maybe| LinearMaybe._default.empty$A))))
 :qid |unknown.0:0|
 :skolemid |1939|
 :pattern ( (LinearMaybe.__default.empty LinearMaybe._default.empty$A))
))))
(assert (forall ((LinearMaybe._default.empty$A@@0 T@U) ) (!  (=> (= (type LinearMaybe._default.empty$A@@0) TyType) (= (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0) true))
 :qid |unknown.0:0|
 :skolemid |1940|
 :pattern ( (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0))
)))
(assert (forall ((arg0@@427 T@U) (arg1@@170 T@U) ) (! (= (type (LinearMaybe.__default.discard arg0@@427 arg1@@170)) DatatypeTypeType)
 :qid |funType:LinearMaybe.__default.discard|
 :pattern ( (LinearMaybe.__default.discard arg0@@427 arg1@@170))
)))
(assert  (=> true (forall ((LinearMaybe._default.discard$A T@U) (|m#0@@14| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A) TyType) (= (type |m#0@@14|) BoxType)) (or (|LinearMaybe.__default.discard#canCall| LinearMaybe._default.discard$A |m#0@@14|) (and ($IsBox |m#0@@14| (|#$maybe| LinearMaybe._default.discard$A)) (not (LinearMaybe.__default.has LinearMaybe._default.discard$A |m#0@@14|))))) ($Is (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@14|) Tclass._System.Tuple0))
 :qid |unknown.0:0|
 :skolemid |1941|
 :pattern ( (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@14|))
))))
(assert (forall ((LinearMaybe._default.discard$A@@0 T@U) (|m#0@@15| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A@@0) TyType) (= (type |m#0@@15|) BoxType)) ($IsBox |m#0@@15| (|#$maybe| LinearMaybe._default.discard$A@@0))) (= (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@15|)  (not (LinearMaybe.__default.has LinearMaybe._default.discard$A@@0 |m#0@@15|))))
 :qid |unknown.0:0|
 :skolemid |1942|
 :pattern ( (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@15|))
)))
(assert (forall ((arg0@@428 T@U) (arg1@@171 Bool) (arg2@@95 T@U) ) (! (= (type (LinearMaybe.__default.imagine arg0@@428 arg1@@171 arg2@@95)) BoxType)
 :qid |funType:LinearMaybe.__default.imagine|
 :pattern ( (LinearMaybe.__default.imagine arg0@@428 arg1@@171 arg2@@95))
)))
(assert  (=> true (forall ((LinearMaybe._default.imagine$A T@U) (|h#0| Bool) (|a#0@@5| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A) TyType) (= (type |a#0@@5|) BoxType)) (or (|LinearMaybe.__default.imagine#canCall| LinearMaybe._default.imagine$A |h#0| |a#0@@5|) ($IsBox |a#0@@5| LinearMaybe._default.imagine$A))) (and (and (= (LinearMaybe.__default.has LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) |h#0|) (= (LinearMaybe.__default.read LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) |a#0@@5|)) ($IsBox (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|) (|#$maybe| LinearMaybe._default.imagine$A))))
 :qid |unknown.0:0|
 :skolemid |1943|
 :pattern ( (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|))
))))
(assert (forall ((LinearMaybe._default.imagine$A@@0 T@U) (|h#0@@0| Bool) (|a#0@@6| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A@@0) TyType) (= (type |a#0@@6|) BoxType)) ($IsBox |a#0@@6| LinearMaybe._default.imagine$A@@0)) (= (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@6|) true))
 :qid |unknown.0:0|
 :skolemid |1944|
 :pattern ( (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@6|))
)))
(assert (= (type Tclass.LinearExtern.__default) TyType))
(assert (= (Tag Tclass.LinearExtern.__default) Tagclass.LinearExtern.__default))
(assert (= (TagFamily Tclass.LinearExtern.__default) tytagFamily$_default))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.LinearExtern.__default)) (and (= ($Box ($Unbox refType bx@@142)) bx@@142) ($Is ($Unbox refType bx@@142) Tclass.LinearExtern.__default)))
 :qid |unknown.0:0|
 :skolemid |1945|
 :pattern ( ($IsBox bx@@142 Tclass.LinearExtern.__default))
)))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (= ($Is $o@@27 Tclass.LinearExtern.__default)  (or (= $o@@27 null) (= (dtype $o@@27) Tclass.LinearExtern.__default))))
 :qid |unknown.0:0|
 :skolemid |1946|
 :pattern ( ($Is $o@@27 Tclass.LinearExtern.__default))
)))
(assert (forall (($o@@28 T@U) ($h@@77 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@28 Tclass.LinearExtern.__default $h@@77)  (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@28) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1947|
 :pattern ( ($IsAlloc $o@@28 Tclass.LinearExtern.__default $h@@77))
)))
(assert (forall ((arg0@@429 T@U) (arg1@@172 T@U) (arg2@@96 Int) ) (! (= (type (LinearExtern.__default.seq_get arg0@@429 arg1@@172 arg2@@96)) BoxType)
 :qid |funType:LinearExtern.__default.seq_get|
 :pattern ( (LinearExtern.__default.seq_get arg0@@429 arg1@@172 arg2@@96))
)))
(assert  (=> true (forall ((LinearSequence_s._default.seq_get$A T@U) (|s#0@@5| T@U) (|i#0@@39| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A) TyType) (= (type |s#0@@5|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_get#canCall| LinearSequence_s._default.seq_get$A |s#0@@5| |i#0@@39|) (and (and ($Is |s#0@@5| (TSeq LinearSequence_s._default.seq_get$A)) (and (INTERNAL_le_boogie 0 |i#0@@39|) (INTERNAL_lt_boogie |i#0@@39| 18446744073709551616))) (INTERNAL_lt_boogie |i#0@@39| (|Seq#Length| |s#0@@5|))))) (and (= (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@5| |i#0@@39|) (|Seq#Index| |s#0@@5| |i#0@@39|)) ($IsBox (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@5| |i#0@@39|) LinearSequence_s._default.seq_get$A)))
 :qid |unknown.0:0|
 :skolemid |1948|
 :pattern ( (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@5| |i#0@@39|))
))))
(assert (forall ((LinearSequence_s._default.seq_get$A@@0 T@U) (|s#0@@6| T@U) (|i#0@@40| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A@@0) TyType) (= (type |s#0@@6|) (SeqType BoxType))) (and ($Is |s#0@@6| (TSeq LinearSequence_s._default.seq_get$A@@0)) (and (INTERNAL_le_boogie 0 |i#0@@40|) (INTERNAL_lt_boogie |i#0@@40| 18446744073709551616)))) (= (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@6| |i#0@@40|) (INTERNAL_lt_boogie |i#0@@40| (|Seq#Length| |s#0@@6|))))
 :qid |unknown.0:0|
 :skolemid |1949|
 :pattern ( (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@6| |i#0@@40|))
)))
(assert (forall ((arg0@@430 T@U) (arg1@@173 T@U) (arg2@@97 Int) (arg3@@51 T@U) ) (! (= (type (LinearExtern.__default.seq_set arg0@@430 arg1@@173 arg2@@97 arg3@@51)) (SeqType BoxType))
 :qid |funType:LinearExtern.__default.seq_set|
 :pattern ( (LinearExtern.__default.seq_set arg0@@430 arg1@@173 arg2@@97 arg3@@51))
)))
(assert  (=> true (forall ((LinearSequence_s._default.seq_set$A T@U) (|s1#0| T@U) (|i#0@@41| Int) (|a#0@@7| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A) TyType) (= (type |s1#0|) (SeqType BoxType))) (= (type |a#0@@7|) BoxType)) (or (|LinearExtern.__default.seq_set#canCall| LinearSequence_s._default.seq_set$A |s1#0| |i#0@@41| |a#0@@7|) (and (and (and ($Is |s1#0| (TSeq LinearSequence_s._default.seq_set$A)) (and (INTERNAL_le_boogie 0 |i#0@@41|) (INTERNAL_lt_boogie |i#0@@41| 18446744073709551616))) ($IsBox |a#0@@7| LinearSequence_s._default.seq_set$A)) (INTERNAL_lt_boogie |i#0@@41| (|Seq#Length| |s1#0|))))) (and (|Seq#Equal| (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@41| |a#0@@7|) (|Seq#Update| |s1#0| |i#0@@41| |a#0@@7|)) ($Is (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@41| |a#0@@7|) (TSeq LinearSequence_s._default.seq_set$A))))
 :qid |unknown.0:0|
 :skolemid |1950|
 :pattern ( (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@41| |a#0@@7|))
))))
(assert (forall ((LinearSequence_s._default.seq_set$A@@0 T@U) (|s1#0@@0| T@U) (|i#0@@42| Int) (|a#0@@8| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A@@0) TyType) (= (type |s1#0@@0|) (SeqType BoxType))) (= (type |a#0@@8|) BoxType)) (and (and ($Is |s1#0@@0| (TSeq LinearSequence_s._default.seq_set$A@@0)) (and (INTERNAL_le_boogie 0 |i#0@@42|) (INTERNAL_lt_boogie |i#0@@42| 18446744073709551616))) ($IsBox |a#0@@8| LinearSequence_s._default.seq_set$A@@0))) (= (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@42| |a#0@@8|) (INTERNAL_lt_boogie |i#0@@42| (|Seq#Length| |s1#0@@0|))))
 :qid |unknown.0:0|
 :skolemid |1951|
 :pattern ( (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@42| |a#0@@8|))
)))
(assert  (=> true (forall ((LinearSequence_s._default.seq_length$A T@U) (|s#0@@7| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A) TyType) (= (type |s#0@@7|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_length#canCall| LinearSequence_s._default.seq_length$A |s#0@@7|) (and ($Is |s#0@@7| (TSeq LinearSequence_s._default.seq_length$A)) (INTERNAL_le_boogie (|Seq#Length| |s#0@@7|) 18446744073709551615)))) (and (= (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@7|) (|Seq#Length| |s#0@@7|)) (and (INTERNAL_le_boogie 0 (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@7|)) (INTERNAL_lt_boogie (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@7|) 18446744073709551616))))
 :qid |unknown.0:0|
 :skolemid |1952|
 :pattern ( (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@7|))
))))
(assert (forall ((LinearSequence_s._default.seq_length$A@@0 T@U) (|s#0@@8| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A@@0) TyType) (= (type |s#0@@8|) (SeqType BoxType))) ($Is |s#0@@8| (TSeq LinearSequence_s._default.seq_length$A@@0))) (= (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@8|) (INTERNAL_le_boogie (|Seq#Length| |s#0@@8|) 18446744073709551615)))
 :qid |unknown.0:0|
 :skolemid |1953|
 :pattern ( (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@8|))
)))
(assert (forall ((arg0@@431 T@U) ) (! (= (type (LinearExtern.__default.seq_empty arg0@@431)) (SeqType BoxType))
 :qid |funType:LinearExtern.__default.seq_empty|
 :pattern ( (LinearExtern.__default.seq_empty arg0@@431))
)))
(assert  (=> true (forall ((LinearSequence_s._default.seq_empty$A T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_empty$A) TyType) true) (and (= (|Seq#Length| (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) (LitInt 0)) ($Is (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A) (TSeq LinearSequence_s._default.seq_empty$A))))
 :qid |unknown.0:0|
 :skolemid |1954|
 :pattern ( (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A))
))))
(assert (forall ((LinearSequence_s._default.seq_empty$A@@0 T@U) ) (!  (=> (= (type LinearSequence_s._default.seq_empty$A@@0) TyType) (= (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0) true))
 :qid |unknown.0:0|
 :skolemid |1955|
 :pattern ( (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0))
)))
(assert (forall ((arg0@@432 T@U) (arg1@@174 Int) (arg2@@98 T@U) ) (! (= (type (LinearExtern.__default.seq_alloc arg0@@432 arg1@@174 arg2@@98)) (SeqType BoxType))
 :qid |funType:LinearExtern.__default.seq_alloc|
 :pattern ( (LinearExtern.__default.seq_alloc arg0@@432 arg1@@174 arg2@@98))
)))
(assert  (=> true (forall ((LinearSequence_s._default.seq_alloc$A T@U) (|length#0@@4| Int) (|a#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_alloc$A) TyType) (= (type |a#0@@9|) BoxType)) (or (|LinearExtern.__default.seq_alloc#canCall| LinearSequence_s._default.seq_alloc$A |length#0@@4| |a#0@@9|) (and (and (INTERNAL_le_boogie 0 |length#0@@4|) (INTERNAL_lt_boogie |length#0@@4| 18446744073709551616)) ($IsBox |a#0@@9| LinearSequence_s._default.seq_alloc$A)))) (and (and (= (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@4| |a#0@@9|)) |length#0@@4|) (forall ((|i#0@@43| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@43|) (INTERNAL_lt_boogie |i#0@@43| (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@4| |a#0@@9|)))) (= (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@4| |a#0@@9|) |i#0@@43|) |a#0@@9|)))
 :qid |LinearSequencesdfy.32:20|
 :skolemid |1956|
 :pattern ( (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@4| |a#0@@9|) |i#0@@43|))
))) ($Is (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@4| |a#0@@9|) (TSeq LinearSequence_s._default.seq_alloc$A))))
 :qid |unknown.0:0|
 :skolemid |1957|
 :pattern ( (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@4| |a#0@@9|))
))))
(assert (forall ((LinearSequence_s._default.seq_alloc$A@@0 T@U) (|length#0@@5| Int) (|a#0@@10| T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_alloc$A@@0) TyType) (= (type |a#0@@10|) BoxType)) (=> (and (and (INTERNAL_le_boogie 0 |length#0@@5|) (INTERNAL_lt_boogie |length#0@@5| 18446744073709551616)) ($IsBox |a#0@@10| LinearSequence_s._default.seq_alloc$A@@0)) (= (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@5| |a#0@@10|) true)))
 :qid |unknown.0:0|
 :skolemid |1958|
 :pattern ( (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@5| |a#0@@10|))
)))
(assert (forall ((arg0@@433 T@U) (arg1@@175 T@U) ) (! (= (type (LinearExtern.__default.seq_free arg0@@433 arg1@@175)) DatatypeTypeType)
 :qid |funType:LinearExtern.__default.seq_free|
 :pattern ( (LinearExtern.__default.seq_free arg0@@433 arg1@@175))
)))
(assert  (=> true (forall ((LinearSequence_s._default.seq_free$A T@U) (|s#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A) TyType) (= (type |s#0@@9|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_free#canCall| LinearSequence_s._default.seq_free$A |s#0@@9|) ($Is |s#0@@9| (TSeq LinearSequence_s._default.seq_free$A)))) ($Is (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@9|) Tclass._System.Tuple0))
 :qid |unknown.0:0|
 :skolemid |1959|
 :pattern ( (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@9|))
))))
(assert (forall ((LinearSequence_s._default.seq_free$A@@0 T@U) (|s#0@@10| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A@@0) TyType) (= (type |s#0@@10|) (SeqType BoxType))) ($Is |s#0@@10| (TSeq LinearSequence_s._default.seq_free$A@@0))) (= (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@10|) true))
 :qid |unknown.0:0|
 :skolemid |1960|
 :pattern ( (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@10|))
)))
(assert (forall ((arg0@@434 T@U) (arg1@@176 T@U) ) (! (= (type (LinearExtern.__default.seq_unleash arg0@@434 arg1@@176)) (SeqType BoxType))
 :qid |funType:LinearExtern.__default.seq_unleash|
 :pattern ( (LinearExtern.__default.seq_unleash arg0@@434 arg1@@176))
)))
(assert  (=> true (forall ((LinearSequence_s._default.seq_unleash$A T@U) (|s1#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A) TyType) (= (type |s1#0@@1|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_unleash#canCall| LinearSequence_s._default.seq_unleash$A |s1#0@@1|) ($Is |s1#0@@1| (TSeq LinearSequence_s._default.seq_unleash$A)))) (and (|Seq#Equal| |s1#0@@1| (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ($Is (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|) (TSeq LinearSequence_s._default.seq_unleash$A))))
 :qid |unknown.0:0|
 :skolemid |1961|
 :pattern ( (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|))
))))
(assert (forall ((LinearSequence_s._default.seq_unleash$A@@0 T@U) (|s1#0@@2| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A@@0) TyType) (= (type |s1#0@@2|) (SeqType BoxType))) ($Is |s1#0@@2| (TSeq LinearSequence_s._default.seq_unleash$A@@0))) (= (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|) true))
 :qid |unknown.0:0|
 :skolemid |1962|
 :pattern ( (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|))
)))
(assert  (and (forall ((arg0@@435 T@U) (arg1@@177 T@U) ) (! (= (type (LinearExtern.__default.lseqs__raw arg0@@435 arg1@@177)) (SeqType BoxType))
 :qid |funType:LinearExtern.__default.lseqs__raw|
 :pattern ( (LinearExtern.__default.lseqs__raw arg0@@435 arg1@@177))
)) (forall ((arg0@@436 T@U) ) (! (= (type (|#$lseq| arg0@@436)) TyType)
 :qid |funType:#$lseq|
 :pattern ( (|#$lseq| arg0@@436))
))))
(assert  (=> true (forall ((LinearSequence_s._default.lseqs_raw$A T@U) (|l#0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A) TyType) (= (type |l#0|) BoxType)) (or (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseqs_raw$A |l#0|) ($IsBox |l#0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A)))) (and (_System.__default.rank__is__less__than (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)) (|#$lseq| LinearSequence_s._default.lseqs_raw$A) ($Box (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|)) |l#0|) ($Is (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|) (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)))))
 :qid |unknown.0:0|
 :skolemid |1963|
 :pattern ( (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|))
))))
(assert (forall ((LinearSequence_s._default.lseqs_raw$A@@0 T@U) (|l#0@@0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A@@0) TyType) (= (type |l#0@@0|) BoxType)) ($IsBox |l#0@@0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A@@0))) (= (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |1964|
 :pattern ( (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|))
)))
(assert (forall ((arg0@@437 T@U) (arg1@@178 T@U) ) (! (= (type (LinearExtern.__default.lseq__has arg0@@437 arg1@@178)) (SeqType BoxType))
 :qid |funType:LinearExtern.__default.lseq__has|
 :pattern ( (LinearExtern.__default.lseq__has arg0@@437 arg1@@178))
)))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A T@U) (|l#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_has$A) TyType) (= (type |l#0@@1|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A |l#0@@1|) ($IsBox |l#0@@1| (|#$lseq| LinearSequence_s._default.lseq_has$A)))) (and (= (|Seq#Length| (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A |l#0@@1|))) ($Is (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|) (TSeq TBool))))
 :qid |unknown.0:0|
 :skolemid |1965|
 :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|))
))))
(assert (forall ((LinearSequence_s._default.lseq_has$A@@0 T@U) ($Heap@@9 T@U) (|l#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@0) TyType) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |l#0@@2|) BoxType)) (and ($IsGoodHeap $Heap@@9) ($IsBox |l#0@@2| (|#$lseq| LinearSequence_s._default.lseq_has$A@@0)))) (= (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) true))
 :qid |unknown.0:0|
 :skolemid |1966|
 :pattern ( (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) ($IsGoodHeap $Heap@@9))
)))
(assert (forall ((arg0@@438 T@U) (arg1@@179 T@U) ) (! (= (type (|lambda#112| arg0@@438 arg1@@179)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))
 :qid |funType:lambda#112|
 :pattern ( (|lambda#112| arg0@@438 arg1@@179))
)))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@1 T@U) ($Heap@@10 T@U) (|l#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@1) TyType) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |l#0@@3|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (and ($IsGoodHeap $Heap@@10) ($IsBox |l#0@@3| (|#$lseq| LinearSequence_s._default.lseq_has$A@@1))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (forall ((|$l#1#i#0| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |$l#1#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (=> (and (INTERNAL_le_boogie 0 |$l#1#i#0|) (INTERNAL_lt_boogie |$l#1#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@1 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) |$l#1#i#0|)))))
 :qid |unknown.0:0|
 :skolemid |1967|
 :no-pattern (INTERNAL_lt_boogie |$l#1#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)))
 :no-pattern (INTERNAL_le_boogie 0 |$l#1#i#0|)
 :no-pattern (INTERNAL_le_boogie 0 |$l#1#i#0|)
))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|Seq#Create| TBool $Heap@@10 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#112| LinearSequence_s._default.lseq_has$A@@1 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (|lambda#92| TInt 0 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|))) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :skolemid |1968|
 :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) ($IsGoodHeap $Heap@@10))
))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@2 T@U) ($Heap@@11 T@U) (|l#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@2) TyType) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |l#0@@4|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (and ($IsGoodHeap $Heap@@11) ($IsBox |l#0@@4| (|#$lseq| LinearSequence_s._default.lseq_has$A@@2))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (forall ((|$l#3#i#0| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |$l#3#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (=> (and (INTERNAL_le_boogie 0 |$l#3#i#0|) (INTERNAL_lt_boogie |$l#3#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@2 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) |$l#3#i#0|)))))
 :qid |unknown.0:0|
 :skolemid |1969|
 :no-pattern (INTERNAL_lt_boogie |$l#3#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))))
 :no-pattern (INTERNAL_le_boogie 0 |$l#3#i#0|)
 :no-pattern (INTERNAL_le_boogie 0 |$l#3#i#0|)
))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|Seq#Create| TBool $Heap@@11 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#112| LinearSequence_s._default.lseq_has$A@@2 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (|lambda#92| TInt 0 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)))) (|lambda#9| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |1970|
 :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) ($IsGoodHeap $Heap@@11))
))))
(assert (forall ((arg0@@439 T@U) (arg1@@180 T@U) ) (! (= (type (LinearExtern.__default.imagine__lseq__raw arg0@@439 arg1@@180)) BoxType)
 :qid |funType:LinearExtern.__default.imagine__lseq__raw|
 :pattern ( (LinearExtern.__default.imagine__lseq__raw arg0@@439 arg1@@180))
)))
(assert  (=> true (forall ((LinearSequence_s._default.imagine_lseq_raw$A T@U) (|s#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A) TyType) (= (type |s#0@@11|) (SeqType BoxType))) (or (|LinearExtern.__default.imagine__lseq__raw#canCall| LinearSequence_s._default.imagine_lseq_raw$A |s#0@@11|) ($Is |s#0@@11| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A))))) (and (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.imagine_lseq_raw$A (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@11|)) |s#0@@11|) ($IsBox (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@11|) (|#$lseq| LinearSequence_s._default.imagine_lseq_raw$A))))
 :qid |unknown.0:0|
 :skolemid |1971|
 :pattern ( (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@11|))
))))
(assert (forall ((LinearSequence_s._default.imagine_lseq_raw$A@@0 T@U) (|s#0@@12| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A@@0) TyType) (= (type |s#0@@12|) (SeqType BoxType))) ($Is |s#0@@12| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A@@0)))) (= (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@12|) true))
 :qid |unknown.0:0|
 :skolemid |1972|
 :pattern ( (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@12|))
)))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_length_raw$A T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A) TyType) (= (type |s#0@@13|) BoxType)) (or (|LinearExtern.__default.lseq_length_raw#canCall| LinearSequence_s._default.lseq_length_raw$A |s#0@@13|) (and ($IsBox |s#0@@13| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A)) (INTERNAL_le_boogie (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@13|)) 18446744073709551615)))) (and (= (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@13|) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@13|))) (and (INTERNAL_le_boogie 0 (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@13|)) (INTERNAL_lt_boogie (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@13|) 18446744073709551616))))
 :qid |unknown.0:0|
 :skolemid |1973|
 :pattern ( (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@13|))
))))
(assert (forall ((LinearSequence_s._default.lseq_length_raw$A@@0 T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A@@0) TyType) (= (type |s#0@@14|) BoxType)) ($IsBox |s#0@@14| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A@@0))) (= (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@14|) (INTERNAL_le_boogie (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@14|)) 18446744073709551615)))
 :qid |unknown.0:0|
 :skolemid |1974|
 :pattern ( (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@14|))
)))
(assert (forall ((arg0@@440 T@U) (arg1@@181 Int) ) (! (= (type (LinearExtern.__default.lseq_alloc_raw arg0@@440 arg1@@181)) BoxType)
 :qid |funType:LinearExtern.__default.lseq_alloc_raw|
 :pattern ( (LinearExtern.__default.lseq_alloc_raw arg0@@440 arg1@@181))
)))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_alloc_raw$A T@U) (|length#0@@6| Int) ) (!  (=> (and (= (type LinearSequence_s._default.lseq_alloc_raw$A) TyType) (or (|LinearExtern.__default.lseq_alloc_raw#canCall| LinearSequence_s._default.lseq_alloc_raw$A |length#0@@6|) (and (INTERNAL_le_boogie 0 |length#0@@6|) (INTERNAL_lt_boogie |length#0@@6| 18446744073709551616)))) (and (and (= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@6|))) |length#0@@6|) (forall ((|i#0@@44| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@44|) (INTERNAL_lt_boogie |i#0@@44| |length#0@@6|)) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_alloc_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@6|)) |i#0@@44|))))
 :qid |LinearSequencesdfy.92:22|
 :skolemid |1975|
 :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@6|)) |i#0@@44|))
))) ($IsBox (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@6|) (|#$lseq| LinearSequence_s._default.lseq_alloc_raw$A))))
 :qid |unknown.0:0|
 :skolemid |1976|
 :pattern ( (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@6|))
))))
(assert (forall ((LinearSequence_s._default.lseq_alloc_raw$A@@0 T@U) (|length#0@@7| Int) ) (!  (=> (= (type LinearSequence_s._default.lseq_alloc_raw$A@@0) TyType) (=> (and (INTERNAL_le_boogie 0 |length#0@@7|) (INTERNAL_lt_boogie |length#0@@7| 18446744073709551616)) (= (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@7|) true)))
 :qid |unknown.0:0|
 :skolemid |1977|
 :pattern ( (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@7|))
)))
(assert (forall ((arg0@@441 T@U) (arg1@@182 T@U) ) (! (= (type (LinearExtern.__default.lseq_free_raw arg0@@441 arg1@@182)) DatatypeTypeType)
 :qid |funType:LinearExtern.__default.lseq_free_raw|
 :pattern ( (LinearExtern.__default.lseq_free_raw arg0@@441 arg1@@182))
)))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_free_raw$A T@U) (|s#0@@15| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A) TyType) (= (type |s#0@@15|) BoxType)) (or (|LinearExtern.__default.lseq_free_raw#canCall| LinearSequence_s._default.lseq_free_raw$A |s#0@@15|) (and ($IsBox |s#0@@15| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A)) (forall ((|i#0@@45| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@45|) (INTERNAL_lt_boogie |i#0@@45| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@15|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@15|) |i#0@@45|))))
 :qid |LinearSequencesdfy.95:23|
 :skolemid |1978|
 :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@15|) |i#0@@45|))
))))) ($Is (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@15|) Tclass._System.Tuple0))
 :qid |unknown.0:0|
 :skolemid |1979|
 :pattern ( (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@15|))
))))
(assert (forall ((LinearSequence_s._default.lseq_free_raw$A@@0 T@U) (|s#0@@16| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A@@0) TyType) (= (type |s#0@@16|) BoxType)) ($IsBox |s#0@@16| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A@@0))) (= (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@16|) (forall ((|i#1@@1| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@1|) (INTERNAL_lt_boogie |i#1@@1| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@16|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A@@0 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@16|) |i#1@@1|))))
 :qid |LinearSequencesdfy.95:23|
 :skolemid |1980|
 :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@16|) |i#1@@1|))
))))
 :qid |unknown.0:0|
 :skolemid |1981|
 :pattern ( (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@16|))
)))
(assert (forall ((arg0@@442 T@U) (arg1@@183 T@U) (arg2@@99 Int) (arg3@@52 T@U) ) (! (= (type (LinearExtern.__default.lseq_swap_raw_fun arg0@@442 arg1@@183 arg2@@99 arg3@@52)) DatatypeTypeType)
 :qid |funType:LinearExtern.__default.lseq_swap_raw_fun|
 :pattern ( (LinearExtern.__default.lseq_swap_raw_fun arg0@@442 arg1@@183 arg2@@99 arg3@@52))
)))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A T@U) (|s1#0@@3| T@U) (|i#0@@46| Int) (|a1#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A) TyType) (= (type |s1#0@@3|) BoxType)) (= (type |a1#0|) BoxType)) (or (|LinearExtern.__default.lseq_swap_raw_fun#canCall| LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@46| |a1#0|) (and (and (and ($IsBox |s1#0@@3| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A)) (and (INTERNAL_le_boogie 0 |i#0@@46|) (INTERNAL_lt_boogie |i#0@@46| 18446744073709551616))) ($IsBox |a1#0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))) (INTERNAL_lt_boogie |i#0@@46| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|)))))) (and (and (= (_System.Tuple2OLL._1 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@46| |a1#0|)) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@46|)) (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A (_System.Tuple2OLL._0 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@46| |a1#0|))) (|Seq#Update| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@46| |a1#0|))) ($Is (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@46| |a1#0|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A) (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A)))))
 :qid |unknown.0:0|
 :skolemid |1982|
 :pattern ( (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@46| |a1#0|))
))))
(assert (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A@@0 T@U) (|s1#0@@4| T@U) (|i#0@@47| Int) (|a1#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A@@0) TyType) (= (type |s1#0@@4|) BoxType)) (= (type |a1#0@@0|) BoxType)) (and (and ($IsBox |s1#0@@4| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)) (and (INTERNAL_le_boogie 0 |i#0@@47|) (INTERNAL_lt_boogie |i#0@@47| 18446744073709551616))) ($IsBox |a1#0@@0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)))) (= (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@47| |a1#0@@0|) (INTERNAL_lt_boogie |i#0@@47| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4|)))))
 :qid |unknown.0:0|
 :skolemid |1983|
 :pattern ( (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@47| |a1#0@@0|))
)))
(assert (forall ((arg0@@443 T@U) (arg1@@184 T@U) (arg2@@100 Int) ) (! (= (type (LinearExtern.__default.lseq_share_raw arg0@@443 arg1@@184 arg2@@100)) BoxType)
 :qid |funType:LinearExtern.__default.lseq_share_raw|
 :pattern ( (LinearExtern.__default.lseq_share_raw arg0@@443 arg1@@184 arg2@@100))
)))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_share_raw$A T@U) (|s#0@@17| T@U) (|i#0@@48| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A) TyType) (= (type |s#0@@17|) BoxType)) (or (|LinearExtern.__default.lseq_share_raw#canCall| LinearSequence_s._default.lseq_share_raw$A |s#0@@17| |i#0@@48|) (and (and ($IsBox |s#0@@17| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A)) (and (INTERNAL_le_boogie 0 |i#0@@48|) (INTERNAL_lt_boogie |i#0@@48| 18446744073709551616))) (INTERNAL_lt_boogie |i#0@@48| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@17|)))))) (and (= (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@17| |i#0@@48|) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@17|) |i#0@@48|)) ($IsBox (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@17| |i#0@@48|) (|#$maybe| LinearSequence_s._default.lseq_share_raw$A))))
 :qid |unknown.0:0|
 :skolemid |1984|
 :pattern ( (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@17| |i#0@@48|))
))))
(assert (forall ((LinearSequence_s._default.lseq_share_raw$A@@0 T@U) (|s#0@@18| T@U) (|i#0@@49| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A@@0) TyType) (= (type |s#0@@18|) BoxType)) (and ($IsBox |s#0@@18| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A@@0)) (and (INTERNAL_le_boogie 0 |i#0@@49|) (INTERNAL_lt_boogie |i#0@@49| 18446744073709551616)))) (= (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@18| |i#0@@49|) (INTERNAL_lt_boogie |i#0@@49| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@18|)))))
 :qid |unknown.0:0|
 :skolemid |1985|
 :pattern ( (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@18| |i#0@@49|))
)))
(assert (= (type |#ValueMessage.Delta.NoDelta|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#ValueMessage.Delta.NoDelta|) |##ValueMessage.Delta.NoDelta|))
(assert (forall ((d@@29 T@U) ) (!  (=> (= (type d@@29) DatatypeTypeType) (= (ValueMessage.Delta.NoDelta_q d@@29) (= (DatatypeCtorId d@@29) |##ValueMessage.Delta.NoDelta|)))
 :qid |unknown.0:0|
 :skolemid |1986|
 :pattern ( (ValueMessage.Delta.NoDelta_q d@@29))
)))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) (ValueMessage.Delta.NoDelta_q d@@30)) (= d@@30 |#ValueMessage.Delta.NoDelta|))
 :qid |unknown.0:0|
 :skolemid |1987|
 :pattern ( (ValueMessage.Delta.NoDelta_q d@@30))
)))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (= (TagFamily Tclass.ValueMessage.Delta) tytagFamily$Delta))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.ValueMessage.Delta)) (and (= ($Box ($Unbox DatatypeTypeType bx@@143)) bx@@143) ($Is ($Unbox DatatypeTypeType bx@@143) Tclass.ValueMessage.Delta)))
 :qid |unknown.0:0|
 :skolemid |1988|
 :pattern ( ($IsBox bx@@143 Tclass.ValueMessage.Delta))
)))
(assert ($Is |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta))
(assert (forall (($h@@78 T@U) ) (!  (=> (and (= (type $h@@78) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@78)) ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@78))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |1989|
 :pattern ( ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@78))
)))
(assert (= |#ValueMessage.Delta.NoDelta| (Lit |#ValueMessage.Delta.NoDelta|)))
(assert (forall ((d@@31 T@U) ) (!  (=> (and (= (type d@@31) DatatypeTypeType) (|$IsA#ValueMessage.Delta| d@@31)) (ValueMessage.Delta.NoDelta_q d@@31))
 :qid |unknown.0:0|
 :skolemid |1990|
 :pattern ( (|$IsA#ValueMessage.Delta| d@@31))
)))
(assert (forall ((d@@32 T@U) ) (!  (=> (and (= (type d@@32) DatatypeTypeType) ($Is d@@32 Tclass.ValueMessage.Delta)) (ValueMessage.Delta.NoDelta_q d@@32))
 :qid |unknown.0:0|
 :skolemid |1991|
 :pattern ( (ValueMessage.Delta.NoDelta_q d@@32) ($Is d@@32 Tclass.ValueMessage.Delta))
)))
(assert (forall ((a@@123 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@123) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) true) (= (|ValueMessage.Delta#Equal| a@@123 b@@72) true))
 :qid |unknown.0:0|
 :skolemid |1992|
 :pattern ( (|ValueMessage.Delta#Equal| a@@123 b@@72))
)))
(assert (forall ((a@@124 T@U) (b@@73 T@U) ) (!  (=> (and (= (type a@@124) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (= (|ValueMessage.Delta#Equal| a@@124 b@@73) (= a@@124 b@@73)))
 :qid |unknown.0:0|
 :skolemid |1993|
 :pattern ( (|ValueMessage.Delta#Equal| a@@124 b@@73))
)))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (= (TagFamily Tclass.ValueMessage.__default) tytagFamily$_default))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.ValueMessage.__default)) (and (= ($Box ($Unbox refType bx@@144)) bx@@144) ($Is ($Unbox refType bx@@144) Tclass.ValueMessage.__default)))
 :qid |unknown.0:0|
 :skolemid |1994|
 :pattern ( ($IsBox bx@@144 Tclass.ValueMessage.__default))
)))
(assert (forall (($o@@29 T@U) ) (!  (=> (= (type $o@@29) refType) (= ($Is $o@@29 Tclass.ValueMessage.__default)  (or (= $o@@29 null) (= (dtype $o@@29) Tclass.ValueMessage.__default))))
 :qid |unknown.0:0|
 :skolemid |1995|
 :pattern ( ($Is $o@@29 Tclass.ValueMessage.__default))
)))
(assert (forall (($o@@30 T@U) ($h@@79 T@U) ) (!  (=> (and (= (type $o@@30) refType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@30 Tclass.ValueMessage.__default $h@@79)  (or (= $o@@30 null) (U_2_bool (MapType1Select (MapType0Select $h@@79 $o@@30) alloc)))))
 :qid |unknown.0:0|
 :skolemid |1996|
 :pattern ( ($IsAlloc $o@@30 Tclass.ValueMessage.__default $h@@79))
)))
(assert (= (type ValueMessage.__default.NopDelta) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert (= |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert (forall ((arg0@@444 T@U) (arg1@@185 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@444 arg1@@185)) DatatypeTypeType)
 :qid |funType:ValueMessage.__default.CombineDeltas|
 :pattern ( (ValueMessage.__default.CombineDeltas arg0@@444 arg1@@185))
)))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) DatatypeTypeType) (= (type |olddelta#0|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($Is |newdelta#0| Tclass.ValueMessage.Delta) ($Is |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (|ValueMessage.Delta#Equal| |newdelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (|ValueMessage.Delta#Equal| |olddelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($Is (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta)))
 :qid |MessagesdfyValueMessage.20:33|
 :skolemid |1997|
 :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|))
))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) DatatypeTypeType) (= (type |olddelta#0@@0|) DatatypeTypeType)) (and ($Is |newdelta#0@@0| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@0| Tclass.ValueMessage.Delta))) (= (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true))
 :qid |MessagesdfyValueMessage.20:33|
 :skolemid |1998|
 :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|))
)))
(assert  (=> true (forall ((|newdelta#0@@1| T@U) (|olddelta#0@@1| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@1|) DatatypeTypeType) (= (type |olddelta#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|) (and ($Is |newdelta#0@@1| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@1| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|) (Lit |#ValueMessage.Delta.NoDelta|)))
 :qid |MessagesdfyValueMessage.20:33|
 :skolemid |1999|
 :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|))
))))
(assert  (=> true (forall ((|newdelta#0@@2| T@U) (|olddelta#0@@2| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@2|) DatatypeTypeType) (= (type |olddelta#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (and ($Is |newdelta#0@@2| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@2| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (Lit |#ValueMessage.Delta.NoDelta|)))
 :qid |MessagesdfyValueMessage.20:33|
 :weight 3
 :skolemid |2000|
 :pattern ( (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)))
))))
(assert (forall ((arg0@@445 T@U) (arg1@@186 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@445 arg1@@186)) (SeqType BoxType))
 :qid |funType:ValueMessage.__default.ApplyDelta|
 :pattern ( (ValueMessage.__default.ApplyDelta arg0@@445 arg1@@186))
)))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) DatatypeTypeType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($Is |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (|ValueMessage.Delta#Equal| |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value)))
 :qid |MessagesdfyValueMessage.24:30|
 :skolemid |2001|
 :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|))
))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) DatatypeTypeType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($Is |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (= (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true))
 :qid |MessagesdfyValueMessage.24:30|
 :skolemid |2002|
 :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|))
)))
(assert  (=> true (forall ((|delta#0@@1| T@U) (|value#0@@1| T@U) ) (!  (=> (and (and (= (type |delta#0@@1|) DatatypeTypeType) (= (type |value#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@1| |value#0@@1|) (and ($Is |delta#0@@1| Tclass.ValueMessage.Delta) ($Is |value#0@@1| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|) |value#0@@1|))
 :qid |MessagesdfyValueMessage.24:30|
 :skolemid |2003|
 :pattern ( (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|))
))))
(assert  (=> true (forall ((|delta#0@@2| T@U) (|value#0@@2| T@U) ) (!  (=> (and (and (= (type |delta#0@@2|) DatatypeTypeType) (= (type |value#0@@2|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| (Lit |delta#0@@2|) (Lit |value#0@@2|)) (and ($Is |delta#0@@2| Tclass.ValueMessage.Delta) ($Is |value#0@@2| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta (Lit |delta#0@@2|) (Lit |value#0@@2|)) (Lit |value#0@@2|)))
 :qid |MessagesdfyValueMessage.24:30|
 :weight 3
 :skolemid |2004|
 :pattern ( (ValueMessage.__default.ApplyDelta (Lit |delta#0@@2|) (Lit |value#0@@2|)))
))))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (= (TagFamily Tclass.ValueMessage.Message) tytagFamily$Message))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@145)) bx@@145) ($Is ($Unbox DatatypeTypeType bx@@145) Tclass.ValueMessage.Message)))
 :qid |unknown.0:0|
 :skolemid |2005|
 :pattern ( ($IsBox bx@@145 Tclass.ValueMessage.Message))
)))
(assert (forall ((arg0@@446 T@U) ) (! (= (type (ValueMessage.__default.MakeValueMessage arg0@@446)) DatatypeTypeType)
 :qid |funType:ValueMessage.__default.MakeValueMessage|
 :pattern ( (ValueMessage.__default.MakeValueMessage arg0@@446))
)))
(assert  (=> true (forall ((|value#0@@3| T@U) ) (!  (=> (and (= (type |value#0@@3|) (SeqType BoxType)) (or (|ValueMessage.__default.MakeValueMessage#canCall| |value#0@@3|) ($Is |value#0@@3| Tclass.ValueType.Value))) ($Is (ValueMessage.__default.MakeValueMessage |value#0@@3|) Tclass.ValueMessage.Message))
 :qid |Messagesdfy.90:29|
 :skolemid |2006|
 :pattern ( (ValueMessage.__default.MakeValueMessage |value#0@@3|))
))))
(assert (forall ((|value#0@@4| T@U) ) (!  (=> (and (= (type |value#0@@4|) (SeqType BoxType)) ($Is |value#0@@4| Tclass.ValueType.Value)) (= (|ValueMessage.__default.MakeValueMessage#requires| |value#0@@4|) true))
 :qid |Messagesdfy.90:29|
 :skolemid |2007|
 :pattern ( (|ValueMessage.__default.MakeValueMessage#requires| |value#0@@4|))
)))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true)
 :qid |Messagesdfy.100:30|
 :skolemid |2008|
 :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|))
))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true))
 :qid |Messagesdfy.100:30|
 :skolemid |2009|
 :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|))
)))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0@@1|) ($Is |msg#0@@1| Tclass.ValueMessage.Message))) (= (ValueMessage.__default.EncodableMessage |msg#0@@1|)  (and true (ValueMessage.Message.Define_q |msg#0@@1|))))
 :qid |Messagesdfy.100:30|
 :skolemid |2010|
 :pattern ( (ValueMessage.__default.EncodableMessage |msg#0@@1|))
))))
(assert  (=> true (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| (Lit |msg#0@@2|)) ($Is |msg#0@@2| Tclass.ValueMessage.Message))) (= (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|)) (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |msg#0@@2|))))))))
 :qid |Messagesdfy.100:30|
 :weight 3
 :skolemid |2011|
 :pattern ( (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|)))
))))
(assert (forall ((arg0@@447 T@U) ) (! (= (type (ValueMessage.__default.EvaluateMessage arg0@@447)) (SeqType BoxType))
 :qid |funType:ValueMessage.__default.EvaluateMessage|
 :pattern ( (ValueMessage.__default.EvaluateMessage arg0@@447))
)))
(assert  (=> true (forall ((|m#0@@16| T@U) ) (!  (=> (and (= (type |m#0@@16|) DatatypeTypeType) (or (|ValueMessage.__default.EvaluateMessage#canCall| |m#0@@16|) (and ($Is |m#0@@16| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |m#0@@16|)))) ($Is (ValueMessage.__default.EvaluateMessage |m#0@@16|) Tclass.ValueType.Value))
 :qid |Messagesdfy.105:28|
 :skolemid |2012|
 :pattern ( (ValueMessage.__default.EvaluateMessage |m#0@@16|))
))))
(assert (forall ((|m#0@@17| T@U) ) (!  (=> (and (= (type |m#0@@17|) DatatypeTypeType) ($Is |m#0@@17| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.EvaluateMessage#requires| |m#0@@17|) (ValueMessage.Message.Define_q |m#0@@17|)))
 :qid |Messagesdfy.105:28|
 :skolemid |2013|
 :pattern ( (|ValueMessage.__default.EvaluateMessage#requires| |m#0@@17|))
)))
(assert (forall ((arg0@@448 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@448)) (SeqType BoxType))
 :qid |funType:ValueMessage.Message.value|
 :pattern ( (ValueMessage.Message.value arg0@@448))
)))
(assert  (=> true (forall ((|m#0@@18| T@U) ) (!  (=> (and (= (type |m#0@@18|) DatatypeTypeType) (or (|ValueMessage.__default.EvaluateMessage#canCall| |m#0@@18|) (and ($Is |m#0@@18| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |m#0@@18|)))) (= (ValueMessage.__default.EvaluateMessage |m#0@@18|) (ValueMessage.Message.value |m#0@@18|)))
 :qid |Messagesdfy.105:28|
 :skolemid |2014|
 :pattern ( (ValueMessage.__default.EvaluateMessage |m#0@@18|))
))))
(assert  (=> true (forall ((|m#0@@19| T@U) ) (!  (=> (and (= (type |m#0@@19|) DatatypeTypeType) (or (|ValueMessage.__default.EvaluateMessage#canCall| (Lit |m#0@@19|)) (and ($Is |m#0@@19| Tclass.ValueMessage.Message) (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |m#0@@19|)))))))) (= (ValueMessage.__default.EvaluateMessage (Lit |m#0@@19|)) (Lit (ValueMessage.Message.value (Lit |m#0@@19|)))))
 :qid |Messagesdfy.105:28|
 :weight 3
 :skolemid |2015|
 :pattern ( (ValueMessage.__default.EvaluateMessage (Lit |m#0@@19|)))
))))
(assert (forall ((arg0@@449 T@U) (arg1@@187 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@449 arg1@@187)) DatatypeTypeType)
 :qid |funType:ValueMessage.__default.Merge|
 :pattern ( (ValueMessage.__default.Merge arg0@@449 arg1@@187))
)))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message))
 :qid |MessagesdfyValueMessage.27:25|
 :skolemid |2016|
 :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|))
))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true))
 :qid |MessagesdfyValueMessage.27:25|
 :skolemid |2017|
 :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|))
)))
(assert  (and (and (forall ((arg0@@450 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@450)) DatatypeTypeType)
 :qid |funType:ValueMessage.Message.delta|
 :pattern ( (ValueMessage.Message.delta arg0@@450))
)) (forall ((arg0@@451 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@451)) DatatypeTypeType)
 :qid |funType:#ValueMessage.Message.Define|
 :pattern ( (|#ValueMessage.Message.Define| arg0@@451))
))) (forall ((arg0@@452 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@452)) DatatypeTypeType)
 :qid |funType:#ValueMessage.Message.Update|
 :pattern ( (|#ValueMessage.Message.Update| arg0@@452))
))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
 (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
(|ValueMessage.__default.ApplyDelta#canCall| |delta#1| |value#1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
 (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
(|ValueMessage.__default.CombineDeltas#canCall| |newdelta#1| |olddelta#1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#0| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
(|#ValueMessage.Message.Define| |newvalue#0|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#0@@5| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
(let ((|delta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
(|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#0@@3| |value#0@@5|)))) (let ((|olddelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
(let ((|newdelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))))
(|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#0@@3| |olddelta#0@@3|)))))))))
 :qid |MessagesdfyValueMessage.27:25|
 :skolemid |2018|
 :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|))
))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
 (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
(|ValueMessage.__default.ApplyDelta#canCall| |delta#3| |value#3|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
 (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
(|ValueMessage.__default.CombineDeltas#canCall| |newdelta#3| |olddelta#3|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
(Lit (|#ValueMessage.Message.Define| |newvalue#2|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
(let ((|delta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
(Lit (|#ValueMessage.Message.Define| (Lit (ValueMessage.__default.ApplyDelta |delta#2| |value#2|)))))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
(let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))
(Lit (|#ValueMessage.Message.Update| (Lit (ValueMessage.__default.CombineDeltas |newdelta#2| |olddelta#2|)))))))))))
 :qid |MessagesdfyValueMessage.27:25|
 :weight 3
 :skolemid |2019|
 :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)))
))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert (= (type ValueMessage.__default.DefaultMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultMessage Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.DefaultMessage#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultMessage (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultMessage (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert (forall ((|a#0#0#0@@1| T@U) ) (!  (=> (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) |##ValueMessage.Message.Define|))
 :qid |MessagesdfyValueMessage.17:14|
 :skolemid |2020|
 :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@1|))
)))
(assert (forall ((d@@33 T@U) ) (!  (=> (= (type d@@33) DatatypeTypeType) (= (ValueMessage.Message.Define_q d@@33) (= (DatatypeCtorId d@@33) |##ValueMessage.Message.Define|)))
 :qid |unknown.0:0|
 :skolemid |2021|
 :pattern ( (ValueMessage.Message.Define_q d@@33))
)))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (ValueMessage.Message.Define_q d@@34)) (exists ((|a#1#0#0@@1| T@U) ) (!  (and (= (type |a#1#0#0@@1|) (SeqType BoxType)) (= d@@34 (|#ValueMessage.Message.Define| |a#1#0#0@@1|)))
 :qid |MessagesdfyValueMessage.17:14|
 :skolemid |2022|
 :no-pattern (type |a#1#0#0@@1|)
 :no-pattern (U_2_int |a#1#0#0@@1|)
 :no-pattern (U_2_bool |a#1#0#0@@1|)
)))
 :qid |unknown.0:0|
 :skolemid |2023|
 :pattern ( (ValueMessage.Message.Define_q d@@34))
)))
(assert (forall ((|a#2#0#0@@1| T@U) ) (!  (=> (= (type |a#2#0#0@@1|) (SeqType BoxType)) (= ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@1| Tclass.ValueType.Value)))
 :qid |MessagesdfyValueMessage.17:14|
 :skolemid |2024|
 :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message))
)))
(assert (forall ((|a#3#0#0@@1| T@U) ($h@@80 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@1|) (SeqType BoxType)) (= (type $h@@80) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@80)) (= ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@80) ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@80)))
 :qid |MessagesdfyValueMessage.17:14|
 :skolemid |2025|
 :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@80))
)))
(assert (forall ((d@@35 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type d@@35) DatatypeTypeType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@81) (and (ValueMessage.Message.Define_q d@@35) ($IsAlloc d@@35 Tclass.ValueMessage.Message $h@@81)))) ($IsAlloc (ValueMessage.Message.value d@@35) Tclass.ValueType.Value $h@@81))
 :qid |unknown.0:0|
 :skolemid |2026|
 :pattern ( ($IsAlloc (ValueMessage.Message.value d@@35) Tclass.ValueType.Value $h@@81))
)))
(assert (forall ((|a#4#0#0@@1| T@U) ) (!  (=> (= (type |a#4#0#0@@1|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@1|))))
 :qid |MessagesdfyValueMessage.17:14|
 :skolemid |2027|
 :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|)))
)))
(assert (forall ((|a#5#0#0@@2| T@U) ) (!  (=> (= (type |a#5#0#0@@2|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@2|)) |a#5#0#0@@2|))
 :qid |MessagesdfyValueMessage.17:14|
 :skolemid |2028|
 :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@2|))
)))
(assert (forall ((|a#6#0#0@@2| T@U) ) (!  (=> (= (type |a#6#0#0@@2|) DatatypeTypeType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@2|)) |##ValueMessage.Message.Update|))
 :qid |MessagesdfyValueMessage.18:14|
 :skolemid |2029|
 :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@2|))
)))
(assert (forall ((d@@36 T@U) ) (!  (=> (= (type d@@36) DatatypeTypeType) (= (ValueMessage.Message.Update_q d@@36) (= (DatatypeCtorId d@@36) |##ValueMessage.Message.Update|)))
 :qid |unknown.0:0|
 :skolemid |2030|
 :pattern ( (ValueMessage.Message.Update_q d@@36))
)))
(assert (forall ((d@@37 T@U) ) (!  (=> (and (= (type d@@37) DatatypeTypeType) (ValueMessage.Message.Update_q d@@37)) (exists ((|a#7#0#0@@2| T@U) ) (!  (and (= (type |a#7#0#0@@2|) DatatypeTypeType) (= d@@37 (|#ValueMessage.Message.Update| |a#7#0#0@@2|)))
 :qid |MessagesdfyValueMessage.18:14|
 :skolemid |2031|
 :no-pattern (type |a#7#0#0@@2|)
 :no-pattern (U_2_int |a#7#0#0@@2|)
 :no-pattern (U_2_bool |a#7#0#0@@2|)
)))
 :qid |unknown.0:0|
 :skolemid |2032|
 :pattern ( (ValueMessage.Message.Update_q d@@37))
)))
(assert (forall ((|a#8#0#0@@2| T@U) ) (!  (=> (= (type |a#8#0#0@@2|) DatatypeTypeType) (= ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@2|) Tclass.ValueMessage.Message) ($Is |a#8#0#0@@2| Tclass.ValueMessage.Delta)))
 :qid |MessagesdfyValueMessage.18:14|
 :skolemid |2033|
 :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@2|) Tclass.ValueMessage.Message))
)))
(assert (forall ((|a#9#0#0@@0| T@U) ($h@@82 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@0|) DatatypeTypeType) (= (type $h@@82) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@82)) (= ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@82) ($IsAlloc |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@82)))
 :qid |MessagesdfyValueMessage.18:14|
 :skolemid |2034|
 :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@82))
)))
(assert (forall ((d@@38 T@U) ($h@@83 T@U) ) (!  (=> (and (and (= (type d@@38) DatatypeTypeType) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (ValueMessage.Message.Update_q d@@38) ($IsAlloc d@@38 Tclass.ValueMessage.Message $h@@83)))) ($IsAlloc (ValueMessage.Message.delta d@@38) Tclass.ValueMessage.Delta $h@@83))
 :qid |unknown.0:0|
 :skolemid |2035|
 :pattern ( ($IsAlloc (ValueMessage.Message.delta d@@38) Tclass.ValueMessage.Delta $h@@83))
)))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) DatatypeTypeType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@0|))))
 :qid |MessagesdfyValueMessage.18:14|
 :skolemid |2036|
 :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|)))
)))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) DatatypeTypeType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) |a#11#0#0@@0|))
 :qid |MessagesdfyValueMessage.18:14|
 :skolemid |2037|
 :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@0|))
)))
(assert (forall ((|a#12#0#0| T@U) ) (!  (=> (= (type |a#12#0#0|) DatatypeTypeType) (< (DtRank |a#12#0#0|) (DtRank (|#ValueMessage.Message.Update| |a#12#0#0|))))
 :qid |MessagesdfyValueMessage.18:14|
 :skolemid |2038|
 :pattern ( (|#ValueMessage.Message.Update| |a#12#0#0|))
)))
(assert (forall ((d@@39 T@U) ) (!  (=> (and (= (type d@@39) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@39)) (or (ValueMessage.Message.Define_q d@@39) (ValueMessage.Message.Update_q d@@39)))
 :qid |unknown.0:0|
 :skolemid |2039|
 :pattern ( (|$IsA#ValueMessage.Message| d@@39))
)))
(assert (forall ((d@@40 T@U) ) (!  (=> (and (= (type d@@40) DatatypeTypeType) ($Is d@@40 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@40) (ValueMessage.Message.Update_q d@@40)))
 :qid |unknown.0:0|
 :skolemid |2040|
 :pattern ( (ValueMessage.Message.Update_q d@@40) ($Is d@@40 Tclass.ValueMessage.Message))
 :pattern ( (ValueMessage.Message.Define_q d@@40) ($Is d@@40 Tclass.ValueMessage.Message))
)))
(assert (forall ((a@@125 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@125) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@125) (ValueMessage.Message.Define_q b@@74))) (= (|ValueMessage.Message#Equal| a@@125 b@@74) (|Seq#Equal| (ValueMessage.Message.value a@@125) (ValueMessage.Message.value b@@74))))
 :qid |unknown.0:0|
 :skolemid |2041|
 :pattern ( (|ValueMessage.Message#Equal| a@@125 b@@74) (ValueMessage.Message.Define_q a@@125))
 :pattern ( (|ValueMessage.Message#Equal| a@@125 b@@74) (ValueMessage.Message.Define_q b@@74))
)))
(assert (forall ((a@@126 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@126) (ValueMessage.Message.Update_q b@@75))) (= (|ValueMessage.Message#Equal| a@@126 b@@75) (|ValueMessage.Delta#Equal| (ValueMessage.Message.delta a@@126) (ValueMessage.Message.delta b@@75))))
 :qid |unknown.0:0|
 :skolemid |2042|
 :pattern ( (|ValueMessage.Message#Equal| a@@126 b@@75) (ValueMessage.Message.Update_q a@@126))
 :pattern ( (|ValueMessage.Message#Equal| a@@126 b@@75) (ValueMessage.Message.Update_q b@@75))
)))
(assert (forall ((a@@127 T@U) (b@@76 T@U) ) (!  (=> (and (= (type a@@127) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (= (|ValueMessage.Message#Equal| a@@127 b@@76) (= a@@127 b@@76)))
 :qid |unknown.0:0|
 :skolemid |2043|
 :pattern ( (|ValueMessage.Message#Equal| a@@127 b@@76))
)))
(assert (forall ((|s#0@@19| T@U) ) (!  (=> (= (type |s#0@@19|) (SeqType BoxType)) (= ($Is |s#0@@19| Tclass.KeyType.Key)  (and ($Is |s#0@@19| (TSeq Tclass.NativeTypes.byte)) (INTERNAL_le_boogie (|Seq#Length| |s#0@@19|) 1024))))
 :qid |unknown.0:0|
 :skolemid |2044|
 :pattern ( ($Is |s#0@@19| Tclass.KeyType.Key))
)))
(assert (forall ((|s#0@@20| T@U) ($h@@84 T@U) ) (!  (=> (and (= (type |s#0@@20|) (SeqType BoxType)) (= (type $h@@84) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@20| Tclass.KeyType.Key $h@@84) ($IsAlloc |s#0@@20| (TSeq Tclass.NativeTypes.byte) $h@@84)))
 :qid |unknown.0:0|
 :skolemid |2045|
 :pattern ( ($IsAlloc |s#0@@20| Tclass.KeyType.Key $h@@84))
)))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (= (TagFamily Tclass.KeyType.__default) tytagFamily$_default))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@146)) bx@@146) ($Is ($Unbox refType bx@@146) Tclass.KeyType.__default)))
 :qid |unknown.0:0|
 :skolemid |2046|
 :pattern ( ($IsBox bx@@146 Tclass.KeyType.__default))
)))
(assert (forall (($o@@31 T@U) ) (!  (=> (= (type $o@@31) refType) (= ($Is $o@@31 Tclass.KeyType.__default)  (or (= $o@@31 null) (= (dtype $o@@31) Tclass.KeyType.__default))))
 :qid |unknown.0:0|
 :skolemid |2047|
 :pattern ( ($Is $o@@31 Tclass.KeyType.__default))
)))
(assert (forall (($o@@32 T@U) ($h@@85 T@U) ) (!  (=> (and (= (type $o@@32) refType) (= (type $h@@85) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@32 Tclass.KeyType.__default $h@@85)  (or (= $o@@32 null) (U_2_bool (MapType1Select (MapType0Select $h@@85 $o@@32) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2048|
 :pattern ( ($IsAlloc $o@@32 Tclass.KeyType.__default $h@@85))
)))
(assert  (=> true (=> true (and (INTERNAL_le_boogie 0 KeyType.__default.MaxLen) (INTERNAL_lt_boogie KeyType.__default.MaxLen 18446744073709551616)))))
(assert (= |KeyType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (= (type Tclass.TotalKMMapMod.__default) TyType))
(assert (= (Tag Tclass.TotalKMMapMod.__default) Tagclass.TotalKMMapMod.__default))
(assert (= (TagFamily Tclass.TotalKMMapMod.__default) tytagFamily$_default))
(assert (forall ((bx@@147 T@U) ) (!  (=> (and (= (type bx@@147) BoxType) ($IsBox bx@@147 Tclass.TotalKMMapMod.__default)) (and (= ($Box ($Unbox refType bx@@147)) bx@@147) ($Is ($Unbox refType bx@@147) Tclass.TotalKMMapMod.__default)))
 :qid |unknown.0:0|
 :skolemid |2049|
 :pattern ( ($IsBox bx@@147 Tclass.TotalKMMapMod.__default))
)))
(assert (forall (($o@@33 T@U) ) (!  (=> (= (type $o@@33) refType) (= ($Is $o@@33 Tclass.TotalKMMapMod.__default)  (or (= $o@@33 null) (= (dtype $o@@33) Tclass.TotalKMMapMod.__default))))
 :qid |unknown.0:0|
 :skolemid |2050|
 :pattern ( ($Is $o@@33 Tclass.TotalKMMapMod.__default))
)))
(assert (forall (($o@@34 T@U) ($h@@86 T@U) ) (!  (=> (and (= (type $o@@34) refType) (= (type $h@@86) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@34 Tclass.TotalKMMapMod.__default $h@@86)  (or (= $o@@34 null) (U_2_bool (MapType1Select (MapType0Select $h@@86 $o@@34) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2051|
 :pattern ( ($IsAlloc $o@@34 Tclass.TotalKMMapMod.__default $h@@86))
)))
(assert  (=> true (forall ((|v#0@@53| T@U) ) (!  (=> (and (= (type |v#0@@53|) DatatypeTypeType) (or (|TotalKMMapMod.__default.TerminalValue#canCall| |v#0@@53|) ($Is |v#0@@53| Tclass.ValueMessage.Message))) true)
 :qid |TotalMapsdfyTotalKMMapMod.11:27|
 :skolemid |2052|
 :pattern ( (TotalKMMapMod.__default.TerminalValue |v#0@@53|))
))))
(assert (forall ((|v#0@@54| T@U) ) (!  (=> (and (= (type |v#0@@54|) DatatypeTypeType) ($Is |v#0@@54| Tclass.ValueMessage.Message)) (= (|TotalKMMapMod.__default.TerminalValue#requires| |v#0@@54|) true))
 :qid |TotalMapsdfyTotalKMMapMod.11:27|
 :skolemid |2053|
 :pattern ( (|TotalKMMapMod.__default.TerminalValue#requires| |v#0@@54|))
)))
(assert  (=> true (forall ((|v#0@@55| T@U) ) (!  (=> (and (= (type |v#0@@55|) DatatypeTypeType) (or (|TotalKMMapMod.__default.TerminalValue#canCall| |v#0@@55|) ($Is |v#0@@55| Tclass.ValueMessage.Message))) (= (TotalKMMapMod.__default.TerminalValue |v#0@@55|) (ValueMessage.Message.Define_q |v#0@@55|)))
 :qid |TotalMapsdfyTotalKMMapMod.11:27|
 :skolemid |2054|
 :pattern ( (TotalKMMapMod.__default.TerminalValue |v#0@@55|))
))))
(assert  (=> true (forall ((|v#0@@56| T@U) ) (!  (=> (and (= (type |v#0@@56|) DatatypeTypeType) (or (|TotalKMMapMod.__default.TerminalValue#canCall| (Lit |v#0@@56|)) ($Is |v#0@@56| Tclass.ValueMessage.Message))) (= (TotalKMMapMod.__default.TerminalValue (Lit |v#0@@56|)) (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |v#0@@56|)))))))
 :qid |TotalMapsdfyTotalKMMapMod.11:27|
 :weight 3
 :skolemid |2055|
 :pattern ( (TotalKMMapMod.__default.TerminalValue (Lit |v#0@@56|)))
))))
(assert (= (type TotalKMMapMod.__default.DefaultV) DatatypeTypeType))
(assert  (=> true (=> true (and (U_2_bool (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))) ($Is TotalKMMapMod.__default.DefaultV Tclass.ValueMessage.Message)))))
(assert (= |TotalKMMapMod.__default.DefaultV#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultMessage#canCall| (= TotalKMMapMod.__default.DefaultV (Lit ValueMessage.__default.DefaultMessage))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultMessage#canCall| (= TotalKMMapMod.__default.DefaultV (Lit ValueMessage.__default.DefaultMessage))))))
(assert  (=> true (forall ((|k#0@@6| T@U) ) (!  (=> (and (= (type |k#0@@6|) (SeqType BoxType)) (or (|TotalKMMapMod.__default.AnyKey#canCall| |k#0@@6|) ($Is |k#0@@6| Tclass.KeyType.Key))) true)
 :qid |TotalMapsdfyTotalKMMapMod.15:20|
 :skolemid |2056|
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#0@@6|))
))))
(assert (forall ((|k#0@@7| T@U) ) (!  (=> (and (= (type |k#0@@7|) (SeqType BoxType)) ($Is |k#0@@7| Tclass.KeyType.Key)) (= (|TotalKMMapMod.__default.AnyKey#requires| |k#0@@7|) true))
 :qid |TotalMapsdfyTotalKMMapMod.15:20|
 :skolemid |2057|
 :pattern ( (|TotalKMMapMod.__default.AnyKey#requires| |k#0@@7|))
)))
(assert  (=> true (forall ((|k#0@@8| T@U) ) (!  (=> (and (= (type |k#0@@8|) (SeqType BoxType)) (or (|TotalKMMapMod.__default.AnyKey#canCall| |k#0@@8|) ($Is |k#0@@8| Tclass.KeyType.Key))) (= (TotalKMMapMod.__default.AnyKey |k#0@@8|) (U_2_bool (Lit (bool_2_U true)))))
 :qid |TotalMapsdfyTotalKMMapMod.15:20|
 :skolemid |2058|
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#0@@8|))
))))
(assert  (=> true (forall ((|k#0@@9| T@U) ) (!  (=> (and (= (type |k#0@@9|) (SeqType BoxType)) (or (|TotalKMMapMod.__default.AnyKey#canCall| (Lit |k#0@@9|)) ($Is |k#0@@9| Tclass.KeyType.Key))) (= (TotalKMMapMod.__default.AnyKey (Lit |k#0@@9|)) (U_2_bool (Lit (bool_2_U true)))))
 :qid |TotalMapsdfyTotalKMMapMod.15:20|
 :weight 3
 :skolemid |2059|
 :pattern ( (TotalKMMapMod.__default.AnyKey (Lit |k#0@@9|)))
))))
(assert  (=> true (forall ((|kvm#0| T@U) (|k#0@@10| T@U) ) (!  (=> (and (and (= (type |kvm#0|) (IMapType BoxType BoxType)) (= (type |k#0@@10|) (SeqType BoxType))) (or (|TotalKMMapMod.__default.Defined#canCall| |kvm#0| |k#0@@10|) (and ($Is |kvm#0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |k#0@@10| Tclass.KeyType.Key)))) true)
 :qid |TotalMapsdfyTotalKMMapMod.17:21|
 :skolemid |2060|
 :pattern ( (TotalKMMapMod.__default.Defined |kvm#0| |k#0@@10|))
))))
(assert (forall ((|kvm#0@@0| T@U) (|k#0@@11| T@U) ) (!  (=> (and (and (= (type |kvm#0@@0|) (IMapType BoxType BoxType)) (= (type |k#0@@11|) (SeqType BoxType))) (and ($Is |kvm#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |k#0@@11| Tclass.KeyType.Key))) (= (|TotalKMMapMod.__default.Defined#requires| |kvm#0@@0| |k#0@@11|) true))
 :qid |TotalMapsdfyTotalKMMapMod.17:21|
 :skolemid |2061|
 :pattern ( (|TotalKMMapMod.__default.Defined#requires| |kvm#0@@0| |k#0@@11|))
)))
(assert  (=> true (forall ((|kvm#0@@1| T@U) (|k#0@@12| T@U) ) (!  (=> (and (and (= (type |kvm#0@@1|) (IMapType BoxType BoxType)) (= (type |k#0@@12|) (SeqType BoxType))) (or (|TotalKMMapMod.__default.Defined#canCall| |kvm#0@@1| |k#0@@12|) (and ($Is |kvm#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |k#0@@12| Tclass.KeyType.Key)))) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| |kvm#0@@1|) ($Box |k#0@@12|))) (|TotalKMMapMod.__default.TerminalValue#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |kvm#0@@1|) ($Box |k#0@@12|))))) (= (TotalKMMapMod.__default.Defined |kvm#0@@1| |k#0@@12|)  (and (U_2_bool (MapType0Select (|IMap#Domain| |kvm#0@@1|) ($Box |k#0@@12|))) (TotalKMMapMod.__default.TerminalValue ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |kvm#0@@1|) ($Box |k#0@@12|))))))))
 :qid |TotalMapsdfyTotalKMMapMod.17:21|
 :skolemid |2062|
 :pattern ( (TotalKMMapMod.__default.Defined |kvm#0@@1| |k#0@@12|))
))))
(assert  (=> true (forall ((|kvm#0@@2| T@U) (|k#0@@13| T@U) ) (!  (=> (and (and (= (type |kvm#0@@2|) (IMapType BoxType BoxType)) (= (type |k#0@@13|) (SeqType BoxType))) (or (|TotalKMMapMod.__default.Defined#canCall| |kvm#0@@2| (Lit |k#0@@13|)) (and ($Is |kvm#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |k#0@@13| Tclass.KeyType.Key)))) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| |kvm#0@@2|) ($Box |k#0@@13|))) (|TotalKMMapMod.__default.TerminalValue#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |kvm#0@@2|) ($Box (Lit |k#0@@13|)))))) (= (TotalKMMapMod.__default.Defined |kvm#0@@2| (Lit |k#0@@13|))  (and (U_2_bool (MapType0Select (|IMap#Domain| |kvm#0@@2|) ($Box |k#0@@13|))) (TotalKMMapMod.__default.TerminalValue ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |kvm#0@@2|) ($Box (Lit |k#0@@13|)))))))))
 :qid |TotalMapsdfyTotalKMMapMod.17:21|
 :weight 3
 :skolemid |2063|
 :pattern ( (TotalKMMapMod.__default.Defined |kvm#0@@2| (Lit |k#0@@13|)))
))))
(assert  (=> true (forall ((|kvm#0@@3| T@U) (|k#0@@14| T@U) ) (!  (=> (and (and (= (type |kvm#0@@3|) (IMapType BoxType BoxType)) (= (type |k#0@@14|) (SeqType BoxType))) (or (|TotalKMMapMod.__default.Defined#canCall| (Lit |kvm#0@@3|) (Lit |k#0@@14|)) (and ($Is |kvm#0@@3| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |k#0@@14| Tclass.KeyType.Key)))) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| |kvm#0@@3|) ($Box |k#0@@14|))) (|TotalKMMapMod.__default.TerminalValue#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |kvm#0@@3|)) ($Box (Lit |k#0@@14|)))))) (= (TotalKMMapMod.__default.Defined (Lit |kvm#0@@3|) (Lit |k#0@@14|))  (and (U_2_bool (MapType0Select (|IMap#Domain| |kvm#0@@3|) ($Box |k#0@@14|))) (TotalKMMapMod.__default.TerminalValue ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |kvm#0@@3|)) ($Box (Lit |k#0@@14|)))))))))
 :qid |TotalMapsdfyTotalKMMapMod.17:21|
 :weight 3
 :skolemid |2064|
 :pattern ( (TotalKMMapMod.__default.Defined (Lit |kvm#0@@3|) (Lit |k#0@@14|)))
))))
(assert  (=> true (forall ((|kvm#0@@4| T@U) ) (!  (=> (and (= (type |kvm#0@@4|) (IMapType BoxType BoxType)) (or (|TotalKMMapMod.__default.TotalMapIsFull#canCall| |kvm#0@@4|) ($Is |kvm#0@@4| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) true)
 :qid |TotalMapsdfyTotalKMMapMod.21:28|
 :skolemid |2065|
 :pattern ( (TotalKMMapMod.__default.TotalMapIsFull |kvm#0@@4|))
))))
(assert (forall ((|kvm#0@@5| T@U) ) (!  (=> (and (= (type |kvm#0@@5|) (IMapType BoxType BoxType)) ($Is |kvm#0@@5| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (= (|TotalKMMapMod.__default.TotalMapIsFull#requires| |kvm#0@@5|) true))
 :qid |TotalMapsdfyTotalKMMapMod.21:28|
 :skolemid |2066|
 :pattern ( (|TotalKMMapMod.__default.TotalMapIsFull#requires| |kvm#0@@5|))
)))
(assert  (=> true (forall ((|kvm#0@@6| T@U) ) (!  (=> (and (= (type |kvm#0@@6|) (IMapType BoxType BoxType)) (or (|TotalKMMapMod.__default.TotalMapIsFull#canCall| |kvm#0@@6|) ($Is |kvm#0@@6| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|k#0@@15| T@U) ) (!  (=> (and (= (type |k#0@@15|) (SeqType BoxType)) ($Is |k#0@@15| Tclass.KeyType.Key)) (and (|TotalKMMapMod.__default.AnyKey#canCall| |k#0@@15|) (=> (TotalKMMapMod.__default.AnyKey |k#0@@15|) (|TotalKMMapMod.__default.Defined#canCall| |kvm#0@@6| |k#0@@15|))))
 :qid |TotalMapsdfyTotalKMMapMod.22:12|
 :skolemid |2068|
 :pattern ( (TotalKMMapMod.__default.Defined |kvm#0@@6| |k#0@@15|))
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#0@@15|))
)) (= (TotalKMMapMod.__default.TotalMapIsFull |kvm#0@@6|) (forall ((|k#0@@16| T@U) ) (!  (=> (= (type |k#0@@16|) (SeqType BoxType)) (=> (and ($Is |k#0@@16| Tclass.KeyType.Key) (TotalKMMapMod.__default.AnyKey |k#0@@16|)) (TotalKMMapMod.__default.Defined |kvm#0@@6| |k#0@@16|)))
 :qid |TotalMapsdfyTotalKMMapMod.22:12|
 :skolemid |2067|
 :pattern ( (TotalKMMapMod.__default.Defined |kvm#0@@6| |k#0@@16|))
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#0@@16|))
)))))
 :qid |TotalMapsdfyTotalKMMapMod.21:28|
 :skolemid |2069|
 :pattern ( (TotalKMMapMod.__default.TotalMapIsFull |kvm#0@@6|))
))))
(assert  (=> true (forall ((|kvm#0@@7| T@U) ) (!  (=> (and (= (type |kvm#0@@7|) (IMapType BoxType BoxType)) (or (|TotalKMMapMod.__default.TotalMapIsFull#canCall| (Lit |kvm#0@@7|)) ($Is |kvm#0@@7| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) (SeqType BoxType)) ($Is |k#1| Tclass.KeyType.Key)) (and (|TotalKMMapMod.__default.AnyKey#canCall| |k#1|) (=> (TotalKMMapMod.__default.AnyKey |k#1|) (|TotalKMMapMod.__default.Defined#canCall| (Lit |kvm#0@@7|) |k#1|))))
 :qid |TotalMapsdfyTotalKMMapMod.22:12|
 :skolemid |2071|
 :pattern ( (TotalKMMapMod.__default.Defined |kvm#0@@7| |k#1|))
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#1|))
)) (= (TotalKMMapMod.__default.TotalMapIsFull (Lit |kvm#0@@7|)) (forall ((|k#1@@0| T@U) ) (!  (=> (= (type |k#1@@0|) (SeqType BoxType)) (=> (and ($Is |k#1@@0| Tclass.KeyType.Key) (TotalKMMapMod.__default.AnyKey |k#1@@0|)) (TotalKMMapMod.__default.Defined (Lit |kvm#0@@7|) |k#1@@0|)))
 :qid |TotalMapsdfyTotalKMMapMod.22:12|
 :skolemid |2070|
 :pattern ( (TotalKMMapMod.__default.Defined |kvm#0@@7| |k#1@@0|))
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#1@@0|))
)))))
 :qid |TotalMapsdfyTotalKMMapMod.21:28|
 :weight 3
 :skolemid |2072|
 :pattern ( (TotalKMMapMod.__default.TotalMapIsFull (Lit |kvm#0@@7|)))
))))
(assert (= (type TotalKMMapMod.__default.EmptyTotalMap) (IMapType BoxType BoxType)))
(assert  (=> true (=> true (and (U_2_bool (Lit (bool_2_U (TotalKMMapMod.__default.TotalMapIsFull (Lit TotalKMMapMod.__default.EmptyTotalMap))))) ($Is TotalKMMapMod.__default.EmptyTotalMap (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))))
(assert (= |TotalKMMapMod.__default.EmptyTotalMap#requires| true))
(assert  (and (forall ((arg0@@453 T@U) ) (! (= (type (|lambda#122| arg0@@453)) (MapType0Type BoxType boolType))
 :qid |funType:lambda#122|
 :pattern ( (|lambda#122| arg0@@453))
)) (forall ((arg0@@454 T@U) ) (! (= (type (|lambda#123| arg0@@454)) (MapType0Type BoxType BoxType))
 :qid |funType:lambda#123|
 :pattern ( (|lambda#123| arg0@@454))
))))
(assert  (=> true (=> true (and (forall ((|k#0@@17| T@U) ) (!  (=> (and (= (type |k#0@@17|) (SeqType BoxType)) ($Is |k#0@@17| Tclass.KeyType.Key)) (and (|TotalKMMapMod.__default.AnyKey#canCall| |k#0@@17|) (=> (TotalKMMapMod.__default.AnyKey |k#0@@17|) |TotalKMMapMod.__default.DefaultV#canCall|)))
 :qid |TotalMapsdfyTotalKMMapMod.28:10|
 :skolemid |2073|
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#0@@17|))
)) (= TotalKMMapMod.__default.EmptyTotalMap (|IMap#Glue| (|lambda#122| Tclass.KeyType.Key) (|lambda#123| ($Box (Lit TotalKMMapMod.__default.DefaultV))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))))
(assert  (=> true (=> true (and (forall ((|k#0@@18| T@U) ) (!  (=> (and (= (type |k#0@@18|) (SeqType BoxType)) ($Is |k#0@@18| Tclass.KeyType.Key)) (and (|TotalKMMapMod.__default.AnyKey#canCall| |k#0@@18|) (=> (TotalKMMapMod.__default.AnyKey |k#0@@18|) |TotalKMMapMod.__default.DefaultV#canCall|)))
 :qid |TotalMapsdfyTotalKMMapMod.28:10|
 :skolemid |2074|
 :pattern ( (TotalKMMapMod.__default.AnyKey |k#0@@18|))
)) (= TotalKMMapMod.__default.EmptyTotalMap (|IMap#Glue| (|lambda#122| Tclass.KeyType.Key) (|lambda#123| ($Box (Lit TotalKMMapMod.__default.DefaultV))) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))))
(assert (= (type TotalKMMapMod.__default.Witness) (IMapType BoxType BoxType)))
(assert  (=> true (=> true (and (|IMap#Equal| TotalKMMapMod.__default.Witness TotalKMMapMod.__default.EmptyTotalMap) ($Is TotalKMMapMod.__default.Witness (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))))
(assert (= |TotalKMMapMod.__default.Witness#requires| true))
(assert (forall ((|ikv#0| T@U) ) (!  (=> (= (type |ikv#0|) (IMapType BoxType BoxType)) (= ($Is |ikv#0| Tclass.TotalKMMapMod.TotalMap)  (and ($Is |ikv#0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) (TotalKMMapMod.__default.TotalMapIsFull |ikv#0|))))
 :qid |unknown.0:0|
 :skolemid |2075|
 :pattern ( ($Is |ikv#0| Tclass.TotalKMMapMod.TotalMap))
)))
(assert (forall ((|ikv#0@@0| T@U) ($h@@87 T@U) ) (!  (=> (and (= (type |ikv#0@@0|) (IMapType BoxType BoxType)) (= (type $h@@87) (MapType0Type refType MapType1Type))) (= ($IsAlloc |ikv#0@@0| Tclass.TotalKMMapMod.TotalMap $h@@87) ($IsAlloc |ikv#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@87)))
 :qid |unknown.0:0|
 :skolemid |2076|
 :pattern ( ($IsAlloc |ikv#0@@0| Tclass.TotalKMMapMod.TotalMap $h@@87))
)))
(assert (forall ((arg0@@455 T@U) ) (! (= (type (|#MapSpecMod.Input.GetInput| arg0@@455)) DatatypeTypeType)
 :qid |funType:#MapSpecMod.Input.GetInput|
 :pattern ( (|#MapSpecMod.Input.GetInput| arg0@@455))
)))
(assert (forall ((|a#0#0#0@@2| T@U) ) (!  (=> (= (type |a#0#0#0@@2|) (SeqType BoxType)) (= (DatatypeCtorId (|#MapSpecMod.Input.GetInput| |a#0#0#0@@2|)) |##MapSpecMod.Input.GetInput|))
 :qid |MapSpecsdfy.17:29|
 :skolemid |2077|
 :pattern ( (|#MapSpecMod.Input.GetInput| |a#0#0#0@@2|))
)))
(assert (forall ((d@@41 T@U) ) (!  (=> (= (type d@@41) DatatypeTypeType) (= (MapSpecMod.Input.GetInput_q d@@41) (= (DatatypeCtorId d@@41) |##MapSpecMod.Input.GetInput|)))
 :qid |unknown.0:0|
 :skolemid |2078|
 :pattern ( (MapSpecMod.Input.GetInput_q d@@41))
)))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) (MapSpecMod.Input.GetInput_q d@@42)) (exists ((|a#1#0#0@@2| T@U) ) (!  (and (= (type |a#1#0#0@@2|) (SeqType BoxType)) (= d@@42 (|#MapSpecMod.Input.GetInput| |a#1#0#0@@2|)))
 :qid |MapSpecsdfy.17:29|
 :skolemid |2079|
 :no-pattern (type |a#1#0#0@@2|)
 :no-pattern (U_2_int |a#1#0#0@@2|)
 :no-pattern (U_2_bool |a#1#0#0@@2|)
)))
 :qid |unknown.0:0|
 :skolemid |2080|
 :pattern ( (MapSpecMod.Input.GetInput_q d@@42))
)))
(assert (= (type Tclass.MapSpecMod.Input) TyType))
(assert (= (Tag Tclass.MapSpecMod.Input) Tagclass.MapSpecMod.Input))
(assert (= (TagFamily Tclass.MapSpecMod.Input) tytagFamily$Input))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.MapSpecMod.Input)) (and (= ($Box ($Unbox DatatypeTypeType bx@@148)) bx@@148) ($Is ($Unbox DatatypeTypeType bx@@148) Tclass.MapSpecMod.Input)))
 :qid |unknown.0:0|
 :skolemid |2081|
 :pattern ( ($IsBox bx@@148 Tclass.MapSpecMod.Input))
)))
(assert (forall ((|a#2#0#0@@2| T@U) ) (!  (=> (= (type |a#2#0#0@@2|) (SeqType BoxType)) (= ($Is (|#MapSpecMod.Input.GetInput| |a#2#0#0@@2|) Tclass.MapSpecMod.Input) ($Is |a#2#0#0@@2| Tclass.KeyType.Key)))
 :qid |MapSpecsdfy.17:29|
 :skolemid |2082|
 :pattern ( ($Is (|#MapSpecMod.Input.GetInput| |a#2#0#0@@2|) Tclass.MapSpecMod.Input))
)))
(assert (forall ((|a#3#0#0@@2| T@U) ($h@@88 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@2|) (SeqType BoxType)) (= (type $h@@88) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@88)) (= ($IsAlloc (|#MapSpecMod.Input.GetInput| |a#3#0#0@@2|) Tclass.MapSpecMod.Input $h@@88) ($IsAlloc |a#3#0#0@@2| Tclass.KeyType.Key $h@@88)))
 :qid |MapSpecsdfy.17:29|
 :skolemid |2083|
 :pattern ( ($IsAlloc (|#MapSpecMod.Input.GetInput| |a#3#0#0@@2|) Tclass.MapSpecMod.Input $h@@88))
)))
(assert (forall ((arg0@@456 T@U) ) (! (= (type (MapSpecMod.Input.key arg0@@456)) (SeqType BoxType))
 :qid |funType:MapSpecMod.Input.key|
 :pattern ( (MapSpecMod.Input.key arg0@@456))
)))
(assert (forall ((d@@43 T@U) ($h@@89 T@U) ) (!  (=> (and (and (= (type d@@43) DatatypeTypeType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@89) (and (MapSpecMod.Input.GetInput_q d@@43) ($IsAlloc d@@43 Tclass.MapSpecMod.Input $h@@89)))) ($IsAlloc (MapSpecMod.Input.key d@@43) Tclass.KeyType.Key $h@@89))
 :qid |unknown.0:0|
 :skolemid |2084|
 :pattern ( ($IsAlloc (MapSpecMod.Input.key d@@43) Tclass.KeyType.Key $h@@89))
)))
(assert (forall ((|a#4#0#0@@2| T@U) ) (!  (=> (= (type |a#4#0#0@@2|) (SeqType BoxType)) (= (|#MapSpecMod.Input.GetInput| (Lit |a#4#0#0@@2|)) (Lit (|#MapSpecMod.Input.GetInput| |a#4#0#0@@2|))))
 :qid |MapSpecsdfy.17:29|
 :skolemid |2085|
 :pattern ( (|#MapSpecMod.Input.GetInput| (Lit |a#4#0#0@@2|)))
)))
(assert (forall ((|a#5#0#0@@3| T@U) ) (!  (=> (= (type |a#5#0#0@@3|) (SeqType BoxType)) (= (MapSpecMod.Input.key (|#MapSpecMod.Input.GetInput| |a#5#0#0@@3|)) |a#5#0#0@@3|))
 :qid |MapSpecsdfy.17:29|
 :skolemid |2086|
 :pattern ( (|#MapSpecMod.Input.GetInput| |a#5#0#0@@3|))
)))
(assert (forall ((arg0@@457 T@U) (arg1@@188 T@U) ) (! (= (type (|#MapSpecMod.Input.PutInput| arg0@@457 arg1@@188)) DatatypeTypeType)
 :qid |funType:#MapSpecMod.Input.PutInput|
 :pattern ( (|#MapSpecMod.Input.PutInput| arg0@@457 arg1@@188))
)))
(assert (forall ((|a#6#0#0@@3| T@U) (|a#6#1#0@@1| T@U) ) (!  (=> (and (= (type |a#6#0#0@@3|) (SeqType BoxType)) (= (type |a#6#1#0@@1|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpecMod.Input.PutInput| |a#6#0#0@@3| |a#6#1#0@@1|)) |##MapSpecMod.Input.PutInput|))
 :qid |MapSpecsdfy.17:50|
 :skolemid |2087|
 :pattern ( (|#MapSpecMod.Input.PutInput| |a#6#0#0@@3| |a#6#1#0@@1|))
)))
(assert (forall ((d@@44 T@U) ) (!  (=> (= (type d@@44) DatatypeTypeType) (= (MapSpecMod.Input.PutInput_q d@@44) (= (DatatypeCtorId d@@44) |##MapSpecMod.Input.PutInput|)))
 :qid |unknown.0:0|
 :skolemid |2088|
 :pattern ( (MapSpecMod.Input.PutInput_q d@@44))
)))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (MapSpecMod.Input.PutInput_q d@@45)) (exists ((|a#7#0#0@@3| T@U) (|a#7#1#0@@1| T@U) ) (!  (and (and (= (type |a#7#0#0@@3|) (SeqType BoxType)) (= (type |a#7#1#0@@1|) (SeqType BoxType))) (= d@@45 (|#MapSpecMod.Input.PutInput| |a#7#0#0@@3| |a#7#1#0@@1|)))
 :qid |MapSpecsdfy.17:50|
 :skolemid |2089|
 :no-pattern (type |a#7#0#0@@3|)
 :no-pattern (type |a#7#1#0@@1|)
 :no-pattern (U_2_int |a#7#0#0@@3|)
 :no-pattern (U_2_bool |a#7#0#0@@3|)
 :no-pattern (U_2_int |a#7#1#0@@1|)
 :no-pattern (U_2_bool |a#7#1#0@@1|)
)))
 :qid |unknown.0:0|
 :skolemid |2090|
 :pattern ( (MapSpecMod.Input.PutInput_q d@@45))
)))
(assert (forall ((|a#8#0#0@@3| T@U) (|a#8#1#0@@1| T@U) ) (!  (=> (and (= (type |a#8#0#0@@3|) (SeqType BoxType)) (= (type |a#8#1#0@@1|) (SeqType BoxType))) (= ($Is (|#MapSpecMod.Input.PutInput| |a#8#0#0@@3| |a#8#1#0@@1|) Tclass.MapSpecMod.Input)  (and ($Is |a#8#0#0@@3| Tclass.KeyType.Key) ($Is |a#8#1#0@@1| Tclass.ValueType.Value))))
 :qid |MapSpecsdfy.17:50|
 :skolemid |2091|
 :pattern ( ($Is (|#MapSpecMod.Input.PutInput| |a#8#0#0@@3| |a#8#1#0@@1|) Tclass.MapSpecMod.Input))
)))
(assert (forall ((|a#9#0#0@@1| T@U) (|a#9#1#0| T@U) ($h@@90 T@U) ) (!  (=> (and (and (and (= (type |a#9#0#0@@1|) (SeqType BoxType)) (= (type |a#9#1#0|) (SeqType BoxType))) (= (type $h@@90) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@90)) (= ($IsAlloc (|#MapSpecMod.Input.PutInput| |a#9#0#0@@1| |a#9#1#0|) Tclass.MapSpecMod.Input $h@@90)  (and ($IsAlloc |a#9#0#0@@1| Tclass.KeyType.Key $h@@90) ($IsAlloc |a#9#1#0| Tclass.ValueType.Value $h@@90))))
 :qid |MapSpecsdfy.17:50|
 :skolemid |2092|
 :pattern ( ($IsAlloc (|#MapSpecMod.Input.PutInput| |a#9#0#0@@1| |a#9#1#0|) Tclass.MapSpecMod.Input $h@@90))
)))
(assert (forall ((d@@46 T@U) ($h@@91 T@U) ) (!  (=> (and (and (= (type d@@46) DatatypeTypeType) (= (type $h@@91) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@91) (and (MapSpecMod.Input.PutInput_q d@@46) ($IsAlloc d@@46 Tclass.MapSpecMod.Input $h@@91)))) ($IsAlloc (MapSpecMod.Input.key d@@46) Tclass.KeyType.Key $h@@91))
 :qid |unknown.0:0|
 :skolemid |2093|
 :pattern ( ($IsAlloc (MapSpecMod.Input.key d@@46) Tclass.KeyType.Key $h@@91))
)))
(assert (forall ((arg0@@458 T@U) ) (! (= (type (MapSpecMod.Input.value arg0@@458)) (SeqType BoxType))
 :qid |funType:MapSpecMod.Input.value|
 :pattern ( (MapSpecMod.Input.value arg0@@458))
)))
(assert (forall ((d@@47 T@U) ($h@@92 T@U) ) (!  (=> (and (and (= (type d@@47) DatatypeTypeType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@92) (and (MapSpecMod.Input.PutInput_q d@@47) ($IsAlloc d@@47 Tclass.MapSpecMod.Input $h@@92)))) ($IsAlloc (MapSpecMod.Input.value d@@47) Tclass.ValueType.Value $h@@92))
 :qid |unknown.0:0|
 :skolemid |2094|
 :pattern ( ($IsAlloc (MapSpecMod.Input.value d@@47) Tclass.ValueType.Value $h@@92))
)))
(assert (forall ((|a#10#0#0@@1| T@U) (|a#10#1#0| T@U) ) (!  (=> (and (= (type |a#10#0#0@@1|) (SeqType BoxType)) (= (type |a#10#1#0|) (SeqType BoxType))) (= (|#MapSpecMod.Input.PutInput| (Lit |a#10#0#0@@1|) (Lit |a#10#1#0|)) (Lit (|#MapSpecMod.Input.PutInput| |a#10#0#0@@1| |a#10#1#0|))))
 :qid |MapSpecsdfy.17:50|
 :skolemid |2095|
 :pattern ( (|#MapSpecMod.Input.PutInput| (Lit |a#10#0#0@@1|) (Lit |a#10#1#0|)))
)))
(assert (forall ((|a#11#0#0@@1| T@U) (|a#11#1#0| T@U) ) (!  (=> (and (= (type |a#11#0#0@@1|) (SeqType BoxType)) (= (type |a#11#1#0|) (SeqType BoxType))) (= (MapSpecMod.Input.key (|#MapSpecMod.Input.PutInput| |a#11#0#0@@1| |a#11#1#0|)) |a#11#0#0@@1|))
 :qid |MapSpecsdfy.17:50|
 :skolemid |2096|
 :pattern ( (|#MapSpecMod.Input.PutInput| |a#11#0#0@@1| |a#11#1#0|))
)))
(assert (forall ((|a#12#0#0@@0| T@U) (|a#12#1#0| T@U) ) (!  (=> (and (= (type |a#12#0#0@@0|) (SeqType BoxType)) (= (type |a#12#1#0|) (SeqType BoxType))) (= (MapSpecMod.Input.value (|#MapSpecMod.Input.PutInput| |a#12#0#0@@0| |a#12#1#0|)) |a#12#1#0|))
 :qid |MapSpecsdfy.17:50|
 :skolemid |2097|
 :pattern ( (|#MapSpecMod.Input.PutInput| |a#12#0#0@@0| |a#12#1#0|))
)))
(assert (= (type |#MapSpecMod.Input.NoopInput|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpecMod.Input.NoopInput|) |##MapSpecMod.Input.NoopInput|))
(assert (forall ((d@@48 T@U) ) (!  (=> (= (type d@@48) DatatypeTypeType) (= (MapSpecMod.Input.NoopInput_q d@@48) (= (DatatypeCtorId d@@48) |##MapSpecMod.Input.NoopInput|)))
 :qid |unknown.0:0|
 :skolemid |2098|
 :pattern ( (MapSpecMod.Input.NoopInput_q d@@48))
)))
(assert (forall ((d@@49 T@U) ) (!  (=> (and (= (type d@@49) DatatypeTypeType) (MapSpecMod.Input.NoopInput_q d@@49)) (= d@@49 |#MapSpecMod.Input.NoopInput|))
 :qid |unknown.0:0|
 :skolemid |2099|
 :pattern ( (MapSpecMod.Input.NoopInput_q d@@49))
)))
(assert ($Is |#MapSpecMod.Input.NoopInput| Tclass.MapSpecMod.Input))
(assert (forall (($h@@93 T@U) ) (!  (=> (and (= (type $h@@93) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@93)) ($IsAlloc |#MapSpecMod.Input.NoopInput| Tclass.MapSpecMod.Input $h@@93))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |2100|
 :pattern ( ($IsAlloc |#MapSpecMod.Input.NoopInput| Tclass.MapSpecMod.Input $h@@93))
)))
(assert (= |#MapSpecMod.Input.NoopInput| (Lit |#MapSpecMod.Input.NoopInput|)))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (|$IsA#MapSpecMod.Input| d@@50)) (or (or (MapSpecMod.Input.GetInput_q d@@50) (MapSpecMod.Input.PutInput_q d@@50)) (MapSpecMod.Input.NoopInput_q d@@50)))
 :qid |unknown.0:0|
 :skolemid |2101|
 :pattern ( (|$IsA#MapSpecMod.Input| d@@50))
)))
(assert (forall ((d@@51 T@U) ) (!  (=> (and (= (type d@@51) DatatypeTypeType) ($Is d@@51 Tclass.MapSpecMod.Input)) (or (or (MapSpecMod.Input.GetInput_q d@@51) (MapSpecMod.Input.PutInput_q d@@51)) (MapSpecMod.Input.NoopInput_q d@@51)))
 :qid |unknown.0:0|
 :skolemid |2102|
 :pattern ( (MapSpecMod.Input.NoopInput_q d@@51) ($Is d@@51 Tclass.MapSpecMod.Input))
 :pattern ( (MapSpecMod.Input.PutInput_q d@@51) ($Is d@@51 Tclass.MapSpecMod.Input))
 :pattern ( (MapSpecMod.Input.GetInput_q d@@51) ($Is d@@51 Tclass.MapSpecMod.Input))
)))
(assert (forall ((a@@128 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@128) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (MapSpecMod.Input.GetInput_q a@@128) (MapSpecMod.Input.GetInput_q b@@77))) (= (|MapSpecMod.Input#Equal| a@@128 b@@77) (|Seq#Equal| (MapSpecMod.Input.key a@@128) (MapSpecMod.Input.key b@@77))))
 :qid |unknown.0:0|
 :skolemid |2103|
 :pattern ( (|MapSpecMod.Input#Equal| a@@128 b@@77) (MapSpecMod.Input.GetInput_q a@@128))
 :pattern ( (|MapSpecMod.Input#Equal| a@@128 b@@77) (MapSpecMod.Input.GetInput_q b@@77))
)))
(assert (forall ((a@@129 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@129) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (MapSpecMod.Input.PutInput_q a@@129) (MapSpecMod.Input.PutInput_q b@@78))) (= (|MapSpecMod.Input#Equal| a@@129 b@@78)  (and (|Seq#Equal| (MapSpecMod.Input.key a@@129) (MapSpecMod.Input.key b@@78)) (|Seq#Equal| (MapSpecMod.Input.value a@@129) (MapSpecMod.Input.value b@@78)))))
 :qid |unknown.0:0|
 :skolemid |2104|
 :pattern ( (|MapSpecMod.Input#Equal| a@@129 b@@78) (MapSpecMod.Input.PutInput_q a@@129))
 :pattern ( (|MapSpecMod.Input#Equal| a@@129 b@@78) (MapSpecMod.Input.PutInput_q b@@78))
)))
(assert (forall ((a@@130 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (MapSpecMod.Input.NoopInput_q a@@130) (MapSpecMod.Input.NoopInput_q b@@79))) (= (|MapSpecMod.Input#Equal| a@@130 b@@79) true))
 :qid |unknown.0:0|
 :skolemid |2105|
 :pattern ( (|MapSpecMod.Input#Equal| a@@130 b@@79) (MapSpecMod.Input.NoopInput_q a@@130))
 :pattern ( (|MapSpecMod.Input#Equal| a@@130 b@@79) (MapSpecMod.Input.NoopInput_q b@@79))
)))
(assert (forall ((a@@131 T@U) (b@@80 T@U) ) (!  (=> (and (= (type a@@131) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (= (|MapSpecMod.Input#Equal| a@@131 b@@80) (= a@@131 b@@80)))
 :qid |unknown.0:0|
 :skolemid |2106|
 :pattern ( (|MapSpecMod.Input#Equal| a@@131 b@@80))
)))
(assert (forall ((arg0@@459 T@U) ) (! (= (type (|#MapSpecMod.Output.GetOutput| arg0@@459)) DatatypeTypeType)
 :qid |funType:#MapSpecMod.Output.GetOutput|
 :pattern ( (|#MapSpecMod.Output.GetOutput| arg0@@459))
)))
(assert (forall ((|a#18#0#0@@0| T@U) ) (!  (=> (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#MapSpecMod.Output.GetOutput| |a#18#0#0@@0|)) |##MapSpecMod.Output.GetOutput|))
 :qid |MapSpecsdfy.18:31|
 :skolemid |2107|
 :pattern ( (|#MapSpecMod.Output.GetOutput| |a#18#0#0@@0|))
)))
(assert (forall ((d@@52 T@U) ) (!  (=> (= (type d@@52) DatatypeTypeType) (= (MapSpecMod.Output.GetOutput_q d@@52) (= (DatatypeCtorId d@@52) |##MapSpecMod.Output.GetOutput|)))
 :qid |unknown.0:0|
 :skolemid |2108|
 :pattern ( (MapSpecMod.Output.GetOutput_q d@@52))
)))
(assert (forall ((d@@53 T@U) ) (!  (=> (and (= (type d@@53) DatatypeTypeType) (MapSpecMod.Output.GetOutput_q d@@53)) (exists ((|a#19#0#0@@0| T@U) ) (!  (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= d@@53 (|#MapSpecMod.Output.GetOutput| |a#19#0#0@@0|)))
 :qid |MapSpecsdfy.18:31|
 :skolemid |2109|
 :no-pattern (type |a#19#0#0@@0|)
 :no-pattern (U_2_int |a#19#0#0@@0|)
 :no-pattern (U_2_bool |a#19#0#0@@0|)
)))
 :qid |unknown.0:0|
 :skolemid |2110|
 :pattern ( (MapSpecMod.Output.GetOutput_q d@@53))
)))
(assert (= (type Tclass.MapSpecMod.Output) TyType))
(assert (= (Tag Tclass.MapSpecMod.Output) Tagclass.MapSpecMod.Output))
(assert (= (TagFamily Tclass.MapSpecMod.Output) tytagFamily$Output))
(assert (forall ((bx@@149 T@U) ) (!  (=> (and (= (type bx@@149) BoxType) ($IsBox bx@@149 Tclass.MapSpecMod.Output)) (and (= ($Box ($Unbox DatatypeTypeType bx@@149)) bx@@149) ($Is ($Unbox DatatypeTypeType bx@@149) Tclass.MapSpecMod.Output)))
 :qid |unknown.0:0|
 :skolemid |2111|
 :pattern ( ($IsBox bx@@149 Tclass.MapSpecMod.Output))
)))
(assert (forall ((|a#20#0#0@@0| T@U) ) (!  (=> (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= ($Is (|#MapSpecMod.Output.GetOutput| |a#20#0#0@@0|) Tclass.MapSpecMod.Output) ($Is |a#20#0#0@@0| Tclass.ValueType.Value)))
 :qid |MapSpecsdfy.18:31|
 :skolemid |2112|
 :pattern ( ($Is (|#MapSpecMod.Output.GetOutput| |a#20#0#0@@0|) Tclass.MapSpecMod.Output))
)))
(assert (forall ((|a#21#0#0@@0| T@U) ($h@@94 T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (type $h@@94) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@94)) (= ($IsAlloc (|#MapSpecMod.Output.GetOutput| |a#21#0#0@@0|) Tclass.MapSpecMod.Output $h@@94) ($IsAlloc |a#21#0#0@@0| Tclass.ValueType.Value $h@@94)))
 :qid |MapSpecsdfy.18:31|
 :skolemid |2113|
 :pattern ( ($IsAlloc (|#MapSpecMod.Output.GetOutput| |a#21#0#0@@0|) Tclass.MapSpecMod.Output $h@@94))
)))
(assert (forall ((arg0@@460 T@U) ) (! (= (type (MapSpecMod.Output.value arg0@@460)) (SeqType BoxType))
 :qid |funType:MapSpecMod.Output.value|
 :pattern ( (MapSpecMod.Output.value arg0@@460))
)))
(assert (forall ((d@@54 T@U) ($h@@95 T@U) ) (!  (=> (and (and (= (type d@@54) DatatypeTypeType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@95) (and (MapSpecMod.Output.GetOutput_q d@@54) ($IsAlloc d@@54 Tclass.MapSpecMod.Output $h@@95)))) ($IsAlloc (MapSpecMod.Output.value d@@54) Tclass.ValueType.Value $h@@95))
 :qid |unknown.0:0|
 :skolemid |2114|
 :pattern ( ($IsAlloc (MapSpecMod.Output.value d@@54) Tclass.ValueType.Value $h@@95))
)))
(assert (forall ((|a#22#0#0@@0| T@U) ) (!  (=> (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (|#MapSpecMod.Output.GetOutput| (Lit |a#22#0#0@@0|)) (Lit (|#MapSpecMod.Output.GetOutput| |a#22#0#0@@0|))))
 :qid |MapSpecsdfy.18:31|
 :skolemid |2115|
 :pattern ( (|#MapSpecMod.Output.GetOutput| (Lit |a#22#0#0@@0|)))
)))
(assert (forall ((|a#23#0#0| T@U) ) (!  (=> (= (type |a#23#0#0|) (SeqType BoxType)) (= (MapSpecMod.Output.value (|#MapSpecMod.Output.GetOutput| |a#23#0#0|)) |a#23#0#0|))
 :qid |MapSpecsdfy.18:31|
 :skolemid |2116|
 :pattern ( (|#MapSpecMod.Output.GetOutput| |a#23#0#0|))
)))
(assert (= (type |#MapSpecMod.Output.PutOutput|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpecMod.Output.PutOutput|) |##MapSpecMod.Output.PutOutput|))
(assert (forall ((d@@55 T@U) ) (!  (=> (= (type d@@55) DatatypeTypeType) (= (MapSpecMod.Output.PutOutput_q d@@55) (= (DatatypeCtorId d@@55) |##MapSpecMod.Output.PutOutput|)))
 :qid |unknown.0:0|
 :skolemid |2117|
 :pattern ( (MapSpecMod.Output.PutOutput_q d@@55))
)))
(assert (forall ((d@@56 T@U) ) (!  (=> (and (= (type d@@56) DatatypeTypeType) (MapSpecMod.Output.PutOutput_q d@@56)) (= d@@56 |#MapSpecMod.Output.PutOutput|))
 :qid |unknown.0:0|
 :skolemid |2118|
 :pattern ( (MapSpecMod.Output.PutOutput_q d@@56))
)))
(assert ($Is |#MapSpecMod.Output.PutOutput| Tclass.MapSpecMod.Output))
(assert (forall (($h@@96 T@U) ) (!  (=> (and (= (type $h@@96) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@96)) ($IsAlloc |#MapSpecMod.Output.PutOutput| Tclass.MapSpecMod.Output $h@@96))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |2119|
 :pattern ( ($IsAlloc |#MapSpecMod.Output.PutOutput| Tclass.MapSpecMod.Output $h@@96))
)))
(assert (= |#MapSpecMod.Output.PutOutput| (Lit |#MapSpecMod.Output.PutOutput|)))
(assert (= (type |#MapSpecMod.Output.NoopOutput|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpecMod.Output.NoopOutput|) |##MapSpecMod.Output.NoopOutput|))
(assert (forall ((d@@57 T@U) ) (!  (=> (= (type d@@57) DatatypeTypeType) (= (MapSpecMod.Output.NoopOutput_q d@@57) (= (DatatypeCtorId d@@57) |##MapSpecMod.Output.NoopOutput|)))
 :qid |unknown.0:0|
 :skolemid |2120|
 :pattern ( (MapSpecMod.Output.NoopOutput_q d@@57))
)))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) (MapSpecMod.Output.NoopOutput_q d@@58)) (= d@@58 |#MapSpecMod.Output.NoopOutput|))
 :qid |unknown.0:0|
 :skolemid |2121|
 :pattern ( (MapSpecMod.Output.NoopOutput_q d@@58))
)))
(assert ($Is |#MapSpecMod.Output.NoopOutput| Tclass.MapSpecMod.Output))
(assert (forall (($h@@97 T@U) ) (!  (=> (and (= (type $h@@97) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@97)) ($IsAlloc |#MapSpecMod.Output.NoopOutput| Tclass.MapSpecMod.Output $h@@97))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |2122|
 :pattern ( ($IsAlloc |#MapSpecMod.Output.NoopOutput| Tclass.MapSpecMod.Output $h@@97))
)))
(assert (= |#MapSpecMod.Output.NoopOutput| (Lit |#MapSpecMod.Output.NoopOutput|)))
(assert (forall ((d@@59 T@U) ) (!  (=> (and (= (type d@@59) DatatypeTypeType) (|$IsA#MapSpecMod.Output| d@@59)) (or (or (MapSpecMod.Output.GetOutput_q d@@59) (MapSpecMod.Output.PutOutput_q d@@59)) (MapSpecMod.Output.NoopOutput_q d@@59)))
 :qid |unknown.0:0|
 :skolemid |2123|
 :pattern ( (|$IsA#MapSpecMod.Output| d@@59))
)))
(assert (forall ((d@@60 T@U) ) (!  (=> (and (= (type d@@60) DatatypeTypeType) ($Is d@@60 Tclass.MapSpecMod.Output)) (or (or (MapSpecMod.Output.GetOutput_q d@@60) (MapSpecMod.Output.PutOutput_q d@@60)) (MapSpecMod.Output.NoopOutput_q d@@60)))
 :qid |unknown.0:0|
 :skolemid |2124|
 :pattern ( (MapSpecMod.Output.NoopOutput_q d@@60) ($Is d@@60 Tclass.MapSpecMod.Output))
 :pattern ( (MapSpecMod.Output.PutOutput_q d@@60) ($Is d@@60 Tclass.MapSpecMod.Output))
 :pattern ( (MapSpecMod.Output.GetOutput_q d@@60) ($Is d@@60 Tclass.MapSpecMod.Output))
)))
(assert (forall ((a@@132 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (MapSpecMod.Output.GetOutput_q a@@132) (MapSpecMod.Output.GetOutput_q b@@81))) (= (|MapSpecMod.Output#Equal| a@@132 b@@81) (|Seq#Equal| (MapSpecMod.Output.value a@@132) (MapSpecMod.Output.value b@@81))))
 :qid |unknown.0:0|
 :skolemid |2125|
 :pattern ( (|MapSpecMod.Output#Equal| a@@132 b@@81) (MapSpecMod.Output.GetOutput_q a@@132))
 :pattern ( (|MapSpecMod.Output#Equal| a@@132 b@@81) (MapSpecMod.Output.GetOutput_q b@@81))
)))
(assert (forall ((a@@133 T@U) (b@@82 T@U) ) (!  (=> (and (and (= (type a@@133) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (MapSpecMod.Output.PutOutput_q a@@133) (MapSpecMod.Output.PutOutput_q b@@82))) (= (|MapSpecMod.Output#Equal| a@@133 b@@82) true))
 :qid |unknown.0:0|
 :skolemid |2126|
 :pattern ( (|MapSpecMod.Output#Equal| a@@133 b@@82) (MapSpecMod.Output.PutOutput_q a@@133))
 :pattern ( (|MapSpecMod.Output#Equal| a@@133 b@@82) (MapSpecMod.Output.PutOutput_q b@@82))
)))
(assert (forall ((a@@134 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) (and (MapSpecMod.Output.NoopOutput_q a@@134) (MapSpecMod.Output.NoopOutput_q b@@83))) (= (|MapSpecMod.Output#Equal| a@@134 b@@83) true))
 :qid |unknown.0:0|
 :skolemid |2127|
 :pattern ( (|MapSpecMod.Output#Equal| a@@134 b@@83) (MapSpecMod.Output.NoopOutput_q a@@134))
 :pattern ( (|MapSpecMod.Output#Equal| a@@134 b@@83) (MapSpecMod.Output.NoopOutput_q b@@83))
)))
(assert (forall ((a@@135 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (= (|MapSpecMod.Output#Equal| a@@135 b@@84) (= a@@135 b@@84)))
 :qid |unknown.0:0|
 :skolemid |2128|
 :pattern ( (|MapSpecMod.Output#Equal| a@@135 b@@84))
)))
(assert (forall ((|a#34#0#0| T@U) ) (!  (=> (= (type |a#34#0#0|) (IMapType BoxType BoxType)) (= (DatatypeCtorId (|#MapSpecMod.Variables.Variables| |a#34#0#0|)) |##MapSpecMod.Variables.Variables|))
 :qid |MapSpecsdfy.21:34|
 :skolemid |2129|
 :pattern ( (|#MapSpecMod.Variables.Variables| |a#34#0#0|))
)))
(assert (forall ((d@@61 T@U) ) (!  (=> (= (type d@@61) DatatypeTypeType) (= (MapSpecMod.Variables.Variables_q d@@61) (= (DatatypeCtorId d@@61) |##MapSpecMod.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |2130|
 :pattern ( (MapSpecMod.Variables.Variables_q d@@61))
)))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) (MapSpecMod.Variables.Variables_q d@@62)) (exists ((|a#35#0#0| T@U) ) (!  (and (= (type |a#35#0#0|) (IMapType BoxType BoxType)) (= d@@62 (|#MapSpecMod.Variables.Variables| |a#35#0#0|)))
 :qid |MapSpecsdfy.21:34|
 :skolemid |2131|
 :no-pattern (type |a#35#0#0|)
 :no-pattern (U_2_int |a#35#0#0|)
 :no-pattern (U_2_bool |a#35#0#0|)
)))
 :qid |unknown.0:0|
 :skolemid |2132|
 :pattern ( (MapSpecMod.Variables.Variables_q d@@62))
)))
(assert (= (type Tclass.MapSpecMod.Variables) TyType))
(assert (= (Tag Tclass.MapSpecMod.Variables) Tagclass.MapSpecMod.Variables))
(assert (= (TagFamily Tclass.MapSpecMod.Variables) tytagFamily$Variables))
(assert (forall ((bx@@150 T@U) ) (!  (=> (and (= (type bx@@150) BoxType) ($IsBox bx@@150 Tclass.MapSpecMod.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@150)) bx@@150) ($Is ($Unbox DatatypeTypeType bx@@150) Tclass.MapSpecMod.Variables)))
 :qid |unknown.0:0|
 :skolemid |2133|
 :pattern ( ($IsBox bx@@150 Tclass.MapSpecMod.Variables))
)))
(assert (forall ((|a#36#0#0| T@U) ) (!  (=> (= (type |a#36#0#0|) (IMapType BoxType BoxType)) (= ($Is (|#MapSpecMod.Variables.Variables| |a#36#0#0|) Tclass.MapSpecMod.Variables) ($Is |a#36#0#0| Tclass.TotalKMMapMod.TotalMap)))
 :qid |MapSpecsdfy.21:34|
 :skolemid |2134|
 :pattern ( ($Is (|#MapSpecMod.Variables.Variables| |a#36#0#0|) Tclass.MapSpecMod.Variables))
)))
(assert (forall ((|a#37#0#0| T@U) ($h@@98 T@U) ) (!  (=> (and (and (= (type |a#37#0#0|) (IMapType BoxType BoxType)) (= (type $h@@98) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@98)) (= ($IsAlloc (|#MapSpecMod.Variables.Variables| |a#37#0#0|) Tclass.MapSpecMod.Variables $h@@98) ($IsAlloc |a#37#0#0| Tclass.TotalKMMapMod.TotalMap $h@@98)))
 :qid |MapSpecsdfy.21:34|
 :skolemid |2135|
 :pattern ( ($IsAlloc (|#MapSpecMod.Variables.Variables| |a#37#0#0|) Tclass.MapSpecMod.Variables $h@@98))
)))
(assert (forall ((arg0@@461 T@U) ) (! (= (type (MapSpecMod.Variables.kmmap arg0@@461)) (IMapType BoxType BoxType))
 :qid |funType:MapSpecMod.Variables.kmmap|
 :pattern ( (MapSpecMod.Variables.kmmap arg0@@461))
)))
(assert (forall ((d@@63 T@U) ($h@@99 T@U) ) (!  (=> (and (and (= (type d@@63) DatatypeTypeType) (= (type $h@@99) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@99) (and (MapSpecMod.Variables.Variables_q d@@63) ($IsAlloc d@@63 Tclass.MapSpecMod.Variables $h@@99)))) ($IsAlloc (MapSpecMod.Variables.kmmap d@@63) Tclass.TotalKMMapMod.TotalMap $h@@99))
 :qid |unknown.0:0|
 :skolemid |2136|
 :pattern ( ($IsAlloc (MapSpecMod.Variables.kmmap d@@63) Tclass.TotalKMMapMod.TotalMap $h@@99))
)))
(assert (forall ((|a#38#0#0| T@U) ) (!  (=> (= (type |a#38#0#0|) (IMapType BoxType BoxType)) (= (|#MapSpecMod.Variables.Variables| (Lit |a#38#0#0|)) (Lit (|#MapSpecMod.Variables.Variables| |a#38#0#0|))))
 :qid |MapSpecsdfy.21:34|
 :skolemid |2137|
 :pattern ( (|#MapSpecMod.Variables.Variables| (Lit |a#38#0#0|)))
)))
(assert (forall ((|a#39#0#0| T@U) ) (!  (=> (= (type |a#39#0#0|) (IMapType BoxType BoxType)) (= (MapSpecMod.Variables.kmmap (|#MapSpecMod.Variables.Variables| |a#39#0#0|)) |a#39#0#0|))
 :qid |MapSpecsdfy.21:34|
 :skolemid |2138|
 :pattern ( (|#MapSpecMod.Variables.Variables| |a#39#0#0|))
)))
(assert (forall ((d@@64 T@U) ) (!  (=> (and (= (type d@@64) DatatypeTypeType) (|$IsA#MapSpecMod.Variables| d@@64)) (MapSpecMod.Variables.Variables_q d@@64))
 :qid |unknown.0:0|
 :skolemid |2139|
 :pattern ( (|$IsA#MapSpecMod.Variables| d@@64))
)))
(assert (forall ((d@@65 T@U) ) (!  (=> (and (= (type d@@65) DatatypeTypeType) ($Is d@@65 Tclass.MapSpecMod.Variables)) (MapSpecMod.Variables.Variables_q d@@65))
 :qid |unknown.0:0|
 :skolemid |2140|
 :pattern ( (MapSpecMod.Variables.Variables_q d@@65) ($Is d@@65 Tclass.MapSpecMod.Variables))
)))
(assert (forall ((a@@136 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) true) (= (|MapSpecMod.Variables#Equal| a@@136 b@@85) (|IMap#Equal| (MapSpecMod.Variables.kmmap a@@136) (MapSpecMod.Variables.kmmap b@@85))))
 :qid |unknown.0:0|
 :skolemid |2141|
 :pattern ( (|MapSpecMod.Variables#Equal| a@@136 b@@85))
)))
(assert (forall ((a@@137 T@U) (b@@86 T@U) ) (!  (=> (and (= (type a@@137) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (= (|MapSpecMod.Variables#Equal| a@@137 b@@86) (= a@@137 b@@86)))
 :qid |unknown.0:0|
 :skolemid |2142|
 :pattern ( (|MapSpecMod.Variables#Equal| a@@137 b@@86))
)))
(assert (= (type Tclass.MapSpecMod.__default) TyType))
(assert (= (Tag Tclass.MapSpecMod.__default) Tagclass.MapSpecMod.__default))
(assert (= (TagFamily Tclass.MapSpecMod.__default) tytagFamily$_default))
(assert (forall ((bx@@151 T@U) ) (!  (=> (and (= (type bx@@151) BoxType) ($IsBox bx@@151 Tclass.MapSpecMod.__default)) (and (= ($Box ($Unbox refType bx@@151)) bx@@151) ($Is ($Unbox refType bx@@151) Tclass.MapSpecMod.__default)))
 :qid |unknown.0:0|
 :skolemid |2143|
 :pattern ( ($IsBox bx@@151 Tclass.MapSpecMod.__default))
)))
(assert (forall (($o@@35 T@U) ) (!  (=> (= (type $o@@35) refType) (= ($Is $o@@35 Tclass.MapSpecMod.__default)  (or (= $o@@35 null) (= (dtype $o@@35) Tclass.MapSpecMod.__default))))
 :qid |unknown.0:0|
 :skolemid |2144|
 :pattern ( ($Is $o@@35 Tclass.MapSpecMod.__default))
)))
(assert (forall (($o@@36 T@U) ($h@@100 T@U) ) (!  (=> (and (= (type $o@@36) refType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@36 Tclass.MapSpecMod.__default $h@@100)  (or (= $o@@36 null) (U_2_bool (MapType1Select (MapType0Select $h@@100 $o@@36) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2145|
 :pattern ( ($IsAlloc $o@@36 Tclass.MapSpecMod.__default $h@@100))
)))
(assert (= (type MapSpecMod.__default.InitState) DatatypeTypeType))
(assert  (=> true (=> true ($Is MapSpecMod.__default.InitState Tclass.MapSpecMod.Variables))))
(assert (= |MapSpecMod.__default.InitState#requires| true))
(assert  (=> true (=> true (and |TotalKMMapMod.__default.EmptyTotalMap#canCall| (= MapSpecMod.__default.InitState (Lit (|#MapSpecMod.Variables.Variables| (Lit TotalKMMapMod.__default.EmptyTotalMap))))))))
(assert  (=> true (=> true (and |TotalKMMapMod.__default.EmptyTotalMap#canCall| (= MapSpecMod.__default.InitState (Lit (|#MapSpecMod.Variables.Variables| (Lit TotalKMMapMod.__default.EmptyTotalMap))))))))
(assert  (=> true (forall ((|v#0@@57| T@U) (|v'#0| T@U) (|key#0| T@U) (|value#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@57|) DatatypeTypeType) (= (type |v'#0|) DatatypeTypeType)) (= (type |key#0|) (SeqType BoxType))) (= (type |value#0@@6|) (SeqType BoxType))) (or (|MapSpecMod.__default.Query#canCall| |v#0@@57| |v'#0| |key#0| |value#0@@6|) (and (and (and ($Is |v#0@@57| Tclass.MapSpecMod.Variables) ($Is |v'#0| Tclass.MapSpecMod.Variables)) ($Is |key#0| Tclass.KeyType.Key)) ($Is |value#0@@6| Tclass.ValueType.Value)))) true)
 :qid |MapSpecsdfy.27:19|
 :skolemid |2146|
 :pattern ( (MapSpecMod.__default.Query |v#0@@57| |v'#0| |key#0| |value#0@@6|))
))))
(assert (forall ((|v#0@@58| T@U) (|v'#0@@0| T@U) (|key#0@@0| T@U) (|value#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@58|) DatatypeTypeType) (= (type |v'#0@@0|) DatatypeTypeType)) (= (type |key#0@@0|) (SeqType BoxType))) (= (type |value#0@@7|) (SeqType BoxType))) (and (and (and ($Is |v#0@@58| Tclass.MapSpecMod.Variables) ($Is |v'#0@@0| Tclass.MapSpecMod.Variables)) ($Is |key#0@@0| Tclass.KeyType.Key)) ($Is |value#0@@7| Tclass.ValueType.Value))) (= (|MapSpecMod.__default.Query#requires| |v#0@@58| |v'#0@@0| |key#0@@0| |value#0@@7|) true))
 :qid |MapSpecsdfy.27:19|
 :skolemid |2147|
 :pattern ( (|MapSpecMod.__default.Query#requires| |v#0@@58| |v'#0@@0| |key#0@@0| |value#0@@7|))
)))
(assert  (=> true (forall ((|v#0@@59| T@U) (|v'#0@@1| T@U) (|key#0@@1| T@U) (|value#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@59|) DatatypeTypeType) (= (type |v'#0@@1|) DatatypeTypeType)) (= (type |key#0@@1|) (SeqType BoxType))) (= (type |value#0@@8|) (SeqType BoxType))) (or (|MapSpecMod.__default.Query#canCall| |v#0@@59| |v'#0@@1| |key#0@@1| |value#0@@8|) (and (and (and ($Is |v#0@@59| Tclass.MapSpecMod.Variables) ($Is |v'#0@@1| Tclass.MapSpecMod.Variables)) ($Is |key#0@@1| Tclass.KeyType.Key)) ($Is |value#0@@8| Tclass.ValueType.Value)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpecMod.Variables.Variables_q |v#0@@59|) (=> (|Seq#Equal| |value#0@@8| (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (MapSpecMod.Variables.kmmap |v#0@@59|)) ($Box |key#0@@1|))))) (and (|$IsA#MapSpecMod.Variables| |v'#0@@1|) (|$IsA#MapSpecMod.Variables| |v#0@@59|))))) (= (MapSpecMod.__default.Query |v#0@@59| |v'#0@@1| |key#0@@1| |value#0@@8|)  (and true (and (|Seq#Equal| |value#0@@8| (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (MapSpecMod.Variables.kmmap |v#0@@59|)) ($Box |key#0@@1|))))) (|MapSpecMod.Variables#Equal| |v'#0@@1| |v#0@@59|))))))
 :qid |MapSpecsdfy.27:19|
 :skolemid |2148|
 :pattern ( (MapSpecMod.__default.Query |v#0@@59| |v'#0@@1| |key#0@@1| |value#0@@8|))
))))
(assert  (=> true (forall ((|v#0@@60| T@U) (|v'#0@@2| T@U) (|key#0@@2| T@U) (|value#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@60|) DatatypeTypeType) (= (type |v'#0@@2|) DatatypeTypeType)) (= (type |key#0@@2|) (SeqType BoxType))) (= (type |value#0@@9|) (SeqType BoxType))) (or (|MapSpecMod.__default.Query#canCall| (Lit |v#0@@60|) (Lit |v'#0@@2|) (Lit |key#0@@2|) (Lit |value#0@@9|)) (and (and (and ($Is |v#0@@60| Tclass.MapSpecMod.Variables) ($Is |v'#0@@2| Tclass.MapSpecMod.Variables)) ($Is |key#0@@2| Tclass.KeyType.Key)) ($Is |value#0@@9| Tclass.ValueType.Value)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpecMod.Variables.Variables_q (Lit |v#0@@60|)) (=> (|Seq#Equal| |value#0@@9| (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (MapSpecMod.Variables.kmmap (Lit |v#0@@60|)))) ($Box (Lit |key#0@@2|)))))) (and (|$IsA#MapSpecMod.Variables| (Lit |v'#0@@2|)) (|$IsA#MapSpecMod.Variables| (Lit |v#0@@60|)))))) (= (MapSpecMod.__default.Query (Lit |v#0@@60|) (Lit |v'#0@@2|) (Lit |key#0@@2|) (Lit |value#0@@9|))  (and true (and (|Seq#Equal| |value#0@@9| (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit (MapSpecMod.Variables.kmmap (Lit |v#0@@60|)))) ($Box (Lit |key#0@@2|)))))) (|MapSpecMod.Variables#Equal| |v'#0@@2| |v#0@@60|))))))
 :qid |MapSpecsdfy.27:19|
 :weight 3
 :skolemid |2149|
 :pattern ( (MapSpecMod.__default.Query (Lit |v#0@@60|) (Lit |v'#0@@2|) (Lit |key#0@@2|) (Lit |value#0@@9|)))
))))
(assert  (=> true (forall ((|v#0@@61| T@U) (|v'#0@@3| T@U) (|key#0@@3| T@U) (|value#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@61|) DatatypeTypeType) (= (type |v'#0@@3|) DatatypeTypeType)) (= (type |key#0@@3|) (SeqType BoxType))) (= (type |value#0@@10|) (SeqType BoxType))) (or (|MapSpecMod.__default.Put#canCall| |v#0@@61| |v'#0@@3| |key#0@@3| |value#0@@10|) (and (and (and ($Is |v#0@@61| Tclass.MapSpecMod.Variables) ($Is |v'#0@@3| Tclass.MapSpecMod.Variables)) ($Is |key#0@@3| Tclass.KeyType.Key)) ($Is |value#0@@10| Tclass.ValueType.Value)))) true)
 :qid |MapSpecsdfy.34:17|
 :skolemid |2150|
 :pattern ( (MapSpecMod.__default.Put |v#0@@61| |v'#0@@3| |key#0@@3| |value#0@@10|))
))))
(assert (forall ((|v#0@@62| T@U) (|v'#0@@4| T@U) (|key#0@@4| T@U) (|value#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@62|) DatatypeTypeType) (= (type |v'#0@@4|) DatatypeTypeType)) (= (type |key#0@@4|) (SeqType BoxType))) (= (type |value#0@@11|) (SeqType BoxType))) (and (and (and ($Is |v#0@@62| Tclass.MapSpecMod.Variables) ($Is |v'#0@@4| Tclass.MapSpecMod.Variables)) ($Is |key#0@@4| Tclass.KeyType.Key)) ($Is |value#0@@11| Tclass.ValueType.Value))) (= (|MapSpecMod.__default.Put#requires| |v#0@@62| |v'#0@@4| |key#0@@4| |value#0@@11|) true))
 :qid |MapSpecsdfy.34:17|
 :skolemid |2151|
 :pattern ( (|MapSpecMod.__default.Put#requires| |v#0@@62| |v'#0@@4| |key#0@@4| |value#0@@11|))
)))
(assert  (=> true (forall ((|v#0@@63| T@U) (|v'#0@@5| T@U) (|key#0@@5| T@U) (|value#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@63|) DatatypeTypeType) (= (type |v'#0@@5|) DatatypeTypeType)) (= (type |key#0@@5|) (SeqType BoxType))) (= (type |value#0@@12|) (SeqType BoxType))) (or (|MapSpecMod.__default.Put#canCall| |v#0@@63| |v'#0@@5| |key#0@@5| |value#0@@12|) (and (and (and ($Is |v#0@@63| Tclass.MapSpecMod.Variables) ($Is |v'#0@@5| Tclass.MapSpecMod.Variables)) ($Is |key#0@@5| Tclass.KeyType.Key)) ($Is |value#0@@12| Tclass.ValueType.Value)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (|$IsA#MapSpecMod.Variables| |v'#0@@5|) (|$IsA#MapSpecMod.Variables| (let ((|dt_update#kmmap#0#0| (|IMap#Build| (MapSpecMod.Variables.kmmap |v#0@@63|) ($Box |key#0@@5|) ($Box (|#ValueMessage.Message.Define| |value#0@@12|)))))
(|#MapSpecMod.Variables.Variables| |dt_update#kmmap#0#0|)))) (MapSpecMod.Variables.Variables_q |v#0@@63|))) (= (MapSpecMod.__default.Put |v#0@@63| |v'#0@@5| |key#0@@5| |value#0@@12|)  (and true (|MapSpecMod.Variables#Equal| |v'#0@@5| (let ((|dt_update#kmmap#0#0@@0| (|IMap#Build| (MapSpecMod.Variables.kmmap |v#0@@63|) ($Box |key#0@@5|) ($Box (|#ValueMessage.Message.Define| |value#0@@12|)))))
(|#MapSpecMod.Variables.Variables| |dt_update#kmmap#0#0@@0|)))))))
 :qid |MapSpecsdfy.34:17|
 :skolemid |2152|
 :pattern ( (MapSpecMod.__default.Put |v#0@@63| |v'#0@@5| |key#0@@5| |value#0@@12|))
))))
(assert  (=> true (forall ((|v#0@@64| T@U) (|v'#0@@6| T@U) (|key#0@@6| T@U) (|value#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@64|) DatatypeTypeType) (= (type |v'#0@@6|) DatatypeTypeType)) (= (type |key#0@@6|) (SeqType BoxType))) (= (type |value#0@@13|) (SeqType BoxType))) (or (|MapSpecMod.__default.Put#canCall| (Lit |v#0@@64|) (Lit |v'#0@@6|) (Lit |key#0@@6|) (Lit |value#0@@13|)) (and (and (and ($Is |v#0@@64| Tclass.MapSpecMod.Variables) ($Is |v'#0@@6| Tclass.MapSpecMod.Variables)) ($Is |key#0@@6| Tclass.KeyType.Key)) ($Is |value#0@@13| Tclass.ValueType.Value)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (|$IsA#MapSpecMod.Variables| (Lit |v'#0@@6|)) (|$IsA#MapSpecMod.Variables| (let ((|dt_update#kmmap#0#1| (|IMap#Build| (Lit (MapSpecMod.Variables.kmmap (Lit |v#0@@64|))) ($Box (Lit |key#0@@6|)) ($Box (Lit (|#ValueMessage.Message.Define| (Lit |value#0@@13|)))))))
(|#MapSpecMod.Variables.Variables| |dt_update#kmmap#0#1|)))) (MapSpecMod.Variables.Variables_q (Lit |v#0@@64|)))) (= (MapSpecMod.__default.Put (Lit |v#0@@64|) (Lit |v'#0@@6|) (Lit |key#0@@6|) (Lit |value#0@@13|))  (and true (|MapSpecMod.Variables#Equal| |v'#0@@6| (let ((|dt_update#kmmap#0#1@@0| (|IMap#Build| (Lit (MapSpecMod.Variables.kmmap (Lit |v#0@@64|))) ($Box (Lit |key#0@@6|)) ($Box (Lit (|#ValueMessage.Message.Define| (Lit |value#0@@13|)))))))
(|#MapSpecMod.Variables.Variables| |dt_update#kmmap#0#1@@0|)))))))
 :qid |MapSpecsdfy.34:17|
 :weight 3
 :skolemid |2153|
 :pattern ( (MapSpecMod.__default.Put (Lit |v#0@@64|) (Lit |v'#0@@6|) (Lit |key#0@@6|) (Lit |value#0@@13|)))
))))
(assert  (=> true (forall ((|v#0@@65| T@U) (|v'#0@@7| T@U) (|input#0| T@U) (|out#0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@65|) DatatypeTypeType) (= (type |v'#0@@7|) DatatypeTypeType)) (= (type |input#0|) DatatypeTypeType)) (= (type |out#0|) DatatypeTypeType)) (or (|MapSpecMod.__default.Next#canCall| |v#0@@65| |v'#0@@7| |input#0| |out#0|) (and (and (and ($Is |v#0@@65| Tclass.MapSpecMod.Variables) ($Is |v'#0@@7| Tclass.MapSpecMod.Variables)) ($Is |input#0| Tclass.MapSpecMod.Input)) ($Is |out#0| Tclass.MapSpecMod.Output)))) true)
 :qid |AtomicStateMachinesdfyMapSpecMod.22:18|
 :skolemid |2154|
 :pattern ( (MapSpecMod.__default.Next |v#0@@65| |v'#0@@7| |input#0| |out#0|))
))))
(assert (forall ((|v#0@@66| T@U) (|v'#0@@8| T@U) (|input#0@@0| T@U) (|out#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@66|) DatatypeTypeType) (= (type |v'#0@@8|) DatatypeTypeType)) (= (type |input#0@@0|) DatatypeTypeType)) (= (type |out#0@@0|) DatatypeTypeType)) (and (and (and ($Is |v#0@@66| Tclass.MapSpecMod.Variables) ($Is |v'#0@@8| Tclass.MapSpecMod.Variables)) ($Is |input#0@@0| Tclass.MapSpecMod.Input)) ($Is |out#0@@0| Tclass.MapSpecMod.Output))) (= (|MapSpecMod.__default.Next#requires| |v#0@@66| |v'#0@@8| |input#0@@0| |out#0@@0|) true))
 :qid |AtomicStateMachinesdfyMapSpecMod.22:18|
 :skolemid |2155|
 :pattern ( (|MapSpecMod.__default.Next#requires| |v#0@@66| |v'#0@@8| |input#0@@0| |out#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@67| T@U) (|v'#0@@9| T@U) (|input#0@@1| T@U) (|out#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@67|) DatatypeTypeType) (= (type |v'#0@@9|) DatatypeTypeType)) (= (type |input#0@@1|) DatatypeTypeType)) (= (type |out#0@@1|) DatatypeTypeType)) (or (|MapSpecMod.__default.Next#canCall| |v#0@@67| |v'#0@@9| |input#0@@1| |out#0@@1|) (and (and (and ($Is |v#0@@67| Tclass.MapSpecMod.Variables) ($Is |v'#0@@9| Tclass.MapSpecMod.Variables)) ($Is |input#0@@1| Tclass.MapSpecMod.Input)) ($Is |out#0@@1| Tclass.MapSpecMod.Output)))) (and (and (=> (MapSpecMod.Input.GetInput_q |input#0@@1|) (let ((|key#2| (MapSpecMod.Input.key |input#0@@1|)))
 (=> (MapSpecMod.Output.GetOutput_q |out#0@@1|) (|MapSpecMod.__default.Query#canCall| |v#0@@67| |v'#0@@9| |key#2| (MapSpecMod.Output.value |out#0@@1|))))) (=> (not (MapSpecMod.Input.GetInput_q |input#0@@1|)) (and (=> (MapSpecMod.Input.PutInput_q |input#0@@1|) (let ((|value#1@@0| (MapSpecMod.Input.value |input#0@@1|)))
(let ((|key#3| (MapSpecMod.Input.key |input#0@@1|)))
 (=> (MapSpecMod.Output.PutOutput_q |out#0@@1|) (|MapSpecMod.__default.Put#canCall| |v#0@@67| |v'#0@@9| |key#3| |value#1@@0|))))) (=> (not (MapSpecMod.Input.PutInput_q |input#0@@1|)) (=> (MapSpecMod.Output.NoopOutput_q |out#0@@1|) (and (|$IsA#MapSpecMod.Variables| |v'#0@@9|) (|$IsA#MapSpecMod.Variables| |v#0@@67|))))))) (= (MapSpecMod.__default.Next |v#0@@67| |v'#0@@9| |input#0@@1| |out#0@@1|) (ite (MapSpecMod.Input.GetInput_q |input#0@@1|) (let ((|key#0@@7| (MapSpecMod.Input.key |input#0@@1|)))
 (and (MapSpecMod.Output.GetOutput_q |out#0@@1|) (MapSpecMod.__default.Query |v#0@@67| |v'#0@@9| |key#0@@7| (MapSpecMod.Output.value |out#0@@1|)))) (ite (MapSpecMod.Input.PutInput_q |input#0@@1|) (let ((|value#0@@14| (MapSpecMod.Input.value |input#0@@1|)))
(let ((|key#1| (MapSpecMod.Input.key |input#0@@1|)))
 (and (MapSpecMod.Output.PutOutput_q |out#0@@1|) (MapSpecMod.__default.Put |v#0@@67| |v'#0@@9| |key#1| |value#0@@14|))))  (and (MapSpecMod.Output.NoopOutput_q |out#0@@1|) (|MapSpecMod.Variables#Equal| |v'#0@@9| |v#0@@67|)))))))
 :qid |AtomicStateMachinesdfyMapSpecMod.22:18|
 :skolemid |2156|
 :pattern ( (MapSpecMod.__default.Next |v#0@@67| |v'#0@@9| |input#0@@1| |out#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@68| T@U) (|v'#0@@10| T@U) (|input#0@@2| T@U) (|out#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@68|) DatatypeTypeType) (= (type |v'#0@@10|) DatatypeTypeType)) (= (type |input#0@@2|) DatatypeTypeType)) (= (type |out#0@@2|) DatatypeTypeType)) (or (|MapSpecMod.__default.Next#canCall| (Lit |v#0@@68|) (Lit |v'#0@@10|) (Lit |input#0@@2|) (Lit |out#0@@2|)) (and (and (and ($Is |v#0@@68| Tclass.MapSpecMod.Variables) ($Is |v'#0@@10| Tclass.MapSpecMod.Variables)) ($Is |input#0@@2| Tclass.MapSpecMod.Input)) ($Is |out#0@@2| Tclass.MapSpecMod.Output)))) (and (and (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Input.GetInput_q (Lit |input#0@@2|))))) (let ((|key#6| (Lit (MapSpecMod.Input.key (Lit |input#0@@2|)))))
 (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Output.GetOutput_q (Lit |out#0@@2|))))) (|MapSpecMod.__default.Query#canCall| (Lit |v#0@@68|) (Lit |v'#0@@10|) |key#6| (Lit (MapSpecMod.Output.value (Lit |out#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpecMod.Input.GetInput_q (Lit |input#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Input.PutInput_q (Lit |input#0@@2|))))) (let ((|value#3@@0| (Lit (MapSpecMod.Input.value (Lit |input#0@@2|)))))
(let ((|key#7| (Lit (MapSpecMod.Input.key (Lit |input#0@@2|)))))
 (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Output.PutOutput_q (Lit |out#0@@2|))))) (|MapSpecMod.__default.Put#canCall| (Lit |v#0@@68|) (Lit |v'#0@@10|) |key#7| |value#3@@0|))))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpecMod.Input.PutInput_q (Lit |input#0@@2|)))))) (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Output.NoopOutput_q (Lit |out#0@@2|))))) (and (|$IsA#MapSpecMod.Variables| (Lit |v'#0@@10|)) (|$IsA#MapSpecMod.Variables| (Lit |v#0@@68|)))))))) (= (MapSpecMod.__default.Next (Lit |v#0@@68|) (Lit |v'#0@@10|) (Lit |input#0@@2|) (Lit |out#0@@2|)) (ite (MapSpecMod.Input.GetInput_q (Lit |input#0@@2|)) (U_2_bool (let ((|key#4| (Lit (MapSpecMod.Input.key (Lit |input#0@@2|)))))
(Lit (bool_2_U  (and (MapSpecMod.Output.GetOutput_q (Lit |out#0@@2|)) (MapSpecMod.__default.Query (Lit |v#0@@68|) (Lit |v'#0@@10|) |key#4| (Lit (MapSpecMod.Output.value (Lit |out#0@@2|))))))))) (ite (MapSpecMod.Input.PutInput_q (Lit |input#0@@2|)) (U_2_bool (let ((|value#2@@0| (Lit (MapSpecMod.Input.value (Lit |input#0@@2|)))))
(let ((|key#5| (Lit (MapSpecMod.Input.key (Lit |input#0@@2|)))))
(Lit (bool_2_U  (and (MapSpecMod.Output.PutOutput_q (Lit |out#0@@2|)) (MapSpecMod.__default.Put (Lit |v#0@@68|) (Lit |v'#0@@10|) |key#5| |value#2@@0|)))))))  (and (MapSpecMod.Output.NoopOutput_q (Lit |out#0@@2|)) (|MapSpecMod.Variables#Equal| |v'#0@@10| |v#0@@68|)))))))
 :qid |AtomicStateMachinesdfyMapSpecMod.22:18|
 :weight 3
 :skolemid |2157|
 :pattern ( (MapSpecMod.__default.Next (Lit |v#0@@68|) (Lit |v'#0@@10|) (Lit |input#0@@2|) (Lit |out#0@@2|)))
))))
(assert (= (type Tclass.CrashTolerantMapSpecMod.__default) TyType))
(assert (= (Tag Tclass.CrashTolerantMapSpecMod.__default) Tagclass.CrashTolerantMapSpecMod.__default))
(assert (= (TagFamily Tclass.CrashTolerantMapSpecMod.__default) tytagFamily$_default))
(assert (forall ((bx@@152 T@U) ) (!  (=> (and (= (type bx@@152) BoxType) ($IsBox bx@@152 Tclass.CrashTolerantMapSpecMod.__default)) (and (= ($Box ($Unbox refType bx@@152)) bx@@152) ($Is ($Unbox refType bx@@152) Tclass.CrashTolerantMapSpecMod.__default)))
 :qid |unknown.0:0|
 :skolemid |2158|
 :pattern ( ($IsBox bx@@152 Tclass.CrashTolerantMapSpecMod.__default))
)))
(assert (forall (($o@@37 T@U) ) (!  (=> (= (type $o@@37) refType) (= ($Is $o@@37 Tclass.CrashTolerantMapSpecMod.__default)  (or (= $o@@37 null) (= (dtype $o@@37) Tclass.CrashTolerantMapSpecMod.__default))))
 :qid |unknown.0:0|
 :skolemid |2159|
 :pattern ( ($Is $o@@37 Tclass.CrashTolerantMapSpecMod.__default))
)))
(assert (forall (($o@@38 T@U) ($h@@101 T@U) ) (!  (=> (and (= (type $o@@38) refType) (= (type $h@@101) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@38 Tclass.CrashTolerantMapSpecMod.__default $h@@101)  (or (= $o@@38 null) (U_2_bool (MapType1Select (MapType0Select $h@@101 $o@@38) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2160|
 :pattern ( ($IsAlloc $o@@38 Tclass.CrashTolerantMapSpecMod.__default $h@@101))
)))
(assert  (=> true (=> true ($Is CrashTolerantMapSpecMod.__default.InitState Tclass.CrashTolerantMapSpecMod.Variables))))
(assert (= |CrashTolerantMapSpecMod.__default.InitState#requires| true))
(assert  (=> true (=> true (and (and |AsyncMod_6#MapSpecMod#.__default.InitPersistentState#canCall| |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall|) (= CrashTolerantMapSpecMod.__default.InitState (Lit (|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt 0) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |AsyncMod_6#MapSpecMod#.__default.InitPersistentState|)))))) (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|) (Lit (|Map#Empty| BoxType BoxType)))))))))
(assert  (=> true (=> true (and (and |AsyncMod_6#MapSpecMod#.__default.InitPersistentState#canCall| |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall|) (= CrashTolerantMapSpecMod.__default.InitState (Lit (|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (|#FloatingSeqMod.FloatingSeq.FloatingSeq| (LitInt 0) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |AsyncMod_6#MapSpecMod#.__default.InitPersistentState|)))))) (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|) (Lit (|Map#Empty| BoxType BoxType)))))))))
(assert  (=> true (forall ((|versions#0| T@U) (|versions'#0| T@U) ) (!  (=> (and (and (= (type |versions#0|) DatatypeTypeType) (= (type |versions'#0|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#canCall| |versions#0| |versions'#0|) (and ($Is |versions#0| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)) ($Is |versions'#0| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.75:37|
 :skolemid |2161|
 :pattern ( (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion |versions#0| |versions'#0|))
))))
(assert (forall ((|versions#0@@0| T@U) (|versions'#0@@0| T@U) ) (!  (=> (and (and (= (type |versions#0@@0|) DatatypeTypeType) (= (type |versions'#0@@0|) DatatypeTypeType)) (and ($Is |versions#0@@0| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)) ($Is |versions'#0@@0| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)))) (= (|CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#requires| |versions#0@@0| |versions'#0@@0|) true))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.75:37|
 :skolemid |2162|
 :pattern ( (|CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#requires| |versions#0@@0| |versions'#0@@0|))
)))
(assert  (=> true (forall ((|versions#0@@1| T@U) (|versions'#0@@1| T@U) ) (!  (=> (and (and (= (type |versions#0@@1|) DatatypeTypeType) (= (type |versions'#0@@1|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#canCall| |versions#0@@1| |versions'#0@@1|) (and ($Is |versions#0@@1| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)) ($Is |versions'#0@@1| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))))) (and (and (and (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|) (=> (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|)) (and (and (|$IsA#FloatingSeqMod.FloatingSeq| (FloatingSeqMod.FloatingSeq.DropLast |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|)) (|$IsA#FloatingSeqMod.FloatingSeq| |versions#0@@1|)) (|FloatingSeqMod.FloatingSeq.DropLast#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|)))) (=> (not (and (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|)) (|FloatingSeqMod.FloatingSeq#Equal| (FloatingSeqMod.FloatingSeq.DropLast |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|) |versions#0@@1|))) (and (|$IsA#FloatingSeqMod.FloatingSeq| |versions'#0@@1|) (|$IsA#FloatingSeqMod.FloatingSeq| |versions#0@@1|)))) (= (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion |versions#0@@1| |versions'#0@@1|)  (or (and (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|)) (|FloatingSeqMod.FloatingSeq#Equal| (FloatingSeqMod.FloatingSeq.DropLast |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |versions'#0@@1|) |versions#0@@1|)) (|FloatingSeqMod.FloatingSeq#Equal| |versions'#0@@1| |versions#0@@1|)))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.75:37|
 :skolemid |2163|
 :pattern ( (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion |versions#0@@1| |versions'#0@@1|))
))))
(assert  (=> true (forall ((|versions#0@@2| T@U) (|versions'#0@@2| T@U) ) (!  (=> (and (and (= (type |versions#0@@2|) DatatypeTypeType) (= (type |versions'#0@@2|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#canCall| (Lit |versions#0@@2|) (Lit |versions'#0@@2|)) (and ($Is |versions#0@@2| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)) ($Is |versions'#0@@2| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))))) (and (and (and (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|)) (=> (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|)))))) (and (and (|$IsA#FloatingSeqMod.FloatingSeq| (Lit (FloatingSeqMod.FloatingSeq.DropLast |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|)))) (|$IsA#FloatingSeqMod.FloatingSeq| (Lit |versions#0@@2|))) (|FloatingSeqMod.FloatingSeq.DropLast#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|))))) (=> (not (and (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|))) (|FloatingSeqMod.FloatingSeq#Equal| (FloatingSeqMod.FloatingSeq.DropLast |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|)) |versions#0@@2|))) (and (|$IsA#FloatingSeqMod.FloatingSeq| (Lit |versions'#0@@2|)) (|$IsA#FloatingSeqMod.FloatingSeq| (Lit |versions#0@@2|))))) (= (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion (Lit |versions#0@@2|) (Lit |versions'#0@@2|))  (or (and (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|))) (|FloatingSeqMod.FloatingSeq#Equal| (FloatingSeqMod.FloatingSeq.DropLast |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit |versions'#0@@2|)) |versions#0@@2|)) (|FloatingSeqMod.FloatingSeq#Equal| |versions'#0@@2| |versions#0@@2|)))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.75:37|
 :weight 3
 :skolemid |2164|
 :pattern ( (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion (Lit |versions#0@@2|) (Lit |versions'#0@@2|)))
))))
(assert (= (type |Tclass.AsyncMod_6#MapSpecMod#.UIOp|) TyType))
(assert (= (Tag |Tclass.AsyncMod_6#MapSpecMod#.UIOp|) |Tagclass.AsyncMod_6#MapSpecMod#.UIOp|))
(assert (= (TagFamily |Tclass.AsyncMod_6#MapSpecMod#.UIOp|) tytagFamily$UIOp))
(assert (forall ((bx@@153 T@U) ) (!  (=> (and (= (type bx@@153) BoxType) ($IsBox bx@@153 |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)) (and (= ($Box ($Unbox DatatypeTypeType bx@@153)) bx@@153) ($Is ($Unbox DatatypeTypeType bx@@153) |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))
 :qid |unknown.0:0|
 :skolemid |2165|
 :pattern ( ($IsBox bx@@153 |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))
)))
(assert  (=> true (forall ((|v#0@@69| T@U) (|v'#0@@11| T@U) (|op#0| T@U) ) (!  (=> (and (and (and (= (type |v#0@@69|) DatatypeTypeType) (= (type |v'#0@@11|) DatatypeTypeType)) (= (type |op#0|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Operate#canCall| |v#0@@69| |v'#0@@11| |op#0|) (and (and ($Is |v#0@@69| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@11| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |op#0| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.84:21|
 :skolemid |2166|
 :pattern ( (CrashTolerantMapSpecMod.__default.Operate |v#0@@69| |v'#0@@11| |op#0|))
))))
(assert (forall ((|v#0@@70| T@U) (|v'#0@@12| T@U) (|op#0@@0| T@U) ) (!  (=> (and (and (and (= (type |v#0@@70|) DatatypeTypeType) (= (type |v'#0@@12|) DatatypeTypeType)) (= (type |op#0@@0|) DatatypeTypeType)) (and (and ($Is |v#0@@70| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@12| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |op#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))) (= (|CrashTolerantMapSpecMod.__default.Operate#requires| |v#0@@70| |v'#0@@12| |op#0@@0|) true))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.84:21|
 :skolemid |2167|
 :pattern ( (|CrashTolerantMapSpecMod.__default.Operate#requires| |v#0@@70| |v'#0@@12| |op#0@@0|))
)))
(assert  (and (and (and (forall ((arg0@@462 T@U) ) (! (= (type (CrashTolerantMapSpecMod.Variables.versions arg0@@462)) DatatypeTypeType)
 :qid |funType:CrashTolerantMapSpecMod.Variables.versions|
 :pattern ( (CrashTolerantMapSpecMod.Variables.versions arg0@@462))
)) (forall ((arg0@@463 T@U) ) (! (= (type (CrashTolerantMapSpecMod.Variables.asyncEphemeral arg0@@463)) DatatypeTypeType)
 :qid |funType:CrashTolerantMapSpecMod.Variables.asyncEphemeral|
 :pattern ( (CrashTolerantMapSpecMod.Variables.asyncEphemeral arg0@@463))
))) (forall ((arg0@@464 T@U) (arg1@@189 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.Variables.Variables| arg0@@464 arg1@@189)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.Variables.Variables|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Variables.Variables| arg0@@464 arg1@@189))
))) (forall ((arg0@@465 T@U) ) (! (= (type (CrashTolerantMapSpecMod.Variables.syncRequests arg0@@465)) (MapType BoxType BoxType))
 :qid |funType:CrashTolerantMapSpecMod.Variables.syncRequests|
 :pattern ( (CrashTolerantMapSpecMod.Variables.syncRequests arg0@@465))
))))
(assert  (=> true (forall ((|v#0@@71| T@U) (|v'#0@@13| T@U) (|op#0@@1| T@U) ) (!  (=> (and (and (and (= (type |v#0@@71|) DatatypeTypeType) (= (type |v'#0@@13|) DatatypeTypeType)) (= (type |op#0@@1|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Operate#canCall| |v#0@@71| |v'#0@@13| |op#0@@1|) (and (and ($Is |v#0@@71| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@13| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |op#0@@1| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (CrashTolerantMapSpecMod.Variables.Variables_q |v'#0@@13|) (let ((|newVersions#0| (CrashTolerantMapSpecMod.Variables.versions |v'#0@@13|)))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (CrashTolerantMapSpecMod.Variables.Variables_q |v'#0@@13|) (let ((|newAsyncEphemeral#0| (CrashTolerantMapSpecMod.Variables.asyncEphemeral |v'#0@@13|)))
 (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| |v#0@@71|) (=> (CrashTolerantMapSpecMod.Variables.WF |v#0@@71|) (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| |v'#0@@13|) (=> (CrashTolerantMapSpecMod.Variables.WF |v'#0@@13|) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@71|) (|CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#canCall| (CrashTolerantMapSpecMod.Variables.versions |v#0@@71|) |newVersions#0|)) (=> (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion (CrashTolerantMapSpecMod.Variables.versions |v#0@@71|) |newVersions#0|) (and (and (and (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@71|) (|FloatingSeqMod.FloatingSeq.Last#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@71|))) (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@71|)) (|FloatingSeqMod.FloatingSeq.Last#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#0|)) (|AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@71|))) (CrashTolerantMapSpecMod.Variables.asyncEphemeral |v#0@@71|)) (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#0|)) |newAsyncEphemeral#0|) |op#0@@1|)) (=> (|AsyncMod_6#MapSpecMod#.__default.NextStep| (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@71|))) (CrashTolerantMapSpecMod.Variables.asyncEphemeral |v#0@@71|)) (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#0|)) |newAsyncEphemeral#0|) |op#0@@1|) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| |v'#0@@13|) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#0| |v#0@@71|))
(let ((|dt_update#asyncEphemeral#0#0| |newAsyncEphemeral#0|))
(let ((|dt_update#versions#0#0| |newVersions#0|))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#0| |dt_update#asyncEphemeral#0#0| (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#0|))))))) (let ((|dt_update_tmp#0#0@@0| |v#0@@71|))
(CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#0@@0|))))))))))))))))) (= (CrashTolerantMapSpecMod.__default.Operate |v#0@@71| |v'#0@@13| |op#0@@1|)  (and true (let ((|newVersions#0@@0| (CrashTolerantMapSpecMod.Variables.versions |v'#0@@13|)))
 (and true (let ((|newAsyncEphemeral#0@@0| (CrashTolerantMapSpecMod.Variables.asyncEphemeral |v'#0@@13|)))
 (and (and (and (and (CrashTolerantMapSpecMod.Variables.WF |v#0@@71|) (CrashTolerantMapSpecMod.Variables.WF |v'#0@@13|)) (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion (CrashTolerantMapSpecMod.Variables.versions |v#0@@71|) |newVersions#0@@0|)) (|AsyncMod_6#MapSpecMod#.__default.NextStep| (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@71|))) (CrashTolerantMapSpecMod.Variables.asyncEphemeral |v#0@@71|)) (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#0@@0|)) |newAsyncEphemeral#0@@0|) |op#0@@1|)) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@13| (let ((|dt_update_tmp#0#0@@1| |v#0@@71|))
(let ((|dt_update#asyncEphemeral#0#0@@0| |newAsyncEphemeral#0@@0|))
(let ((|dt_update#versions#0#0@@0| |newVersions#0@@0|))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#0@@0| |dt_update#asyncEphemeral#0#0@@0| (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#0@@1|))))))))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.84:21|
 :skolemid |2168|
 :pattern ( (CrashTolerantMapSpecMod.__default.Operate |v#0@@71| |v'#0@@13| |op#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@72| T@U) (|v'#0@@14| T@U) (|op#0@@2| T@U) ) (!  (=> (and (and (and (= (type |v#0@@72|) DatatypeTypeType) (= (type |v'#0@@14|) DatatypeTypeType)) (= (type |op#0@@2|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Operate#canCall| (Lit |v#0@@72|) (Lit |v'#0@@14|) (Lit |op#0@@2|)) (and (and ($Is |v#0@@72| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@14| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |op#0@@2| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v'#0@@14|)) (let ((|newVersions#1| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v'#0@@14|)))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v'#0@@14|)) (let ((|newAsyncEphemeral#1| (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral (Lit |v'#0@@14|)))))
 (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| (Lit |v#0@@72|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@72|))))) (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| (Lit |v'#0@@14|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMapSpecMod.Variables.WF (Lit |v'#0@@14|))))) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@72|)) (|CrashTolerantMapSpecMod.__default.OptionallyAppendVersion#canCall| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@72|))) |newVersions#1|)) (=> (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@72|))) |newVersions#1|) (and (and (and (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@72|)) (|FloatingSeqMod.FloatingSeq.Last#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@72|))))) (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@72|))) (|FloatingSeqMod.FloatingSeq.Last#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#1|)) (|AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| (Lit (|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@72|)))))) (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral (Lit |v#0@@72|))))) (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#1|)) |newAsyncEphemeral#1|) (Lit |op#0@@2|))) (=> (|AsyncMod_6#MapSpecMod#.__default.NextStep| (Lit (|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@72|)))))) (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral (Lit |v#0@@72|))))) (|#AsyncMod_6#MapSpecMod#.Variables.Variables| ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#1|)) |newAsyncEphemeral#1|) (Lit |op#0@@2|)) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| (Lit |v'#0@@14|)) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#1| (Lit |v#0@@72|)))
(let ((|dt_update#asyncEphemeral#0#1| |newAsyncEphemeral#1|))
(let ((|dt_update#versions#0#1| |newVersions#1|))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#1| |dt_update#asyncEphemeral#0#1| (Lit (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#1|)))))))) (let ((|dt_update_tmp#0#1@@0| (Lit |v#0@@72|)))
(CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#1@@0|))))))))))))))))) (= (CrashTolerantMapSpecMod.__default.Operate (Lit |v#0@@72|) (Lit |v'#0@@14|) (Lit |op#0@@2|))  (and true (let ((|newVersions#1@@0| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v'#0@@14|)))))
 (and true (let ((|newAsyncEphemeral#1@@0| (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral (Lit |v'#0@@14|)))))
 (and (and (and (and (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@72|)) (CrashTolerantMapSpecMod.Variables.WF (Lit |v'#0@@14|))) (CrashTolerantMapSpecMod.__default.OptionallyAppendVersion (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@72|))) |newVersions#1@@0|)) (|AsyncMod_6#MapSpecMod#.__default.NextStep| (Lit (|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@72|)))))) (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral (Lit |v#0@@72|))))) (Lit (|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit ($Unbox DatatypeTypeType (FloatingSeqMod.FloatingSeq.Last |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| |newVersions#1@@0|))) |newAsyncEphemeral#1@@0|)) (Lit |op#0@@2|))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@14| (let ((|dt_update_tmp#0#1@@1| (Lit |v#0@@72|)))
(let ((|dt_update#asyncEphemeral#0#1@@0| |newAsyncEphemeral#1@@0|))
(let ((|dt_update#versions#0#1@@0| |newVersions#1@@0|))
(Lit (|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#1@@0| |dt_update#asyncEphemeral#0#1@@0| (Lit (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#1@@1|))))))))))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.84:21|
 :weight 3
 :skolemid |2169|
 :pattern ( (CrashTolerantMapSpecMod.__default.Operate (Lit |v#0@@72|) (Lit |v'#0@@14|) (Lit |op#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@73| T@U) (|v'#0@@15| T@U) ) (!  (=> (and (and (= (type |v#0@@73|) DatatypeTypeType) (= (type |v'#0@@15|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Crash#canCall| |v#0@@73| |v'#0@@15|) (and ($Is |v#0@@73| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@15| Tclass.CrashTolerantMapSpecMod.Variables)))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.107:19|
 :skolemid |2170|
 :pattern ( (CrashTolerantMapSpecMod.__default.Crash |v#0@@73| |v'#0@@15|))
))))
(assert (forall ((|v#0@@74| T@U) (|v'#0@@16| T@U) ) (!  (=> (and (and (= (type |v#0@@74|) DatatypeTypeType) (= (type |v'#0@@16|) DatatypeTypeType)) (and ($Is |v#0@@74| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@16| Tclass.CrashTolerantMapSpecMod.Variables))) (= (|CrashTolerantMapSpecMod.__default.Crash#requires| |v#0@@74| |v'#0@@16|) true))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.107:19|
 :skolemid |2171|
 :pattern ( (|CrashTolerantMapSpecMod.__default.Crash#requires| |v#0@@74| |v'#0@@16|))
)))
(assert  (=> true (forall ((|v#0@@75| T@U) (|v'#0@@17| T@U) ) (!  (=> (and (and (= (type |v#0@@75|) DatatypeTypeType) (= (type |v'#0@@17|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Crash#canCall| |v#0@@75| |v'#0@@17|) (and ($Is |v#0@@75| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@17| Tclass.CrashTolerantMapSpecMod.Variables)))) (and (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| |v#0@@75|) (=> (CrashTolerantMapSpecMod.Variables.WF |v#0@@75|) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| |v'#0@@17|) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update#syncRequests#0#0| (Lit (|Map#Empty| BoxType BoxType))))
(let ((|dt_update#asyncEphemeral#0#0@@1| (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|)))
(let ((|dt_update#versions#0#0@@1| (FloatingSeqMod.FloatingSeq.GetPrefix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@75|) (INTERNAL_add_boogie (CrashTolerantMapSpecMod.Variables.StableIndex |v#0@@75|) 1))))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#0@@1| |dt_update#asyncEphemeral#0#0@@1| |dt_update#syncRequests#0#0|)))))) (and |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall| (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@75|) (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| |v#0@@75|)) (|FloatingSeqMod.FloatingSeq.GetPrefix#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@75|) (INTERNAL_add_boogie (CrashTolerantMapSpecMod.Variables.StableIndex |v#0@@75|) 1))))))) (= (CrashTolerantMapSpecMod.__default.Crash |v#0@@75| |v'#0@@17|)  (and (CrashTolerantMapSpecMod.Variables.WF |v#0@@75|) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@17| (let ((|dt_update#syncRequests#0#0@@0| (Lit (|Map#Empty| BoxType BoxType))))
(let ((|dt_update#asyncEphemeral#0#0@@2| (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|)))
(let ((|dt_update#versions#0#0@@2| (FloatingSeqMod.FloatingSeq.GetPrefix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@75|) (INTERNAL_add_boogie (CrashTolerantMapSpecMod.Variables.StableIndex |v#0@@75|) 1))))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#0@@2| |dt_update#asyncEphemeral#0#0@@2| |dt_update#syncRequests#0#0@@0|)))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.107:19|
 :skolemid |2172|
 :pattern ( (CrashTolerantMapSpecMod.__default.Crash |v#0@@75| |v'#0@@17|))
))))
(assert  (=> true (forall ((|v#0@@76| T@U) (|v'#0@@18| T@U) ) (!  (=> (and (and (= (type |v#0@@76|) DatatypeTypeType) (= (type |v'#0@@18|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Crash#canCall| (Lit |v#0@@76|) (Lit |v'#0@@18|)) (and ($Is |v#0@@76| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@18| Tclass.CrashTolerantMapSpecMod.Variables)))) (and (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| (Lit |v#0@@76|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@76|))))) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| (Lit |v'#0@@18|)) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update#syncRequests#0#1| (Lit (|Map#Empty| BoxType BoxType))))
(let ((|dt_update#asyncEphemeral#0#1@@1| (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|)))
(let ((|dt_update#versions#0#1@@1| (Lit (FloatingSeqMod.FloatingSeq.GetPrefix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@76|))) (LitInt (INTERNAL_add_boogie (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v#0@@76|)) 1))))))
(Lit (|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#1@@1| |dt_update#asyncEphemeral#0#1@@1| |dt_update#syncRequests#0#1|))))))) (and |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall| (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@76|)) (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| (Lit |v#0@@76|))) (|FloatingSeqMod.FloatingSeq.GetPrefix#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@76|))) (LitInt (INTERNAL_add_boogie (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v#0@@76|)) 1)))))))) (= (CrashTolerantMapSpecMod.__default.Crash (Lit |v#0@@76|) (Lit |v'#0@@18|))  (and (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@76|)) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@18| (let ((|dt_update#syncRequests#0#1@@0| (Lit (|Map#Empty| BoxType BoxType))))
(let ((|dt_update#asyncEphemeral#0#1@@2| (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|)))
(let ((|dt_update#versions#0#1@@2| (Lit (FloatingSeqMod.FloatingSeq.GetPrefix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@76|))) (LitInt (INTERNAL_add_boogie (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v#0@@76|)) 1))))))
(Lit (|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#1@@2| |dt_update#asyncEphemeral#0#1@@2| |dt_update#syncRequests#0#1@@0|))))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.107:19|
 :weight 3
 :skolemid |2173|
 :pattern ( (CrashTolerantMapSpecMod.__default.Crash (Lit |v#0@@76|) (Lit |v'#0@@18|)))
))))
(assert  (=> true (forall ((|v#0@@77| T@U) (|v'#0@@19| T@U) ) (!  (=> (and (and (= (type |v#0@@77|) DatatypeTypeType) (= (type |v'#0@@19|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Sync#canCall| |v#0@@77| |v'#0@@19|) (and ($Is |v#0@@77| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@19| Tclass.CrashTolerantMapSpecMod.Variables)))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.123:18|
 :skolemid |2174|
 :pattern ( (CrashTolerantMapSpecMod.__default.Sync |v#0@@77| |v'#0@@19|))
))))
(assert (forall ((|v#0@@78| T@U) (|v'#0@@20| T@U) ) (!  (=> (and (and (= (type |v#0@@78|) DatatypeTypeType) (= (type |v'#0@@20|) DatatypeTypeType)) (and ($Is |v#0@@78| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@20| Tclass.CrashTolerantMapSpecMod.Variables))) (= (|CrashTolerantMapSpecMod.__default.Sync#requires| |v#0@@78| |v'#0@@20|) true))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.123:18|
 :skolemid |2175|
 :pattern ( (|CrashTolerantMapSpecMod.__default.Sync#requires| |v#0@@78| |v'#0@@20|))
)))
(assert  (=> true (forall ((|v#0@@79| T@U) (|v'#0@@21| T@U) ) (!  (=> (and (and (= (type |v#0@@79|) DatatypeTypeType) (= (type |v'#0@@21|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Sync#canCall| |v#0@@79| |v'#0@@21|) (and ($Is |v#0@@79| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@21| Tclass.CrashTolerantMapSpecMod.Variables)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| |v'#0@@21|) (let ((|newStableIdx#0| (CrashTolerantMapSpecMod.Variables.StableIndex |v'#0@@21|)))
 (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| |v#0@@79|) (=> (CrashTolerantMapSpecMod.Variables.WF |v#0@@79|) (and (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| |v#0@@79|) (=> (INTERNAL_le_boogie (CrashTolerantMapSpecMod.Variables.StableIndex |v#0@@79|) |newStableIdx#0|) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@79|) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@79|))) (=> (INTERNAL_lt_boogie |newStableIdx#0| (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@79|))) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| |v'#0@@21|) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#0@@2| |v#0@@79|))
(let ((|dt_update#versions#0#0@@3| (FloatingSeqMod.FloatingSeq.GetSuffix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@79|) |newStableIdx#0|)))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#0@@3| (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#0@@2|) (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#0@@2|)))))) (let ((|dt_update_tmp#0#0@@3| |v#0@@79|))
 (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@79|) (|FloatingSeqMod.FloatingSeq.GetSuffix#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@79|) |newStableIdx#0|)) (and (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#0@@3|) (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#0@@3|)))))))))))))) (= (CrashTolerantMapSpecMod.__default.Sync |v#0@@79| |v'#0@@21|)  (and true (let ((|newStableIdx#0@@0| (CrashTolerantMapSpecMod.Variables.StableIndex |v'#0@@21|)))
 (and (and (CrashTolerantMapSpecMod.Variables.WF |v#0@@79|) (and (INTERNAL_le_boogie (CrashTolerantMapSpecMod.Variables.StableIndex |v#0@@79|) |newStableIdx#0@@0|) (INTERNAL_lt_boogie |newStableIdx#0@@0| (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@79|))))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@21| (let ((|dt_update_tmp#0#0@@4| |v#0@@79|))
(let ((|dt_update#versions#0#0@@4| (FloatingSeqMod.FloatingSeq.GetSuffix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@79|) |newStableIdx#0@@0|)))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#0@@4| (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#0@@4|) (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#0@@4|)))))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.123:18|
 :skolemid |2176|
 :pattern ( (CrashTolerantMapSpecMod.__default.Sync |v#0@@79| |v'#0@@21|))
))))
(assert  (=> true (forall ((|v#0@@80| T@U) (|v'#0@@22| T@U) ) (!  (=> (and (and (= (type |v#0@@80|) DatatypeTypeType) (= (type |v'#0@@22|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Sync#canCall| (Lit |v#0@@80|) (Lit |v'#0@@22|)) (and ($Is |v#0@@80| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@22| Tclass.CrashTolerantMapSpecMod.Variables)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| (Lit |v'#0@@22|)) (let ((|newStableIdx#1| (LitInt (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v'#0@@22|)))))
 (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| (Lit |v#0@@80|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@80|))))) (and (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| (Lit |v#0@@80|)) (=> (INTERNAL_le_boogie (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v#0@@80|)) |newStableIdx#1|) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@80|)) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@80|))))) (=> (INTERNAL_lt_boogie |newStableIdx#1| (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@80|))))) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| (Lit |v'#0@@22|)) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#1@@2| (Lit |v#0@@80|)))
(let ((|dt_update#versions#0#1@@3| (FloatingSeqMod.FloatingSeq.GetSuffix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@80|))) |newStableIdx#1|)))
(|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#1@@3| (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#1@@2|)) (Lit (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#1@@2|))))))) (let ((|dt_update_tmp#0#1@@3| (Lit |v#0@@80|)))
 (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@80|)) (|FloatingSeqMod.FloatingSeq.GetSuffix#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@80|))) |newStableIdx#1|)) (and (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#1@@3|) (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#1@@3|)))))))))))))) (= (CrashTolerantMapSpecMod.__default.Sync (Lit |v#0@@80|) (Lit |v'#0@@22|))  (and true (let ((|newStableIdx#1@@0| (LitInt (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v'#0@@22|)))))
 (and (and (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@80|)) (and (INTERNAL_le_boogie (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v#0@@80|)) |newStableIdx#1@@0|) (INTERNAL_lt_boogie |newStableIdx#1@@0| (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@80|))))))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@22| (let ((|dt_update_tmp#0#1@@4| (Lit |v#0@@80|)))
(let ((|dt_update#versions#0#1@@4| (Lit (FloatingSeqMod.FloatingSeq.GetSuffix |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@80|))) |newStableIdx#1@@0|))))
(Lit (|#CrashTolerantMapSpecMod.Variables.Variables| |dt_update#versions#0#1@@4| (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#1@@4|)) (Lit (CrashTolerantMapSpecMod.Variables.syncRequests |dt_update_tmp#0#1@@4|)))))))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.123:18|
 :weight 3
 :skolemid |2177|
 :pattern ( (CrashTolerantMapSpecMod.__default.Sync (Lit |v#0@@80|) (Lit |v'#0@@22|)))
))))
(assert  (=> true (forall ((|v#0@@81| T@U) (|v'#0@@23| T@U) (|syncReqId#0| Int) ) (!  (=> (and (and (= (type |v#0@@81|) DatatypeTypeType) (= (type |v'#0@@23|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.ReqSync#canCall| |v#0@@81| |v'#0@@23| |syncReqId#0|) (and (and ($Is |v#0@@81| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@23| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0|)))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.141:21|
 :skolemid |2178|
 :pattern ( (CrashTolerantMapSpecMod.__default.ReqSync |v#0@@81| |v'#0@@23| |syncReqId#0|))
))))
(assert (forall ((|v#0@@82| T@U) (|v'#0@@24| T@U) (|syncReqId#0@@0| Int) ) (!  (=> (and (= (type |v#0@@82|) DatatypeTypeType) (= (type |v'#0@@24|) DatatypeTypeType)) (=> (and (and ($Is |v#0@@82| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@24| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0@@0|)) (= (|CrashTolerantMapSpecMod.__default.ReqSync#requires| |v#0@@82| |v'#0@@24| |syncReqId#0@@0|) true)))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.141:21|
 :skolemid |2179|
 :pattern ( (|CrashTolerantMapSpecMod.__default.ReqSync#requires| |v#0@@82| |v'#0@@24| |syncReqId#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@83| T@U) (|v'#0@@25| T@U) (|syncReqId#0@@1| Int) ) (!  (=> (and (and (= (type |v#0@@83|) DatatypeTypeType) (= (type |v'#0@@25|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.ReqSync#canCall| |v#0@@83| |v'#0@@25| |syncReqId#0@@1|) (and (and ($Is |v#0@@83| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@25| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0@@1|)))) (and (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| |v#0@@83|) (=> (CrashTolerantMapSpecMod.Variables.WF |v#0@@83|) (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@83|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@83|)) ($Box (int_2_U |syncReqId#0@@1|))))) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| |v'#0@@25|) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#0@@5| |v#0@@83|))
(let ((|dt_update#syncRequests#0#0@@1| (|Map#Build| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@83|) ($Box (int_2_U |syncReqId#0@@1|)) ($Box (int_2_U (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@83|)) 1))))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#0@@5|) (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#0@@5|) |dt_update#syncRequests#0#0@@1|))))) (let ((|dt_update_tmp#0#0@@6| |v#0@@83|))
 (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@83|) (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@83|) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@83|)))) (and (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#0@@6|) (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#0@@6|))))))))) (= (CrashTolerantMapSpecMod.__default.ReqSync |v#0@@83| |v'#0@@25| |syncReqId#0@@1|)  (and (and (CrashTolerantMapSpecMod.Variables.WF |v#0@@83|) (not (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@83|)) ($Box (int_2_U |syncReqId#0@@1|)))))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@25| (let ((|dt_update_tmp#0#0@@7| |v#0@@83|))
(let ((|dt_update#syncRequests#0#0@@2| (|Map#Build| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@83|) ($Box (int_2_U |syncReqId#0@@1|)) ($Box (int_2_U (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions |v#0@@83|)) 1))))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#0@@7|) (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#0@@7|) |dt_update#syncRequests#0#0@@2|))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.141:21|
 :skolemid |2180|
 :pattern ( (CrashTolerantMapSpecMod.__default.ReqSync |v#0@@83| |v'#0@@25| |syncReqId#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@84| T@U) (|v'#0@@26| T@U) (|syncReqId#0@@2| Int) ) (!  (=> (and (and (= (type |v#0@@84|) DatatypeTypeType) (= (type |v'#0@@26|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.ReqSync#canCall| (Lit |v#0@@84|) (Lit |v'#0@@26|) (LitInt |syncReqId#0@@2|)) (and (and ($Is |v#0@@84| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@26| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0@@2|)))) (and (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| (Lit |v#0@@84|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@84|))))) (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@84|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@84|))) ($Box (int_2_U |syncReqId#0@@2|))))) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| (Lit |v'#0@@26|)) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#1@@5| (Lit |v#0@@84|)))
(let ((|dt_update#syncRequests#0#1@@1| (|Map#Build| (Lit (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@84|))) ($Box (int_2_U (LitInt |syncReqId#0@@2|))) ($Box (int_2_U (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@84|)))) 1)))))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#1@@5|)) (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#1@@5|)) |dt_update#syncRequests#0#1@@1|))))) (let ((|dt_update_tmp#0#1@@6| (Lit |v#0@@84|)))
 (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@84|)) (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@84|)) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@84|)))))) (and (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#1@@6|) (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#1@@6|))))))))) (= (CrashTolerantMapSpecMod.__default.ReqSync (Lit |v#0@@84|) (Lit |v'#0@@26|) (LitInt |syncReqId#0@@2|))  (and (and (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@84|)) (not (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@84|))) ($Box (int_2_U |syncReqId#0@@2|)))))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@26| (let ((|dt_update_tmp#0#1@@7| (Lit |v#0@@84|)))
(let ((|dt_update#syncRequests#0#1@@2| (|Map#Build| (Lit (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@84|))) ($Box (int_2_U (LitInt |syncReqId#0@@2|))) ($Box (int_2_U (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit |v#0@@84|)))) 1)))))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#1@@7|)) (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#1@@7|)) |dt_update#syncRequests#0#1@@2|))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.141:21|
 :weight 3
 :skolemid |2181|
 :pattern ( (CrashTolerantMapSpecMod.__default.ReqSync (Lit |v#0@@84|) (Lit |v'#0@@26|) (LitInt |syncReqId#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@85| T@U) (|v'#0@@27| T@U) (|syncReqId#0@@3| Int) ) (!  (=> (and (and (= (type |v#0@@85|) DatatypeTypeType) (= (type |v'#0@@27|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.ReplySync#canCall| |v#0@@85| |v'#0@@27| |syncReqId#0@@3|) (and (and ($Is |v#0@@85| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@27| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0@@3|)))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.150:23|
 :skolemid |2182|
 :pattern ( (CrashTolerantMapSpecMod.__default.ReplySync |v#0@@85| |v'#0@@27| |syncReqId#0@@3|))
))))
(assert (forall ((|v#0@@86| T@U) (|v'#0@@28| T@U) (|syncReqId#0@@4| Int) ) (!  (=> (and (= (type |v#0@@86|) DatatypeTypeType) (= (type |v'#0@@28|) DatatypeTypeType)) (=> (and (and ($Is |v#0@@86| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@28| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0@@4|)) (= (|CrashTolerantMapSpecMod.__default.ReplySync#requires| |v#0@@86| |v'#0@@28| |syncReqId#0@@4|) true)))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.150:23|
 :skolemid |2183|
 :pattern ( (|CrashTolerantMapSpecMod.__default.ReplySync#requires| |v#0@@86| |v'#0@@28| |syncReqId#0@@4|))
)))
(assert (= (type StartFuel_MapRemove_s._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((|v#0@@87| T@U) (|v'#0@@29| T@U) (|syncReqId#0@@5| Int) ) (!  (=> (and (and (= (type |v#0@@87|) DatatypeTypeType) (= (type |v'#0@@29|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.ReplySync#canCall| |v#0@@87| |v'#0@@29| |syncReqId#0@@5|) (and (and ($Is |v#0@@87| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@29| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0@@5|)))) (and (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| |v#0@@87|) (=> (CrashTolerantMapSpecMod.Variables.WF |v#0@@87|) (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@87|) (=> (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@87|)) ($Box (int_2_U |syncReqId#0@@5|)))) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@87|) (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| |v#0@@87|)) (=> (INTERNAL_le_boogie (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@87|)) ($Box (int_2_U |syncReqId#0@@5|))))) (CrashTolerantMapSpecMod.Variables.StableIndex |v#0@@87|)) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| |v'#0@@29|) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#0@@8| |v#0@@87|))
(let ((|dt_update#syncRequests#0#0@@3| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@87|) ($Box (int_2_U |syncReqId#0@@5|)))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#0@@8|) (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#0@@8|) |dt_update#syncRequests#0#0@@3|))))) (let ((|dt_update_tmp#0#0@@9| |v#0@@87|))
 (and (and (CrashTolerantMapSpecMod.Variables.Variables_q |v#0@@87|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass._System.nat Tclass._System.nat (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@87|) ($Box (int_2_U |syncReqId#0@@5|)))) (and (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#0@@9|) (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#0@@9|))))))))))) (= (CrashTolerantMapSpecMod.__default.ReplySync |v#0@@87| |v'#0@@29| |syncReqId#0@@5|)  (and (and (and (CrashTolerantMapSpecMod.Variables.WF |v#0@@87|) (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@87|)) ($Box (int_2_U |syncReqId#0@@5|))))) (INTERNAL_le_boogie (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@87|)) ($Box (int_2_U |syncReqId#0@@5|))))) (CrashTolerantMapSpecMod.Variables.StableIndex |v#0@@87|))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@29| (let ((|dt_update_tmp#0#0@@10| |v#0@@87|))
(let ((|dt_update#syncRequests#0#0@@4| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (CrashTolerantMapSpecMod.Variables.syncRequests |v#0@@87|) ($Box (int_2_U |syncReqId#0@@5|)))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#0@@10|) (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#0@@10|) |dt_update#syncRequests#0#0@@4|))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.150:23|
 :skolemid |2184|
 :pattern ( (CrashTolerantMapSpecMod.__default.ReplySync |v#0@@87| |v'#0@@29| |syncReqId#0@@5|))
))))
(assert  (=> true (forall ((|v#0@@88| T@U) (|v'#0@@30| T@U) (|syncReqId#0@@6| Int) ) (!  (=> (and (and (= (type |v#0@@88|) DatatypeTypeType) (= (type |v'#0@@30|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.ReplySync#canCall| (Lit |v#0@@88|) (Lit |v'#0@@30|) (LitInt |syncReqId#0@@6|)) (and (and ($Is |v#0@@88| Tclass.CrashTolerantMapSpecMod.Variables) ($Is |v'#0@@30| Tclass.CrashTolerantMapSpecMod.Variables)) (INTERNAL_le_boogie 0 |syncReqId#0@@6|)))) (and (and (|CrashTolerantMapSpecMod.Variables.WF#canCall| (Lit |v#0@@88|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@88|))))) (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@88|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@88|))) ($Box (int_2_U |syncReqId#0@@6|)))) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@88|)) (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| (Lit |v#0@@88|))) (=> (INTERNAL_le_boogie (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@88|)))) ($Box (int_2_U (LitInt |syncReqId#0@@6|)))))) (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v#0@@88|))) (and (and (|$IsA#CrashTolerantMapSpecMod.Variables| (Lit |v'#0@@30|)) (|$IsA#CrashTolerantMapSpecMod.Variables| (let ((|dt_update_tmp#0#1@@8| (Lit |v#0@@88|)))
(let ((|dt_update#syncRequests#0#1@@3| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (Lit (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@88|))) ($Box (int_2_U (LitInt |syncReqId#0@@6|))))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#1@@8|)) (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#1@@8|)) |dt_update#syncRequests#0#1@@3|))))) (let ((|dt_update_tmp#0#1@@9| (Lit |v#0@@88|)))
 (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit |v#0@@88|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass._System.nat Tclass._System.nat (Lit (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@88|))) ($Box (int_2_U (LitInt |syncReqId#0@@6|))))) (and (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#1@@9|) (CrashTolerantMapSpecMod.Variables.Variables_q |dt_update_tmp#0#1@@9|))))))))))) (= (CrashTolerantMapSpecMod.__default.ReplySync (Lit |v#0@@88|) (Lit |v'#0@@30|) (LitInt |syncReqId#0@@6|))  (and (and (and (CrashTolerantMapSpecMod.Variables.WF (Lit |v#0@@88|)) (U_2_bool (MapType0Select (|Map#Domain| (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@88|))) ($Box (int_2_U |syncReqId#0@@6|))))) (INTERNAL_le_boogie (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@88|)))) ($Box (int_2_U (LitInt |syncReqId#0@@6|)))))) (CrashTolerantMapSpecMod.Variables.StableIndex (Lit |v#0@@88|)))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@30| (let ((|dt_update_tmp#0#1@@10| (Lit |v#0@@88|)))
(let ((|dt_update#syncRequests#0#1@@4| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (Lit (CrashTolerantMapSpecMod.Variables.syncRequests (Lit |v#0@@88|))) ($Box (int_2_U (LitInt |syncReqId#0@@6|))))))
(|#CrashTolerantMapSpecMod.Variables.Variables| (Lit (CrashTolerantMapSpecMod.Variables.versions |dt_update_tmp#0#1@@10|)) (Lit (CrashTolerantMapSpecMod.Variables.asyncEphemeral |dt_update_tmp#0#1@@10|)) |dt_update#syncRequests#0#1@@4|))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.150:23|
 :weight 3
 :skolemid |2185|
 :pattern ( (CrashTolerantMapSpecMod.__default.ReplySync (Lit |v#0@@88|) (Lit |v'#0@@30|) (LitInt |syncReqId#0@@6|)))
))))
(assert  (=> true (forall ((|c#0@@3| T@U) (|v#0@@89| T@U) (|v'#0@@31| T@U) (|uiop#0| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@3|) DatatypeTypeType) (= (type |v#0@@89|) DatatypeTypeType)) (= (type |v'#0@@31|) DatatypeTypeType)) (= (type |uiop#0|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.NextStep#canCall| |c#0@@3| |v#0@@89| |v'#0@@31| |uiop#0|) (and (and (and ($Is |c#0@@3| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@89| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@31| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.158:22|
 :skolemid |2186|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep |c#0@@3| |v#0@@89| |v'#0@@31| |uiop#0|))
))))
(assert (forall ((|c#0@@4| T@U) (|v#0@@90| T@U) (|v'#0@@32| T@U) (|uiop#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@4|) DatatypeTypeType) (= (type |v#0@@90|) DatatypeTypeType)) (= (type |v'#0@@32|) DatatypeTypeType)) (= (type |uiop#0@@0|) DatatypeTypeType)) (and (and (and ($Is |c#0@@4| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@90| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@32| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0@@0| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CrashTolerantMapSpecMod.__default.NextStep#requires| |c#0@@4| |v#0@@90| |v'#0@@32| |uiop#0@@0|) true))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.158:22|
 :skolemid |2187|
 :pattern ( (|CrashTolerantMapSpecMod.__default.NextStep#requires| |c#0@@4| |v#0@@90| |v'#0@@32| |uiop#0@@0|))
)))
(assert (forall ((arg0@@466 T@U) ) (! (= (type (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| arg0@@466)) DatatypeTypeType)
 :qid |funType:CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| arg0@@466))
)))
(assert  (=> true (forall ((|c#0@@5| T@U) (|v#0@@91| T@U) (|v'#0@@33| T@U) (|uiop#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@5|) DatatypeTypeType) (= (type |v#0@@91|) DatatypeTypeType)) (= (type |v'#0@@33|) DatatypeTypeType)) (= (type |uiop#0@@1|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.NextStep#canCall| |c#0@@5| |v#0@@91| |v'#0@@33| |uiop#0@@1|) (and (and (and ($Is |c#0@@5| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@91| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@33| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0@@1| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@1|) (let ((|baseOp#1| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@1|)))
(|CrashTolerantMapSpecMod.__default.Operate#canCall| |v#0@@91| |v'#0@@33| |baseOp#1|))) (=> (not (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@1|)) (and (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| |uiop#0@@1|) (|CrashTolerantMapSpecMod.__default.Crash#canCall| |v#0@@91| |v'#0@@33|)) (=> (not (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| |uiop#0@@1|)) (and (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| |uiop#0@@1|) (|CrashTolerantMapSpecMod.__default.Sync#canCall| |v#0@@91| |v'#0@@33|)) (=> (not (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| |uiop#0@@1|)) (and (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| |uiop#0@@1|) (let ((|syncReqId#2| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@1|)))
(|CrashTolerantMapSpecMod.__default.ReqSync#canCall| |v#0@@91| |v'#0@@33| |syncReqId#2|))) (=> (not (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| |uiop#0@@1|)) (and (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| |uiop#0@@1|) (let ((|syncReqId#3| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@1|)))
(|CrashTolerantMapSpecMod.__default.ReplySync#canCall| |v#0@@91| |v'#0@@33| |syncReqId#3|))) (=> (not (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| |uiop#0@@1|)) (and (|$IsA#CrashTolerantMapSpecMod.Variables| |v'#0@@33|) (|$IsA#CrashTolerantMapSpecMod.Variables| |v#0@@91|)))))))))))) (= (CrashTolerantMapSpecMod.__default.NextStep |c#0@@5| |v#0@@91| |v'#0@@33| |uiop#0@@1|) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@1|) (let ((|baseOp#0| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@1|)))
(CrashTolerantMapSpecMod.__default.Operate |v#0@@91| |v'#0@@33| |baseOp#0|)) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| |uiop#0@@1|) (CrashTolerantMapSpecMod.__default.Crash |v#0@@91| |v'#0@@33|) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| |uiop#0@@1|) (CrashTolerantMapSpecMod.__default.Sync |v#0@@91| |v'#0@@33|) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| |uiop#0@@1|) (let ((|syncReqId#0@@7| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@1|)))
(CrashTolerantMapSpecMod.__default.ReqSync |v#0@@91| |v'#0@@33| |syncReqId#0@@7|)) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| |uiop#0@@1|) (let ((|syncReqId#1| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@1|)))
(CrashTolerantMapSpecMod.__default.ReplySync |v#0@@91| |v'#0@@33| |syncReqId#1|)) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@33| |v#0@@91|)))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.158:22|
 :skolemid |2188|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep |c#0@@5| |v#0@@91| |v'#0@@33| |uiop#0@@1|))
))))
(assert  (=> true (forall ((|c#0@@6| T@U) (|v#0@@92| T@U) (|v'#0@@34| T@U) (|uiop#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@6|) DatatypeTypeType) (= (type |v#0@@92|) DatatypeTypeType)) (= (type |v'#0@@34|) DatatypeTypeType)) (= (type |uiop#0@@2|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.NextStep#canCall| (Lit |c#0@@6|) (Lit |v#0@@92|) (Lit |v'#0@@34|) (Lit |uiop#0@@2|)) (and (and (and ($Is |c#0@@6| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@92| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@34| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0@@2| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@2|))))) (let ((|baseOp#3| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@2|)))))
(|CrashTolerantMapSpecMod.__default.Operate#canCall| (Lit |v#0@@92|) (Lit |v'#0@@34|) |baseOp#3|))) (=> (not (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| (Lit |uiop#0@@2|))))) (|CrashTolerantMapSpecMod.__default.Crash#canCall| (Lit |v#0@@92|) (Lit |v'#0@@34|))) (=> (not (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| (Lit |uiop#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| (Lit |uiop#0@@2|))))) (|CrashTolerantMapSpecMod.__default.Sync#canCall| (Lit |v#0@@92|) (Lit |v'#0@@34|))) (=> (not (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| (Lit |uiop#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| (Lit |uiop#0@@2|))))) (let ((|syncReqId#6| (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@2|)))))
(|CrashTolerantMapSpecMod.__default.ReqSync#canCall| (Lit |v#0@@92|) (Lit |v'#0@@34|) |syncReqId#6|))) (=> (not (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| (Lit |uiop#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| (Lit |uiop#0@@2|))))) (let ((|syncReqId#7| (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@2|)))))
(|CrashTolerantMapSpecMod.__default.ReplySync#canCall| (Lit |v#0@@92|) (Lit |v'#0@@34|) |syncReqId#7|))) (=> (not (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| (Lit |uiop#0@@2|)))))) (and (|$IsA#CrashTolerantMapSpecMod.Variables| (Lit |v'#0@@34|)) (|$IsA#CrashTolerantMapSpecMod.Variables| (Lit |v#0@@92|))))))))))))) (= (CrashTolerantMapSpecMod.__default.NextStep (Lit |c#0@@6|) (Lit |v#0@@92|) (Lit |v'#0@@34|) (Lit |uiop#0@@2|)) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@2|)) (U_2_bool (let ((|baseOp#2| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@2|)))))
(Lit (bool_2_U (CrashTolerantMapSpecMod.__default.Operate (Lit |v#0@@92|) (Lit |v'#0@@34|) |baseOp#2|))))) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| (Lit |uiop#0@@2|)) (CrashTolerantMapSpecMod.__default.Crash (Lit |v#0@@92|) (Lit |v'#0@@34|)) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| (Lit |uiop#0@@2|)) (CrashTolerantMapSpecMod.__default.Sync (Lit |v#0@@92|) (Lit |v'#0@@34|)) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| (Lit |uiop#0@@2|)) (U_2_bool (let ((|syncReqId#4| (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@2|)))))
(Lit (bool_2_U (CrashTolerantMapSpecMod.__default.ReqSync (Lit |v#0@@92|) (Lit |v'#0@@34|) |syncReqId#4|))))) (ite (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| (Lit |uiop#0@@2|)) (U_2_bool (let ((|syncReqId#5| (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@2|)))))
(Lit (bool_2_U (CrashTolerantMapSpecMod.__default.ReplySync (Lit |v#0@@92|) (Lit |v'#0@@34|) |syncReqId#5|))))) (|CrashTolerantMapSpecMod.Variables#Equal| |v'#0@@34| |v#0@@92|)))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.158:22|
 :weight 3
 :skolemid |2189|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep (Lit |c#0@@6|) (Lit |v#0@@92|) (Lit |v'#0@@34|) (Lit |uiop#0@@2|)))
))))
(assert  (=> true (forall ((|c#0@@7| T@U) (|v#0@@93| T@U) (|v'#0@@35| T@U) (|uiop#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@7|) DatatypeTypeType) (= (type |v#0@@93|) DatatypeTypeType)) (= (type |v'#0@@35|) DatatypeTypeType)) (= (type |uiop#0@@3|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Next#canCall| |c#0@@7| |v#0@@93| |v'#0@@35| |uiop#0@@3|) (and (and (and ($Is |c#0@@7| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@93| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@35| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0@@3| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |RefinementObligationsdfyCrashTolerantModCrashTolerantMapSpecMod.12:18|
 :skolemid |2190|
 :pattern ( (CrashTolerantMapSpecMod.__default.Next |c#0@@7| |v#0@@93| |v'#0@@35| |uiop#0@@3|))
))))
(assert (forall ((|c#0@@8| T@U) (|v#0@@94| T@U) (|v'#0@@36| T@U) (|uiop#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@8|) DatatypeTypeType) (= (type |v#0@@94|) DatatypeTypeType)) (= (type |v'#0@@36|) DatatypeTypeType)) (= (type |uiop#0@@4|) DatatypeTypeType)) (and (and (and ($Is |c#0@@8| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@94| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@36| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0@@4| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CrashTolerantMapSpecMod.__default.Next#requires| |c#0@@8| |v#0@@94| |v'#0@@36| |uiop#0@@4|) true))
 :qid |RefinementObligationsdfyCrashTolerantModCrashTolerantMapSpecMod.12:18|
 :skolemid |2191|
 :pattern ( (|CrashTolerantMapSpecMod.__default.Next#requires| |c#0@@8| |v#0@@94| |v'#0@@36| |uiop#0@@4|))
)))
(assert  (=> true (forall ((|c#0@@9| T@U) (|v#0@@95| T@U) (|v'#0@@37| T@U) (|uiop#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@9|) DatatypeTypeType) (= (type |v#0@@95|) DatatypeTypeType)) (= (type |v'#0@@37|) DatatypeTypeType)) (= (type |uiop#0@@5|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Next#canCall| |c#0@@9| |v#0@@95| |v'#0@@37| |uiop#0@@5|) (and (and (and ($Is |c#0@@9| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@95| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@37| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0@@5| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (forall ((|uiop#1| T@U) ) (!  (=> (and (= (type |uiop#1|) DatatypeTypeType) ($Is |uiop#1| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (|CrashTolerantMapSpecMod.__default.NextStep#canCall| |c#0@@9| |v#0@@95| |v'#0@@37| |uiop#1|))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.172:12|
 :skolemid |2193|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep |c#0@@9| |v#0@@95| |v'#0@@37| |uiop#1|))
)) (= (CrashTolerantMapSpecMod.__default.Next |c#0@@9| |v#0@@95| |v'#0@@37| |uiop#0@@5|) (exists ((|uiop#1@@0| T@U) ) (!  (and (= (type |uiop#1@@0|) DatatypeTypeType) (and ($Is |uiop#1@@0| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) (CrashTolerantMapSpecMod.__default.NextStep |c#0@@9| |v#0@@95| |v'#0@@37| |uiop#1@@0|)))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.172:12|
 :skolemid |2192|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep |c#0@@9| |v#0@@95| |v'#0@@37| |uiop#1@@0|))
)))))
 :qid |RefinementObligationsdfyCrashTolerantModCrashTolerantMapSpecMod.12:18|
 :skolemid |2194|
 :pattern ( (CrashTolerantMapSpecMod.__default.Next |c#0@@9| |v#0@@95| |v'#0@@37| |uiop#0@@5|))
))))
(assert  (=> true (forall ((|c#0@@10| T@U) (|v#0@@96| T@U) (|v'#0@@38| T@U) (|uiop#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |c#0@@10|) DatatypeTypeType) (= (type |v#0@@96|) DatatypeTypeType)) (= (type |v'#0@@38|) DatatypeTypeType)) (= (type |uiop#0@@6|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Next#canCall| (Lit |c#0@@10|) (Lit |v#0@@96|) (Lit |v'#0@@38|) (Lit |uiop#0@@6|)) (and (and (and ($Is |c#0@@10| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@96| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |v'#0@@38| Tclass.CrashTolerantMapSpecMod.Variables)) ($Is |uiop#0@@6| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (forall ((|uiop#2| T@U) ) (!  (=> (and (= (type |uiop#2|) DatatypeTypeType) ($Is |uiop#2| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (|CrashTolerantMapSpecMod.__default.NextStep#canCall| (Lit |c#0@@10|) (Lit |v#0@@96|) (Lit |v'#0@@38|) |uiop#2|))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.172:12|
 :skolemid |2196|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep |c#0@@10| |v#0@@96| |v'#0@@38| |uiop#2|))
)) (= (CrashTolerantMapSpecMod.__default.Next (Lit |c#0@@10|) (Lit |v#0@@96|) (Lit |v'#0@@38|) (Lit |uiop#0@@6|)) (exists ((|uiop#2@@0| T@U) ) (!  (and (= (type |uiop#2@@0|) DatatypeTypeType) (and ($Is |uiop#2@@0| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) (CrashTolerantMapSpecMod.__default.NextStep (Lit |c#0@@10|) (Lit |v#0@@96|) (Lit |v'#0@@38|) |uiop#2@@0|)))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.172:12|
 :skolemid |2195|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep |c#0@@10| |v#0@@96| |v'#0@@38| |uiop#2@@0|))
)))))
 :qid |RefinementObligationsdfyCrashTolerantModCrashTolerantMapSpecMod.12:18|
 :weight 3
 :skolemid |2197|
 :pattern ( (CrashTolerantMapSpecMod.__default.Next (Lit |c#0@@10|) (Lit |v#0@@96|) (Lit |v'#0@@38|) (Lit |uiop#0@@6|)))
))))
(assert  (=> true (forall ((|c#0@@11| T@U) (|v#0@@97| T@U) ) (!  (=> (and (and (= (type |c#0@@11|) DatatypeTypeType) (= (type |v#0@@97|) DatatypeTypeType)) (or (|CrashTolerantMapSpecMod.__default.Init#canCall| |c#0@@11| |v#0@@97|) (and ($Is |c#0@@11| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@97| Tclass.CrashTolerantMapSpecMod.Variables)))) true)
 :qid |RefinementObligationsdfyCrashTolerantModCrashTolerantMapSpecMod.10:18|
 :skolemid |2198|
 :pattern ( (CrashTolerantMapSpecMod.__default.Init |c#0@@11| |v#0@@97|))
))))
(assert (forall ((|c#0@@12| T@U) (|v#0@@98| T@U) ) (!  (=> (and (and (= (type |c#0@@12|) DatatypeTypeType) (= (type |v#0@@98|) DatatypeTypeType)) (and ($Is |c#0@@12| Tclass.CrashTolerantMapSpecMod.Constants) ($Is |v#0@@98| Tclass.CrashTolerantMapSpecMod.Variables))) (= (|CrashTolerantMapSpecMod.__default.Init#requires| |c#0@@12| |v#0@@98|) true))
 :qid |RefinementObligationsdfyCrashTolerantModCrashTolerantMapSpecMod.10:18|
 :skolemid |2199|
 :pattern ( (|CrashTolerantMapSpecMod.__default.Init#requires| |c#0@@12| |v#0@@98|))
)))
(assert (= (DatatypeCtorId |#CrashTolerantMapSpecMod.Constants.Constants|) |##CrashTolerantMapSpecMod.Constants.Constants|))
(assert (forall ((d@@66 T@U) ) (!  (=> (= (type d@@66) DatatypeTypeType) (= (CrashTolerantMapSpecMod.Constants.Constants_q d@@66) (= (DatatypeCtorId d@@66) |##CrashTolerantMapSpecMod.Constants.Constants|)))
 :qid |unknown.0:0|
 :skolemid |2200|
 :pattern ( (CrashTolerantMapSpecMod.Constants.Constants_q d@@66))
)))
(assert (forall ((d@@67 T@U) ) (!  (=> (and (= (type d@@67) DatatypeTypeType) (CrashTolerantMapSpecMod.Constants.Constants_q d@@67)) (= d@@67 |#CrashTolerantMapSpecMod.Constants.Constants|))
 :qid |unknown.0:0|
 :skolemid |2201|
 :pattern ( (CrashTolerantMapSpecMod.Constants.Constants_q d@@67))
)))
(assert ($Is |#CrashTolerantMapSpecMod.Constants.Constants| Tclass.CrashTolerantMapSpecMod.Constants))
(assert (forall (($h@@102 T@U) ) (!  (=> (and (= (type $h@@102) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@102)) ($IsAlloc |#CrashTolerantMapSpecMod.Constants.Constants| Tclass.CrashTolerantMapSpecMod.Constants $h@@102))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |2202|
 :pattern ( ($IsAlloc |#CrashTolerantMapSpecMod.Constants.Constants| Tclass.CrashTolerantMapSpecMod.Constants $h@@102))
)))
(assert (= |#CrashTolerantMapSpecMod.Constants.Constants| (Lit |#CrashTolerantMapSpecMod.Constants.Constants|)))
(assert (forall ((d@@68 T@U) ) (!  (=> (and (= (type d@@68) DatatypeTypeType) (|$IsA#CrashTolerantMapSpecMod.Constants| d@@68)) (CrashTolerantMapSpecMod.Constants.Constants_q d@@68))
 :qid |unknown.0:0|
 :skolemid |2203|
 :pattern ( (|$IsA#CrashTolerantMapSpecMod.Constants| d@@68))
)))
(assert (forall ((d@@69 T@U) ) (!  (=> (and (= (type d@@69) DatatypeTypeType) ($Is d@@69 Tclass.CrashTolerantMapSpecMod.Constants)) (CrashTolerantMapSpecMod.Constants.Constants_q d@@69))
 :qid |unknown.0:0|
 :skolemid |2204|
 :pattern ( (CrashTolerantMapSpecMod.Constants.Constants_q d@@69) ($Is d@@69 Tclass.CrashTolerantMapSpecMod.Constants))
)))
(assert (forall ((a@@138 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) true) (= (|CrashTolerantMapSpecMod.Constants#Equal| a@@138 b@@87) true))
 :qid |unknown.0:0|
 :skolemid |2205|
 :pattern ( (|CrashTolerantMapSpecMod.Constants#Equal| a@@138 b@@87))
)))
(assert (forall ((a@@139 T@U) (b@@88 T@U) ) (!  (=> (and (= (type a@@139) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (= (|CrashTolerantMapSpecMod.Constants#Equal| a@@139 b@@88) (= a@@139 b@@88)))
 :qid |unknown.0:0|
 :skolemid |2206|
 :pattern ( (|CrashTolerantMapSpecMod.Constants#Equal| a@@139 b@@88))
)))
(assert (forall ((|a#5#0#0@@4| T@U) (|a#5#1#0@@1| T@U) (|a#5#2#0| T@U) ) (!  (=> (and (and (= (type |a#5#0#0@@4|) DatatypeTypeType) (= (type |a#5#1#0@@1|) DatatypeTypeType)) (= (type |a#5#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#CrashTolerantMapSpecMod.Variables.Variables| |a#5#0#0@@4| |a#5#1#0@@1| |a#5#2#0|)) |##CrashTolerantMapSpecMod.Variables.Variables|))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2207|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| |a#5#0#0@@4| |a#5#1#0@@1| |a#5#2#0|))
)))
(assert (forall ((d@@70 T@U) ) (!  (=> (= (type d@@70) DatatypeTypeType) (= (CrashTolerantMapSpecMod.Variables.Variables_q d@@70) (= (DatatypeCtorId d@@70) |##CrashTolerantMapSpecMod.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |2208|
 :pattern ( (CrashTolerantMapSpecMod.Variables.Variables_q d@@70))
)))
(assert (forall ((d@@71 T@U) ) (!  (=> (and (= (type d@@71) DatatypeTypeType) (CrashTolerantMapSpecMod.Variables.Variables_q d@@71)) (exists ((|a#6#0#0@@4| T@U) (|a#6#1#0@@2| T@U) (|a#6#2#0| T@U) ) (!  (and (and (and (= (type |a#6#0#0@@4|) DatatypeTypeType) (= (type |a#6#1#0@@2|) DatatypeTypeType)) (= (type |a#6#2#0|) (MapType BoxType BoxType))) (= d@@71 (|#CrashTolerantMapSpecMod.Variables.Variables| |a#6#0#0@@4| |a#6#1#0@@2| |a#6#2#0|)))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2209|
 :no-pattern (type |a#6#0#0@@4|)
 :no-pattern (type |a#6#1#0@@2|)
 :no-pattern (type |a#6#2#0|)
 :no-pattern (U_2_int |a#6#0#0@@4|)
 :no-pattern (U_2_bool |a#6#0#0@@4|)
 :no-pattern (U_2_int |a#6#1#0@@2|)
 :no-pattern (U_2_bool |a#6#1#0@@2|)
 :no-pattern (U_2_int |a#6#2#0|)
 :no-pattern (U_2_bool |a#6#2#0|)
)))
 :qid |unknown.0:0|
 :skolemid |2210|
 :pattern ( (CrashTolerantMapSpecMod.Variables.Variables_q d@@71))
)))
(assert (= (type |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|) TyType))
(assert (= (Tag |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|) |Tagclass.AsyncMod_6#MapSpecMod#.EphemeralState|))
(assert (= (TagFamily |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|) tytagFamily$EphemeralState))
(assert (forall ((bx@@154 T@U) ) (!  (=> (and (= (type bx@@154) BoxType) ($IsBox bx@@154 |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|)) (and (= ($Box ($Unbox DatatypeTypeType bx@@154)) bx@@154) ($Is ($Unbox DatatypeTypeType bx@@154) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|)))
 :qid |unknown.0:0|
 :skolemid |2211|
 :pattern ( ($IsBox bx@@154 |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|))
)))
(assert (forall ((|a#7#0#0@@4| T@U) (|a#7#1#0@@2| T@U) (|a#7#2#0| T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@4|) DatatypeTypeType) (= (type |a#7#1#0@@2|) DatatypeTypeType)) (= (type |a#7#2#0|) (MapType BoxType BoxType))) (= ($Is (|#CrashTolerantMapSpecMod.Variables.Variables| |a#7#0#0@@4| |a#7#1#0@@2| |a#7#2#0|) Tclass.CrashTolerantMapSpecMod.Variables)  (and (and ($Is |a#7#0#0@@4| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)) ($Is |a#7#1#0@@2| |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|)) ($Is |a#7#2#0| (TMap Tclass._System.nat Tclass._System.nat)))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2212|
 :pattern ( ($Is (|#CrashTolerantMapSpecMod.Variables.Variables| |a#7#0#0@@4| |a#7#1#0@@2| |a#7#2#0|) Tclass.CrashTolerantMapSpecMod.Variables))
)))
(assert (forall ((|a#8#0#0@@4| T@U) (|a#8#1#0@@2| T@U) (|a#8#2#0| T@U) ($h@@103 T@U) ) (!  (=> (and (and (and (and (= (type |a#8#0#0@@4|) DatatypeTypeType) (= (type |a#8#1#0@@2|) DatatypeTypeType)) (= (type |a#8#2#0|) (MapType BoxType BoxType))) (= (type $h@@103) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@103)) (= ($IsAlloc (|#CrashTolerantMapSpecMod.Variables.Variables| |a#8#0#0@@4| |a#8#1#0@@2| |a#8#2#0|) Tclass.CrashTolerantMapSpecMod.Variables $h@@103)  (and (and ($IsAlloc |a#8#0#0@@4| (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) $h@@103) ($IsAlloc |a#8#1#0@@2| |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@103)) ($IsAlloc |a#8#2#0| (TMap Tclass._System.nat Tclass._System.nat) $h@@103))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2213|
 :pattern ( ($IsAlloc (|#CrashTolerantMapSpecMod.Variables.Variables| |a#8#0#0@@4| |a#8#1#0@@2| |a#8#2#0|) Tclass.CrashTolerantMapSpecMod.Variables $h@@103))
)))
(assert (forall ((d@@72 T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type d@@72) DatatypeTypeType) (= (type $h@@104) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@104) (and (CrashTolerantMapSpecMod.Variables.Variables_q d@@72) ($IsAlloc d@@72 Tclass.CrashTolerantMapSpecMod.Variables $h@@104)))) ($IsAlloc (CrashTolerantMapSpecMod.Variables.versions d@@72) (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) $h@@104))
 :qid |unknown.0:0|
 :skolemid |2214|
 :pattern ( ($IsAlloc (CrashTolerantMapSpecMod.Variables.versions d@@72) (Tclass.FloatingSeqMod.FloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) $h@@104))
)))
(assert (forall ((d@@73 T@U) ($h@@105 T@U) ) (!  (=> (and (and (= (type d@@73) DatatypeTypeType) (= (type $h@@105) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@105) (and (CrashTolerantMapSpecMod.Variables.Variables_q d@@73) ($IsAlloc d@@73 Tclass.CrashTolerantMapSpecMod.Variables $h@@105)))) ($IsAlloc (CrashTolerantMapSpecMod.Variables.asyncEphemeral d@@73) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@105))
 :qid |unknown.0:0|
 :skolemid |2215|
 :pattern ( ($IsAlloc (CrashTolerantMapSpecMod.Variables.asyncEphemeral d@@73) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@105))
)))
(assert (forall ((d@@74 T@U) ($h@@106 T@U) ) (!  (=> (and (and (= (type d@@74) DatatypeTypeType) (= (type $h@@106) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@106) (and (CrashTolerantMapSpecMod.Variables.Variables_q d@@74) ($IsAlloc d@@74 Tclass.CrashTolerantMapSpecMod.Variables $h@@106)))) ($IsAlloc (CrashTolerantMapSpecMod.Variables.syncRequests d@@74) (TMap Tclass._System.nat Tclass._System.nat) $h@@106))
 :qid |unknown.0:0|
 :skolemid |2216|
 :pattern ( ($IsAlloc (CrashTolerantMapSpecMod.Variables.syncRequests d@@74) (TMap Tclass._System.nat Tclass._System.nat) $h@@106))
)))
(assert (forall ((|a#9#0#0@@2| T@U) (|a#9#1#0@@0| T@U) (|a#9#2#0| T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@2|) DatatypeTypeType) (= (type |a#9#1#0@@0|) DatatypeTypeType)) (= (type |a#9#2#0|) (MapType BoxType BoxType))) (= (|#CrashTolerantMapSpecMod.Variables.Variables| (Lit |a#9#0#0@@2|) (Lit |a#9#1#0@@0|) (Lit |a#9#2#0|)) (Lit (|#CrashTolerantMapSpecMod.Variables.Variables| |a#9#0#0@@2| |a#9#1#0@@0| |a#9#2#0|))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2217|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| (Lit |a#9#0#0@@2|) (Lit |a#9#1#0@@0|) (Lit |a#9#2#0|)))
)))
(assert (forall ((|a#10#0#0@@2| T@U) (|a#10#1#0@@0| T@U) (|a#10#2#0| T@U) ) (!  (=> (and (and (= (type |a#10#0#0@@2|) DatatypeTypeType) (= (type |a#10#1#0@@0|) DatatypeTypeType)) (= (type |a#10#2#0|) (MapType BoxType BoxType))) (= (CrashTolerantMapSpecMod.Variables.versions (|#CrashTolerantMapSpecMod.Variables.Variables| |a#10#0#0@@2| |a#10#1#0@@0| |a#10#2#0|)) |a#10#0#0@@2|))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2218|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| |a#10#0#0@@2| |a#10#1#0@@0| |a#10#2#0|))
)))
(assert (forall ((|a#11#0#0@@2| T@U) (|a#11#1#0@@0| T@U) (|a#11#2#0| T@U) ) (!  (=> (and (and (= (type |a#11#0#0@@2|) DatatypeTypeType) (= (type |a#11#1#0@@0|) DatatypeTypeType)) (= (type |a#11#2#0|) (MapType BoxType BoxType))) (< (DtRank |a#11#0#0@@2|) (DtRank (|#CrashTolerantMapSpecMod.Variables.Variables| |a#11#0#0@@2| |a#11#1#0@@0| |a#11#2#0|))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2219|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| |a#11#0#0@@2| |a#11#1#0@@0| |a#11#2#0|))
)))
(assert (forall ((|a#12#0#0@@1| T@U) (|a#12#1#0@@0| T@U) (|a#12#2#0| T@U) ) (!  (=> (and (and (= (type |a#12#0#0@@1|) DatatypeTypeType) (= (type |a#12#1#0@@0|) DatatypeTypeType)) (= (type |a#12#2#0|) (MapType BoxType BoxType))) (= (CrashTolerantMapSpecMod.Variables.asyncEphemeral (|#CrashTolerantMapSpecMod.Variables.Variables| |a#12#0#0@@1| |a#12#1#0@@0| |a#12#2#0|)) |a#12#1#0@@0|))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2220|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| |a#12#0#0@@1| |a#12#1#0@@0| |a#12#2#0|))
)))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) (|a#13#2#0| T@U) ) (!  (=> (and (and (= (type |a#13#0#0|) DatatypeTypeType) (= (type |a#13#1#0|) DatatypeTypeType)) (= (type |a#13#2#0|) (MapType BoxType BoxType))) (< (DtRank |a#13#1#0|) (DtRank (|#CrashTolerantMapSpecMod.Variables.Variables| |a#13#0#0| |a#13#1#0| |a#13#2#0|))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2221|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| |a#13#0#0| |a#13#1#0| |a#13#2#0|))
)))
(assert (forall ((|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) (|a#14#2#0| T@U) ) (!  (=> (and (and (= (type |a#14#0#0@@0|) DatatypeTypeType) (= (type |a#14#1#0@@0|) DatatypeTypeType)) (= (type |a#14#2#0|) (MapType BoxType BoxType))) (= (CrashTolerantMapSpecMod.Variables.syncRequests (|#CrashTolerantMapSpecMod.Variables.Variables| |a#14#0#0@@0| |a#14#1#0@@0| |a#14#2#0|)) |a#14#2#0|))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2222|
 :pattern ( (|#CrashTolerantMapSpecMod.Variables.Variables| |a#14#0#0@@0| |a#14#1#0@@0| |a#14#2#0|))
)))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0@@0| T@U) (|a#15#2#0| T@U) (d@@75 T@U) ) (!  (=> (and (and (and (and (= (type |a#15#0#0@@0|) DatatypeTypeType) (= (type |a#15#1#0@@0|) DatatypeTypeType)) (= (type |a#15#2#0|) (MapType BoxType BoxType))) (= (type d@@75) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#15#2#0|) ($Box d@@75)))) (< (DtRank d@@75) (DtRank (|#CrashTolerantMapSpecMod.Variables.Variables| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0|))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2223|
 :pattern ( (MapType0Select (|Map#Domain| |a#15#2#0|) ($Box d@@75)) (|#CrashTolerantMapSpecMod.Variables.Variables| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0|))
)))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) (|a#16#2#0| T@U) (bx@@155 T@U) ) (!  (=> (and (and (and (and (= (type |a#16#0#0@@0|) DatatypeTypeType) (= (type |a#16#1#0@@0|) DatatypeTypeType)) (= (type |a#16#2#0|) (MapType BoxType BoxType))) (= (type bx@@155) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#16#2#0|) bx@@155))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#16#2#0|) bx@@155))) (DtRank (|#CrashTolerantMapSpecMod.Variables.Variables| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0|))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.47:5|
 :skolemid |2224|
 :pattern ( (MapType0Select (|Map#Domain| |a#16#2#0|) bx@@155) (|#CrashTolerantMapSpecMod.Variables.Variables| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0|))
)))
(assert (forall ((d@@76 T@U) ) (!  (=> (and (= (type d@@76) DatatypeTypeType) (|$IsA#CrashTolerantMapSpecMod.Variables| d@@76)) (CrashTolerantMapSpecMod.Variables.Variables_q d@@76))
 :qid |unknown.0:0|
 :skolemid |2225|
 :pattern ( (|$IsA#CrashTolerantMapSpecMod.Variables| d@@76))
)))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) ($Is d@@77 Tclass.CrashTolerantMapSpecMod.Variables)) (CrashTolerantMapSpecMod.Variables.Variables_q d@@77))
 :qid |unknown.0:0|
 :skolemid |2226|
 :pattern ( (CrashTolerantMapSpecMod.Variables.Variables_q d@@77) ($Is d@@77 Tclass.CrashTolerantMapSpecMod.Variables))
)))
(assert (forall ((a@@140 T@U) (b@@89 T@U) ) (!  (=> (and (and (= (type a@@140) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) true) (= (|CrashTolerantMapSpecMod.Variables#Equal| a@@140 b@@89)  (and (and (|FloatingSeqMod.FloatingSeq#Equal| (CrashTolerantMapSpecMod.Variables.versions a@@140) (CrashTolerantMapSpecMod.Variables.versions b@@89)) (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (CrashTolerantMapSpecMod.Variables.asyncEphemeral a@@140) (CrashTolerantMapSpecMod.Variables.asyncEphemeral b@@89))) (|Map#Equal| (CrashTolerantMapSpecMod.Variables.syncRequests a@@140) (CrashTolerantMapSpecMod.Variables.syncRequests b@@89)))))
 :qid |unknown.0:0|
 :skolemid |2227|
 :pattern ( (|CrashTolerantMapSpecMod.Variables#Equal| a@@140 b@@89))
)))
(assert (forall ((a@@141 T@U) (b@@90 T@U) ) (!  (=> (and (= (type a@@141) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (= (|CrashTolerantMapSpecMod.Variables#Equal| a@@141 b@@90) (= a@@141 b@@90)))
 :qid |unknown.0:0|
 :skolemid |2228|
 :pattern ( (|CrashTolerantMapSpecMod.Variables#Equal| a@@141 b@@90))
)))
(assert  (=> true (forall ((this@@35 T@U) ) (!  (=> (and (= (type this@@35) DatatypeTypeType) (or (|CrashTolerantMapSpecMod.Variables.WF#canCall| this@@35) ($Is this@@35 Tclass.CrashTolerantMapSpecMod.Variables))) true)
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.56:15|
 :skolemid |2229|
 :pattern ( (CrashTolerantMapSpecMod.Variables.WF this@@35))
))))
(assert (forall ((this@@36 T@U) ) (!  (=> (and (= (type this@@36) DatatypeTypeType) ($Is this@@36 Tclass.CrashTolerantMapSpecMod.Variables)) (= (|CrashTolerantMapSpecMod.Variables.WF#requires| this@@36) true))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.56:15|
 :skolemid |2230|
 :pattern ( (|CrashTolerantMapSpecMod.Variables.WF#requires| this@@36))
)))
(assert  (=> true (forall ((this@@37 T@U) ) (!  (=> (and (= (type this@@37) DatatypeTypeType) (or (|CrashTolerantMapSpecMod.Variables.WF#canCall| this@@37) ($Is this@@37 Tclass.CrashTolerantMapSpecMod.Variables))) (and (and (and (CrashTolerantMapSpecMod.Variables.Variables_q this@@37) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37))) (=> (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37))) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q this@@37) (and (CrashTolerantMapSpecMod.Variables.Variables_q this@@37) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37)))) (|FloatingSeqMod.FloatingSeq.IsActive#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37) (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37)) 1))))) (= (CrashTolerantMapSpecMod.Variables.WF this@@37)  (and (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37))) (FloatingSeqMod.FloatingSeq.IsActive |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37) (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@37)) 1))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.56:15|
 :skolemid |2231|
 :pattern ( (CrashTolerantMapSpecMod.Variables.WF this@@37))
))))
(assert  (=> true (forall ((this@@38 T@U) ) (!  (=> (and (= (type this@@38) DatatypeTypeType) (or (|CrashTolerantMapSpecMod.Variables.WF#canCall| (Lit this@@38)) ($Is this@@38 Tclass.CrashTolerantMapSpecMod.Variables))) (and (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit this@@38)) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38))))) (=> (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38)))))))) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit this@@38)) (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit this@@38)) (|FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38)))))) (|FloatingSeqMod.FloatingSeq.IsActive#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38))) (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38)))) 1)))))) (= (CrashTolerantMapSpecMod.Variables.WF (Lit this@@38)) (U_2_bool (Lit (bool_2_U  (and (INTERNAL_lt_boogie 0 (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38))))) (FloatingSeqMod.FloatingSeq.IsActive |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38))) (LitInt (INTERNAL_sub_boogie (FloatingSeqMod.__default.operator_kcardinality_qFloatingSeq |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@38)))) 1))))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.56:15|
 :weight 3
 :skolemid |2232|
 :pattern ( (CrashTolerantMapSpecMod.Variables.WF (Lit this@@38)))
))))
(assert  (=> true (forall ((this@@39 T@U) ) (!  (=> (and (= (type this@@39) DatatypeTypeType) (or (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| this@@39) ($Is this@@39 Tclass.CrashTolerantMapSpecMod.Variables))) (INTERNAL_le_boogie 0 (CrashTolerantMapSpecMod.Variables.StableIndex this@@39)))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.64:14|
 :skolemid |2233|
 :pattern ( (CrashTolerantMapSpecMod.Variables.StableIndex this@@39))
))))
(assert (forall ((this@@40 T@U) ) (!  (=> (and (= (type this@@40) DatatypeTypeType) ($Is this@@40 Tclass.CrashTolerantMapSpecMod.Variables)) (= (|CrashTolerantMapSpecMod.Variables.StableIndex#requires| this@@40) true))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.64:14|
 :skolemid |2234|
 :pattern ( (|CrashTolerantMapSpecMod.Variables.StableIndex#requires| this@@40))
)))
(assert  (=> true (forall ((this@@41 T@U) ) (!  (=> (and (= (type this@@41) DatatypeTypeType) (or (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| this@@41) ($Is this@@41 Tclass.CrashTolerantMapSpecMod.Variables))) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q this@@41) (|FloatingSeqMod.FloatingSeq.FirstActiveIndex#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@41))) (= (CrashTolerantMapSpecMod.Variables.StableIndex this@@41) (FloatingSeqMod.FloatingSeq.FirstActiveIndex |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (CrashTolerantMapSpecMod.Variables.versions this@@41)))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.64:14|
 :skolemid |2235|
 :pattern ( (CrashTolerantMapSpecMod.Variables.StableIndex this@@41))
))))
(assert  (=> true (forall ((this@@42 T@U) ) (!  (=> (and (= (type this@@42) DatatypeTypeType) (or (|CrashTolerantMapSpecMod.Variables.StableIndex#canCall| (Lit this@@42)) ($Is this@@42 Tclass.CrashTolerantMapSpecMod.Variables))) (and (and (CrashTolerantMapSpecMod.Variables.Variables_q (Lit this@@42)) (|FloatingSeqMod.FloatingSeq.FirstActiveIndex#canCall| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@42))))) (= (CrashTolerantMapSpecMod.Variables.StableIndex (Lit this@@42)) (LitInt (FloatingSeqMod.FloatingSeq.FirstActiveIndex |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| (Lit (CrashTolerantMapSpecMod.Variables.versions (Lit this@@42))))))))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.64:14|
 :weight 3
 :skolemid |2236|
 :pattern ( (CrashTolerantMapSpecMod.Variables.StableIndex (Lit this@@42)))
))))
(assert (= (type Tclass.LSNMod.__default) TyType))
(assert (= (Tag Tclass.LSNMod.__default) Tagclass.LSNMod.__default))
(assert (= (TagFamily Tclass.LSNMod.__default) tytagFamily$_default))
(assert (forall ((bx@@156 T@U) ) (!  (=> (and (= (type bx@@156) BoxType) ($IsBox bx@@156 Tclass.LSNMod.__default)) (and (= ($Box ($Unbox refType bx@@156)) bx@@156) ($Is ($Unbox refType bx@@156) Tclass.LSNMod.__default)))
 :qid |unknown.0:0|
 :skolemid |2237|
 :pattern ( ($IsBox bx@@156 Tclass.LSNMod.__default))
)))
(assert (forall (($o@@39 T@U) ) (!  (=> (= (type $o@@39) refType) (= ($Is $o@@39 Tclass.LSNMod.__default)  (or (= $o@@39 null) (= (dtype $o@@39) Tclass.LSNMod.__default))))
 :qid |unknown.0:0|
 :skolemid |2238|
 :pattern ( ($Is $o@@39 Tclass.LSNMod.__default))
)))
(assert (forall (($o@@40 T@U) ($h@@107 T@U) ) (!  (=> (and (= (type $o@@40) refType) (= (type $h@@107) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@40 Tclass.LSNMod.__default $h@@107)  (or (= $o@@40 null) (U_2_bool (MapType1Select (MapType0Select $h@@107 $o@@40) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2239|
 :pattern ( ($IsAlloc $o@@40 Tclass.LSNMod.__default $h@@107))
)))
(assert (forall ((arg0@@467 T@U) (arg1@@190 Int) ) (! (= (type (|#StampedMod.Stamped.Stamped| arg0@@467 arg1@@190)) DatatypeTypeType)
 :qid |funType:#StampedMod.Stamped.Stamped|
 :pattern ( (|#StampedMod.Stamped.Stamped| arg0@@467 arg1@@190))
)))
(assert (forall ((|a#0#0#0@@3| T@U) (|a#0#1#0@@1| Int) ) (!  (=> (= (type |a#0#0#0@@3|) BoxType) (= (DatatypeCtorId (|#StampedMod.Stamped.Stamped| |a#0#0#0@@3| |a#0#1#0@@1|)) |##StampedMod.Stamped.Stamped|))
 :qid |StampedMapidfy.18:33|
 :skolemid |2240|
 :pattern ( (|#StampedMod.Stamped.Stamped| |a#0#0#0@@3| |a#0#1#0@@1|))
)))
(assert (forall ((d@@78 T@U) ) (!  (=> (= (type d@@78) DatatypeTypeType) (= (StampedMod.Stamped.Stamped_q d@@78) (= (DatatypeCtorId d@@78) |##StampedMod.Stamped.Stamped|)))
 :qid |unknown.0:0|
 :skolemid |2241|
 :pattern ( (StampedMod.Stamped.Stamped_q d@@78))
)))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) (StampedMod.Stamped.Stamped_q d@@79)) (exists ((|a#1#0#0@@3| T@U) (|a#1#1#0@@1| Int) ) (!  (and (= (type |a#1#0#0@@3|) BoxType) (= d@@79 (|#StampedMod.Stamped.Stamped| |a#1#0#0@@3| |a#1#1#0@@1|)))
 :qid |StampedMapidfy.18:33|
 :skolemid |2242|
 :no-pattern (type |a#1#0#0@@3|)
 :no-pattern (U_2_int |a#1#0#0@@3|)
 :no-pattern (U_2_bool |a#1#0#0@@3|)
)))
 :qid |unknown.0:0|
 :skolemid |2243|
 :pattern ( (StampedMod.Stamped.Stamped_q d@@79))
)))
(assert (forall ((StampedMod.Stamped$T@@2 T@U) (|a#2#0#0@@3| T@U) (|a#2#1#0@@1| Int) ) (!  (=> (and (= (type StampedMod.Stamped$T@@2) TyType) (= (type |a#2#0#0@@3|) BoxType)) (= ($Is (|#StampedMod.Stamped.Stamped| |a#2#0#0@@3| |a#2#1#0@@1|) (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@2))  (and ($IsBox |a#2#0#0@@3| StampedMod.Stamped$T@@2) ($Is (int_2_U |a#2#1#0@@1|) Tclass._System.nat))))
 :qid |unknown.0:0|
 :skolemid |2244|
 :pattern ( ($Is (|#StampedMod.Stamped.Stamped| |a#2#0#0@@3| |a#2#1#0@@1|) (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@2)))
)))
(assert (forall ((StampedMod.Stamped$T@@3 T@U) (|a#3#0#0@@3| T@U) (|a#3#1#0@@1| Int) ($h@@108 T@U) ) (!  (=> (and (and (and (= (type StampedMod.Stamped$T@@3) TyType) (= (type |a#3#0#0@@3|) BoxType)) (= (type $h@@108) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@108)) (= ($IsAlloc (|#StampedMod.Stamped.Stamped| |a#3#0#0@@3| |a#3#1#0@@1|) (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@3) $h@@108)  (and ($IsAllocBox |a#3#0#0@@3| StampedMod.Stamped$T@@3 $h@@108) ($IsAlloc (int_2_U |a#3#1#0@@1|) Tclass._System.nat $h@@108))))
 :qid |unknown.0:0|
 :skolemid |2245|
 :pattern ( ($IsAlloc (|#StampedMod.Stamped.Stamped| |a#3#0#0@@3| |a#3#1#0@@1|) (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@3) $h@@108))
)))
(assert (forall ((d@@80 T@U) (StampedMod.Stamped$T@@4 T@U) ($h@@109 T@U) ) (!  (=> (and (and (and (= (type d@@80) DatatypeTypeType) (= (type StampedMod.Stamped$T@@4) TyType)) (= (type $h@@109) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@109) (and (StampedMod.Stamped.Stamped_q d@@80) ($IsAlloc d@@80 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@4) $h@@109)))) ($IsAllocBox (StampedMod.Stamped.value d@@80) StampedMod.Stamped$T@@4 $h@@109))
 :qid |unknown.0:0|
 :skolemid |2246|
 :pattern ( ($IsAllocBox (StampedMod.Stamped.value d@@80) StampedMod.Stamped$T@@4 $h@@109))
)))
(assert (forall ((d@@81 T@U) ($h@@110 T@U) ) (!  (=> (and (and (= (type d@@81) DatatypeTypeType) (= (type $h@@110) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@110) (and (StampedMod.Stamped.Stamped_q d@@81) (exists ((StampedMod.Stamped$T@@5 T@U) ) (!  (and (= (type StampedMod.Stamped$T@@5) TyType) ($IsAlloc d@@81 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@5) $h@@110))
 :qid |unknown.0:0|
 :skolemid |2247|
 :pattern ( ($IsAlloc d@@81 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@5) $h@@110))
))))) ($IsAlloc (int_2_U (StampedMod.Stamped.seqEnd d@@81)) Tclass._System.nat $h@@110))
 :qid |unknown.0:0|
 :skolemid |2248|
 :pattern ( ($IsAlloc (int_2_U (StampedMod.Stamped.seqEnd d@@81)) Tclass._System.nat $h@@110))
)))
(assert (forall ((|a#4#0#0@@3| T@U) (|a#4#1#0@@1| Int) ) (!  (=> (= (type |a#4#0#0@@3|) BoxType) (= (|#StampedMod.Stamped.Stamped| (Lit |a#4#0#0@@3|) (LitInt |a#4#1#0@@1|)) (Lit (|#StampedMod.Stamped.Stamped| |a#4#0#0@@3| |a#4#1#0@@1|))))
 :qid |StampedMapidfy.18:33|
 :skolemid |2249|
 :pattern ( (|#StampedMod.Stamped.Stamped| (Lit |a#4#0#0@@3|) (LitInt |a#4#1#0@@1|)))
)))
(assert (forall ((|a#5#0#0@@5| T@U) (|a#5#1#0@@2| Int) ) (!  (=> (= (type |a#5#0#0@@5|) BoxType) (= (StampedMod.Stamped.value (|#StampedMod.Stamped.Stamped| |a#5#0#0@@5| |a#5#1#0@@2|)) |a#5#0#0@@5|))
 :qid |StampedMapidfy.18:33|
 :skolemid |2250|
 :pattern ( (|#StampedMod.Stamped.Stamped| |a#5#0#0@@5| |a#5#1#0@@2|))
)))
(assert (forall ((|a#6#0#0@@5| T@U) (|a#6#1#0@@3| Int) ) (!  (=> (= (type |a#6#0#0@@5|) BoxType) (< (BoxRank |a#6#0#0@@5|) (DtRank (|#StampedMod.Stamped.Stamped| |a#6#0#0@@5| |a#6#1#0@@3|))))
 :qid |StampedMapidfy.18:33|
 :skolemid |2251|
 :pattern ( (|#StampedMod.Stamped.Stamped| |a#6#0#0@@5| |a#6#1#0@@3|))
)))
(assert (forall ((|a#7#0#0@@5| T@U) (|a#7#1#0@@3| Int) ) (!  (=> (= (type |a#7#0#0@@5|) BoxType) (= (StampedMod.Stamped.seqEnd (|#StampedMod.Stamped.Stamped| |a#7#0#0@@5| |a#7#1#0@@3|)) |a#7#1#0@@3|))
 :qid |StampedMapidfy.18:33|
 :skolemid |2252|
 :pattern ( (|#StampedMod.Stamped.Stamped| |a#7#0#0@@5| |a#7#1#0@@3|))
)))
(assert (forall ((d@@82 T@U) ) (!  (=> (and (= (type d@@82) DatatypeTypeType) (|$IsA#StampedMod.Stamped| d@@82)) (StampedMod.Stamped.Stamped_q d@@82))
 :qid |unknown.0:0|
 :skolemid |2253|
 :pattern ( (|$IsA#StampedMod.Stamped| d@@82))
)))
(assert (forall ((StampedMod.Stamped$T@@6 T@U) (d@@83 T@U) ) (!  (=> (and (and (= (type StampedMod.Stamped$T@@6) TyType) (= (type d@@83) DatatypeTypeType)) ($Is d@@83 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@6))) (StampedMod.Stamped.Stamped_q d@@83))
 :qid |unknown.0:0|
 :skolemid |2254|
 :pattern ( (StampedMod.Stamped.Stamped_q d@@83) ($Is d@@83 (Tclass.StampedMod.Stamped StampedMod.Stamped$T@@6)))
)))
(assert (forall ((a@@142 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) true) (= (|StampedMod.Stamped#Equal| a@@142 b@@91)  (and (= (StampedMod.Stamped.value a@@142) (StampedMod.Stamped.value b@@91)) (= (StampedMod.Stamped.seqEnd a@@142) (StampedMod.Stamped.seqEnd b@@91)))))
 :qid |unknown.0:0|
 :skolemid |2255|
 :pattern ( (|StampedMod.Stamped#Equal| a@@142 b@@91))
)))
(assert (forall ((a@@143 T@U) (b@@92 T@U) ) (!  (=> (and (= (type a@@143) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (= (|StampedMod.Stamped#Equal| a@@143 b@@92) (= a@@143 b@@92)))
 :qid |unknown.0:0|
 :skolemid |2256|
 :pattern ( (|StampedMod.Stamped#Equal| a@@143 b@@92))
)))
(assert (= (type Tclass.StampedMod.__default) TyType))
(assert (= (Tag Tclass.StampedMod.__default) Tagclass.StampedMod.__default))
(assert (= (TagFamily Tclass.StampedMod.__default) tytagFamily$_default))
(assert (forall ((bx@@157 T@U) ) (!  (=> (and (= (type bx@@157) BoxType) ($IsBox bx@@157 Tclass.StampedMod.__default)) (and (= ($Box ($Unbox refType bx@@157)) bx@@157) ($Is ($Unbox refType bx@@157) Tclass.StampedMod.__default)))
 :qid |unknown.0:0|
 :skolemid |2257|
 :pattern ( ($IsBox bx@@157 Tclass.StampedMod.__default))
)))
(assert (forall (($o@@41 T@U) ) (!  (=> (= (type $o@@41) refType) (= ($Is $o@@41 Tclass.StampedMod.__default)  (or (= $o@@41 null) (= (dtype $o@@41) Tclass.StampedMod.__default))))
 :qid |unknown.0:0|
 :skolemid |2258|
 :pattern ( ($Is $o@@41 Tclass.StampedMod.__default))
)))
(assert (forall (($o@@42 T@U) ($h@@111 T@U) ) (!  (=> (and (= (type $o@@42) refType) (= (type $h@@111) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@42 Tclass.StampedMod.__default $h@@111)  (or (= $o@@42 null) (U_2_bool (MapType1Select (MapType0Select $h@@111 $o@@42) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2259|
 :pattern ( ($IsAlloc $o@@42 Tclass.StampedMod.__default $h@@111))
)))
(assert (= (type StampedMod.__default.Empty) DatatypeTypeType))
(assert  (=> true (=> true ($Is StampedMod.__default.Empty (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))))
(assert (= |StampedMod.__default.Empty#requires| true))
(assert  (=> true (=> true (and |TotalKMMapMod.__default.EmptyTotalMap#canCall| (= StampedMod.__default.Empty (Lit (|#StampedMod.Stamped.Stamped| ($Box (Lit TotalKMMapMod.__default.EmptyTotalMap)) (LitInt 0))))))))
(assert  (=> true (=> true (and |TotalKMMapMod.__default.EmptyTotalMap#canCall| (= StampedMod.__default.Empty (Lit (|#StampedMod.Stamped.Stamped| ($Box (Lit TotalKMMapMod.__default.EmptyTotalMap)) (LitInt 0))))))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@158 T@U) ) (!  (=> (and (= (type bx@@158) BoxType) ($IsBox bx@@158 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@158)) bx@@158) ($Is ($Unbox refType bx@@158) Tclass.Mathematics.__default)))
 :qid |unknown.0:0|
 :skolemid |2260|
 :pattern ( ($IsBox bx@@158 Tclass.Mathematics.__default))
)))
(assert (forall (($o@@43 T@U) ) (!  (=> (= (type $o@@43) refType) (= ($Is $o@@43 Tclass.Mathematics.__default)  (or (= $o@@43 null) (= (dtype $o@@43) Tclass.Mathematics.__default))))
 :qid |unknown.0:0|
 :skolemid |2261|
 :pattern ( ($Is $o@@43 Tclass.Mathematics.__default))
)))
(assert (forall (($o@@44 T@U) ($h@@112 T@U) ) (!  (=> (and (= (type $o@@44) refType) (= (type $h@@112) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@44 Tclass.Mathematics.__default $h@@112)  (or (= $o@@44 null) (U_2_bool (MapType1Select (MapType0Select $h@@112 $o@@44) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2262|
 :pattern ( ($IsAlloc $o@@44 Tclass.Mathematics.__default $h@@112))
)))
(assert  (=> true (forall ((|a#0@@11| Int) (|b#0@@1| Int) ) (!  (=> true true)
 :qid |mathematicsidfy.6:15|
 :skolemid |2263|
 :pattern ( (Mathematics.__default.min |a#0@@11| |b#0@@1|))
))))
(assert (forall ((|a#0@@12| Int) (|b#0@@2| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@12| |b#0@@2|) true)
 :qid |mathematicsidfy.6:15|
 :skolemid |2264|
 :pattern ( (|Mathematics.__default.min#requires| |a#0@@12| |b#0@@2|))
)))
(assert  (=> true (forall ((|a#0@@13| Int) (|b#0@@3| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@13| |b#0@@3|) (ite (INTERNAL_lt_boogie |a#0@@13| |b#0@@3|) |a#0@@13| |b#0@@3|)))
 :qid |mathematicsidfy.6:15|
 :skolemid |2265|
 :pattern ( (Mathematics.__default.min |a#0@@13| |b#0@@3|))
))))
(assert  (=> true (forall ((|a#0@@14| Int) (|b#0@@4| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@14|) (LitInt |b#0@@4|)) (ite (INTERNAL_lt_boogie |a#0@@14| |b#0@@4|) |a#0@@14| |b#0@@4|)))
 :qid |mathematicsidfy.6:15|
 :weight 3
 :skolemid |2266|
 :pattern ( (Mathematics.__default.min (LitInt |a#0@@14|) (LitInt |b#0@@4|)))
))))
(assert  (=> true (forall ((|a#0@@15| Int) (|b#0@@5| Int) ) (!  (=> true true)
 :qid |mathematicsidfy.14:15|
 :skolemid |2267|
 :pattern ( (Mathematics.__default.max |a#0@@15| |b#0@@5|))
))))
(assert (forall ((|a#0@@16| Int) (|b#0@@6| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@16| |b#0@@6|) true)
 :qid |mathematicsidfy.14:15|
 :skolemid |2268|
 :pattern ( (|Mathematics.__default.max#requires| |a#0@@16| |b#0@@6|))
)))
(assert  (=> true (forall ((|a#0@@17| Int) (|b#0@@7| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@17| |b#0@@7|) (ite (INTERNAL_lt_boogie |a#0@@17| |b#0@@7|) |b#0@@7| |a#0@@17|)))
 :qid |mathematicsidfy.14:15|
 :skolemid |2269|
 :pattern ( (Mathematics.__default.max |a#0@@17| |b#0@@7|))
))))
(assert  (=> true (forall ((|a#0@@18| Int) (|b#0@@8| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@18|) (LitInt |b#0@@8|)) (ite (INTERNAL_lt_boogie |a#0@@18| |b#0@@8|) |b#0@@8| |a#0@@18|)))
 :qid |mathematicsidfy.14:15|
 :weight 3
 :skolemid |2270|
 :pattern ( (Mathematics.__default.max (LitInt |a#0@@18|) (LitInt |b#0@@8|)))
))))
(assert (forall ((arg0@@468 T@U) (arg1@@191 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@468 arg1@@191)) (MapType0Type BoxType boolType))
 :qid |funType:Mathematics.__default.Set|
 :pattern ( (Mathematics.__default.Set arg0@@468 arg1@@191))
)))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T)))
 :qid |unknown.0:0|
 :skolemid |2271|
 :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|))
))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |2272|
 :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|))
)))
(assert (forall ((arg0@@469 T@U) (arg1@@192 T@U) (arg2@@101 Int) ) (! (= (type (|lambda#126| arg0@@469 arg1@@192 arg2@@101)) (MapType0Type BoxType boolType))
 :qid |funType:lambda#126|
 :pattern ( (|lambda#126| arg0@@469 arg1@@192 arg2@@101))
)))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#126| Mathematics._default.Set$T@@1 |ms#0@@1| 0)))
 :qid |unknown.0:0|
 :skolemid |2273|
 :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|))
))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#126| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2274|
 :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)))
))))
(assert (forall ((arg0@@470 T@U) (arg1@@193 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@470 arg1@@193)) (MapType0Type BoxType boolType))
 :qid |funType:Mathematics.__default.ISet|
 :pattern ( (Mathematics.__default.ISet arg0@@470 arg1@@193))
)))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T)))
 :qid |unknown.0:0|
 :skolemid |2275|
 :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|))
))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true))
 :qid |unknown.0:0|
 :skolemid |2276|
 :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|))
)))
(assert (forall ((arg0@@471 T@U) (arg1@@194 T@U) ) (! (= (type (|lambda#128| arg0@@471 arg1@@194)) (MapType0Type BoxType boolType))
 :qid |funType:lambda#128|
 :pattern ( (|lambda#128| arg0@@471 arg1@@194))
)))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#128| Mathematics._default.ISet$T@@1 |ms#0@@5|)))
 :qid |unknown.0:0|
 :skolemid |2277|
 :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|))
))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#128| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2278|
 :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))
))))
(assert (= (type Tclass.LinearSequence__i.__default) TyType))
(assert (= (Tag Tclass.LinearSequence__i.__default) Tagclass.LinearSequence__i.__default))
(assert (= (TagFamily Tclass.LinearSequence__i.__default) tytagFamily$_default))
(assert (forall (($o@@45 T@U) ) (!  (=> (= (type $o@@45) refType) (= ($Is $o@@45 Tclass.LinearSequence__i.__default)  (or (= $o@@45 null) (= (dtype $o@@45) Tclass.LinearSequence__i.__default))))
 :qid |unknown.0:0|
 :skolemid |2279|
 :pattern ( ($Is $o@@45 Tclass.LinearSequence__i.__default))
)))
(assert (forall (($o@@46 T@U) ($h@@113 T@U) ) (!  (=> (and (= (type $o@@46) refType) (= (type $h@@113) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@46 Tclass.LinearSequence__i.__default $h@@113)  (or (= $o@@46 null) (U_2_bool (MapType1Select (MapType0Select $h@@113 $o@@46) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2280|
 :pattern ( ($IsAlloc $o@@46 Tclass.LinearSequence__i.__default $h@@113))
)))
(assert (forall ((arg0@@472 T@U) (arg1@@195 Int) (arg2@@102 T@U) ) (! (= (type (LinearSequence__i.__default.seq__alloc__init arg0@@472 arg1@@195 arg2@@102)) (SeqType BoxType))
 :qid |funType:LinearSequence__i.__default.seq__alloc__init|
 :pattern ( (LinearSequence__i.__default.seq__alloc__init arg0@@472 arg1@@195 arg2@@102))
)))
(assert  (=> true (forall ((LinearSequence_i._default.seq_alloc_init$A T@U) (|length#0@@8| Int) (|a#0@@19| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.seq_alloc_init$A) TyType) (= (type |a#0@@19|) BoxType)) (or (|LinearSequence__i.__default.seq__alloc__init#canCall| LinearSequence_i._default.seq_alloc_init$A |length#0@@8| |a#0@@19|) (and (and (INTERNAL_le_boogie 0 |length#0@@8|) (INTERNAL_lt_boogie |length#0@@8| 18446744073709551616)) ($IsBox |a#0@@19| LinearSequence_i._default.seq_alloc_init$A)))) (and (and (= (|Seq#Length| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@8| |a#0@@19|)) |length#0@@8|) (forall ((|i#0@@50| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@50|) (INTERNAL_lt_boogie |i#0@@50| (|Seq#Length| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@8| |a#0@@19|)))) (= (|Seq#Index| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@8| |a#0@@19|) |i#0@@50|) |a#0@@19|))
 :qid |LinearSequenceidfy.22:22|
 :skolemid |2281|
 :pattern ( (|Seq#Index| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@8| |a#0@@19|) |i#0@@50|))
))) ($Is (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@8| |a#0@@19|) (TSeq LinearSequence_i._default.seq_alloc_init$A))))
 :qid |unknown.0:0|
 :skolemid |2282|
 :pattern ( (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@8| |a#0@@19|))
))))
(assert (forall ((LinearSequence_i._default.seq_alloc_init$A@@0 T@U) (|length#0@@9| Int) (|a#0@@20| T@U) ) (!  (=> (and (= (type LinearSequence_i._default.seq_alloc_init$A@@0) TyType) (= (type |a#0@@20|) BoxType)) (=> (and (and (INTERNAL_le_boogie 0 |length#0@@9|) (INTERNAL_lt_boogie |length#0@@9| 18446744073709551616)) ($IsBox |a#0@@20| LinearSequence_i._default.seq_alloc_init$A@@0)) (= (|LinearSequence__i.__default.seq__alloc__init#requires| LinearSequence_i._default.seq_alloc_init$A@@0 |length#0@@9| |a#0@@20|) true)))
 :qid |unknown.0:0|
 :skolemid |2283|
 :pattern ( (|LinearSequence__i.__default.seq__alloc__init#requires| LinearSequence_i._default.seq_alloc_init$A@@0 |length#0@@9| |a#0@@20|))
)))
(assert (forall ((arg0@@473 T@U) (arg1@@196 T@U) ) (! (= (type (LinearSequence__i.__default.lseqs arg0@@473 arg1@@196)) (SeqType BoxType))
 :qid |funType:LinearSequence__i.__default.lseqs|
 :pattern ( (LinearSequence__i.__default.lseqs arg0@@473 arg1@@196))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseqs$A T@U) (|l#0@@5| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseqs$A) TyType) (= (type |l#0@@5|) BoxType)) (or (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseqs$A |l#0@@5|) ($IsBox |l#0@@5| (|#$lseq| LinearSequence_i._default.lseqs$A)))) (and (and (_System.__default.rank__is__less__than (TSeq LinearSequence_i._default.lseqs$A) (|#$lseq| LinearSequence_i._default.lseqs$A) ($Box (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@5|)) |l#0@@5|) (= (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@5|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_i._default.lseqs$A |l#0@@5|)))) ($Is (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@5|) (TSeq LinearSequence_i._default.lseqs$A))))
 :qid |unknown.0:0|
 :skolemid |2284|
 :pattern ( (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@5|))
))))
(assert (forall ((LinearSequence_i._default.lseqs$A@@0 T@U) (|l#0@@6| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseqs$A@@0) TyType) (= (type |l#0@@6|) BoxType)) ($IsBox |l#0@@6| (|#$lseq| LinearSequence_i._default.lseqs$A@@0))) (= (|LinearSequence__i.__default.lseqs#requires| LinearSequence_i._default.lseqs$A@@0 |l#0@@6|) true))
 :qid |unknown.0:0|
 :skolemid |2285|
 :pattern ( (|LinearSequence__i.__default.lseqs#requires| LinearSequence_i._default.lseqs$A@@0 |l#0@@6|))
)))
(assert (forall ((arg0@@474 T@U) (arg1@@197 T@U) ) (! (= (type (LinearSequence__i.__default.imagine__lseq arg0@@474 arg1@@197)) BoxType)
 :qid |funType:LinearSequence__i.__default.imagine__lseq|
 :pattern ( (LinearSequence__i.__default.imagine__lseq arg0@@474 arg1@@197))
)))
(assert  (=> true (forall ((LinearSequence_i._default.imagine_lseq$A T@U) (|s#0@@21| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.imagine_lseq$A) TyType) (= (type |s#0@@21|) (SeqType BoxType))) (or (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.imagine_lseq$A |s#0@@21|) ($Is |s#0@@21| (TSeq LinearSequence_i._default.imagine_lseq$A)))) (and (and (|Seq#Equal| (LinearSequence__i.__default.lseqs LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@21|)) |s#0@@21|) (forall ((|i#0@@51| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@51|) (INTERNAL_lt_boogie |i#0@@51| (|Seq#Length| |s#0@@21|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@21|)) |i#0@@51|)))))
 :qid |LinearSequenceidfy.38:20|
 :skolemid |2286|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@21|)) |i#0@@51|)))
))) ($IsBox (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@21|) (|#$lseq| LinearSequence_i._default.imagine_lseq$A))))
 :qid |unknown.0:0|
 :skolemid |2287|
 :pattern ( (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@21|))
))))
(assert (forall ((LinearSequence_i._default.imagine_lseq$A@@0 T@U) (|s#0@@22| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.imagine_lseq$A@@0) TyType) (= (type |s#0@@22|) (SeqType BoxType))) ($Is |s#0@@22| (TSeq LinearSequence_i._default.imagine_lseq$A@@0))) (= (|LinearSequence__i.__default.imagine__lseq#requires| LinearSequence_i._default.imagine_lseq$A@@0 |s#0@@22|) true))
 :qid |unknown.0:0|
 :skolemid |2288|
 :pattern ( (|LinearSequence__i.__default.imagine__lseq#requires| LinearSequence_i._default.imagine_lseq$A@@0 |s#0@@22|))
)))
(assert (forall ((arg0@@475 T@U) (arg1@@198 T@U) ) (! (= (type (LinearSequence__i.__default.linLast arg0@@475 arg1@@198)) BoxType)
 :qid |funType:LinearSequence__i.__default.linLast|
 :pattern ( (LinearSequence__i.__default.linLast arg0@@475 arg1@@198))
)))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A T@U) (|l#0@@7| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A) TyType) (= (type |l#0@@7|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A |l#0@@7|) (and ($IsBox |l#0@@7| (|#$lseq| LinearSequence_i._default.linLast$A)) (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A |l#0@@7|))))) ($IsBox (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A |l#0@@7|) LinearSequence_i._default.linLast$A))
 :qid |unknown.0:0|
 :skolemid |2290|
 :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A |l#0@@7|))
))))
(assert (forall ((LinearSequence_i._default.linLast$A@@0 T@U) (|l#0@@8| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@0) TyType) (= (type |l#0@@8|) BoxType)) ($IsBox |l#0@@8| (|#$lseq| LinearSequence_i._default.linLast$A@@0))) (= (|LinearSequence__i.__default.linLast#requires| LinearSequence_i._default.linLast$A@@0 |l#0@@8|) (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@0 |l#0@@8|))))
 :qid |unknown.0:0|
 :skolemid |2291|
 :pattern ( (|LinearSequence__i.__default.linLast#requires| LinearSequence_i._default.linLast$A@@0 |l#0@@8|))
)))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A@@1 T@U) (|l#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@1) TyType) (= (type |l#0@@9|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (and ($IsBox |l#0@@9| (|#$lseq| LinearSequence_i._default.linLast$A@@1)) (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@1 |l#0@@9|))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@9|)) (= (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (INTERNAL_sub_boogie (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@1 |l#0@@9|) 1)))))
 :qid |unknown.0:0|
 :skolemid |2292|
 :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@1 |l#0@@9|))
))))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A@@2 T@U) (|l#0@@10| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@2) TyType) (= (type |l#0@@10|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (and ($IsBox |l#0@@10| (|#$lseq| LinearSequence_i._default.linLast$A@@2)) (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|))))))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|))) (= (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (LitInt (INTERNAL_sub_boogie (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) 1))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2293|
 :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)))
))))
(assert (forall ((arg0@@476 T@U) (arg1@@199 T@U) ) (! (= (type (LinearSequence__i.__default.ldroplast arg0@@476 arg1@@199)) BoxType)
 :qid |funType:LinearSequence__i.__default.ldroplast|
 :pattern ( (LinearSequence__i.__default.ldroplast arg0@@476 arg1@@199))
)))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A T@U) (|l#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A) TyType) (= (type |l#0@@11|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A |l#0@@11|) (and ($IsBox |l#0@@11| (|#$lseq| LinearSequence_i._default.ldroplast$A)) (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A |l#0@@11|))))) (and (and (= (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A |l#0@@11|) (INTERNAL_add_boogie (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)) 1)) (forall ((|i#0@@52| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@52|) (INTERNAL_lt_boogie |i#0@@52| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)))) (= (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)) |i#0@@52|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A |l#0@@11|) |i#0@@52|))))
 :qid |LinearSequenceidfy.59:20|
 :skolemid |2294|
 :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A |l#0@@11|) |i#0@@52|))
 :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)) |i#0@@52|))
))) ($IsBox (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|) (|#$lseq| LinearSequence_i._default.ldroplast$A))))
 :qid |unknown.0:0|
 :skolemid |2295|
 :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|))
))))
(assert (forall ((LinearSequence_i._default.ldroplast$A@@0 T@U) (|l#0@@12| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@0) TyType) (= (type |l#0@@12|) BoxType)) ($IsBox |l#0@@12| (|#$lseq| LinearSequence_i._default.ldroplast$A@@0))) (= (|LinearSequence__i.__default.ldroplast#requires| LinearSequence_i._default.ldroplast$A@@0 |l#0@@12|) (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@0 |l#0@@12|))))
 :qid |unknown.0:0|
 :skolemid |2296|
 :pattern ( (|LinearSequence__i.__default.ldroplast#requires| LinearSequence_i._default.ldroplast$A@@0 |l#0@@12|))
)))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A@@1 T@U) (|l#0@@13| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@1) TyType) (= (type |l#0@@13|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (and ($IsBox |l#0@@13| (|#$lseq| LinearSequence_i._default.ldroplast$A@@1)) (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|))))) (and (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|)) (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.ldroplast$A@@1 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (INTERNAL_sub_boogie (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) 1)))) (= (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.ldroplast$A@@1 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (INTERNAL_sub_boogie (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) 1))))))
 :qid |unknown.0:0|
 :skolemid |2297|
 :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|))
))))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A@@2 T@U) (|l#0@@14| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@2) TyType) (= (type |l#0@@14|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (and ($IsBox |l#0@@14| (|#$lseq| LinearSequence_i._default.ldroplast$A@@2)) (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|))))))))) (and (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|))) (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.ldroplast$A@@2 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (LitInt (INTERNAL_sub_boogie (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) 1))))) (= (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.ldroplast$A@@2 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (LitInt (INTERNAL_sub_boogie (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) 1)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2298|
 :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)))
))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A T@U) (|l#0@@15| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A) TyType) (= (type |l#0@@15|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A |l#0@@15|) ($IsBox |l#0@@15| (|#$lseq| LinearSequence_i._default.lseq_has_all$A)))) true)
 :qid |unknown.0:0|
 :skolemid |2299|
 :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A |l#0@@15|))
))))
(assert (forall ((LinearSequence_i._default.lseq_has_all$A@@0 T@U) (|l#0@@16| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@0) TyType) (= (type |l#0@@16|) BoxType)) ($IsBox |l#0@@16| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@0))) (= (|LinearSequence__i.__default.lseq__has__all#requires| LinearSequence_i._default.lseq_has_all$A@@0 |l#0@@16|) true))
 :qid |unknown.0:0|
 :skolemid |2300|
 :pattern ( (|LinearSequence__i.__default.lseq__has__all#requires| LinearSequence_i._default.lseq_has_all$A@@0 |l#0@@16|))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A@@1 T@U) (|l#0@@17| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@1) TyType) (= (type |l#0@@17|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) ($IsBox |l#0@@17| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@1)))) (and (forall ((|i#0@@53| Int) ) (!  (=> (INTERNAL_le_boogie 0 |i#0@@53|) (and (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) (=> (INTERNAL_lt_boogie |i#0@@53| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|)) (|LinearExtern.__default.lseq__has#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|))))
 :qid |LinearSequenceidfy.81:12|
 :skolemid |2302|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) |i#0@@53|)))
)) (= (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) (forall ((|i#0@@54| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@54|) (INTERNAL_lt_boogie |i#0@@54| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) |i#0@@54|)))))
 :qid |LinearSequenceidfy.81:12|
 :skolemid |2301|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) |i#0@@54|)))
)))))
 :qid |unknown.0:0|
 :skolemid |2303|
 :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|))
))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A@@2 T@U) (|l#0@@18| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@2) TyType) (= (type |l#0@@18|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)) ($IsBox |l#0@@18| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@2)))) (and (forall ((|i#1@@2| Int) ) (!  (=> (INTERNAL_le_boogie 0 |i#1@@2|) (and (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)) (=> (INTERNAL_lt_boogie |i#1@@2| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|))) (|LinearExtern.__default.lseq__has#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)))))
 :qid |LinearSequenceidfy.81:12|
 :skolemid |2305|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 |l#0@@18|) |i#1@@2|)))
)) (= (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)) (forall ((|i#1@@3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@3|) (INTERNAL_lt_boogie |i#1@@3| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|))) |i#1@@3|)))))
 :qid |LinearSequenceidfy.81:12|
 :skolemid |2304|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 |l#0@@18|) |i#1@@3|)))
)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2306|
 :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)))
))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length_as_uint64$A T@U) (|s#0@@23| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length_as_uint64$A) TyType) (= (type |s#0@@23|) BoxType)) (or (|LinearSequence__i.__default.lseq__length__as__uint64#canCall| LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@23|) (and ($IsBox |s#0@@23| (|#$lseq| LinearSequence_i._default.lseq_length_as_uint64$A)) (INTERNAL_le_boogie (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@23|)) 18446744073709551615)))) (and (= (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@23|) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@23|))) (and (INTERNAL_le_boogie 0 (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@23|)) (INTERNAL_lt_boogie (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@23|) 18446744073709551616))))
 :qid |unknown.0:0|
 :skolemid |2307|
 :pattern ( (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@23|))
))))
(assert (forall ((LinearSequence_i._default.lseq_length_as_uint64$A@@0 T@U) (|s#0@@24| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length_as_uint64$A@@0) TyType) (= (type |s#0@@24|) BoxType)) ($IsBox |s#0@@24| (|#$lseq| LinearSequence_i._default.lseq_length_as_uint64$A@@0))) (= (|LinearSequence__i.__default.lseq__length__as__uint64#requires| LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@24|) (INTERNAL_le_boogie (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@24|)) 18446744073709551615)))
 :qid |unknown.0:0|
 :skolemid |2308|
 :pattern ( (|LinearSequence__i.__default.lseq__length__as__uint64#requires| LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@24|))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A T@U) (|s#0@@25| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A) TyType) (= (type |s#0@@25|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A |s#0@@25|) ($IsBox |s#0@@25| (|#$lseq| LinearSequence_i._default.lseq_length$A)))) (INTERNAL_le_boogie 0 (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A |s#0@@25|)))
 :qid |unknown.0:0|
 :skolemid |2310|
 :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A |s#0@@25|))
))))
(assert (forall ((LinearSequence_i._default.lseq_length$A@@0 T@U) (|s#0@@26| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@0) TyType) (= (type |s#0@@26|) BoxType)) ($IsBox |s#0@@26| (|#$lseq| LinearSequence_i._default.lseq_length$A@@0))) (= (|LinearSequence__i.__default.lseq__length#requires| LinearSequence_i._default.lseq_length$A@@0 |s#0@@26|) true))
 :qid |unknown.0:0|
 :skolemid |2311|
 :pattern ( (|LinearSequence__i.__default.lseq__length#requires| LinearSequence_i._default.lseq_length$A@@0 |s#0@@26|))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A@@1 T@U) (|s#0@@27| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@1) TyType) (= (type |s#0@@27|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A@@1 |s#0@@27|) ($IsBox |s#0@@27| (|#$lseq| LinearSequence_i._default.lseq_length$A@@1)))) (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseq_length$A@@1 |s#0@@27|) (= (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@1 |s#0@@27|) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length$A@@1 |s#0@@27|)))))
 :qid |unknown.0:0|
 :skolemid |2312|
 :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@1 |s#0@@27|))
))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A@@2 T@U) (|s#0@@28| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@2) TyType) (= (type |s#0@@28|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@28|)) ($IsBox |s#0@@28| (|#$lseq| LinearSequence_i._default.lseq_length$A@@2)))) (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@28|)) (= (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@28|)) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@28|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2313|
 :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@28|)))
))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A| T@U) (|s#0@@29| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A|) TyType) (= (type |s#0@@29|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@29|) ($IsBox |s#0@@29| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A|)))) (INTERNAL_le_boogie 0 (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@29|)))
 :qid |unknown.0:0|
 :skolemid |2314|
 :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@29|))
))))
(assert (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@0| T@U) (|s#0@@30| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@0|) TyType) (= (type |s#0@@30|) BoxType)) ($IsBox |s#0@@30| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@0|))) (= (|LinearSequence__i.__default.operator_kcardinality_qlseq#requires| |LinearSequence_i._default.operator'cardinality?lseq$A@@0| |s#0@@30|) true))
 :qid |unknown.0:0|
 :skolemid |2315|
 :pattern ( (|LinearSequence__i.__default.operator_kcardinality_qlseq#requires| |LinearSequence_i._default.operator'cardinality?lseq$A@@0| |s#0@@30|))
)))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@1| T@U) (|s#0@@31| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@1|) TyType) (= (type |s#0@@31|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@31|) ($IsBox |s#0@@31| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@1|)))) (and (|LinearSequence__i.__default.lseq__length#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@31|) (= (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@31|) (LinearSequence__i.__default.lseq__length |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@31|))))
 :qid |unknown.0:0|
 :skolemid |2316|
 :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@31|))
))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@2| T@U) (|s#0@@32| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@2|) TyType) (= (type |s#0@@32|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@32|)) ($IsBox |s#0@@32| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@2|)))) (and (|LinearSequence__i.__default.lseq__length#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@32|)) (= (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@32|)) (LitInt (LinearSequence__i.__default.lseq__length |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@32|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2317|
 :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@32|)))
))))
(assert (forall ((arg0@@477 T@U) (arg1@@200 T@U) (arg2@@103 Int) ) (! (= (type (LinearSequence__i.__default.operator_ksubscript_qlseq arg0@@477 arg1@@200 arg2@@103)) BoxType)
 :qid |funType:LinearSequence__i.__default.operator_ksubscript_qlseq|
 :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq arg0@@477 arg1@@200 arg2@@103))
)))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A| T@U) (|s#0@@33| T@U) (|i#0@@55| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A|) TyType) (= (type |s#0@@33|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@33| |i#0@@55|) (and (and ($IsBox |s#0@@33| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A|)) (INTERNAL_le_boogie 0 |i#0@@55|)) (INTERNAL_lt_boogie |i#0@@55| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@33|))))) ($IsBox (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@33| |i#0@@55|) |LinearSequence_i._default.operator'subscript?lseq$A|))
 :qid |unknown.0:0|
 :skolemid |2318|
 :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@33| |i#0@@55|))
))))
(assert (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@0| T@U) (|s#0@@34| T@U) (|i#0@@56| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@0|) TyType) (= (type |s#0@@34|) BoxType)) (and ($IsBox |s#0@@34| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@0|)) (INTERNAL_le_boogie 0 |i#0@@56|))) (= (|LinearSequence__i.__default.operator_ksubscript_qlseq#requires| |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@34| |i#0@@56|) (INTERNAL_lt_boogie |i#0@@56| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@34|))))
 :qid |unknown.0:0|
 :skolemid |2319|
 :pattern ( (|LinearSequence__i.__default.operator_ksubscript_qlseq#requires| |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@34| |i#0@@56|))
)))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@1| T@U) (|s#0@@35| T@U) (|i#0@@57| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@1|) TyType) (= (type |s#0@@35|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@35| |i#0@@57|) (and (and ($IsBox |s#0@@35| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@1|)) (INTERNAL_le_boogie 0 |i#0@@57|)) (INTERNAL_lt_boogie |i#0@@57| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@35|))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@35|) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@35| |i#0@@57|) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@35|) |i#0@@57|))))
 :qid |unknown.0:0|
 :skolemid |2320|
 :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@35| |i#0@@57|))
))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@2| T@U) (|s#0@@36| T@U) (|i#0@@58| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@2|) TyType) (= (type |s#0@@36|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@36| (LitInt |i#0@@58|)) (and (and ($IsBox |s#0@@36| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@2|)) (INTERNAL_le_boogie 0 |i#0@@58|)) (INTERNAL_lt_boogie |i#0@@58| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@36|))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@36|) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@36| (LitInt |i#0@@58|)) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@36|) (LitInt |i#0@@58|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2321|
 :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@36| (LitInt |i#0@@58|)))
))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@3| T@U) (|s#0@@37| T@U) (|i#0@@59| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@3|) TyType) (= (type |s#0@@37|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@37|) (LitInt |i#0@@59|)) (and (and ($IsBox |s#0@@37| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@3|)) (INTERNAL_le_boogie 0 |i#0@@59|)) (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie |i#0@@59| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@37|))))))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@37|)) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@37|) (LitInt |i#0@@59|)) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@37|)) (LitInt |i#0@@59|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2322|
 :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@37|) (LitInt |i#0@@59|)))
))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A| T@U) (|s#0@@38| T@U) (|i#0@@60| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A|) TyType) (= (type |s#0@@38|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A| |s#0@@38| |i#0@@60|) (and (and ($IsBox |s#0@@38| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A|)) (INTERNAL_le_boogie 0 |i#0@@60|)) (INTERNAL_lt_boogie |i#0@@60| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A| |s#0@@38|))))) true)
 :qid |unknown.0:0|
 :skolemid |2323|
 :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A| |s#0@@38| |i#0@@60|))
))))
(assert (forall ((|LinearSequence_i._default.operator'in?lseq$A@@0| T@U) (|s#0@@39| T@U) (|i#0@@61| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@0|) TyType) (= (type |s#0@@39|) BoxType)) (and ($IsBox |s#0@@39| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@0|)) (INTERNAL_le_boogie 0 |i#0@@61|))) (= (|LinearSequence__i.__default.operator_kin_qlseq#requires| |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@39| |i#0@@61|) (INTERNAL_lt_boogie |i#0@@61| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@39|))))
 :qid |unknown.0:0|
 :skolemid |2324|
 :pattern ( (|LinearSequence__i.__default.operator_kin_qlseq#requires| |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@39| |i#0@@61|))
)))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@1| T@U) (|s#0@@40| T@U) (|i#0@@62| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@1|) TyType) (= (type |s#0@@40|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@40| |i#0@@62|) (and (and ($IsBox |s#0@@40| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@1|)) (INTERNAL_le_boogie 0 |i#0@@62|)) (INTERNAL_lt_boogie |i#0@@62| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@40|))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@40|) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@40| |i#0@@62|) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@40|) |i#0@@62|))))))
 :qid |unknown.0:0|
 :skolemid |2325|
 :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@40| |i#0@@62|))
))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@2| T@U) (|s#0@@41| T@U) (|i#0@@63| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@2|) TyType) (= (type |s#0@@41|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@41| (LitInt |i#0@@63|)) (and (and ($IsBox |s#0@@41| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@2|)) (INTERNAL_le_boogie 0 |i#0@@63|)) (INTERNAL_lt_boogie |i#0@@63| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@41|))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@41|) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@41| (LitInt |i#0@@63|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@41|) (LitInt |i#0@@63|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2326|
 :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@41| (LitInt |i#0@@63|)))
))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@3| T@U) (|s#0@@42| T@U) (|i#0@@64| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@3|) TyType) (= (type |s#0@@42|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@42|) (LitInt |i#0@@64|)) (and (and ($IsBox |s#0@@42| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@3|)) (INTERNAL_le_boogie 0 |i#0@@64|)) (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie |i#0@@64| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@42|))))))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@42|)) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@42|) (LitInt |i#0@@64|)) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@42|))) (LitInt |i#0@@64|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2327|
 :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@42|) (LitInt |i#0@@64|)))
))))
(assert (forall ((arg0@@478 T@U) (arg1@@201 T@U) (arg2@@104 T@U) ) (! (= (type (LinearSequence__i.__default.lseq__add arg0@@478 arg1@@201 arg2@@104)) BoxType)
 :qid |funType:LinearSequence__i.__default.lseq__add|
 :pattern ( (LinearSequence__i.__default.lseq__add arg0@@478 arg1@@201 arg2@@104))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_add$A T@U) (|l#0@@19| T@U) (|r#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_i._default.lseq_add$A) TyType) (= (type |l#0@@19|) BoxType)) (= (type |r#0|) BoxType)) (or (|LinearSequence__i.__default.lseq__add#canCall| LinearSequence_i._default.lseq_add$A |l#0@@19| |r#0|) (and ($IsBox |l#0@@19| (|#$lseq| LinearSequence_i._default.lseq_add$A)) ($IsBox |r#0| (|#$lseq| LinearSequence_i._default.lseq_add$A))))) ($IsBox (LinearSequence__i.__default.lseq__add LinearSequence_i._default.lseq_add$A |l#0@@19| |r#0|) (|#$lseq| LinearSequence_i._default.lseq_add$A)))
 :qid |unknown.0:0|
 :skolemid |2328|
 :pattern ( (LinearSequence__i.__default.lseq__add LinearSequence_i._default.lseq_add$A |l#0@@19| |r#0|))
))))
(assert (forall ((LinearSequence_i._default.lseq_add$A@@0 T@U) (|l#0@@20| T@U) (|r#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_i._default.lseq_add$A@@0) TyType) (= (type |l#0@@20|) BoxType)) (= (type |r#0@@0|) BoxType)) (and ($IsBox |l#0@@20| (|#$lseq| LinearSequence_i._default.lseq_add$A@@0)) ($IsBox |r#0@@0| (|#$lseq| LinearSequence_i._default.lseq_add$A@@0)))) (= (|LinearSequence__i.__default.lseq__add#requires| LinearSequence_i._default.lseq_add$A@@0 |l#0@@20| |r#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |2329|
 :pattern ( (|LinearSequence__i.__default.lseq__add#requires| LinearSequence_i._default.lseq_add$A@@0 |l#0@@20| |r#0@@0|))
)))
(assert (forall ((arg0@@479 T@U) (arg1@@202 T@U) (arg2@@105 Int) ) (! (= (type (LinearSequence__i.__default.lseq__peek arg0@@479 arg1@@202 arg2@@105)) BoxType)
 :qid |funType:LinearSequence__i.__default.lseq__peek|
 :pattern ( (LinearSequence__i.__default.lseq__peek arg0@@479 arg1@@202 arg2@@105))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_peek$A T@U) (|s#0@@43| T@U) (|i#0@@65| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_peek$A) TyType) (= (type |s#0@@43|) BoxType)) (or (|LinearSequence__i.__default.lseq__peek#canCall| LinearSequence_i._default.lseq_peek$A |s#0@@43| |i#0@@65|) (and (and ($IsBox |s#0@@43| (|#$lseq| LinearSequence_i._default.lseq_peek$A)) (and (INTERNAL_le_boogie 0 |i#0@@65|) (INTERNAL_lt_boogie |i#0@@65| 18446744073709551616))) (and (INTERNAL_lt_boogie |i#0@@65| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_peek$A |s#0@@43|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_peek$A |s#0@@43|) |i#0@@65|))))))) (and (= (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@43| |i#0@@65|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_peek$A |s#0@@43|) |i#0@@65|)) ($IsBox (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@43| |i#0@@65|) LinearSequence_i._default.lseq_peek$A)))
 :qid |unknown.0:0|
 :skolemid |2330|
 :pattern ( (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@43| |i#0@@65|))
))))
(assert (forall ((LinearSequence_i._default.lseq_peek$A@@0 T@U) (|s#0@@44| T@U) (|i#0@@66| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_peek$A@@0) TyType) (= (type |s#0@@44|) BoxType)) (and ($IsBox |s#0@@44| (|#$lseq| LinearSequence_i._default.lseq_peek$A@@0)) (and (INTERNAL_le_boogie 0 |i#0@@66|) (INTERNAL_lt_boogie |i#0@@66| 18446744073709551616)))) (= (|LinearSequence__i.__default.lseq__peek#requires| LinearSequence_i._default.lseq_peek$A@@0 |s#0@@44| |i#0@@66|)  (and (INTERNAL_lt_boogie |i#0@@66| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_peek$A@@0 |s#0@@44|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_peek$A@@0 |s#0@@44|) |i#0@@66|))))))
 :qid |unknown.0:0|
 :skolemid |2331|
 :pattern ( (|LinearSequence__i.__default.lseq__peek#requires| LinearSequence_i._default.lseq_peek$A@@0 |s#0@@44| |i#0@@66|))
)))
(assert (forall ((arg0@@480 T@U) (arg1@@203 T@U) ) (! (= (type (LinearSequence__i.__default.lseq__free__fun arg0@@480 arg1@@203)) DatatypeTypeType)
 :qid |funType:LinearSequence__i.__default.lseq__free__fun|
 :pattern ( (LinearSequence__i.__default.lseq__free__fun arg0@@480 arg1@@203))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_free_fun$A T@U) (|s#0@@45| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_free_fun$A) TyType) (= (type |s#0@@45|) BoxType)) (or (|LinearSequence__i.__default.lseq__free__fun#canCall| LinearSequence_i._default.lseq_free_fun$A |s#0@@45|) (and ($IsBox |s#0@@45| (|#$lseq| LinearSequence_i._default.lseq_free_fun$A)) (forall ((|i#0@@67| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@67|) (INTERNAL_lt_boogie |i#0@@67| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_free_fun$A |s#0@@45|))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A |s#0@@45|) |i#0@@67|)))))
 :qid |LinearSequenceidfy.147:23|
 :skolemid |2337|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A |s#0@@45|) |i#0@@67|)))
))))) ($Is (LinearSequence__i.__default.lseq__free__fun LinearSequence_i._default.lseq_free_fun$A |s#0@@45|) Tclass._System.Tuple0))
 :qid |unknown.0:0|
 :skolemid |2338|
 :pattern ( (LinearSequence__i.__default.lseq__free__fun LinearSequence_i._default.lseq_free_fun$A |s#0@@45|))
))))
(assert (forall ((LinearSequence_i._default.lseq_free_fun$A@@0 T@U) (|s#0@@46| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_free_fun$A@@0) TyType) (= (type |s#0@@46|) BoxType)) ($IsBox |s#0@@46| (|#$lseq| LinearSequence_i._default.lseq_free_fun$A@@0))) (= (|LinearSequence__i.__default.lseq__free__fun#requires| LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@46|) (forall ((|i#1@@4| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@4|) (INTERNAL_lt_boogie |i#1@@4| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@46|))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@46|) |i#1@@4|)))))
 :qid |LinearSequenceidfy.147:23|
 :skolemid |2339|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@46|) |i#1@@4|)))
))))
 :qid |unknown.0:0|
 :skolemid |2340|
 :pattern ( (|LinearSequence__i.__default.lseq__free__fun#requires| LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@46|))
)))
(assert (forall ((arg0@@481 T@U) (arg1@@204 T@U) (arg2@@106 Int) ) (! (= (type (LinearSequence__i.__default.lseq__take__fun arg0@@481 arg1@@204 arg2@@106)) DatatypeTypeType)
 :qid |funType:LinearSequence__i.__default.lseq__take__fun|
 :pattern ( (LinearSequence__i.__default.lseq__take__fun arg0@@481 arg1@@204 arg2@@106))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_take_fun$A T@U) (|s1#0@@5| T@U) (|i#0@@68| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_take_fun$A) TyType) (= (type |s1#0@@5|) BoxType)) (or (|LinearSequence__i.__default.lseq__take__fun#canCall| LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@68|) (and (and ($IsBox |s1#0@@5| (|#$lseq| LinearSequence_i._default.lseq_take_fun$A)) (and (INTERNAL_le_boogie 0 |i#0@@68|) (INTERNAL_lt_boogie |i#0@@68| 18446744073709551616))) (and (INTERNAL_lt_boogie |i#0@@68| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@68|))))))) (and (and (and (= (_System.Tuple2OLL._1 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@68|)) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@68|)) (|Seq#Equal| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@68|))) (|Seq#Update| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@68| ($Box (Lit (bool_2_U false)))))) (forall ((|j#0@@0| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |j#0@@0|) (and (INTERNAL_lt_boogie |j#0@@0| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|)) (not (= |j#0@@0| |i#0@@68|)))) (= (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@68|))) |j#0@@0|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |j#0@@0|)))
 :qid |LinearSequenceidfy.200:22|
 :skolemid |2349|
 :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |j#0@@0|))
 :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@68|))) |j#0@@0|))
))) ($Is (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@68|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_i._default.lseq_take_fun$A) LinearSequence_i._default.lseq_take_fun$A))))
 :qid |unknown.0:0|
 :skolemid |2350|
 :pattern ( (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@68|))
))))
(assert (forall ((LinearSequence_i._default.lseq_take_fun$A@@0 T@U) (|s1#0@@6| T@U) (|i#0@@69| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_take_fun$A@@0) TyType) (= (type |s1#0@@6|) BoxType)) (and ($IsBox |s1#0@@6| (|#$lseq| LinearSequence_i._default.lseq_take_fun$A@@0)) (and (INTERNAL_le_boogie 0 |i#0@@69|) (INTERNAL_lt_boogie |i#0@@69| 18446744073709551616)))) (= (|LinearSequence__i.__default.lseq__take__fun#requires| LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6| |i#0@@69|)  (and (INTERNAL_lt_boogie |i#0@@69| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6|) |i#0@@69|))))))
 :qid |unknown.0:0|
 :skolemid |2351|
 :pattern ( (|LinearSequence__i.__default.lseq__take__fun#requires| LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6| |i#0@@69|))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A T@U) (|s#0@@47| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A) TyType) (= (type |s#0@@47|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A |s#0@@47|) ($IsBox |s#0@@47| (|#$lseq| LinearSequence_i._default.lseq_full$A)))) true)
 :qid |unknown.0:0|
 :skolemid |2354|
 :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A |s#0@@47|))
))))
(assert (forall ((LinearSequence_i._default.lseq_full$A@@0 T@U) (|s#0@@48| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@0) TyType) (= (type |s#0@@48|) BoxType)) ($IsBox |s#0@@48| (|#$lseq| LinearSequence_i._default.lseq_full$A@@0))) (= (|LinearSequence__i.__default.lseq__full#requires| LinearSequence_i._default.lseq_full$A@@0 |s#0@@48|) true))
 :qid |unknown.0:0|
 :skolemid |2355|
 :pattern ( (|LinearSequence__i.__default.lseq__full#requires| LinearSequence_i._default.lseq_full$A@@0 |s#0@@48|))
)))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A@@1 T@U) (|s#0@@49| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@1) TyType) (= (type |s#0@@49|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|) ($IsBox |s#0@@49| (|#$lseq| LinearSequence_i._default.lseq_full$A@@1)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#0@@70| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |i#0@@70|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|)) (=> (and (INTERNAL_le_boogie 0 |i#0@@70|) (INTERNAL_lt_boogie |i#0@@70| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|))) (|LinearSequence__i.__default.operator_kin_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@49| |i#0@@70|)))
 :qid |LinearSequenceidfy.231:18|
 :skolemid |2357|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|) |i#0@@70|)))
))) (= (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|)  (and true (forall ((|i#0@@71| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@71|) (INTERNAL_lt_boogie |i#0@@71| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|) |i#0@@71|))))
 :qid |LinearSequenceidfy.231:18|
 :skolemid |2356|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|) |i#0@@71|)))
))))))
 :qid |unknown.0:0|
 :skolemid |2358|
 :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@1 |s#0@@49|))
))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A@@2 T@U) (|s#0@@50| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@2) TyType) (= (type |s#0@@50|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|)) ($IsBox |s#0@@50| (|#$lseq| LinearSequence_i._default.lseq_full$A@@2)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1@@5| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |i#1@@5|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|))) (=> (and (INTERNAL_le_boogie 0 |i#1@@5|) (INTERNAL_lt_boogie |i#1@@5| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|)))) (|LinearSequence__i.__default.operator_kin_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|) |i#1@@5|)))
 :qid |LinearSequenceidfy.231:18|
 :skolemid |2360|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 |s#0@@50|) |i#1@@5|)))
))) (= (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|))  (and true (forall ((|i#1@@6| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@6|) (INTERNAL_lt_boogie |i#1@@6| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|))) |i#1@@6|))))
 :qid |LinearSequenceidfy.231:18|
 :skolemid |2359|
 :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 |s#0@@50|) |i#1@@6|)))
))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2361|
 :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@50|)))
))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@159 T@U) ) (!  (=> (and (= (type bx@@159) BoxType) ($IsBox bx@@159 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@159)) bx@@159) ($Is ($Unbox refType bx@@159) Tclass.Sequences.__default)))
 :qid |unknown.0:0|
 :skolemid |2395|
 :pattern ( ($IsBox bx@@159 Tclass.Sequences.__default))
)))
(assert (forall (($o@@47 T@U) ) (!  (=> (= (type $o@@47) refType) (= ($Is $o@@47 Tclass.Sequences.__default)  (or (= $o@@47 null) (= (dtype $o@@47) Tclass.Sequences.__default))))
 :qid |unknown.0:0|
 :skolemid |2396|
 :pattern ( ($Is $o@@47 Tclass.Sequences.__default))
)))
(assert (forall (($o@@48 T@U) ($h@@114 T@U) ) (!  (=> (and (= (type $o@@48) refType) (= (type $h@@114) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@48 Tclass.Sequences.__default $h@@114)  (or (= $o@@48 null) (U_2_bool (MapType1Select (MapType0Select $h@@114 $o@@48) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2397|
 :pattern ( ($IsAlloc $o@@48 Tclass.Sequences.__default $h@@114))
)))
(assert (forall ((arg0@@482 T@U) (arg1@@205 T@U) ) (! (= (type (Sequences.__default.Last arg0@@482 arg1@@205)) BoxType)
 :qid |funType:Sequences.__default.Last|
 :pattern ( (Sequences.__default.Last arg0@@482 arg1@@205))
)))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@7|) (and ($Is |run#0@@7| (TSeq Sequences._default.Last$E)) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@7|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|) Sequences._default.Last$E))
 :qid |unknown.0:0|
 :skolemid |2398|
 :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|))
))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@8|) 0)))
 :qid |unknown.0:0|
 :skolemid |2399|
 :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|))
)))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) (and ($Is |run#0@@9| (TSeq Sequences._default.Last$E@@1)) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@9|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) (|Seq#Index| |run#0@@9| (INTERNAL_sub_boogie (|Seq#Length| |run#0@@9|) 1))))
 :qid |unknown.0:0|
 :skolemid |2400|
 :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|))
))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (and ($Is |run#0@@10| (TSeq Sequences._default.Last$E@@2)) (INTERNAL_gt_boogie (|Seq#Length| (Lit |run#0@@10|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (|Seq#Index| (Lit |run#0@@10|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |run#0@@10|)) 1))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2401|
 :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)))
))))
(assert (forall ((arg0@@483 T@U) (arg1@@206 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@483 arg1@@206)) DatatypeTypeType)
 :qid |funType:Sequences.__default.FirstOpt|
 :pattern ( (Sequences.__default.FirstOpt arg0@@483 arg1@@206))
)))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.FirstOpt$E)))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|) (Tclass.Options.Option Sequences._default.FirstOpt$E)))
 :qid |unknown.0:0|
 :skolemid |2402|
 :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|))
))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|) true))
 :qid |unknown.0:0|
 :skolemid |2403|
 :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|))
)))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.FirstOpt$E@@1)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|) (ite (= (|Seq#Length| |run#0@@13|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@13| (LitInt 0))))))
 :qid |unknown.0:0|
 :skolemid |2404|
 :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|))
))))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.FirstOpt$E@@2)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) (ite (= (|Seq#Length| (Lit |run#0@@14|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@14|) (LitInt 0))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2405|
 :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)))
))))
(assert (forall ((arg0@@484 T@U) (arg1@@207 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@484 arg1@@207)) (SeqType BoxType))
 :qid |funType:Sequences.__default.DropLast|
 :pattern ( (Sequences.__default.DropLast arg0@@484 arg1@@207))
)))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@15|) (and ($Is |run#0@@15| (TSeq Sequences._default.DropLast$E)) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@15|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|) (TSeq Sequences._default.DropLast$E)))
 :qid |unknown.0:0|
 :skolemid |2406|
 :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|))
))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@16|) 0)))
 :qid |unknown.0:0|
 :skolemid |2407|
 :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|))
)))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@17|) (and ($Is |run#0@@17| (TSeq Sequences._default.DropLast$E@@1)) (INTERNAL_gt_boogie (|Seq#Length| |run#0@@17|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|) (|Seq#Take| |run#0@@17| (INTERNAL_sub_boogie (|Seq#Length| |run#0@@17|) 1))))
 :qid |unknown.0:0|
 :skolemid |2408|
 :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|))
))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (and ($Is |run#0@@18| (TSeq Sequences._default.DropLast$E@@2)) (INTERNAL_gt_boogie (|Seq#Length| (Lit |run#0@@18|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (|Seq#Take| (Lit |run#0@@18|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |run#0@@18|)) 1))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2409|
 :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)))
))))
(assert (forall ((arg0@@485 T@U) (arg1@@208 T@U) ) (! (= (type (Sequences.__default.Set arg0@@485 arg1@@208)) (MapType0Type BoxType boolType))
 :qid |funType:Sequences.__default.Set|
 :pattern ( (Sequences.__default.Set arg0@@485 arg1@@208))
)))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@19|) ($Is |run#0@@19| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|) (TSet Sequences._default.Set$T)))
 :qid |unknown.0:0|
 :skolemid |2410|
 :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|))
))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@20|) (SeqType BoxType))) ($Is |run#0@@20| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|) true))
 :qid |unknown.0:0|
 :skolemid |2411|
 :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|))
)))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@21|) ($Is |run#0@@21| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|) (|lambda#126| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@21|) 0)))
 :qid |unknown.0:0|
 :skolemid |2412|
 :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|))
))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@22|)) ($Is |run#0@@22| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)) (|lambda#126| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@22|)) 0)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2413|
 :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)))
))))
(assert (forall ((arg0@@486 T@U) (arg1@@209 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@486 arg1@@209)) (MapType0Type BoxType boolType))
 :qid |funType:Sequences.__default.ISet|
 :pattern ( (Sequences.__default.ISet arg0@@486 arg1@@209))
)))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@23|) ($Is |run#0@@23| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|) (TISet Sequences._default.ISet$T)))
 :qid |unknown.0:0|
 :skolemid |2414|
 :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|))
))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@24|) (SeqType BoxType))) ($Is |run#0@@24| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|) true))
 :qid |unknown.0:0|
 :skolemid |2415|
 :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|))
)))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@25|) ($Is |run#0@@25| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|) (|lambda#126| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@25|) 0)))
 :qid |unknown.0:0|
 :skolemid |2416|
 :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|))
))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) ($Is |run#0@@26| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) (|lambda#126| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@26|)) 0)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2417|
 :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)))
))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@16 T@U) (|a#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@16) LayerTypeType)) (= (type |a#0@@21|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@16) |a#0@@21|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@16 |a#0@@21|)))
 :qid |unknown.0:0|
 :skolemid |2418|
 :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@16) |a#0@@21|))
)))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@17 T@U) (|a#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@17) LayerTypeType)) (= (type |a#0@@22|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@17 |a#0@@22|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@22|)))
 :qid |unknown.0:0|
 :skolemid |2419|
 :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@17) |a#0@@22|))
)))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@18 T@U) (|a#0@@23| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@18) LayerTypeType)) (= (type |a#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@23|) ($Is |a#0@@23| (TSeq Sequences._default.NoDupes$T@@1)))) true)
 :qid |unknown.0:0|
 :skolemid |2420|
 :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@18 |a#0@@23|))
))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@19 T@U) (|a#0@@24| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@19) LayerTypeType)) (= (type |a#0@@24|) (SeqType BoxType))) ($Is |a#0@@24| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@19 |a#0@@24|) true))
 :qid |unknown.0:0|
 :skolemid |2421|
 :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@19 |a#0@@24|))
)))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@20 T@U) (|a#0@@25| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@20) LayerTypeType)) (= (type |a#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@25|) ($Is |a#0@@25| (TSeq Sequences._default.NoDupes$T@@3)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@20) |a#0@@25|) (forall ((|i#0@@72| Int) (|j#0@@1| Int) ) (!  (=> true (=> (and (and (and (INTERNAL_le_boogie 0 |i#0@@72|) (INTERNAL_lt_boogie |i#0@@72| (|Seq#Length| |a#0@@25|))) (and (INTERNAL_le_boogie 0 |j#0@@1|) (INTERNAL_lt_boogie |j#0@@1| (|Seq#Length| |a#0@@25|)))) (not (= |i#0@@72| |j#0@@1|))) (not (= (|Seq#Index| |a#0@@25| |i#0@@72|) (|Seq#Index| |a#0@@25| |j#0@@1|)))))
 :qid |Sequencesidfy.70:13|
 :skolemid |2422|
 :pattern ( (|Seq#Index| |a#0@@25| |j#0@@1|) (|Seq#Index| |a#0@@25| |i#0@@72|))
))))
 :qid |unknown.0:0|
 :skolemid |2423|
 :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@20) |a#0@@25|))
))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@21 T@U) (|a#0@@26| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@21) LayerTypeType)) (= (type |a#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@26|)) ($Is |a#0@@26| (TSeq Sequences._default.NoDupes$T@@4)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@21) (Lit |a#0@@26|)) (forall ((|i#1@@7| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (and (INTERNAL_le_boogie 0 |i#1@@7|) (INTERNAL_lt_boogie |i#1@@7| (|Seq#Length| (Lit |a#0@@26|)))) (and (INTERNAL_le_boogie 0 |j#1@@0|) (INTERNAL_lt_boogie |j#1@@0| (|Seq#Length| (Lit |a#0@@26|))))) (not (= |i#1@@7| |j#1@@0|))) (not (= (|Seq#Index| (Lit |a#0@@26|) |i#1@@7|) (|Seq#Index| (Lit |a#0@@26|) |j#1@@0|)))))
 :qid |Sequencesidfy.70:13|
 :skolemid |2424|
 :pattern ( (|Seq#Index| |a#0@@26| |j#1@@0|) (|Seq#Index| |a#0@@26| |i#1@@7|))
))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2425|
 :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@21) (Lit |a#0@@26|)))
))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@51| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@51|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@51| |e#0|) (and (and ($Is |s#0@@51| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@51| |e#0|)))) (and (and (INTERNAL_le_boogie 0 (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@51| |e#0|)) (INTERNAL_lt_boogie (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@51| |e#0|) (|Seq#Length| |s#0@@51|))) (= (|Seq#Index| |s#0@@51| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@51| |e#0|)) |e#0|)))
 :qid |unknown.0:0|
 :skolemid |2426|
 :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@51| |e#0|))
))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@12 T@U) (|s#0@@52| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |s#0@@52|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@12) ($Is |s#0@@52| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@52| |e#0@@0|) (|Seq#Contains| |s#0@@52| |e#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2427|
 :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@52| |e#0@@0|) ($IsGoodHeap $Heap@@12))
)))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (INTERNAL_le_boogie 0 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (INTERNAL_lt_boogie (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e)))
 :qid |Sequencesidfy.121:5|
 :skolemid |2428|
 :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e))
)))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@13 T@U) (|s#0@@53| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |s#0@@53|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@53| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |s#0@@53| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@53| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@53| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@53| |e#0@@1|) (let ((|i#0@@73| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@53| |e#0@@1|)))
|i#0@@73|))))
 :qid |unknown.0:0|
 :skolemid |2429|
 :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@53| |e#0@@1|) ($IsGoodHeap $Heap@@13))
))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@14 T@U) (|s#0@@54| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |s#0@@54|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@54|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@14) ($Is |s#0@@54| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@54| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@54|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@54|) |e#0@@2|) (let ((|i#1@@8| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@54|) |e#0@@2|)))
|i#1@@8|))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2430|
 :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@54|) |e#0@@2|) ($IsGoodHeap $Heap@@14))
))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@15 T@U) (|s#0@@55| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |s#0@@55|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@55|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@15) ($Is |s#0@@55| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@55| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@55|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@55|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@55|) (Lit |e#0@@3|))))
|i#2|))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2431|
 :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@55|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@15))
))))
(assert (forall ((arg0@@487 T@U) (arg1@@210 Int) ) (! (= (type (Sequences.__default.Range arg0@@487 arg1@@210)) (SeqType BoxType))
 :qid |funType:Sequences.__default.Range|
 :pattern ( (Sequences.__default.Range arg0@@487 arg1@@210))
)))
(assert (forall (($ly@@22 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@22) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@22) |n#0|) (Sequences.__default.Range $ly@@22 |n#0|)))
 :qid |Sequencesidfy.125:22|
 :skolemid |2432|
 :pattern ( (Sequences.__default.Range ($LS $ly@@22) |n#0|))
)))
(assert (forall (($ly@@23 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@23) LayerTypeType) (= (Sequences.__default.Range $ly@@23 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|)))
 :qid |Sequencesidfy.125:22|
 :skolemid |2433|
 :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@23) |n#0@@0|))
)))
(assert  (=> true (forall (($ly@@24 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@24) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (INTERNAL_ge_boogie |n#0@@1| 0))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@24 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@74| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@74|) (INTERNAL_lt_boogie |i#0@@74| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@24 |n#0@@1|) |i#0@@74|))) |i#0@@74|))
 :qid |Sequencesidfy.128:20|
 :skolemid |2434|
 :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@24 |n#0@@1|) |i#0@@74|)))
))) ($Is (Sequences.__default.Range $ly@@24 |n#0@@1|) (TSeq TInt))))
 :qid |Sequencesidfy.125:22|
 :skolemid |2435|
 :pattern ( (Sequences.__default.Range $ly@@24 |n#0@@1|))
))))
(assert (forall (($ly@@25 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@25) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@25 |n#0@@2|) (INTERNAL_ge_boogie |n#0@@2| 0)))
 :qid |Sequencesidfy.125:22|
 :skolemid |2436|
 :pattern ( (|Sequences.__default.Range#requires| $ly@@25 |n#0@@2|))
)))
(assert  (=> true (forall (($ly@@26 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@26) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (INTERNAL_ge_boogie |n#0@@3| 0))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (INTERNAL_sub_boogie |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@26) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@26 (INTERNAL_sub_boogie |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (INTERNAL_sub_boogie |n#0@@3| 1)))))))))
 :qid |Sequencesidfy.125:22|
 :skolemid |2437|
 :pattern ( (Sequences.__default.Range ($LS $ly@@26) |n#0@@3|))
))))
(assert  (=> true (forall (($ly@@27 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@27) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (INTERNAL_ge_boogie |n#0@@4| 0))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (INTERNAL_sub_boogie |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@27) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@27) (LitInt (INTERNAL_sub_boogie |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (INTERNAL_sub_boogie |n#0@@4| 1))))))))))
 :qid |Sequencesidfy.125:22|
 :weight 3
 :skolemid |2438|
 :pattern ( (Sequences.__default.Range ($LS $ly@@27) (LitInt |n#0@@4|)))
))))
(assert (forall ((arg0@@488 T@U) (arg1@@211 T@U) (arg2@@107 T@U) (arg3@@53 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@488 arg1@@211 arg2@@107 arg3@@53)) (SeqType BoxType))
 :qid |funType:Sequences.__default.Apply|
 :pattern ( (Sequences.__default.Apply arg0@@488 arg1@@211 arg2@@107 arg3@@53))
)))
(assert  (=> true (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($Heap@@16 T@U) (|f#0@@80| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@80|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E Sequences._default.Apply$R |f#0@@80| |run#0@@27|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@80| (Tclass._System.___hPartialFunc1 Sequences._default.Apply$E Sequences._default.Apply$R))) ($Is |run#0@@27| (TSeq Sequences._default.Apply$E))) (forall ((|i#0@@75| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@75|) (INTERNAL_lt_boogie |i#0@@75| (|Seq#Length| |run#0@@27|))) (Requires1 Sequences._default.Apply$E Sequences._default.Apply$R $Heap@@16 |f#0@@80| (|Seq#Index| |run#0@@27| |i#0@@75|))))
 :qid |Sequencesidfy.134:21|
 :skolemid |2439|
 :pattern ( (|Seq#Index| |run#0@@27| |i#0@@75|))
))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R |f#0@@80| |run#0@@27|)) (|Seq#Length| |run#0@@27|)) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@9|) (INTERNAL_lt_boogie |i#1@@9| (|Seq#Length| |run#0@@27|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R |f#0@@80| |run#0@@27|) |i#1@@9|) (Apply1 Sequences._default.Apply$E Sequences._default.Apply$R $Heap@@16 |f#0@@80| (|Seq#Index| |run#0@@27| |i#1@@9|)))))
 :qid |Sequencesidfy.136:20|
 :skolemid |2440|
 :pattern ( (|Seq#Index| |run#0@@27| |i#1@@9|))
 :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R |f#0@@80| |run#0@@27|) |i#1@@9|))
))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R |f#0@@80| |run#0@@27|) (TSeq Sequences._default.Apply$R))))
 :qid |unknown.0:0|
 :skolemid |2441|
 :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R |f#0@@80| |run#0@@27|) ($IsGoodHeap $Heap@@16))
))))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($Heap@@17 T@U) (|f#0@@81| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@81|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@81| (Tclass._System.___hPartialFunc1 Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0))) ($Is |run#0@@28| (TSeq Sequences._default.Apply$E@@0)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 |f#0@@81| |run#0@@28|) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#2@@0|) (INTERNAL_lt_boogie |i#2@@0| (|Seq#Length| |run#0@@28|))) (Requires1 Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $Heap@@17 |f#0@@81| (|Seq#Index| |run#0@@28| |i#2@@0|))))
 :qid |Sequencesidfy.134:21|
 :skolemid |2442|
 :pattern ( (|Seq#Index| |run#0@@28| |i#2@@0|))
))))
 :qid |unknown.0:0|
 :skolemid |2443|
 :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 |f#0@@81| |run#0@@28|) ($IsGoodHeap $Heap@@17))
)))
(assert  (and (and (forall ((arg0@@489 T@U) (arg1@@212 T@U) (arg2@@108 T@U) (arg3@@54 T@U) ) (! (= (type (|lambda#134| arg0@@489 arg1@@212 arg2@@108 arg3@@54)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))
 :qid |funType:lambda#134|
 :pattern ( (|lambda#134| arg0@@489 arg1@@212 arg2@@108 arg3@@54))
)) (forall ((arg0@@490 T@U) (arg1@@213 Int) (arg2@@109 Int) (arg3@@55 T@U) (arg4@@32 T@U) (arg5@@15 T@U) (arg6@@6 T@U) ) (! (= (type (|lambda#135| arg0@@490 arg1@@213 arg2@@109 arg3@@55 arg4@@32 arg5@@15 arg6@@6)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))
 :qid |funType:lambda#135|
 :pattern ( (|lambda#135| arg0@@490 arg1@@213 arg2@@109 arg3@@55 arg4@@32 arg5@@15 arg6@@6))
))) (forall ((arg0@@491 T@U) (arg1@@214 Int) (arg2@@110 Int) (arg3@@56 T@U) (arg4@@33 T@U) (arg5@@16 T@U) (arg6@@7 T@U) (arg7@@3 T@U) (arg8@@3 T@U) (arg9@@1 T@U) (arg10@@1 T@U) ) (! (= (type (|lambda#137| arg0@@491 arg1@@214 arg2@@110 arg3@@56 arg4@@33 arg5@@16 arg6@@7 arg7@@3 arg8@@3 arg9@@1 arg10@@1)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))
 :qid |funType:lambda#137|
 :pattern ( (|lambda#137| arg0@@491 arg1@@214 arg2@@110 arg3@@56 arg4@@33 arg5@@16 arg6@@7 arg7@@3 arg8@@3 arg9@@1 arg10@@1))
))))
(assert  (=> true (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($Heap@@18 T@U) (|f#0@@82| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@82|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 |f#0@@82| |run#0@@29|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@82| (Tclass._System.___hPartialFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1))) ($Is |run#0@@29| (TSeq Sequences._default.Apply$E@@1))) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#2@@1|) (INTERNAL_lt_boogie |i#2@@1| (|Seq#Length| |run#0@@29|))) (Requires1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $Heap@@18 |f#0@@82| (|Seq#Index| |run#0@@29| |i#2@@1|))))
 :qid |Sequencesidfy.134:21|
 :skolemid |2442|
 :pattern ( (|Seq#Index| |run#0@@29| |i#2@@1|))
))))) (and (forall ((|$l#1#i#0@@0| Int) ) (!  (=> (INTERNAL_le_boogie 0 |$l#1#i#0@@0|) (=> (INTERNAL_lt_boogie |$l#1#i#0@@0| (|Seq#Length| |run#0@@29|)) true))
 :qid |unknown.0:0|
 :skolemid |2445|
 :no-pattern (INTERNAL_lt_boogie |$l#1#i#0@@0| (|Seq#Length| |run#0@@29|))
 :no-pattern (INTERNAL_le_boogie 0 |$l#1#i#0@@0|)
)) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 |f#0@@82| |run#0@@29|) (|Seq#Create| Sequences._default.Apply$R@@1 $Heap@@18 (|Seq#Length| |run#0@@29|) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#134| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 |f#0@@82| |run#0@@29|) (|lambda#135| TInt 0 (|Seq#Length| |run#0@@29|) Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 |f#0@@82| |run#0@@29|) (|lambda#137| Tclass._System.object? 0 (|Seq#Length| |run#0@@29|) Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 |f#0@@82| |run#0@@29| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 |f#0@@82| |run#0@@29|))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :skolemid |2446|
 :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 |f#0@@82| |run#0@@29|) ($IsGoodHeap $Heap@@18))
))))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($Heap@@19 T@U) (|f#0@@83| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@83|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 |f#0@@83| (Lit |run#0@@30|)) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |f#0@@83| (Tclass._System.___hPartialFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@30| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#4| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4|) (INTERNAL_lt_boogie |i#4| (|Seq#Length| (Lit |run#0@@30|)))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@19 |f#0@@83| (|Seq#Index| (Lit |run#0@@30|) |i#4|))))
 :qid |Sequencesidfy.134:21|
 :skolemid |2447|
 :pattern ( (|Seq#Index| |run#0@@30| |i#4|))
))))) (and (forall ((|$l#3#i#0@@0| Int) ) (!  (=> (INTERNAL_le_boogie 0 |$l#3#i#0@@0|) (=> (INTERNAL_lt_boogie |$l#3#i#0@@0| (|Seq#Length| (Lit |run#0@@30|))) true))
 :qid |unknown.0:0|
 :skolemid |2449|
 :no-pattern (INTERNAL_lt_boogie |$l#3#i#0@@0| (|Seq#Length| (Lit |run#0@@30|)))
 :no-pattern (INTERNAL_le_boogie 0 |$l#3#i#0@@0|)
)) (= (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 |f#0@@83| (Lit |run#0@@30|)) (|Seq#Create| Sequences._default.Apply$R@@2 $Heap@@19 (|Seq#Length| (Lit |run#0@@30|)) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#134| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 |f#0@@83| (Lit |run#0@@30|)) (|lambda#135| TInt 0 (|Seq#Length| (Lit |run#0@@30|)) Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 |f#0@@83| (Lit |run#0@@30|)) (|lambda#137| Tclass._System.object? 0 (|Seq#Length| (Lit |run#0@@30|)) Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 |f#0@@83| (Lit |run#0@@30|) Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 |f#0@@83| |run#0@@30|))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2450|
 :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 |f#0@@83| (Lit |run#0@@30|)) ($IsGoodHeap $Heap@@19))
))))
(assert  (=> true (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($Heap@@20 T@U) (|f#0@@84| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@84|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 (Lit |f#0@@84|) (Lit |run#0@@31|)) (and (and (and ($IsGoodHeap $Heap@@20) ($Is |f#0@@84| (Tclass._System.___hPartialFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@31| (TSeq Sequences._default.Apply$E@@3))) (forall ((|i#6| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#6|) (INTERNAL_lt_boogie |i#6| (|Seq#Length| (Lit |run#0@@31|)))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@20 (Lit |f#0@@84|) (|Seq#Index| (Lit |run#0@@31|) |i#6|))))
 :qid |Sequencesidfy.134:21|
 :skolemid |2451|
 :pattern ( (|Seq#Index| |run#0@@31| |i#6|))
))))) (and (forall ((|$l#5#i#0| Int) ) (!  (=> (INTERNAL_le_boogie 0 |$l#5#i#0|) (=> (INTERNAL_lt_boogie |$l#5#i#0| (|Seq#Length| (Lit |run#0@@31|))) true))
 :qid |unknown.0:0|
 :skolemid |2453|
 :no-pattern (INTERNAL_lt_boogie |$l#5#i#0| (|Seq#Length| (Lit |run#0@@31|)))
 :no-pattern (INTERNAL_le_boogie 0 |$l#5#i#0|)
)) (= (Sequences.__default.Apply Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 (Lit |f#0@@84|) (Lit |run#0@@31|)) (|Seq#Create| Sequences._default.Apply$R@@3 $Heap@@20 (|Seq#Length| (Lit |run#0@@31|)) (Lit (AtLayer (|lambda#10| (Handle1 (|lambda#134| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 (Lit |f#0@@84|) (Lit |run#0@@31|)) (|lambda#135| TInt 0 (|Seq#Length| (Lit |run#0@@31|)) Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 (Lit |f#0@@84|) (Lit |run#0@@31|)) (|lambda#137| Tclass._System.object? 0 (|Seq#Length| (Lit |run#0@@31|)) Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 (Lit |f#0@@84|) (Lit |run#0@@31|) Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 |f#0@@84| |run#0@@31|))) ($LS $LZ)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2454|
 :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 (Lit |f#0@@84|) (Lit |run#0@@31|)) ($IsGoodHeap $Heap@@20))
))))
(assert (forall ((arg0@@492 T@U) (arg1@@215 T@U) (arg2@@111 T@U) (arg3@@57 T@U) (arg4@@34 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@492 arg1@@215 arg2@@111 arg3@@57 arg4@@34)) (SeqType BoxType))
 :qid |funType:Sequences.__default.ApplyOpaque|
 :pattern ( (Sequences.__default.ApplyOpaque arg0@@492 arg1@@215 arg2@@111 arg3@@57 arg4@@34))
)))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@28 T@U) (|f#0@@85| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@28) LayerTypeType)) (= (type |f#0@@85|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@28) |f#0@@85| |run#0@@32|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@28 |f#0@@85| |run#0@@32|)))
 :qid |unknown.0:0|
 :skolemid |2455|
 :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@28) |f#0@@85| |run#0@@32|))
)))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@29 T@U) (|f#0@@86| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@29) LayerTypeType)) (= (type |f#0@@86|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@29 |f#0@@86| |run#0@@33|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ |f#0@@86| |run#0@@33|)))
 :qid |unknown.0:0|
 :skolemid |2456|
 :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@29) |f#0@@86| |run#0@@33|))
)))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@30 T@U) ($Heap@@21 T@U) (|f#0@@87| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@30) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@87|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 |f#0@@87| |run#0@@34|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@87| (Tclass._System.___hPartialFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1))) ($Is |run#0@@34| (TSeq Sequences._default.ApplyOpaque$E@@1))) (forall ((|i#0@@76| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@76|) (INTERNAL_lt_boogie |i#0@@76| (|Seq#Length| |run#0@@34|))) (Requires1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $Heap@@21 |f#0@@87| (|Seq#Index| |run#0@@34| |i#0@@76|))))
 :qid |Sequencesidfy.156:21|
 :skolemid |2457|
 :pattern ( (|Seq#Index| |run#0@@34| |i#0@@76|))
))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@30 |f#0@@87| |run#0@@34|)) (|Seq#Length| |run#0@@34|)) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@10|) (INTERNAL_lt_boogie |i#1@@10| (|Seq#Length| |run#0@@34|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@30 |f#0@@87| |run#0@@34|) |i#1@@10|) (Apply1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $Heap@@21 |f#0@@87| (|Seq#Index| |run#0@@34| |i#1@@10|)))))
 :qid |Sequencesidfy.158:20|
 :skolemid |2458|
 :pattern ( (|Seq#Index| |run#0@@34| |i#1@@10|))
 :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@30 |f#0@@87| |run#0@@34|) |i#1@@10|))
))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@30 |f#0@@87| |run#0@@34|) (TSeq Sequences._default.ApplyOpaque$R@@1))))
 :qid |unknown.0:0|
 :skolemid |2459|
 :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@30 |f#0@@87| |run#0@@34|) ($IsGoodHeap $Heap@@21))
))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@31 T@U) ($Heap@@22 T@U) (|f#0@@88| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@31) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@88|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@88| (Tclass._System.___hPartialFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@35| (TSeq Sequences._default.ApplyOpaque$E@@2)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@31 |f#0@@88| |run#0@@35|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#2@@2|) (INTERNAL_lt_boogie |i#2@@2| (|Seq#Length| |run#0@@35|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@22 |f#0@@88| (|Seq#Index| |run#0@@35| |i#2@@2|))))
 :qid |Sequencesidfy.156:21|
 :skolemid |2460|
 :pattern ( (|Seq#Index| |run#0@@35| |i#2@@2|))
))))
 :qid |unknown.0:0|
 :skolemid |2461|
 :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@31 |f#0@@88| |run#0@@35|) ($IsGoodHeap $Heap@@22))
)))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@32 T@U) ($Heap@@23 T@U) (|f#0@@89| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@32) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@89|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 |f#0@@89| |run#0@@36|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@89| (Tclass._System.___hPartialFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@36| (TSeq Sequences._default.ApplyOpaque$E@@3))) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#2@@3|) (INTERNAL_lt_boogie |i#2@@3| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@23 |f#0@@89| (|Seq#Index| |run#0@@36| |i#2@@3|))))
 :qid |Sequencesidfy.156:21|
 :skolemid |2460|
 :pattern ( (|Seq#Index| |run#0@@36| |i#2@@3|))
))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 |f#0@@89| |run#0@@36|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 ($LS $ly@@32) |f#0@@89| |run#0@@36|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 |f#0@@89| |run#0@@36|))))
 :qid |unknown.0:0|
 :skolemid |2462|
 :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 ($LS $ly@@32) |f#0@@89| |run#0@@36|) ($IsGoodHeap $Heap@@23))
))))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@33 T@U) ($Heap@@24 T@U) (|f#0@@90| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@33) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@90|) HandleTypeType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 |f#0@@90| (Lit |run#0@@37|)) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@90| (Tclass._System.___hPartialFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@37| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#3|) (INTERNAL_lt_boogie |i#3| (|Seq#Length| (Lit |run#0@@37|)))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@24 |f#0@@90| (|Seq#Index| (Lit |run#0@@37|) |i#3|))))
 :qid |Sequencesidfy.156:21|
 :skolemid |2463|
 :pattern ( (|Seq#Index| |run#0@@37| |i#3|))
))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 |f#0@@90| (Lit |run#0@@37|)) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@33) |f#0@@90| (Lit |run#0@@37|)) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 |f#0@@90| (Lit |run#0@@37|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2464|
 :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@33) |f#0@@90| (Lit |run#0@@37|)) ($IsGoodHeap $Heap@@24))
))))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@5 T@U) (Sequences._default.ApplyOpaque$R@@5 T@U) ($ly@@34 T@U) ($Heap@@25 T@U) (|f#0@@91| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@5) TyType) (= (type Sequences._default.ApplyOpaque$R@@5) TyType)) (= (type $ly@@34) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@91|) HandleTypeType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@5 Sequences._default.ApplyOpaque$R@@5 (Lit |f#0@@91|) (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@91| (Tclass._System.___hPartialFunc1 Sequences._default.ApplyOpaque$E@@5 Sequences._default.ApplyOpaque$R@@5))) ($Is |run#0@@38| (TSeq Sequences._default.ApplyOpaque$E@@5))) (forall ((|i#4@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4@@0|) (INTERNAL_lt_boogie |i#4@@0| (|Seq#Length| (Lit |run#0@@38|)))) (Requires1 Sequences._default.ApplyOpaque$E@@5 Sequences._default.ApplyOpaque$R@@5 $Heap@@25 (Lit |f#0@@91|) (|Seq#Index| (Lit |run#0@@38|) |i#4@@0|))))
 :qid |Sequencesidfy.156:21|
 :skolemid |2465|
 :pattern ( (|Seq#Index| |run#0@@38| |i#4@@0|))
))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@5 Sequences._default.ApplyOpaque$R@@5 (Lit |f#0@@91|) (Lit |run#0@@38|)) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@5 Sequences._default.ApplyOpaque$R@@5 ($LS $ly@@34) (Lit |f#0@@91|) (Lit |run#0@@38|)) (Lit (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@5 Sequences._default.ApplyOpaque$R@@5 (Lit |f#0@@91|) (Lit |run#0@@38|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2466|
 :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@5 Sequences._default.ApplyOpaque$R@@5 ($LS $ly@@34) (Lit |f#0@@91|) (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@25))
))))
(assert (forall ((arg0@@493 T@U) (arg1@@216 T@U) (arg2@@112 T@U) (arg3@@58 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@493 arg1@@216 arg2@@112 arg3@@58)) (SeqType BoxType))
 :qid |funType:Sequences.__default.Filter|
 :pattern ( (Sequences.__default.Filter arg0@@493 arg1@@216 arg2@@112 arg3@@58))
)))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@35 T@U) (|f#0@@92| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@35) LayerTypeType)) (= (type |f#0@@92|) HandleTypeType)) (= (type |run#0@@39|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@35) |f#0@@92| |run#0@@39|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@35 |f#0@@92| |run#0@@39|)))
 :qid |unknown.0:0|
 :skolemid |2467|
 :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@35) |f#0@@92| |run#0@@39|))
)))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@36 T@U) (|f#0@@93| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@36) LayerTypeType)) (= (type |f#0@@93|) HandleTypeType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@36 |f#0@@93| |run#0@@40|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ |f#0@@93| |run#0@@40|)))
 :qid |unknown.0:0|
 :skolemid |2468|
 :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@36) |f#0@@93| |run#0@@40|))
)))
(assert  (=> true (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@37 T@U) ($Heap@@26 T@U) (|f#0@@94| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@37) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@94|) HandleTypeType)) (= (type |run#0@@41|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 |f#0@@94| |run#0@@41|) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@94| (Tclass._System.___hPartialFunc1 Sequences._default.Filter$E@@1 TBool))) ($Is |run#0@@41| (TSeq Sequences._default.Filter$E@@1))) (forall ((|i#0@@77| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@77|) (INTERNAL_lt_boogie |i#0@@77| (|Seq#Length| |run#0@@41|))) (Requires1 Sequences._default.Filter$E@@1 TBool $Heap@@26 |f#0@@94| (|Seq#Index| |run#0@@41| |i#0@@77|))))
 :qid |Sequencesidfy.190:21|
 :skolemid |2469|
 :pattern ( (|Seq#Index| |run#0@@41| |i#0@@77|))
))))) (and (and (and (and (INTERNAL_le_boogie (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|)) (|Seq#Length| |run#0@@41|)) (forall ((|i#1@@11| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@11|) (INTERNAL_lt_boogie |i#1@@11| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|)))) (|Seq#Contains| |run#0@@41| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|) |i#1@@11|)))
 :qid |Sequencesidfy.192:20|
 :skolemid |2470|
 :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|) |i#1@@11|))
))) (forall ((|i#2@@4| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#2@@4|) (INTERNAL_lt_boogie |i#2@@4| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|)))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@1 TBool $Heap@@26 |f#0@@94| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|) |i#2@@4|)))))
 :qid |Sequencesidfy.193:20|
 :skolemid |2471|
 :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|) |i#2@@4|))
))) (forall ((|i#3@@0| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#3@@0|) (and (INTERNAL_lt_boogie |i#3@@0| (|Seq#Length| |run#0@@41|)) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@1 TBool $Heap@@26 |f#0@@94| (|Seq#Index| |run#0@@41| |i#3@@0|)))))) (|Seq#Contains| (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|) (|Seq#Index| |run#0@@41| |i#3@@0|)))
 :qid |Sequencesidfy.194:20|
 :skolemid |2472|
 :pattern ( (|Seq#Index| |run#0@@41| |i#3@@0|))
))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|) (TSeq Sequences._default.Filter$E@@1))))
 :qid |unknown.0:0|
 :skolemid |2473|
 :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@37 |f#0@@94| |run#0@@41|) ($IsGoodHeap $Heap@@26))
))))
(assert (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@38 T@U) ($Heap@@27 T@U) (|f#0@@95| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@38) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@95|) HandleTypeType)) (= (type |run#0@@42|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@95| (Tclass._System.___hPartialFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@42| (TSeq Sequences._default.Filter$E@@2)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@2 $ly@@38 |f#0@@95| |run#0@@42|) (forall ((|i#4@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4@@1|) (INTERNAL_lt_boogie |i#4@@1| (|Seq#Length| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@27 |f#0@@95| (|Seq#Index| |run#0@@42| |i#4@@1|))))
 :qid |Sequencesidfy.190:21|
 :skolemid |2474|
 :pattern ( (|Seq#Index| |run#0@@42| |i#4@@1|))
))))
 :qid |unknown.0:0|
 :skolemid |2475|
 :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@2 $ly@@38 |f#0@@95| |run#0@@42|) ($IsGoodHeap $Heap@@27))
)))
(assert  (=> true (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@39 T@U) ($Heap@@28 T@U) (|f#0@@96| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@39) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@96|) HandleTypeType)) (= (type |run#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@3 |f#0@@96| |run#0@@43|) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@96| (Tclass._System.___hPartialFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@43| (TSeq Sequences._default.Filter$E@@3))) (forall ((|i#4@@2| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4@@2|) (INTERNAL_lt_boogie |i#4@@2| (|Seq#Length| |run#0@@43|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@28 |f#0@@96| (|Seq#Index| |run#0@@43| |i#4@@2|))))
 :qid |Sequencesidfy.190:21|
 :skolemid |2474|
 :pattern ( (|Seq#Index| |run#0@@43| |i#4@@2|))
))))) (and (=> (not (= (|Seq#Length| |run#0@@43|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Sequences._default.Filter$E@@3 |run#0@@43|) (=> (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@3 TBool $Heap@@28 |f#0@@96| (Sequences.__default.Last Sequences._default.Filter$E@@3 |run#0@@43|)))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Filter$E@@3 |run#0@@43|) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@3 |f#0@@96| (Sequences.__default.DropLast Sequences._default.Filter$E@@3 |run#0@@43|))) (|Sequences.__default.Last#canCall| Sequences._default.Filter$E@@3 |run#0@@43|)))) (=> (not (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@3 TBool $Heap@@28 |f#0@@96| (Sequences.__default.Last Sequences._default.Filter$E@@3 |run#0@@43|))))) (and (|Sequences.__default.DropLast#canCall| Sequences._default.Filter$E@@3 |run#0@@43|) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@3 |f#0@@96| (Sequences.__default.DropLast Sequences._default.Filter$E@@3 |run#0@@43|)))))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@3 ($LS $ly@@39) |f#0@@96| |run#0@@43|) (ite (= (|Seq#Length| |run#0@@43|) (LitInt 0)) (|Seq#Empty| BoxType) (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@3 TBool $Heap@@28 |f#0@@96| (Sequences.__default.Last Sequences._default.Filter$E@@3 |run#0@@43|)))) (|Seq#Append| (Sequences.__default.Filter Sequences._default.Filter$E@@3 $ly@@39 |f#0@@96| (Sequences.__default.DropLast Sequences._default.Filter$E@@3 |run#0@@43|)) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Sequences._default.Filter$E@@3 |run#0@@43|))) (Sequences.__default.Filter Sequences._default.Filter$E@@3 $ly@@39 |f#0@@96| (Sequences.__default.DropLast Sequences._default.Filter$E@@3 |run#0@@43|)))))))
 :qid |unknown.0:0|
 :skolemid |2476|
 :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@3 ($LS $ly@@39) |f#0@@96| |run#0@@43|) ($IsGoodHeap $Heap@@28))
))))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@40 T@U) ($Heap@@29 T@U) (|f#0@@97| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@40) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@97|) HandleTypeType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 |f#0@@97| (Lit |run#0@@44|)) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@97| (Tclass._System.___hPartialFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@44| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#5| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#5|) (INTERNAL_lt_boogie |i#5| (|Seq#Length| (Lit |run#0@@44|)))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@29 |f#0@@97| (|Seq#Index| (Lit |run#0@@44|) |i#5|))))
 :qid |Sequencesidfy.190:21|
 :skolemid |2477|
 :pattern ( (|Seq#Index| |run#0@@44| |i#5|))
))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@44|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Sequences._default.Filter$E@@4 (Lit |run#0@@44|)) (=> (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@29 |f#0@@97| (Lit (Sequences.__default.Last Sequences._default.Filter$E@@4 (Lit |run#0@@44|)))))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Filter$E@@4 (Lit |run#0@@44|)) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 |f#0@@97| (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@4 (Lit |run#0@@44|))))) (|Sequences.__default.Last#canCall| Sequences._default.Filter$E@@4 (Lit |run#0@@44|))))) (=> (not (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@29 |f#0@@97| (Lit (Sequences.__default.Last Sequences._default.Filter$E@@4 (Lit |run#0@@44|))))))) (and (|Sequences.__default.DropLast#canCall| Sequences._default.Filter$E@@4 (Lit |run#0@@44|)) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 |f#0@@97| (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@4 (Lit |run#0@@44|)))))))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@40) |f#0@@97| (Lit |run#0@@44|)) (ite (= (|Seq#Length| (Lit |run#0@@44|)) (LitInt 0)) (|Seq#Empty| BoxType) (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@29 |f#0@@97| (Lit (Sequences.__default.Last Sequences._default.Filter$E@@4 (Lit |run#0@@44|)))))) (|Seq#Append| (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@40) |f#0@@97| (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@4 (Lit |run#0@@44|)))) (|Seq#Build| (|Seq#Empty| BoxType) (Lit (Sequences.__default.Last Sequences._default.Filter$E@@4 (Lit |run#0@@44|))))) (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@40) |f#0@@97| (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@4 (Lit |run#0@@44|)))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2478|
 :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@40) |f#0@@97| (Lit |run#0@@44|)) ($IsGoodHeap $Heap@@29))
))))
(assert  (=> true (forall ((Sequences._default.Filter$E@@5 T@U) ($ly@@41 T@U) ($Heap@@30 T@U) (|f#0@@98| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@5) TyType) (= (type $ly@@41) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@98|) HandleTypeType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@5 (Lit |f#0@@98|) (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@98| (Tclass._System.___hPartialFunc1 Sequences._default.Filter$E@@5 TBool))) ($Is |run#0@@45| (TSeq Sequences._default.Filter$E@@5))) (forall ((|i#6@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#6@@0|) (INTERNAL_lt_boogie |i#6@@0| (|Seq#Length| (Lit |run#0@@45|)))) (Requires1 Sequences._default.Filter$E@@5 TBool $Heap@@30 (Lit |f#0@@98|) (|Seq#Index| (Lit |run#0@@45|) |i#6@@0|))))
 :qid |Sequencesidfy.190:21|
 :skolemid |2479|
 :pattern ( (|Seq#Index| |run#0@@45| |i#6@@0|))
))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Sequences._default.Filter$E@@5 (Lit |run#0@@45|)) (=> (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@5 TBool $Heap@@30 (Lit |f#0@@98|) (Lit (Sequences.__default.Last Sequences._default.Filter$E@@5 (Lit |run#0@@45|)))))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Filter$E@@5 (Lit |run#0@@45|)) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@5 (Lit |f#0@@98|) (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@5 (Lit |run#0@@45|))))) (|Sequences.__default.Last#canCall| Sequences._default.Filter$E@@5 (Lit |run#0@@45|))))) (=> (not (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@5 TBool $Heap@@30 (Lit |f#0@@98|) (Lit (Sequences.__default.Last Sequences._default.Filter$E@@5 (Lit |run#0@@45|))))))) (and (|Sequences.__default.DropLast#canCall| Sequences._default.Filter$E@@5 (Lit |run#0@@45|)) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@5 (Lit |f#0@@98|) (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@5 (Lit |run#0@@45|)))))))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@5 ($LS $ly@@41) (Lit |f#0@@98|) (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) (|Seq#Empty| BoxType) (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@5 TBool $Heap@@30 (Lit |f#0@@98|) (Lit (Sequences.__default.Last Sequences._default.Filter$E@@5 (Lit |run#0@@45|)))))) (|Seq#Append| (Sequences.__default.Filter Sequences._default.Filter$E@@5 ($LS $ly@@41) (Lit |f#0@@98|) (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@5 (Lit |run#0@@45|)))) (|Seq#Build| (|Seq#Empty| BoxType) (Lit (Sequences.__default.Last Sequences._default.Filter$E@@5 (Lit |run#0@@45|))))) (Sequences.__default.Filter Sequences._default.Filter$E@@5 ($LS $ly@@41) (Lit |f#0@@98|) (Lit (Sequences.__default.DropLast Sequences._default.Filter$E@@5 (Lit |run#0@@45|)))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2480|
 :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@5 ($LS $ly@@41) (Lit |f#0@@98|) (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@30))
))))
(assert (forall ((arg0@@494 T@U) (arg1@@217 T@U) (arg2@@113 T@U) (arg3@@59 T@U) (arg4@@35 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@494 arg1@@217 arg2@@113 arg3@@59 arg4@@35 arg5@@17)) BoxType)
 :qid |funType:Sequences.__default.FoldLeft|
 :pattern ( (Sequences.__default.FoldLeft arg0@@494 arg1@@217 arg2@@113 arg3@@59 arg4@@35 arg5@@17))
)))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@42 T@U) (|f#0@@99| T@U) (|init#0| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type |f#0@@99|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@42) |f#0@@99| |init#0| |run#0@@46|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@42 |f#0@@99| |init#0| |run#0@@46|)))
 :qid |unknown.0:0|
 :skolemid |2481|
 :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@42) |f#0@@99| |init#0| |run#0@@46|))
)))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@43 T@U) (|f#0@@100| T@U) (|init#0@@0| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |f#0@@100|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@43 |f#0@@100| |init#0@@0| |run#0@@47|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@100| |init#0@@0| |run#0@@47|)))
 :qid |unknown.0:0|
 :skolemid |2482|
 :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@43) |f#0@@100| |init#0@@0| |run#0@@47|))
)))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@44 T@U) (|f#0@@101| T@U) (|init#0@@1| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |f#0@@101|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@101| |init#0@@1| |run#0@@48|) (and (and ($Is |f#0@@101| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@48| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@44 |f#0@@101| |init#0@@1| |run#0@@48|) Sequences._default.FoldLeft$A@@1))
 :qid |unknown.0:0|
 :skolemid |2483|
 :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@44 |f#0@@101| |init#0@@1| |run#0@@48|))
))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@45 T@U) ($Heap@@31 T@U) (|f#0@@102| T@U) (|init#0@@2| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@102|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@102| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@49| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@45 |f#0@@102| |init#0@@2| |run#0@@49|) true))
 :qid |unknown.0:0|
 :skolemid |2484|
 :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@45 |f#0@@102| |init#0@@2| |run#0@@49|) ($IsGoodHeap $Heap@@31))
)))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@46 T@U) ($Heap@@32 T@U) (|f#0@@103| T@U) (|init#0@@3| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@103|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@103| |init#0@@3| |run#0@@50|) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@103| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@50| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@50|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@103| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@32 |f#0@@103| |init#0@@3| (|Seq#Index| |run#0@@50| (LitInt 0))) (|Seq#Drop| |run#0@@50| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@46) |f#0@@103| |init#0@@3| |run#0@@50|) (ite (= (|Seq#Length| |run#0@@50|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@46 |f#0@@103| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@32 |f#0@@103| |init#0@@3| (|Seq#Index| |run#0@@50| (LitInt 0))) (|Seq#Drop| |run#0@@50| (LitInt 1)))))))
 :qid |unknown.0:0|
 :skolemid |2485|
 :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@46) |f#0@@103| |init#0@@3| |run#0@@50|) ($IsGoodHeap $Heap@@32))
))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@47 T@U) ($Heap@@33 T@U) (|f#0@@104| T@U) (|init#0@@4| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@104|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@104| |init#0@@4| (Lit |run#0@@51|)) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@104| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@51| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@104| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@33 |f#0@@104| |init#0@@4| (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@47) |f#0@@104| |init#0@@4| (Lit |run#0@@51|)) (ite (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@47) |f#0@@104| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@33 |f#0@@104| |init#0@@4| (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2486|
 :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@47) |f#0@@104| |init#0@@4| (Lit |run#0@@51|)) ($IsGoodHeap $Heap@@33))
))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@48 T@U) ($Heap@@34 T@U) (|f#0@@105| T@U) (|init#0@@5| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@105|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@105|) (Lit |init#0@@5|) (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@105| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@52| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@105|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@34 (Lit |f#0@@105|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@52|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@52|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@48) (Lit |f#0@@105|) (Lit |init#0@@5|) (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@48) (Lit |f#0@@105|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@34 (Lit |f#0@@105|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@52|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@52|) (LitInt 1))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2487|
 :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@48) (Lit |f#0@@105|) (Lit |init#0@@5|) (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@34))
))))
(assert (forall ((arg0@@495 T@U) (arg1@@218 T@U) (arg2@@114 T@U) (arg3@@60 T@U) (arg4@@36 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@495 arg1@@218 arg2@@114 arg3@@60 arg4@@36 arg5@@18)) BoxType)
 :qid |funType:Sequences.__default.FoldRight|
 :pattern ( (Sequences.__default.FoldRight arg0@@495 arg1@@218 arg2@@114 arg3@@60 arg4@@36 arg5@@18))
)))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@49 T@U) (|f#0@@106| T@U) (|init#0@@6| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type |f#0@@106|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@49) |f#0@@106| |init#0@@6| |run#0@@53|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@49 |f#0@@106| |init#0@@6| |run#0@@53|)))
 :qid |unknown.0:0|
 :skolemid |2488|
 :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@49) |f#0@@106| |init#0@@6| |run#0@@53|))
)))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@50 T@U) (|f#0@@107| T@U) (|init#0@@7| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type |f#0@@107|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@50 |f#0@@107| |init#0@@7| |run#0@@54|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@107| |init#0@@7| |run#0@@54|)))
 :qid |unknown.0:0|
 :skolemid |2489|
 :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@50) |f#0@@107| |init#0@@7| |run#0@@54|))
)))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@51 T@U) (|f#0@@108| T@U) (|init#0@@8| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type |f#0@@108|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@108| |init#0@@8| |run#0@@55|) (and (and ($Is |f#0@@108| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@55| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@51 |f#0@@108| |init#0@@8| |run#0@@55|) Sequences._default.FoldRight$A@@1))
 :qid |unknown.0:0|
 :skolemid |2490|
 :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@51 |f#0@@108| |init#0@@8| |run#0@@55|))
))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@52 T@U) ($Heap@@35 T@U) (|f#0@@109| T@U) (|init#0@@9| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@109|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@109| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@56| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@52 |f#0@@109| |init#0@@9| |run#0@@56|) true))
 :qid |unknown.0:0|
 :skolemid |2491|
 :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@52 |f#0@@109| |init#0@@9| |run#0@@56|) ($IsGoodHeap $Heap@@35))
)))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@53 T@U) ($Heap@@36 T@U) (|f#0@@110| T@U) (|init#0@@10| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@110|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@110| |init#0@@10| |run#0@@57|) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@110| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@57| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@57|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@110| |init#0@@10| (|Seq#Drop| |run#0@@57| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@53) |f#0@@110| |init#0@@10| |run#0@@57|) (ite (= (|Seq#Length| |run#0@@57|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@36 |f#0@@110| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@53 |f#0@@110| |init#0@@10| (|Seq#Drop| |run#0@@57| (LitInt 1))) (|Seq#Index| |run#0@@57| (LitInt 0)))))))
 :qid |unknown.0:0|
 :skolemid |2492|
 :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@53) |f#0@@110| |init#0@@10| |run#0@@57|) ($IsGoodHeap $Heap@@36))
))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@54 T@U) ($Heap@@37 T@U) (|f#0@@111| T@U) (|init#0@@11| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@111|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@111| |init#0@@11| (Lit |run#0@@58|)) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@111| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@58| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@111| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@54) |f#0@@111| |init#0@@11| (Lit |run#0@@58|)) (ite (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@37 |f#0@@111| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@54) |f#0@@111| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@58|) (LitInt 0)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2493|
 :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@54) |f#0@@111| |init#0@@11| (Lit |run#0@@58|)) ($IsGoodHeap $Heap@@37))
))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@55 T@U) ($Heap@@38 T@U) (|f#0@@112| T@U) (|init#0@@12| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@112|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@59|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@112|) (Lit |init#0@@12|) (Lit |run#0@@59|)) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@112| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@59| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@59|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@112|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@59|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@55) (Lit |f#0@@112|) (Lit |init#0@@12|) (Lit |run#0@@59|)) (ite (= (|Seq#Length| (Lit |run#0@@59|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@38 (Lit |f#0@@112|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@55) (Lit |f#0@@112|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@59|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@59|) (LitInt 0)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2494|
 :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@55) (Lit |f#0@@112|) (Lit |init#0@@12|) (Lit |run#0@@59|)) ($IsGoodHeap $Heap@@38))
))))
(assert (forall ((arg0@@496 T@U) (arg1@@219 T@U) (arg2@@115 T@U) (arg3@@61 T@U) (arg4@@37 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@496 arg1@@219 arg2@@115 arg3@@61 arg4@@37 arg5@@19)) BoxType)
 :qid |funType:Sequences.__default.FoldFromRight|
 :pattern ( (Sequences.__default.FoldFromRight arg0@@496 arg1@@219 arg2@@115 arg3@@61 arg4@@37 arg5@@19))
)))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@56 T@U) (|f#0@@113| T@U) (|init#0@@13| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@56) LayerTypeType)) (= (type |f#0@@113|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@56) |f#0@@113| |init#0@@13| |run#0@@60|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@56 |f#0@@113| |init#0@@13| |run#0@@60|)))
 :qid |unknown.0:0|
 :skolemid |2495|
 :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@56) |f#0@@113| |init#0@@13| |run#0@@60|))
)))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@57 T@U) (|f#0@@114| T@U) (|init#0@@14| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@57) LayerTypeType)) (= (type |f#0@@114|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@57 |f#0@@114| |init#0@@14| |run#0@@61|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@114| |init#0@@14| |run#0@@61|)))
 :qid |unknown.0:0|
 :skolemid |2496|
 :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@57) |f#0@@114| |init#0@@14| |run#0@@61|))
)))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@58 T@U) (|f#0@@115| T@U) (|init#0@@15| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@58) LayerTypeType)) (= (type |f#0@@115|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@62|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@115| |init#0@@15| |run#0@@62|) (and (and ($Is |f#0@@115| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@62| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@58 |f#0@@115| |init#0@@15| |run#0@@62|) Sequences._default.FoldFromRight$A@@1))
 :qid |unknown.0:0|
 :skolemid |2497|
 :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@58 |f#0@@115| |init#0@@15| |run#0@@62|))
))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@59 T@U) ($Heap@@39 T@U) (|f#0@@116| T@U) (|init#0@@16| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@59) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |f#0@@116|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@63|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@39) ($Is |f#0@@116| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@63| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@59 |f#0@@116| |init#0@@16| |run#0@@63|) true))
 :qid |unknown.0:0|
 :skolemid |2498|
 :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@59 |f#0@@116| |init#0@@16| |run#0@@63|) ($IsGoodHeap $Heap@@39))
)))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@60 T@U) ($Heap@@40 T@U) (|f#0@@117| T@U) (|init#0@@17| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@60) LayerTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |f#0@@117|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@117| |init#0@@17| |run#0@@64|) (and (and (and ($IsGoodHeap $Heap@@40) ($Is |f#0@@117| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@64| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@64|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@64|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@117| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@64|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@64|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@60) |f#0@@117| |init#0@@17| |run#0@@64|) (ite (= (|Seq#Length| |run#0@@64|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@40 |f#0@@117| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@60 |f#0@@117| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@64|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@64|))))))
 :qid |unknown.0:0|
 :skolemid |2499|
 :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@60) |f#0@@117| |init#0@@17| |run#0@@64|) ($IsGoodHeap $Heap@@40))
))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@61 T@U) ($Heap@@41 T@U) (|f#0@@118| T@U) (|init#0@@18| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@61) LayerTypeType)) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |f#0@@118|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@118| |init#0@@18| (Lit |run#0@@65|)) (and (and (and ($IsGoodHeap $Heap@@41) ($Is |f#0@@118| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@65| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@65|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@118| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@65|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@65|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@61) |f#0@@118| |init#0@@18| (Lit |run#0@@65|)) (ite (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@41 |f#0@@118| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@61) |f#0@@118| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@65|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@65|))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2500|
 :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@61) |f#0@@118| |init#0@@18| (Lit |run#0@@65|)) ($IsGoodHeap $Heap@@41))
))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@62 T@U) ($Heap@@42 T@U) (|f#0@@119| T@U) (|init#0@@19| T@U) (|run#0@@66| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@62) LayerTypeType)) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |f#0@@119|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@66|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@119|) (Lit |init#0@@19|) (Lit |run#0@@66|)) (and (and (and ($IsGoodHeap $Heap@@42) ($Is |f#0@@119| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@66| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@66|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@66|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@119|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@66|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@66|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@62) (Lit |f#0@@119|) (Lit |init#0@@19|) (Lit |run#0@@66|)) (ite (= (|Seq#Length| (Lit |run#0@@66|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@42 (Lit |f#0@@119|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@62) (Lit |f#0@@119|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@66|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@66|))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2501|
 :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@62) (Lit |f#0@@119|) (Lit |init#0@@19|) (Lit |run#0@@66|)) ($IsGoodHeap $Heap@@42))
))))
(assert (forall ((arg0@@497 T@U) (arg1@@220 T@U) ) (! (= (type (Sequences.__default.FoldSets arg0@@497 arg1@@220)) (MapType0Type BoxType boolType))
 :qid |funType:Sequences.__default.FoldSets|
 :pattern ( (Sequences.__default.FoldSets arg0@@497 arg1@@220))
)))
(assert  (=> true (forall ((Sequences._default.FoldSets$E T@U) (|run#0@@67| T@U) ) (!  (=> (and (and (= (type Sequences._default.FoldSets$E) TyType) (= (type |run#0@@67|) (SeqType BoxType))) (or (|Sequences.__default.FoldSets#canCall| Sequences._default.FoldSets$E |run#0@@67|) ($Is |run#0@@67| (TSeq (TSet Sequences._default.FoldSets$E))))) ($Is (Sequences.__default.FoldSets Sequences._default.FoldSets$E |run#0@@67|) (TSet Sequences._default.FoldSets$E)))
 :qid |unknown.0:0|
 :skolemid |2502|
 :pattern ( (Sequences.__default.FoldSets Sequences._default.FoldSets$E |run#0@@67|))
))))
(assert (forall ((Sequences._default.FoldSets$E@@0 T@U) (|run#0@@68| T@U) ) (!  (=> (and (and (= (type Sequences._default.FoldSets$E@@0) TyType) (= (type |run#0@@68|) (SeqType BoxType))) ($Is |run#0@@68| (TSeq (TSet Sequences._default.FoldSets$E@@0)))) (= (|Sequences.__default.FoldSets#requires| Sequences._default.FoldSets$E@@0 |run#0@@68|) true))
 :qid |unknown.0:0|
 :skolemid |2503|
 :pattern ( (|Sequences.__default.FoldSets#requires| Sequences._default.FoldSets$E@@0 |run#0@@68|))
)))
(assert  (and (and (= (type |lambda#149|) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType)) (forall ((arg0@@498 T@U) (arg1@@221 T@U) ) (! (= (type (|lambda#150| arg0@@498 arg1@@221)) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))
 :qid |funType:lambda#150|
 :pattern ( (|lambda#150| arg0@@498 arg1@@221))
))) (forall ((arg0@@499 T@U) ) (! (= (type (|lambda#152| arg0@@499)) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))
 :qid |funType:lambda#152|
 :pattern ( (|lambda#152| arg0@@499))
))))
(assert  (=> true (forall ((Sequences._default.FoldSets$E@@1 T@U) (|run#0@@69| T@U) ) (!  (=> (and (and (= (type Sequences._default.FoldSets$E@@1) TyType) (= (type |run#0@@69|) (SeqType BoxType))) (or (|Sequences.__default.FoldSets#canCall| Sequences._default.FoldSets$E@@1 |run#0@@69|) ($Is |run#0@@69| (TSeq (TSet Sequences._default.FoldSets$E@@1))))) (and (|Sequences.__default.FoldRight#canCall| (TSet Sequences._default.FoldSets$E@@1) (TSet Sequences._default.FoldSets$E@@1) (Lit (AtLayer (|lambda#10| (Handle2 |lambda#149| (|lambda#150| (TSet Sequences._default.FoldSets$E@@1) (TSet Sequences._default.FoldSets$E@@1)) (|lambda#152| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))) ($Box (Lit (|Set#Empty| BoxType))) |run#0@@69|) (= (Sequences.__default.FoldSets Sequences._default.FoldSets$E@@1 |run#0@@69|) ($Unbox (MapType0Type BoxType boolType) (Sequences.__default.FoldRight (TSet Sequences._default.FoldSets$E@@1) (TSet Sequences._default.FoldSets$E@@1) ($LS $LZ) (Lit (AtLayer (|lambda#10| (Handle2 |lambda#149| (|lambda#150| (TSet Sequences._default.FoldSets$E@@1) (TSet Sequences._default.FoldSets$E@@1)) (|lambda#152| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))) ($Box (Lit (|Set#Empty| BoxType))) |run#0@@69|)))))
 :qid |unknown.0:0|
 :skolemid |2504|
 :pattern ( (Sequences.__default.FoldSets Sequences._default.FoldSets$E@@1 |run#0@@69|))
))))
(assert  (=> true (forall ((Sequences._default.FoldSets$E@@2 T@U) (|run#0@@70| T@U) ) (!  (=> (and (and (= (type Sequences._default.FoldSets$E@@2) TyType) (= (type |run#0@@70|) (SeqType BoxType))) (or (|Sequences.__default.FoldSets#canCall| Sequences._default.FoldSets$E@@2 (Lit |run#0@@70|)) ($Is |run#0@@70| (TSeq (TSet Sequences._default.FoldSets$E@@2))))) (and (|Sequences.__default.FoldRight#canCall| (TSet Sequences._default.FoldSets$E@@2) (TSet Sequences._default.FoldSets$E@@2) (Lit (AtLayer (|lambda#10| (Handle2 |lambda#149| (|lambda#150| (TSet Sequences._default.FoldSets$E@@2) (TSet Sequences._default.FoldSets$E@@2)) (|lambda#152| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))) ($Box (Lit (|Set#Empty| BoxType))) (Lit |run#0@@70|)) (= (Sequences.__default.FoldSets Sequences._default.FoldSets$E@@2 (Lit |run#0@@70|)) (Lit ($Unbox (MapType0Type BoxType boolType) (Sequences.__default.FoldRight (TSet Sequences._default.FoldSets$E@@2) (TSet Sequences._default.FoldSets$E@@2) ($LS $LZ) (Lit (AtLayer (|lambda#10| (Handle2 |lambda#149| (|lambda#150| (TSet Sequences._default.FoldSets$E@@2) (TSet Sequences._default.FoldSets$E@@2)) (|lambda#152| (SetRef_to_SetBox (|lambda#8| false))))) ($LS $LZ))) ($Box (Lit (|Set#Empty| BoxType))) (Lit |run#0@@70|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2505|
 :pattern ( (Sequences.__default.FoldSets Sequences._default.FoldSets$E@@2 (Lit |run#0@@70|)))
))))
(assert (forall ((arg0@@500 T@U) (arg1@@222 T@U) (arg2@@116 T@U) (arg3@@62 Int) ) (! (= (type (Sequences.__default.remove arg0@@500 arg1@@222 arg2@@116 arg3@@62)) (SeqType BoxType))
 :qid |funType:Sequences.__default.remove|
 :pattern ( (Sequences.__default.remove arg0@@500 arg1@@222 arg2@@116 arg3@@62))
)))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@63 T@U) (|s#0@@56| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@63) LayerTypeType)) (= (type |s#0@@56|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@63) |s#0@@56| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@63 |s#0@@56| |pos#0|)))
 :qid |unknown.0:0|
 :skolemid |2506|
 :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@63) |s#0@@56| |pos#0|))
)))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@64 T@U) (|s#0@@57| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@64) LayerTypeType)) (= (type |s#0@@57|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@64 |s#0@@57| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@57| |pos#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2507|
 :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@64) |s#0@@57| |pos#0@@0|))
)))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@65 T@U) (|s#0@@58| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@65) LayerTypeType)) (= (type |s#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@58| |pos#0@@1|) (and ($Is |s#0@@58| (TSeq Sequences._default.remove$A@@1)) (and (INTERNAL_le_boogie 0 |pos#0@@1|) (INTERNAL_lt_boogie |pos#0@@1| (|Seq#Length| |s#0@@58|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@65 |s#0@@58| |pos#0@@1|)) (INTERNAL_sub_boogie (|Seq#Length| |s#0@@58|) 1)) (forall ((|i#0@@78| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@78|) (INTERNAL_lt_boogie |i#0@@78| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@65 |s#0@@58| |pos#0@@1|) |i#0@@78|) (|Seq#Index| |s#0@@58| |i#0@@78|)))
 :qid |Sequencesidfy.369:18|
 :skolemid |2508|
 :pattern ( (|Seq#Index| |s#0@@58| |i#0@@78|))
 :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@65 |s#0@@58| |pos#0@@1|) |i#0@@78|))
))) (forall ((|i#1@@12| Int) ) (!  (=> (and (INTERNAL_le_boogie |pos#0@@1| |i#1@@12|) (INTERNAL_lt_boogie |i#1@@12| (INTERNAL_sub_boogie (|Seq#Length| |s#0@@58|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@65 |s#0@@58| |pos#0@@1|) |i#1@@12|) (|Seq#Index| |s#0@@58| (INTERNAL_add_boogie |i#1@@12| 1))))
 :qid |Sequencesidfy.370:18|
 :skolemid |2509|
 :pattern ( (|Seq#Index| |s#0@@58| (INTERNAL_add_boogie |i#1@@12| 1)))
 :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@65 |s#0@@58| |pos#0@@1|) |i#1@@12|))
))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@65 |s#0@@58| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1))))
 :qid |unknown.0:0|
 :skolemid |2510|
 :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@65 |s#0@@58| |pos#0@@1|))
))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@66 T@U) (|s#0@@59| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@66) LayerTypeType)) (= (type |s#0@@59|) (SeqType BoxType))) ($Is |s#0@@59| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@66 |s#0@@59| |pos#0@@2|)  (and (INTERNAL_le_boogie 0 |pos#0@@2|) (INTERNAL_lt_boogie |pos#0@@2| (|Seq#Length| |s#0@@59|)))))
 :qid |unknown.0:0|
 :skolemid |2511|
 :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@66 |s#0@@59| |pos#0@@2|))
)))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@67 T@U) (|s#0@@60| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |s#0@@60|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@60| |pos#0@@3|) (and ($Is |s#0@@60| (TSeq Sequences._default.remove$A@@3)) (and (INTERNAL_le_boogie 0 |pos#0@@3|) (INTERNAL_lt_boogie |pos#0@@3| (|Seq#Length| |s#0@@60|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@67) |s#0@@60| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@60| |pos#0@@3|) (|Seq#Drop| |s#0@@60| (INTERNAL_add_boogie |pos#0@@3| 1)))))
 :qid |unknown.0:0|
 :skolemid |2512|
 :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@67) |s#0@@60| |pos#0@@3|))
))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@68 T@U) (|s#0@@61| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |s#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@61|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@61| (TSeq Sequences._default.remove$A@@4)) (and (INTERNAL_le_boogie 0 |pos#0@@4|) (INTERNAL_lt_boogie |pos#0@@4| (|Seq#Length| (Lit |s#0@@61|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@68) (Lit |s#0@@61|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@61|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@61|) (LitInt (INTERNAL_add_boogie |pos#0@@4| 1))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2513|
 :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@68) (Lit |s#0@@61|) (LitInt |pos#0@@4|)))
))))
(assert (forall ((arg0@@501 T@U) (arg1@@223 T@U) (arg2@@117 T@U) (arg3@@63 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@501 arg1@@223 arg2@@117 arg3@@63)) (SeqType BoxType))
 :qid |funType:Sequences.__default.RemoveOneValue|
 :pattern ( (Sequences.__default.RemoveOneValue arg0@@501 arg1@@223 arg2@@117 arg3@@63))
)))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@69 T@U) (|s#0@@62| T@U) (|v#0@@99| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |s#0@@62|) (SeqType BoxType))) (= (type |v#0@@99|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@69) |s#0@@62| |v#0@@99|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@69 |s#0@@62| |v#0@@99|)))
 :qid |unknown.0:0|
 :skolemid |2514|
 :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@69) |s#0@@62| |v#0@@99|))
)))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@70 T@U) (|s#0@@63| T@U) (|v#0@@100| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |s#0@@63|) (SeqType BoxType))) (= (type |v#0@@100|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@70 |s#0@@63| |v#0@@100|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@63| |v#0@@100|)))
 :qid |unknown.0:0|
 :skolemid |2515|
 :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@70) |s#0@@63| |v#0@@100|))
)))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@71 T@U) (|s#0@@64| T@U) (|v#0@@101| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |v#0@@101|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@64| |v#0@@101|) (and ($Is |s#0@@64| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@101| Sequences._default.RemoveOneValue$V@@1)))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@64|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@71 |s#0@@64| |v#0@@101|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@71 |s#0@@64| |v#0@@101|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@64|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@101|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@71 |s#0@@64| |v#0@@101|) (TSeq Sequences._default.RemoveOneValue$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2516|
 :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@71 |s#0@@64| |v#0@@101|))
))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@72 T@U) ($Heap@@43 T@U) (|s#0@@65| T@U) (|v#0@@102| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@72) LayerTypeType)) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |v#0@@102|) BoxType)) (and (and ($IsGoodHeap $Heap@@43) ($Is |s#0@@65| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@102| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@72 |s#0@@65| |v#0@@102|) true))
 :qid |unknown.0:0|
 :skolemid |2517|
 :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@72 |s#0@@65| |v#0@@102|) ($IsGoodHeap $Heap@@43))
)))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@52 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@52) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (and (and (INTERNAL_le_boogie 0 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (INTERNAL_lt_boogie (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) v@@52)))
 :qid |Sequencesidfy.380:5|
 :skolemid |2518|
 :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52))
)))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@73 T@U) ($Heap@@44 T@U) (|s#0@@66| T@U) (|v#0@@103| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@73) LayerTypeType)) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |v#0@@103|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@66| |v#0@@103|) (and (and ($IsGoodHeap $Heap@@44) ($Is |s#0@@66| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@103| Sequences._default.RemoveOneValue$V@@4)))) (and (=> (|Seq#Contains| |s#0@@66| |v#0@@103|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@66| |v#0@@103|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@73) |s#0@@66| |v#0@@103|) (ite  (not (|Seq#Contains| |s#0@@66| |v#0@@103|)) |s#0@@66| (let ((|i#0@@79| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@66| |v#0@@103|)))
(|Seq#Append| (|Seq#Take| |s#0@@66| |i#0@@79|) (|Seq#Drop| |s#0@@66| (INTERNAL_add_boogie |i#0@@79| 1)))))))))
 :qid |unknown.0:0|
 :skolemid |2519|
 :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@73) |s#0@@66| |v#0@@103|) ($IsGoodHeap $Heap@@44))
))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@74 T@U) ($Heap@@45 T@U) (|s#0@@67| T@U) (|v#0@@104| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@74) LayerTypeType)) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |v#0@@104|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@67|) |v#0@@104|) (and (and ($IsGoodHeap $Heap@@45) ($Is |s#0@@67| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@104| Sequences._default.RemoveOneValue$V@@5)))) (and (=> (|Seq#Contains| |s#0@@67| |v#0@@104|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@67|) |v#0@@104|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@74) (Lit |s#0@@67|) |v#0@@104|) (ite  (not (|Seq#Contains| |s#0@@67| |v#0@@104|)) |s#0@@67| (let ((|i#1@@13| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@67|) |v#0@@104|)))
(|Seq#Append| (|Seq#Take| (Lit |s#0@@67|) |i#1@@13|) (|Seq#Drop| (Lit |s#0@@67|) (INTERNAL_add_boogie |i#1@@13| 1)))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2520|
 :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@74) (Lit |s#0@@67|) |v#0@@104|) ($IsGoodHeap $Heap@@45))
))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@75 T@U) ($Heap@@46 T@U) (|s#0@@68| T@U) (|v#0@@105| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@75) LayerTypeType)) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type |s#0@@68|) (SeqType BoxType))) (= (type |v#0@@105|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@68|) (Lit |v#0@@105|)) (and (and ($IsGoodHeap $Heap@@46) ($Is |s#0@@68| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@105| Sequences._default.RemoveOneValue$V@@6)))) (and (=> (|Seq#Contains| |s#0@@68| |v#0@@105|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@68|) (Lit |v#0@@105|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@75) (Lit |s#0@@68|) (Lit |v#0@@105|)) (ite  (not (|Seq#Contains| |s#0@@68| |v#0@@105|)) |s#0@@68| (let ((|i#2@@5| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@68|) (Lit |v#0@@105|))))
(|Seq#Append| (|Seq#Take| (Lit |s#0@@68|) |i#2@@5|) (|Seq#Drop| (Lit |s#0@@68|) (INTERNAL_add_boogie |i#2@@5| 1)))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2521|
 :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@75) (Lit |s#0@@68|) (Lit |v#0@@105|)) ($IsGoodHeap $Heap@@46))
))))
(assert (forall ((arg0@@502 T@U) (arg1@@224 T@U) (arg2@@118 T@U) (arg3@@64 T@U) (arg4@@38 Int) ) (! (= (type (Sequences.__default.insert arg0@@502 arg1@@224 arg2@@118 arg3@@64 arg4@@38)) (SeqType BoxType))
 :qid |funType:Sequences.__default.insert|
 :pattern ( (Sequences.__default.insert arg0@@502 arg1@@224 arg2@@118 arg3@@64 arg4@@38))
)))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@76 T@U) (|s#0@@69| T@U) (|a#0@@27| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |s#0@@69|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@76) |s#0@@69| |a#0@@27| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@76 |s#0@@69| |a#0@@27| |pos#0@@5|)))
 :qid |unknown.0:0|
 :skolemid |2522|
 :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@76) |s#0@@69| |a#0@@27| |pos#0@@5|))
)))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@77 T@U) (|s#0@@70| T@U) (|a#0@@28| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |s#0@@70|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@77 |s#0@@70| |a#0@@28| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@70| |a#0@@28| |pos#0@@6|)))
 :qid |unknown.0:0|
 :skolemid |2523|
 :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@77) |s#0@@70| |a#0@@28| |pos#0@@6|))
)))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@78 T@U) (|s#0@@71| T@U) (|a#0@@29| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |s#0@@71|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@71| |a#0@@29| |pos#0@@7|) (and (and ($Is |s#0@@71| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@29| Sequences._default.insert$A@@1)) (and (INTERNAL_le_boogie 0 |pos#0@@7|) (INTERNAL_le_boogie |pos#0@@7| (|Seq#Length| |s#0@@71|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|)) (INTERNAL_add_boogie (|Seq#Length| |s#0@@71|) 1)) (forall ((|i#0@@80| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@80|) (INTERNAL_lt_boogie |i#0@@80| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|) |i#0@@80|) (|Seq#Index| |s#0@@71| |i#0@@80|))))
 :qid |Sequencesidfy.387:18|
 :skolemid |2524|
 :pattern ( (|Seq#Index| |s#0@@71| |i#0@@80|))
 :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|) |i#0@@80|))
))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie |pos#0@@7| |i#1@@14|) (INTERNAL_lt_boogie |i#1@@14| (|Seq#Length| |s#0@@71|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|) (INTERNAL_add_boogie |i#1@@14| 1)) (|Seq#Index| |s#0@@71| |i#1@@14|))))
 :qid |Sequencesidfy.388:18|
 :skolemid |2525|
 :pattern ( (|Seq#Index| |s#0@@71| |i#1@@14|))
 :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|) (INTERNAL_add_boogie |i#1@@14| 1)))
))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|) |pos#0@@7|) |a#0@@29|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1))))
 :qid |unknown.0:0|
 :skolemid |2526|
 :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@78 |s#0@@71| |a#0@@29| |pos#0@@7|))
))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@79 T@U) (|s#0@@72| T@U) (|a#0@@30| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |s#0@@72|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (and ($Is |s#0@@72| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@30| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@79 |s#0@@72| |a#0@@30| |pos#0@@8|)  (and (INTERNAL_le_boogie 0 |pos#0@@8|) (INTERNAL_le_boogie |pos#0@@8| (|Seq#Length| |s#0@@72|)))))
 :qid |unknown.0:0|
 :skolemid |2527|
 :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@79 |s#0@@72| |a#0@@30| |pos#0@@8|))
)))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@80 T@U) (|s#0@@73| T@U) (|a#0@@31| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |s#0@@73|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@73| |a#0@@31| |pos#0@@9|) (and (and ($Is |s#0@@73| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@31| Sequences._default.insert$A@@3)) (and (INTERNAL_le_boogie 0 |pos#0@@9|) (INTERNAL_le_boogie |pos#0@@9| (|Seq#Length| |s#0@@73|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@80) |s#0@@73| |a#0@@31| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@73| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@31|)) (|Seq#Drop| |s#0@@73| |pos#0@@9|))))
 :qid |unknown.0:0|
 :skolemid |2528|
 :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@80) |s#0@@73| |a#0@@31| |pos#0@@9|))
))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@81 T@U) (|s#0@@74| T@U) (|a#0@@32| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |s#0@@74|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@74|) |a#0@@32| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@74| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@32| Sequences._default.insert$A@@4)) (and (INTERNAL_le_boogie 0 |pos#0@@10|) (INTERNAL_le_boogie |pos#0@@10| (|Seq#Length| (Lit |s#0@@74|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@81) (Lit |s#0@@74|) |a#0@@32| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@74|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@32|)) (|Seq#Drop| (Lit |s#0@@74|) (LitInt |pos#0@@10|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2529|
 :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@81) (Lit |s#0@@74|) |a#0@@32| (LitInt |pos#0@@10|)))
))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@82 T@U) (|s#0@@75| T@U) (|a#0@@33| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |s#0@@75|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@75|) (Lit |a#0@@33|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@75| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@33| Sequences._default.insert$A@@5)) (and (INTERNAL_le_boogie 0 |pos#0@@11|) (INTERNAL_le_boogie |pos#0@@11| (|Seq#Length| (Lit |s#0@@75|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@82) (Lit |s#0@@75|) (Lit |a#0@@33|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@75|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@33|))) (|Seq#Drop| (Lit |s#0@@75|) (LitInt |pos#0@@11|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2530|
 :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@82) (Lit |s#0@@75|) (Lit |a#0@@33|) (LitInt |pos#0@@11|)))
))))
(assert (forall ((arg0@@503 T@U) (arg1@@225 T@U) (arg2@@119 T@U) (arg3@@65 T@U) (arg4@@39 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@503 arg1@@225 arg2@@119 arg3@@65 arg4@@39 arg5@@20)) (SeqType BoxType))
 :qid |funType:Sequences.__default.replace1with2|
 :pattern ( (Sequences.__default.replace1with2 arg0@@503 arg1@@225 arg2@@119 arg3@@65 arg4@@39 arg5@@20))
)))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@83 T@U) (|s#0@@76| T@U) (|a#0@@34| T@U) (|b#0@@9| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |s#0@@76|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (= (type |b#0@@9|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@83) |s#0@@76| |a#0@@34| |b#0@@9| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@83 |s#0@@76| |a#0@@34| |b#0@@9| |pos#0@@12|)))
 :qid |unknown.0:0|
 :skolemid |2531|
 :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@83) |s#0@@76| |a#0@@34| |b#0@@9| |pos#0@@12|))
)))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@84 T@U) (|s#0@@77| T@U) (|a#0@@35| T@U) (|b#0@@10| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |s#0@@77|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (= (type |b#0@@10|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@84 |s#0@@77| |a#0@@35| |b#0@@10| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@77| |a#0@@35| |b#0@@10| |pos#0@@13|)))
 :qid |unknown.0:0|
 :skolemid |2532|
 :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@84) |s#0@@77| |a#0@@35| |b#0@@10| |pos#0@@13|))
)))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@85 T@U) (|s#0@@78| T@U) (|a#0@@36| T@U) (|b#0@@11| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |s#0@@78|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (= (type |b#0@@11|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) (and (and (and ($Is |s#0@@78| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@36| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@11| Sequences._default.replace1with2$A@@1)) (and (INTERNAL_le_boogie 0 |pos#0@@14|) (INTERNAL_lt_boogie |pos#0@@14| (|Seq#Length| |s#0@@78|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|)) (INTERNAL_add_boogie (|Seq#Length| |s#0@@78|) 1)) (forall ((|i#0@@81| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@81|) (INTERNAL_lt_boogie |i#0@@81| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) |i#0@@81|) (|Seq#Index| |s#0@@78| |i#0@@81|))))
 :qid |Sequencesidfy.412:18|
 :skolemid |2533|
 :pattern ( (|Seq#Index| |s#0@@78| |i#0@@81|))
 :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) |i#0@@81|))
))) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (INTERNAL_lt_boogie |pos#0@@14| |i#1@@15|) (INTERNAL_lt_boogie |i#1@@15| (|Seq#Length| |s#0@@78|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) (INTERNAL_add_boogie |i#1@@15| 1)) (|Seq#Index| |s#0@@78| |i#1@@15|))))
 :qid |Sequencesidfy.413:18|
 :skolemid |2534|
 :pattern ( (|Seq#Index| |s#0@@78| |i#1@@15|))
 :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) (INTERNAL_add_boogie |i#1@@15| 1)))
))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) |pos#0@@14|) |a#0@@36|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) (INTERNAL_add_boogie |pos#0@@14| 1)) |b#0@@11|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1))))
 :qid |unknown.0:0|
 :skolemid |2535|
 :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@85 |s#0@@78| |a#0@@36| |b#0@@11| |pos#0@@14|))
))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@86 T@U) (|s#0@@79| T@U) (|a#0@@37| T@U) (|b#0@@12| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |s#0@@79|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (= (type |b#0@@12|) BoxType)) (and (and ($Is |s#0@@79| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@37| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@12| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@86 |s#0@@79| |a#0@@37| |b#0@@12| |pos#0@@15|)  (and (INTERNAL_le_boogie 0 |pos#0@@15|) (INTERNAL_lt_boogie |pos#0@@15| (|Seq#Length| |s#0@@79|)))))
 :qid |unknown.0:0|
 :skolemid |2536|
 :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@86 |s#0@@79| |a#0@@37| |b#0@@12| |pos#0@@15|))
)))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@87 T@U) (|s#0@@80| T@U) (|a#0@@38| T@U) (|b#0@@13| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |s#0@@80|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (= (type |b#0@@13|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@80| |a#0@@38| |b#0@@13| |pos#0@@16|) (and (and (and ($Is |s#0@@80| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@38| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@13| Sequences._default.replace1with2$A@@3)) (and (INTERNAL_le_boogie 0 |pos#0@@16|) (INTERNAL_lt_boogie |pos#0@@16| (|Seq#Length| |s#0@@80|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@87) |s#0@@80| |a#0@@38| |b#0@@13| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@80| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@38|) |b#0@@13|)) (|Seq#Drop| |s#0@@80| (INTERNAL_add_boogie |pos#0@@16| 1)))))
 :qid |unknown.0:0|
 :skolemid |2537|
 :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@87) |s#0@@80| |a#0@@38| |b#0@@13| |pos#0@@16|))
))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@88 T@U) (|s#0@@81| T@U) (|a#0@@39| T@U) (|b#0@@14| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |s#0@@81|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (= (type |b#0@@14|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@81|) |a#0@@39| |b#0@@14| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@81| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@39| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@14| Sequences._default.replace1with2$A@@4)) (and (INTERNAL_le_boogie 0 |pos#0@@17|) (INTERNAL_lt_boogie |pos#0@@17| (|Seq#Length| (Lit |s#0@@81|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@88) (Lit |s#0@@81|) |a#0@@39| |b#0@@14| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@81|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@39|) |b#0@@14|)) (|Seq#Drop| (Lit |s#0@@81|) (LitInt (INTERNAL_add_boogie |pos#0@@17| 1))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2538|
 :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@88) (Lit |s#0@@81|) |a#0@@39| |b#0@@14| (LitInt |pos#0@@17|)))
))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@89 T@U) (|s#0@@82| T@U) (|a#0@@40| T@U) (|b#0@@15| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |s#0@@82|) (SeqType BoxType))) (= (type |a#0@@40|) BoxType)) (= (type |b#0@@15|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@82|) (Lit |a#0@@40|) (Lit |b#0@@15|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@82| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@40| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@5)) (and (INTERNAL_le_boogie 0 |pos#0@@18|) (INTERNAL_lt_boogie |pos#0@@18| (|Seq#Length| (Lit |s#0@@82|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@89) (Lit |s#0@@82|) (Lit |a#0@@40|) (Lit |b#0@@15|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@82|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@40|)) (Lit |b#0@@15|))) (|Seq#Drop| (Lit |s#0@@82|) (LitInt (INTERNAL_add_boogie |pos#0@@18| 1))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2539|
 :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@89) (Lit |s#0@@82|) (Lit |a#0@@40|) (Lit |b#0@@15|) (LitInt |pos#0@@18|)))
))))
(assert (forall ((arg0@@504 T@U) (arg1@@226 T@U) (arg2@@120 T@U) (arg3@@66 T@U) (arg4@@40 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@504 arg1@@226 arg2@@120 arg3@@66 arg4@@40)) (SeqType BoxType))
 :qid |funType:Sequences.__default.replace2with1|
 :pattern ( (Sequences.__default.replace2with1 arg0@@504 arg1@@226 arg2@@120 arg3@@66 arg4@@40))
)))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@90 T@U) (|s#0@@83| T@U) (|a#0@@41| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |s#0@@83|) (SeqType BoxType))) (= (type |a#0@@41|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@90) |s#0@@83| |a#0@@41| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@90 |s#0@@83| |a#0@@41| |pos#0@@19|)))
 :qid |unknown.0:0|
 :skolemid |2540|
 :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@90) |s#0@@83| |a#0@@41| |pos#0@@19|))
)))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@91 T@U) (|s#0@@84| T@U) (|a#0@@42| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |s#0@@84|) (SeqType BoxType))) (= (type |a#0@@42|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@91 |s#0@@84| |a#0@@42| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@84| |a#0@@42| |pos#0@@20|)))
 :qid |unknown.0:0|
 :skolemid |2541|
 :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@91) |s#0@@84| |a#0@@42| |pos#0@@20|))
)))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@92 T@U) (|s#0@@85| T@U) (|a#0@@43| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |s#0@@85|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@85| |a#0@@43| |pos#0@@21|) (and (and ($Is |s#0@@85| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@43| Sequences._default.replace2with1$A@@1)) (and (INTERNAL_le_boogie 0 |pos#0@@21|) (INTERNAL_lt_boogie |pos#0@@21| (INTERNAL_sub_boogie (|Seq#Length| |s#0@@85|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|)) (INTERNAL_sub_boogie (|Seq#Length| |s#0@@85|) 1)) (forall ((|i#0@@82| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@82|) (INTERNAL_lt_boogie |i#0@@82| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|) |i#0@@82|) (|Seq#Index| |s#0@@85| |i#0@@82|))))
 :qid |Sequencesidfy.431:18|
 :skolemid |2542|
 :pattern ( (|Seq#Index| |s#0@@85| |i#0@@82|))
 :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|) |i#0@@82|))
))) (forall ((|i#1@@16| Int) ) (!  (=> true (=> (and (INTERNAL_lt_boogie |pos#0@@21| |i#1@@16|) (INTERNAL_lt_boogie |i#1@@16| (INTERNAL_sub_boogie (|Seq#Length| |s#0@@85|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|) |i#1@@16|) (|Seq#Index| |s#0@@85| (INTERNAL_add_boogie |i#1@@16| 1)))))
 :qid |Sequencesidfy.432:18|
 :skolemid |2543|
 :pattern ( (|Seq#Index| |s#0@@85| (INTERNAL_add_boogie |i#1@@16| 1)))
 :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|) |i#1@@16|))
))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|) |pos#0@@21|) |a#0@@43|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1))))
 :qid |unknown.0:0|
 :skolemid |2544|
 :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@92 |s#0@@85| |a#0@@43| |pos#0@@21|))
))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@93 T@U) (|s#0@@86| T@U) (|a#0@@44| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |s#0@@86|) (SeqType BoxType))) (= (type |a#0@@44|) BoxType)) (and ($Is |s#0@@86| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@44| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@93 |s#0@@86| |a#0@@44| |pos#0@@22|)  (and (INTERNAL_le_boogie 0 |pos#0@@22|) (INTERNAL_lt_boogie |pos#0@@22| (INTERNAL_sub_boogie (|Seq#Length| |s#0@@86|) 1)))))
 :qid |unknown.0:0|
 :skolemid |2545|
 :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@93 |s#0@@86| |a#0@@44| |pos#0@@22|))
)))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@94 T@U) (|s#0@@87| T@U) (|a#0@@45| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |s#0@@87|) (SeqType BoxType))) (= (type |a#0@@45|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@87| |a#0@@45| |pos#0@@23|) (and (and ($Is |s#0@@87| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@45| Sequences._default.replace2with1$A@@3)) (and (INTERNAL_le_boogie 0 |pos#0@@23|) (INTERNAL_lt_boogie |pos#0@@23| (INTERNAL_sub_boogie (|Seq#Length| |s#0@@87|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@94) |s#0@@87| |a#0@@45| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@87| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@45|)) (|Seq#Drop| |s#0@@87| (INTERNAL_add_boogie |pos#0@@23| 2)))))
 :qid |unknown.0:0|
 :skolemid |2546|
 :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@94) |s#0@@87| |a#0@@45| |pos#0@@23|))
))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@95 T@U) (|s#0@@88| T@U) (|a#0@@46| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |s#0@@88|) (SeqType BoxType))) (= (type |a#0@@46|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@88|) |a#0@@46| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@88| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@46| Sequences._default.replace2with1$A@@4)) (and (INTERNAL_le_boogie 0 |pos#0@@24|) (INTERNAL_lt_boogie |pos#0@@24| (INTERNAL_sub_boogie (|Seq#Length| (Lit |s#0@@88|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@95) (Lit |s#0@@88|) |a#0@@46| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@88|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@46|)) (|Seq#Drop| (Lit |s#0@@88|) (LitInt (INTERNAL_add_boogie |pos#0@@24| 2))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2547|
 :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@95) (Lit |s#0@@88|) |a#0@@46| (LitInt |pos#0@@24|)))
))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@96 T@U) (|s#0@@89| T@U) (|a#0@@47| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |s#0@@89|) (SeqType BoxType))) (= (type |a#0@@47|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@89|) (Lit |a#0@@47|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@89| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@47| Sequences._default.replace2with1$A@@5)) (and (INTERNAL_le_boogie 0 |pos#0@@25|) (INTERNAL_lt_boogie |pos#0@@25| (INTERNAL_sub_boogie (|Seq#Length| (Lit |s#0@@89|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@96) (Lit |s#0@@89|) (Lit |a#0@@47|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@89|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@47|))) (|Seq#Drop| (Lit |s#0@@89|) (LitInt (INTERNAL_add_boogie |pos#0@@25| 2))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2548|
 :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@96) (Lit |s#0@@89|) (Lit |a#0@@47|) (LitInt |pos#0@@25|)))
))))
(assert (forall ((arg0@@505 T@U) (arg1@@227 T@U) (arg2@@121 T@U) (arg3@@67 T@U) ) (! (= (type (Sequences.__default.concat arg0@@505 arg1@@227 arg2@@121 arg3@@67)) (SeqType BoxType))
 :qid |funType:Sequences.__default.concat|
 :pattern ( (Sequences.__default.concat arg0@@505 arg1@@227 arg2@@121 arg3@@67))
)))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@97 T@U) (|a#0@@48| T@U) (|b#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@16|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@97) |a#0@@48| |b#0@@16|) (Sequences.__default.concat Sequences._default.concat$A $ly@@97 |a#0@@48| |b#0@@16|)))
 :qid |unknown.0:0|
 :skolemid |2549|
 :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@97) |a#0@@48| |b#0@@16|))
)))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@98 T@U) (|a#0@@49| T@U) (|b#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@17|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@98 |a#0@@49| |b#0@@17|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@49| |b#0@@17|)))
 :qid |unknown.0:0|
 :skolemid |2550|
 :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@98) |a#0@@49| |b#0@@17|))
)))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@99 T@U) (|a#0@@50| T@U) (|b#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@50| |b#0@@18|) (and ($Is |a#0@@50| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@18| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@99 |a#0@@50| |b#0@@18|)) (INTERNAL_add_boogie (|Seq#Length| |a#0@@50|) (|Seq#Length| |b#0@@18|))) (forall ((|i#0@@83| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@83|) (INTERNAL_lt_boogie |i#0@@83| (|Seq#Length| |a#0@@50|))) (= (|Seq#Index| |a#0@@50| |i#0@@83|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@99 |a#0@@50| |b#0@@18|) |i#0@@83|))))
 :qid |Sequencesidfy.440:18|
 :skolemid |2551|
 :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@99 |a#0@@50| |b#0@@18|) |i#0@@83|))
 :pattern ( (|Seq#Index| |a#0@@50| |i#0@@83|))
))) (forall ((|i#1@@17| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@17|) (INTERNAL_lt_boogie |i#1@@17| (|Seq#Length| |b#0@@18|))) (= (|Seq#Index| |b#0@@18| |i#1@@17|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@99 |a#0@@50| |b#0@@18|) (INTERNAL_add_boogie (|Seq#Length| |a#0@@50|) |i#1@@17|)))))
 :qid |Sequencesidfy.441:18|
 :skolemid |2552|
 :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@99 |a#0@@50| |b#0@@18|) (INTERNAL_add_boogie (|Seq#Length| |a#0@@50|) |i#1@@17|)))
 :pattern ( (|Seq#Index| |b#0@@18| |i#1@@17|))
))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@99 |a#0@@50| |b#0@@18|) (TSeq Sequences._default.concat$A@@1))))
 :qid |unknown.0:0|
 :skolemid |2553|
 :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@99 |a#0@@50| |b#0@@18|))
))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@100 T@U) (|a#0@@51| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@19|) (SeqType BoxType))) (and ($Is |a#0@@51| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@19| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@100 |a#0@@51| |b#0@@19|) true))
 :qid |unknown.0:0|
 :skolemid |2554|
 :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@100 |a#0@@51| |b#0@@19|))
)))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@101 T@U) (|a#0@@52| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@52| |b#0@@20|) (and ($Is |a#0@@52| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@20| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@101) |a#0@@52| |b#0@@20|) (|Seq#Append| |a#0@@52| |b#0@@20|)))
 :qid |unknown.0:0|
 :skolemid |2555|
 :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@101) |a#0@@52| |b#0@@20|))
))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@102 T@U) (|a#0@@53| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@53|) (Lit |b#0@@21|)) (and ($Is |a#0@@53| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@21| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@102) (Lit |a#0@@53|) (Lit |b#0@@21|)) (|Seq#Append| |a#0@@53| |b#0@@21|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2556|
 :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@102) (Lit |a#0@@53|) (Lit |b#0@@21|)))
))))
(assert (forall ((arg0@@506 T@U) (arg1@@228 T@U) (arg2@@122 T@U) (arg3@@68 T@U) (arg4@@41 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@506 arg1@@228 arg2@@122 arg3@@68 arg4@@41)) (SeqType BoxType))
 :qid |funType:Sequences.__default.concat3|
 :pattern ( (Sequences.__default.concat3 arg0@@506 arg1@@228 arg2@@122 arg3@@68 arg4@@41))
)))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@103 T@U) (|a#0@@54| T@U) (|b#0@@22| T@U) (|c#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@22|) BoxType)) (= (type |c#0@@13|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@103) |a#0@@54| |b#0@@22| |c#0@@13|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@103 |a#0@@54| |b#0@@22| |c#0@@13|)))
 :qid |unknown.0:0|
 :skolemid |2557|
 :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@103) |a#0@@54| |b#0@@22| |c#0@@13|))
)))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@104 T@U) (|a#0@@55| T@U) (|b#0@@23| T@U) (|c#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@23|) BoxType)) (= (type |c#0@@14|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@104 |a#0@@55| |b#0@@23| |c#0@@14|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@55| |b#0@@23| |c#0@@14|)))
 :qid |unknown.0:0|
 :skolemid |2558|
 :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@104) |a#0@@55| |b#0@@23| |c#0@@14|))
)))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@105 T@U) (|a#0@@56| T@U) (|b#0@@24| T@U) (|c#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@24|) BoxType)) (= (type |c#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@56| |b#0@@24| |c#0@@15|) (and (and ($Is |a#0@@56| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@24| Sequences._default.concat3$A@@1)) ($Is |c#0@@15| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|)) (INTERNAL_add_boogie (INTERNAL_add_boogie (|Seq#Length| |a#0@@56|) (|Seq#Length| |c#0@@15|)) 1)) (forall ((|i#0@@84| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@84|) (INTERNAL_lt_boogie |i#0@@84| (|Seq#Length| |a#0@@56|))) (= (|Seq#Index| |a#0@@56| |i#0@@84|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|) |i#0@@84|))))
 :qid |Sequencesidfy.448:18|
 :skolemid |2559|
 :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|) |i#0@@84|))
 :pattern ( (|Seq#Index| |a#0@@56| |i#0@@84|))
))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|) (|Seq#Length| |a#0@@56|)) |b#0@@24|)) (forall ((|i#1@@18| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@18|) (INTERNAL_lt_boogie |i#1@@18| (|Seq#Length| |c#0@@15|))) (= (|Seq#Index| |c#0@@15| |i#1@@18|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|) (INTERNAL_add_boogie (INTERNAL_add_boogie (|Seq#Length| |a#0@@56|) 1) |i#1@@18|)))))
 :qid |Sequencesidfy.450:18|
 :skolemid |2560|
 :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|) (INTERNAL_add_boogie (INTERNAL_add_boogie (|Seq#Length| |a#0@@56|) 1) |i#1@@18|)))
 :pattern ( (|Seq#Index| |c#0@@15| |i#1@@18|))
))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|) (TSeq Sequences._default.concat3$A@@1))))
 :qid |unknown.0:0|
 :skolemid |2561|
 :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@105 |a#0@@56| |b#0@@24| |c#0@@15|))
))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@106 T@U) (|a#0@@57| T@U) (|b#0@@25| T@U) (|c#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@25|) BoxType)) (= (type |c#0@@16|) (SeqType BoxType))) (and (and ($Is |a#0@@57| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@25| Sequences._default.concat3$A@@2)) ($Is |c#0@@16| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@106 |a#0@@57| |b#0@@25| |c#0@@16|) true))
 :qid |unknown.0:0|
 :skolemid |2562|
 :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@106 |a#0@@57| |b#0@@25| |c#0@@16|))
)))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@107 T@U) (|a#0@@58| T@U) (|b#0@@26| T@U) (|c#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@58| |b#0@@26| |c#0@@17|) (and (and ($Is |a#0@@58| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@26| Sequences._default.concat3$A@@3)) ($Is |c#0@@17| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@107) |a#0@@58| |b#0@@26| |c#0@@17|) (|Seq#Append| (|Seq#Append| |a#0@@58| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@26|)) |c#0@@17|)))
 :qid |unknown.0:0|
 :skolemid |2563|
 :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@107) |a#0@@58| |b#0@@26| |c#0@@17|))
))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@108 T@U) (|a#0@@59| T@U) (|b#0@@27| T@U) (|c#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@59|) |b#0@@27| (Lit |c#0@@18|)) (and (and ($Is |a#0@@59| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@27| Sequences._default.concat3$A@@4)) ($Is |c#0@@18| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@108) (Lit |a#0@@59|) |b#0@@27| (Lit |c#0@@18|)) (|Seq#Append| (|Seq#Append| |a#0@@59| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@27|)) |c#0@@18|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2564|
 :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@108) (Lit |a#0@@59|) |b#0@@27| (Lit |c#0@@18|)))
))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@109 T@U) (|a#0@@60| T@U) (|b#0@@28| T@U) (|c#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@60|) (Lit |b#0@@28|) (Lit |c#0@@19|)) (and (and ($Is |a#0@@60| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@5)) ($Is |c#0@@19| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@109) (Lit |a#0@@60|) (Lit |b#0@@28|) (Lit |c#0@@19|)) (|Seq#Append| (|Seq#Append| |a#0@@60| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@28|))) |c#0@@19|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2565|
 :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@109) (Lit |a#0@@60|) (Lit |b#0@@28|) (Lit |c#0@@19|)))
))))
(assert (forall ((arg0@@507 T@U) (arg1@@229 T@U) (arg2@@123 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@507 arg1@@229 arg2@@123)) (SeqType BoxType))
 :qid |funType:Sequences.__default.concatSeq|
 :pattern ( (Sequences.__default.concatSeq arg0@@507 arg1@@229 arg2@@123))
)))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@110 T@U) (|a#0@@61| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@110) |a#0@@61|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@110 |a#0@@61|)))
 :qid |unknown.0:0|
 :skolemid |2566|
 :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@110) |a#0@@61|))
)))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@111 T@U) (|a#0@@62| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@111 |a#0@@62|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@62|)))
 :qid |unknown.0:0|
 :skolemid |2567|
 :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@111) |a#0@@62|))
)))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@112 T@U) (|a#0@@63| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@63|) ($Is |a#0@@63| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@112 |a#0@@63|) (TSeq Sequences._default.concatSeq$A@@1)))
 :qid |unknown.0:0|
 :skolemid |2568|
 :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@112 |a#0@@63|))
))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@113 T@U) (|a#0@@64| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) ($Is |a#0@@64| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@113 |a#0@@64|) true))
 :qid |unknown.0:0|
 :skolemid |2569|
 :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@113 |a#0@@64|))
)))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@114 T@U) (|a#0@@65| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@65|) ($Is |a#0@@65| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@65|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@114) |a#0@@65|) (ite (= (|Seq#Length| |a#0@@65|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@114 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@65|)))))))
 :qid |unknown.0:0|
 :skolemid |2570|
 :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@114) |a#0@@65|))
))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@115 T@U) (|a#0@@66| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@66|)) ($Is |a#0@@66| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@66|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@115) (Lit |a#0@@66|)) (ite (= (|Seq#Length| (Lit |a#0@@66|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@115) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@66|))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2571|
 :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@115) (Lit |a#0@@66|)))
))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@116 T@U) (|a#0@@67| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@116) |a#0@@67| |b#0@@29|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@116 |a#0@@67| |b#0@@29|)))
 :qid |unknown.0:0|
 :skolemid |2572|
 :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@116) |a#0@@67| |b#0@@29|))
)))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@117 T@U) (|a#0@@68| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@117 |a#0@@68| |b#0@@30|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@68| |b#0@@30|)))
 :qid |unknown.0:0|
 :skolemid |2573|
 :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@117) |a#0@@68| |b#0@@30|))
)))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@118 T@U) (|a#0@@69| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@69| |b#0@@31|) (and ($Is |a#0@@69| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@31| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@118 |a#0@@69| |b#0@@31|)) (INTERNAL_le_boogie (|Seq#Length| |a#0@@69|) (|Seq#Length| |b#0@@31|)))
 :qid |unknown.0:0|
 :skolemid |2574|
 :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@118 |a#0@@69| |b#0@@31|))
))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@119 T@U) (|a#0@@70| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (and ($Is |a#0@@70| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@32| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@119 |a#0@@70| |b#0@@32|) true))
 :qid |unknown.0:0|
 :skolemid |2575|
 :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@119 |a#0@@70| |b#0@@32|))
)))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@120 T@U) (|a#0@@71| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@71| |b#0@@33|) (and ($Is |a#0@@71| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@33| (TSeq Sequences._default.IsPrefix$A@@3))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@120) |a#0@@71| |b#0@@33|)  (and (INTERNAL_le_boogie (|Seq#Length| |a#0@@71|) (|Seq#Length| |b#0@@33|)) (|Seq#Equal| |a#0@@71| (|Seq#Take| |b#0@@33| (|Seq#Length| |a#0@@71|))))))
 :qid |unknown.0:0|
 :skolemid |2576|
 :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@120) |a#0@@71| |b#0@@33|))
))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@121 T@U) (|a#0@@72| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@72|) (Lit |b#0@@34|)) (and ($Is |a#0@@72| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@34| (TSeq Sequences._default.IsPrefix$A@@4))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@121) (Lit |a#0@@72|) (Lit |b#0@@34|))  (and (INTERNAL_le_boogie (|Seq#Length| (Lit |a#0@@72|)) (|Seq#Length| (Lit |b#0@@34|))) (|Seq#Equal| |a#0@@72| (|Seq#Take| (Lit |b#0@@34|) (|Seq#Length| (Lit |a#0@@72|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2577|
 :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@121) (Lit |a#0@@72|) (Lit |b#0@@34|)))
))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@122 T@U) (|a#0@@73| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@122) |a#0@@73| |b#0@@35|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@122 |a#0@@73| |b#0@@35|)))
 :qid |unknown.0:0|
 :skolemid |2578|
 :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@122) |a#0@@73| |b#0@@35|))
)))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@123 T@U) (|a#0@@74| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@123 |a#0@@74| |b#0@@36|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@74| |b#0@@36|)))
 :qid |unknown.0:0|
 :skolemid |2579|
 :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@123) |a#0@@74| |b#0@@36|))
)))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@124 T@U) (|a#0@@75| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@75| |b#0@@37|) (and ($Is |a#0@@75| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@37| (TSeq Sequences._default.IsSuffix$A@@1))))) true)
 :qid |unknown.0:0|
 :skolemid |2580|
 :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@124 |a#0@@75| |b#0@@37|))
))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@125 T@U) (|a#0@@76| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and ($Is |a#0@@76| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@38| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@125 |a#0@@76| |b#0@@38|) true))
 :qid |unknown.0:0|
 :skolemid |2581|
 :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@125 |a#0@@76| |b#0@@38|))
)))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@126 T@U) (|a#0@@77| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@77| |b#0@@39|) (and ($Is |a#0@@77| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@39| (TSeq Sequences._default.IsSuffix$A@@3))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@126) |a#0@@77| |b#0@@39|)  (and (INTERNAL_le_boogie (|Seq#Length| |a#0@@77|) (|Seq#Length| |b#0@@39|)) (|Seq#Equal| |a#0@@77| (|Seq#Drop| |b#0@@39| (INTERNAL_sub_boogie (|Seq#Length| |b#0@@39|) (|Seq#Length| |a#0@@77|)))))))
 :qid |unknown.0:0|
 :skolemid |2582|
 :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@126) |a#0@@77| |b#0@@39|))
))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@127 T@U) (|a#0@@78| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@78|) (Lit |b#0@@40|)) (and ($Is |a#0@@78| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@40| (TSeq Sequences._default.IsSuffix$A@@4))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@127) (Lit |a#0@@78|) (Lit |b#0@@40|))  (and (INTERNAL_le_boogie (|Seq#Length| (Lit |a#0@@78|)) (|Seq#Length| (Lit |b#0@@40|))) (|Seq#Equal| |a#0@@78| (|Seq#Drop| (Lit |b#0@@40|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |b#0@@40|)) (|Seq#Length| (Lit |a#0@@78|))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2583|
 :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@127) (Lit |a#0@@78|) (Lit |b#0@@40|)))
))))
(assert (forall ((arg0@@508 T@U) (arg1@@230 T@U) (arg2@@124 T@U) (arg3@@69 T@U) (arg4@@42 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@508 arg1@@230 arg2@@124 arg3@@69 arg4@@42)) DatatypeTypeType)
 :qid |funType:Sequences.__default.SeqIndexIterate|
 :pattern ( (Sequences.__default.SeqIndexIterate arg0@@508 arg1@@230 arg2@@124 arg3@@69 arg4@@42))
)))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@128 T@U) (|run#0@@71| T@U) (|needle#0| T@U) (|i#0@@85| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@128) |run#0@@71| |needle#0| |i#0@@85|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@128 |run#0@@71| |needle#0| |i#0@@85|)))
 :qid |unknown.0:0|
 :skolemid |2584|
 :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@128) |run#0@@71| |needle#0| |i#0@@85|))
)))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@129 T@U) (|run#0@@72| T@U) (|needle#0@@0| T@U) (|i#0@@86| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@129 |run#0@@72| |needle#0@@0| |i#0@@86|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@72| |needle#0@@0| |i#0@@86|)))
 :qid |unknown.0:0|
 :skolemid |2585|
 :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@129) |run#0@@72| |needle#0@@0| |i#0@@86|))
)))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@130 T@U) (|run#0@@73| T@U) (|needle#0@@1| T@U) (|i#0@@87| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@73| |needle#0@@1| |i#0@@87|) (and (and ($Is |run#0@@73| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (INTERNAL_le_boogie 0 |i#0@@87|) (INTERNAL_le_boogie |i#0@@87| (|Seq#Length| |run#0@@73|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@130 |run#0@@73| |needle#0@@1| |i#0@@87|)) (and (and (INTERNAL_le_boogie 0 (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@130 |run#0@@73| |needle#0@@1| |i#0@@87|))))) (INTERNAL_lt_boogie (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@130 |run#0@@73| |needle#0@@1| |i#0@@87|)))) (|Seq#Length| |run#0@@73|))) (= (|Seq#Index| |run#0@@73| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@130 |run#0@@73| |needle#0@@1| |i#0@@87|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@130 |run#0@@73| |needle#0@@1| |i#0@@87|)) (forall ((|j#0@@2| Int) ) (!  (=> (and (INTERNAL_le_boogie |i#0@@87| |j#0@@2|) (INTERNAL_lt_boogie |j#0@@2| (|Seq#Length| |run#0@@73|))) (not (= (|Seq#Index| |run#0@@73| |j#0@@2|) |needle#0@@1|)))
 :qid |Sequencesidfy.530:32|
 :skolemid |2586|
 :pattern ( (|Seq#Index| |run#0@@73| |j#0@@2|))
)))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@130 |run#0@@73| |needle#0@@1| |i#0@@87|) (Tclass.Options.Option TInt))))
 :qid |unknown.0:0|
 :skolemid |2587|
 :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@130 |run#0@@73| |needle#0@@1| |i#0@@87|))
))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@131 T@U) (|run#0@@74| T@U) (|needle#0@@2| T@U) (|i#0@@88| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@74| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@131 |run#0@@74| |needle#0@@2| |i#0@@88|)  (and (INTERNAL_le_boogie 0 |i#0@@88|) (INTERNAL_le_boogie |i#0@@88| (|Seq#Length| |run#0@@74|)))))
 :qid |unknown.0:0|
 :skolemid |2588|
 :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@131 |run#0@@74| |needle#0@@2| |i#0@@88|))
)))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@132 T@U) (|run#0@@75| T@U) (|needle#0@@3| T@U) (|i#0@@89| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |run#0@@75|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@75| |needle#0@@3| |i#0@@89|) (and (and ($Is |run#0@@75| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (INTERNAL_le_boogie 0 |i#0@@89|) (INTERNAL_le_boogie |i#0@@89| (|Seq#Length| |run#0@@75|)))))) (and (=> (not (= |i#0@@89| (|Seq#Length| |run#0@@75|))) (=> (not (= (|Seq#Index| |run#0@@75| |i#0@@89|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@75| |needle#0@@3| (INTERNAL_add_boogie |i#0@@89| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@132) |run#0@@75| |needle#0@@3| |i#0@@89|) (ite (= |i#0@@89| (|Seq#Length| |run#0@@75|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@75| |i#0@@89|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@89|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@132 |run#0@@75| |needle#0@@3| (INTERNAL_add_boogie |i#0@@89| 1)))))))
 :qid |unknown.0:0|
 :skolemid |2589|
 :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@132) |run#0@@75| |needle#0@@3| |i#0@@89|))
))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@133 T@U) (|run#0@@76| T@U) (|needle#0@@4| T@U) (|i#0@@90| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |run#0@@76|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@76|) |needle#0@@4| (LitInt |i#0@@90|)) (and (and ($Is |run#0@@76| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (INTERNAL_le_boogie 0 |i#0@@90|) (INTERNAL_le_boogie |i#0@@90| (|Seq#Length| (Lit |run#0@@76|))))))) (and (=> (not (= (LitInt |i#0@@90|) (|Seq#Length| (Lit |run#0@@76|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@76|) (LitInt |i#0@@90|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@76|) |needle#0@@4| (LitInt (INTERNAL_add_boogie |i#0@@90| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@133) (Lit |run#0@@76|) |needle#0@@4| (LitInt |i#0@@90|)) (ite (= (LitInt |i#0@@90|) (|Seq#Length| (Lit |run#0@@76|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@76|) (LitInt |i#0@@90|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@90|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@133) (Lit |run#0@@76|) |needle#0@@4| (LitInt (INTERNAL_add_boogie |i#0@@90| 1))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2590|
 :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@133) (Lit |run#0@@76|) |needle#0@@4| (LitInt |i#0@@90|)))
))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@134 T@U) (|run#0@@77| T@U) (|needle#0@@5| T@U) (|i#0@@91| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |run#0@@77|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@77|) (Lit |needle#0@@5|) (LitInt |i#0@@91|)) (and (and ($Is |run#0@@77| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (INTERNAL_le_boogie 0 |i#0@@91|) (INTERNAL_le_boogie |i#0@@91| (|Seq#Length| (Lit |run#0@@77|))))))) (and (=> (not (= (LitInt |i#0@@91|) (|Seq#Length| (Lit |run#0@@77|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@77|) (LitInt |i#0@@91|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@77|) (Lit |needle#0@@5|) (LitInt (INTERNAL_add_boogie |i#0@@91| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@134) (Lit |run#0@@77|) (Lit |needle#0@@5|) (LitInt |i#0@@91|)) (ite (= (LitInt |i#0@@91|) (|Seq#Length| (Lit |run#0@@77|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@77|) (LitInt |i#0@@91|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@91|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@134) (Lit |run#0@@77|) (Lit |needle#0@@5|) (LitInt (INTERNAL_add_boogie |i#0@@91| 1))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2591|
 :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@134) (Lit |run#0@@77|) (Lit |needle#0@@5|) (LitInt |i#0@@91|)))
))))
(assert (forall ((arg0@@509 T@U) (arg1@@231 T@U) (arg2@@125 T@U) (arg3@@70 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@509 arg1@@231 arg2@@125 arg3@@70)) DatatypeTypeType)
 :qid |funType:Sequences.__default.SeqIndex|
 :pattern ( (Sequences.__default.SeqIndex arg0@@509 arg1@@231 arg2@@125 arg3@@70))
)))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@135 T@U) (|run#0@@78| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |run#0@@78|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@135) |run#0@@78| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@135 |run#0@@78| |needle#0@@6|)))
 :qid |unknown.0:0|
 :skolemid |2592|
 :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@135) |run#0@@78| |needle#0@@6|))
)))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@136 T@U) (|run#0@@79| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |run#0@@79|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@136 |run#0@@79| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@79| |needle#0@@7|)))
 :qid |unknown.0:0|
 :skolemid |2593|
 :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@136) |run#0@@79| |needle#0@@7|))
)))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@137 T@U) (|run#0@@80| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |run#0@@80|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@80| |needle#0@@8|) (and ($Is |run#0@@80| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@137 |run#0@@80| |needle#0@@8|)) (and (and (INTERNAL_le_boogie 0 (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@137 |run#0@@80| |needle#0@@8|))))) (INTERNAL_lt_boogie (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@137 |run#0@@80| |needle#0@@8|)))) (|Seq#Length| |run#0@@80|))) (= (|Seq#Index| |run#0@@80| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@137 |run#0@@80| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@137 |run#0@@80| |needle#0@@8|)) (forall ((|i#0@@92| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@92|) (INTERNAL_lt_boogie |i#0@@92| (|Seq#Length| |run#0@@80|))) (not (= (|Seq#Index| |run#0@@80| |i#0@@92|) |needle#0@@8|)))
 :qid |Sequencesidfy.540:32|
 :skolemid |2594|
 :pattern ( (|Seq#Index| |run#0@@80| |i#0@@92|))
)))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@137 |run#0@@80| |needle#0@@8|) (Tclass.Options.Option TInt))))
 :qid |unknown.0:0|
 :skolemid |2595|
 :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@137 |run#0@@80| |needle#0@@8|))
))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@138 T@U) (|run#0@@81| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |run#0@@81|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@81| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@138 |run#0@@81| |needle#0@@9|) true))
 :qid |unknown.0:0|
 :skolemid |2596|
 :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@138 |run#0@@81| |needle#0@@9|))
)))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@139 T@U) (|run#0@@82| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |run#0@@82|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@82| |needle#0@@10|) (and ($Is |run#0@@82| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@82| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@139) |run#0@@82| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@82| |needle#0@@10| (LitInt 0)))))
 :qid |unknown.0:0|
 :skolemid |2597|
 :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@139) |run#0@@82| |needle#0@@10|))
))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@140 T@U) (|run#0@@83| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |run#0@@83|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@83|) |needle#0@@11|) (and ($Is |run#0@@83| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@83|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@140) (Lit |run#0@@83|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@83|) |needle#0@@11| (LitInt 0)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2598|
 :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@140) (Lit |run#0@@83|) |needle#0@@11|))
))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@141 T@U) (|run#0@@84| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |run#0@@84|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@84|) (Lit |needle#0@@12|)) (and ($Is |run#0@@84| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@84|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@141) (Lit |run#0@@84|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@84|) (Lit |needle#0@@12|) (LitInt 0)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2599|
 :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@141) (Lit |run#0@@84|) (Lit |needle#0@@12|)))
))))
(assert (forall ((arg0@@510 T@U) (arg1@@232 T@U) (arg2@@126 Int) (arg3@@71 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@510 arg1@@232 arg2@@126 arg3@@71)) (SeqType BoxType))
 :qid |funType:Sequences.__default.SeqOfLength|
 :pattern ( (Sequences.__default.SeqOfLength arg0@@510 arg1@@232 arg2@@126 arg3@@71))
)))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@142 T@U) (|length#0@@10| Int) (|v#0@@106| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |v#0@@106|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@142) |length#0@@10| |v#0@@106|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@142 |length#0@@10| |v#0@@106|)))
 :qid |unknown.0:0|
 :skolemid |2600|
 :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@142) |length#0@@10| |v#0@@106|))
)))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@143 T@U) (|length#0@@11| Int) (|v#0@@107| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |v#0@@107|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@143 |length#0@@11| |v#0@@107|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@11| |v#0@@107|)))
 :qid |unknown.0:0|
 :skolemid |2601|
 :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@143) |length#0@@11| |v#0@@107|))
)))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@144 T@U) (|length#0@@12| Int) (|v#0@@108| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |v#0@@108|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@12| |v#0@@108|) (and (INTERNAL_le_boogie 0 |length#0@@12|) ($IsBox |v#0@@108| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@144 |length#0@@12| |v#0@@108|)) |length#0@@12|) (forall ((|i#0@@93| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@93|) (INTERNAL_lt_boogie |i#0@@93| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@144 |length#0@@12| |v#0@@108|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@144 |length#0@@12| |v#0@@108|) |i#0@@93|) |v#0@@108|))
 :qid |Sequencesidfy.547:18|
 :skolemid |2602|
 :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@144 |length#0@@12| |v#0@@108|) |i#0@@93|))
))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@144 |length#0@@12| |v#0@@108|) (TSeq Sequences._default.SeqOfLength$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2603|
 :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@144 |length#0@@12| |v#0@@108|))
))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@145 T@U) (|length#0@@13| Int) (|v#0@@109| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |v#0@@109|) BoxType)) (and (INTERNAL_le_boogie 0 |length#0@@13|) ($IsBox |v#0@@109| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@145 |length#0@@13| |v#0@@109|) true))
 :qid |unknown.0:0|
 :skolemid |2604|
 :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@145 |length#0@@13| |v#0@@109|))
)))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@146 T@U) (|length#0@@14| Int) (|v#0@@110| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |v#0@@110|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@14| |v#0@@110|) (and (INTERNAL_le_boogie 0 |length#0@@14|) ($IsBox |v#0@@110| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@14| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (INTERNAL_sub_boogie |length#0@@14| 1) |v#0@@110|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@146) |length#0@@14| |v#0@@110|) (ite (= |length#0@@14| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@110|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@146 (INTERNAL_sub_boogie |length#0@@14| 1) |v#0@@110|))))))
 :qid |unknown.0:0|
 :skolemid |2605|
 :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@146) |length#0@@14| |v#0@@110|))
))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@147 T@U) (|length#0@@15| Int) (|v#0@@111| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |v#0@@111|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@15|) |v#0@@111|) (and (INTERNAL_le_boogie 0 |length#0@@15|) ($IsBox |v#0@@111| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@15|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (INTERNAL_sub_boogie |length#0@@15| 1)) |v#0@@111|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@147) (LitInt |length#0@@15|) |v#0@@111|) (ite (= (LitInt |length#0@@15|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@111|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@147) (LitInt (INTERNAL_sub_boogie |length#0@@15| 1)) |v#0@@111|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2606|
 :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@147) (LitInt |length#0@@15|) |v#0@@111|))
))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@148 T@U) (|length#0@@16| Int) (|v#0@@112| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |v#0@@112|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@16|) (Lit |v#0@@112|)) (and (INTERNAL_le_boogie 0 |length#0@@16|) ($IsBox |v#0@@112| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@16|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (INTERNAL_sub_boogie |length#0@@16| 1)) (Lit |v#0@@112|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@148) (LitInt |length#0@@16|) (Lit |v#0@@112|)) (ite (= (LitInt |length#0@@16|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@112|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@148) (LitInt (INTERNAL_sub_boogie |length#0@@16| 1)) (Lit |v#0@@112|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2607|
 :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@148) (LitInt |length#0@@16|) (Lit |v#0@@112|)))
))))
(assert (forall ((arg0@@511 T@U) (arg1@@233 T@U) (arg2@@127 T@U) (arg3@@72 Int) (arg4@@43 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@511 arg1@@233 arg2@@127 arg3@@72 arg4@@43)) (SeqType BoxType))
 :qid |funType:Sequences.__default.SeqIndexUpdate|
 :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@511 arg1@@233 arg2@@127 arg3@@72 arg4@@43))
)))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@149 T@U) (|s#0@@90| T@U) (|i#0@@94| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |s#0@@90|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@149) |s#0@@90| |i#0@@94| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@149 |s#0@@90| |i#0@@94| |t#0|)))
 :qid |unknown.0:0|
 :skolemid |2608|
 :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@149) |s#0@@90| |i#0@@94| |t#0|))
)))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@150 T@U) (|s#0@@91| T@U) (|i#0@@95| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |s#0@@91|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@150 |s#0@@91| |i#0@@95| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@91| |i#0@@95| |t#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2609|
 :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@150) |s#0@@91| |i#0@@95| |t#0@@0|))
)))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@151 T@U) (|s#0@@92| T@U) (|i#0@@96| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |s#0@@92|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@92| |i#0@@96| |t#0@@1|) (and (and (and ($Is |s#0@@92| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (INTERNAL_le_boogie 0 |i#0@@96|) (INTERNAL_lt_boogie |i#0@@96| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (INTERNAL_lt_boogie (INTERNAL_add_boogie |i#0@@96| 1) 18446744073709551616) (and (INTERNAL_le_boogie 0 |i#0@@96|) (INTERNAL_lt_boogie |i#0@@96| (|Seq#Length| |s#0@@92|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@151 |s#0@@92| |i#0@@96| |t#0@@1|) (|Seq#Update| |s#0@@92| |i#0@@96| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@151 |s#0@@92| |i#0@@96| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2610|
 :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@151 |s#0@@92| |i#0@@96| |t#0@@1|))
))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@152 T@U) (|s#0@@93| T@U) (|i#0@@97| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |s#0@@93|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@93| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (INTERNAL_le_boogie 0 |i#0@@97|) (INTERNAL_lt_boogie |i#0@@97| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@152 |s#0@@93| |i#0@@97| |t#0@@2|)  (and (INTERNAL_lt_boogie (INTERNAL_add_boogie |i#0@@97| 1) 18446744073709551616) (and (INTERNAL_le_boogie 0 |i#0@@97|) (INTERNAL_lt_boogie |i#0@@97| (|Seq#Length| |s#0@@93|))))))
 :qid |unknown.0:0|
 :skolemid |2611|
 :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@152 |s#0@@93| |i#0@@97| |t#0@@2|))
)))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@153 T@U) (|s#0@@94| T@U) (|i#0@@98| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |s#0@@94|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@94| |i#0@@98| |t#0@@3|) (and (and (and ($Is |s#0@@94| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (INTERNAL_le_boogie 0 |i#0@@98|) (INTERNAL_lt_boogie |i#0@@98| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (INTERNAL_lt_boogie (INTERNAL_add_boogie |i#0@@98| 1) 18446744073709551616) (and (INTERNAL_le_boogie 0 |i#0@@98|) (INTERNAL_lt_boogie |i#0@@98| (|Seq#Length| |s#0@@94|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@153) |s#0@@94| |i#0@@98| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@94| |i#0@@98|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@94| (INTERNAL_add_boogie |i#0@@98| 1)))))
 :qid |unknown.0:0|
 :skolemid |2612|
 :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@153) |s#0@@94| |i#0@@98| |t#0@@3|))
))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@154 T@U) (|s#0@@95| T@U) (|i#0@@99| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |s#0@@95|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@95|) (LitInt |i#0@@99|) |t#0@@4|) (and (and (and ($Is |s#0@@95| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (INTERNAL_le_boogie 0 |i#0@@99|) (INTERNAL_lt_boogie |i#0@@99| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie (INTERNAL_add_boogie |i#0@@99| 1) 18446744073709551616)))) (and (INTERNAL_le_boogie 0 |i#0@@99|) (INTERNAL_lt_boogie |i#0@@99| (|Seq#Length| (Lit |s#0@@95|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@154) (Lit |s#0@@95|) (LitInt |i#0@@99|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@95|) (LitInt |i#0@@99|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@95|) (LitInt (INTERNAL_add_boogie |i#0@@99| 1))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2613|
 :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@154) (Lit |s#0@@95|) (LitInt |i#0@@99|) |t#0@@4|))
))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@155 T@U) (|s#0@@96| T@U) (|i#0@@100| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |s#0@@96|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@96|) (LitInt |i#0@@100|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@96| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (INTERNAL_le_boogie 0 |i#0@@100|) (INTERNAL_lt_boogie |i#0@@100| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie (INTERNAL_add_boogie |i#0@@100| 1) 18446744073709551616)))) (and (INTERNAL_le_boogie 0 |i#0@@100|) (INTERNAL_lt_boogie |i#0@@100| (|Seq#Length| (Lit |s#0@@96|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@155) (Lit |s#0@@96|) (LitInt |i#0@@100|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@96|) (LitInt |i#0@@100|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@96|) (LitInt (INTERNAL_add_boogie |i#0@@100| 1))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2614|
 :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@155) (Lit |s#0@@96|) (LitInt |i#0@@100|) (Lit |t#0@@5|)))
))))
(assert (forall ((arg0@@512 T@U) (arg1@@234 T@U) (arg2@@128 T@U) (arg3@@73 T@U) (arg4@@44 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@512 arg1@@234 arg2@@128 arg3@@73 arg4@@44)) (SeqType BoxType))
 :qid |funType:Sequences.__default.Zip|
 :pattern ( (Sequences.__default.Zip arg0@@512 arg1@@234 arg2@@128 arg3@@73 arg4@@44))
)))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@156 T@U) (|a#0@@79| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@156) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@156) |a#0@@79| |b#0@@41|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@156 |a#0@@79| |b#0@@41|)))
 :qid |unknown.0:0|
 :skolemid |2615|
 :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@156) |a#0@@79| |b#0@@41|))
)))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@157 T@U) (|a#0@@80| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@157) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@157 |a#0@@80| |b#0@@42|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@80| |b#0@@42|)))
 :qid |unknown.0:0|
 :skolemid |2616|
 :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@157) |a#0@@80| |b#0@@42|))
)))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@158 T@U) (|a#0@@81| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@158) LayerTypeType)) (= (type |a#0@@81|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@81| |b#0@@43|) (and (and ($Is |a#0@@81| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@43| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@81|) (|Seq#Length| |b#0@@43|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@158 |a#0@@81| |b#0@@43|)) (|Seq#Length| |a#0@@81|)) (forall ((|i#0@@101| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@101|) (INTERNAL_lt_boogie |i#0@@101| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@158 |a#0@@81| |b#0@@43|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@158 |a#0@@81| |b#0@@43|) |i#0@@101|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@81| |i#0@@101|) (|Seq#Index| |b#0@@43| |i#0@@101|)))))
 :qid |Sequencesidfy.568:20|
 :skolemid |2617|
 :pattern ( (|Seq#Index| |b#0@@43| |i#0@@101|))
 :pattern ( (|Seq#Index| |a#0@@81| |i#0@@101|))
 :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@158 |a#0@@81| |b#0@@43|) |i#0@@101|)))
))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@158 |a#0@@81| |b#0@@43|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1)))))
 :qid |unknown.0:0|
 :skolemid |2618|
 :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@158 |a#0@@81| |b#0@@43|))
))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@159 T@U) (|a#0@@82| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@159) LayerTypeType)) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (and ($Is |a#0@@82| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@44| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@159 |a#0@@82| |b#0@@44|) (= (|Seq#Length| |a#0@@82|) (|Seq#Length| |b#0@@44|))))
 :qid |unknown.0:0|
 :skolemid |2619|
 :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@159 |a#0@@82| |b#0@@44|))
)))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@160 T@U) (|a#0@@83| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@160) LayerTypeType)) (= (type |a#0@@83|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@83| |b#0@@45|) (and (and ($Is |a#0@@83| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@45| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@83|) (|Seq#Length| |b#0@@45|))))) (and (=> (not (= (|Seq#Length| |a#0@@83|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@83|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@45|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@83|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@45|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@83|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@45|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@160) |a#0@@83| |b#0@@45|) (ite (= (|Seq#Length| |a#0@@83|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@160 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@83|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@45|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@83|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@45|)))))))))
 :qid |unknown.0:0|
 :skolemid |2620|
 :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@160) |a#0@@83| |b#0@@45|))
))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@161 T@U) (|a#0@@84| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@161) LayerTypeType)) (= (type |a#0@@84|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@84|) (Lit |b#0@@46|)) (and (and ($Is |a#0@@84| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@46| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@84|)) (|Seq#Length| (Lit |b#0@@46|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@84|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@84|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@46|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@84|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@46|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@84|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@46|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@161) (Lit |a#0@@84|) (Lit |b#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@84|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@161) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@84|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@46|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@84|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@46|))))))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2621|
 :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@161) (Lit |a#0@@84|) (Lit |b#0@@46|)))
))))
(assert (forall ((arg0@@513 T@U) (arg1@@235 T@U) (arg2@@129 T@U) (arg3@@74 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@513 arg1@@235 arg2@@129 arg3@@74)) DatatypeTypeType)
 :qid |funType:Sequences.__default.Unzip|
 :pattern ( (Sequences.__default.Unzip arg0@@513 arg1@@235 arg2@@129 arg3@@74))
)))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@162 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@162) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@162) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@162 |z#0|)))
 :qid |unknown.0:0|
 :skolemid |2622|
 :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@162) |z#0|))
)))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@163 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@163) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@163 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2623|
 :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@163) |z#0@@0|))
)))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@164 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@164) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@102| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@102|) (INTERNAL_lt_boogie |i#0@@102| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|))) |i#0@@102|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|))) |i#0@@102|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@102|)))))
 :qid |Sequencesidfy.576:20|
 :skolemid |2624|
 :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@102|)))
 :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|))) |i#0@@102|))
 :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|))) |i#0@@102|))
))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1)))))
 :qid |unknown.0:0|
 :skolemid |2625|
 :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@164 |z#0@@1|))
))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@165 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@165) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@165 |z#0@@2|) true))
 :qid |unknown.0:0|
 :skolemid |2626|
 :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@165 |z#0@@2|))
)))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@166 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@166) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@166) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@47| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@166 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))
(let ((|a#0@@85| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@166 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))
(|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@85| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@47| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))))))))))
 :qid |unknown.0:0|
 :skolemid |2627|
 :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@166) |z#0@@3|))
))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@167 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@167) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@167) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@167) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))
(let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@167) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))
(|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2628|
 :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@167) (Lit |z#0@@4|)))
))))
(assert (forall ((arg0@@514 T@U) (arg1@@236 T@U) (arg2@@130 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@514 arg1@@236 arg2@@130)) (SeqType BoxType))
 :qid |funType:Sequences.__default.FlattenShape|
 :pattern ( (Sequences.__default.FlattenShape arg0@@514 arg1@@236 arg2@@130))
)))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@168 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@168) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@168 |seqs#0|)))
 :qid |unknown.0:0|
 :skolemid |2629|
 :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@168) |seqs#0|))
)))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@169 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@169 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2630|
 :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@169) |seqs#0@@0|))
)))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@170 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@170 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@103| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@103|) (INTERNAL_lt_boogie |i#0@@103| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@170 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@170 |seqs#0@@1|) |i#0@@103|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@103|))))))
 :qid |Sequencesidfy.598:20|
 :skolemid |2631|
 :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@103|)))
 :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@170 |seqs#0@@1|) |i#0@@103|)))
))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@170 |seqs#0@@1|) (TSeq Tclass._System.nat))))
 :qid |unknown.0:0|
 :skolemid |2632|
 :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@170 |seqs#0@@1|))
))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@171 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@171 |seqs#0@@2|) true))
 :qid |unknown.0:0|
 :skolemid |2633|
 :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@171 |seqs#0@@2|))
)))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@172 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@172) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@172 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)))))))))))
 :qid |unknown.0:0|
 :skolemid |2634|
 :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@172) |seqs#0@@3|))
))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@173 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@173) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@173) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))))))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2635|
 :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@173) (Lit |seqs#0@@4|)))
))))
(assert (forall (($ly@@174 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@174) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@174) |shape#0|) (Sequences.__default.FlattenLength $ly@@174 |shape#0|)))
 :qid |Sequencesidfy.609:22|
 :skolemid |2636|
 :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@174) |shape#0|))
)))
(assert (forall (($ly@@175 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@175) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@175 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|)))
 :qid |Sequencesidfy.609:22|
 :skolemid |2637|
 :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@175) |shape#0@@0|))
)))
(assert  (=> true (forall (($ly@@176 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@176) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@176 |shape#0@@1|) (LitInt 0))) (INTERNAL_le_boogie 0 (Sequences.__default.FlattenLength $ly@@176 |shape#0@@1|))))
 :qid |Sequencesidfy.609:22|
 :skolemid |2638|
 :pattern ( (Sequences.__default.FlattenLength $ly@@176 |shape#0@@1|))
))))
(assert (forall (($ly@@177 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@177) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@177 |shape#0@@2|) true))
 :qid |Sequencesidfy.609:22|
 :skolemid |2639|
 :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@177 |shape#0@@2|))
)))
(assert  (=> true (forall (($ly@@178 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@178) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@178) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (INTERNAL_add_boogie (Sequences.__default.FlattenLength $ly@@178 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|))))))))
 :qid |Sequencesidfy.609:22|
 :skolemid |2640|
 :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@178) |shape#0@@3|))
))))
(assert  (=> true (forall (($ly@@179 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@179) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@179) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (INTERNAL_add_boogie (Sequences.__default.FlattenLength ($LS $ly@@179) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|)))))))))
 :qid |Sequencesidfy.609:22|
 :weight 3
 :skolemid |2641|
 :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@179) (Lit |shape#0@@4|)))
))))
(assert (forall ((arg0@@515 T@U) (arg1@@237 T@U) (arg2@@131 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@515 arg1@@237 arg2@@131)) (SeqType BoxType))
 :qid |funType:Sequences.__default.Flatten|
 :pattern ( (Sequences.__default.Flatten arg0@@515 arg1@@237 arg2@@131))
)))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@180 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@180) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@180 |seqs#0@@5|)))
 :qid |unknown.0:0|
 :skolemid |2642|
 :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@180) |seqs#0@@5|))
)))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@181 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@181 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|)))
 :qid |unknown.0:0|
 :skolemid |2643|
 :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@181) |seqs#0@@6|))
)))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@182 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@182 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@182 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@182 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1))))
 :qid |unknown.0:0|
 :skolemid |2644|
 :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@182 |seqs#0@@7|))
))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@183 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@183 |seqs#0@@8|) true))
 :qid |unknown.0:0|
 :skolemid |2645|
 :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@183 |seqs#0@@8|))
)))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@184 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@184) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@184 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))))))))
 :qid |unknown.0:0|
 :skolemid |2646|
 :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@184) |seqs#0@@9|))
))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@185 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@185) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@185) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2647|
 :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@185) (Lit |seqs#0@@10|)))
))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@104| Int) (|j#0@@3| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@104| |j#0@@3|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@104|)) (INTERNAL_le_boogie 0 |j#0@@3|)) (and (INTERNAL_lt_boogie |i#0@@104| (|Seq#Length| |shape#0@@5|)) (INTERNAL_lt_boogie |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@104|)))))))) (INTERNAL_le_boogie 0 (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@104| |j#0@@3|)))
 :qid |Sequencesidfy.678:25|
 :skolemid |2648|
 :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@104| |j#0@@3|))
))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@105| Int) (|j#0@@4| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@105|)) (INTERNAL_le_boogie 0 |j#0@@4|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@105| |j#0@@4|)  (and (INTERNAL_lt_boogie |i#0@@105| (|Seq#Length| |shape#0@@6|)) (INTERNAL_lt_boogie |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@105|))))))))
 :qid |Sequencesidfy.678:25|
 :skolemid |2649|
 :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@105| |j#0@@4|))
)))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@106| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@106| |j#0@@5|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@106|)) (INTERNAL_le_boogie 0 |j#0@@5|)) (and (INTERNAL_lt_boogie |i#0@@106| (|Seq#Length| |shape#0@@7|)) (INTERNAL_lt_boogie |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@106|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@106|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@106| |j#0@@5|) (INTERNAL_add_boogie (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@106|)) |j#0@@5|))))
 :qid |Sequencesidfy.678:25|
 :skolemid |2650|
 :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@106| |j#0@@5|))
))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@107| Int) (|j#0@@6| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@107|) (LitInt |j#0@@6|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@107|)) (INTERNAL_le_boogie 0 |j#0@@6|)) (and (INTERNAL_lt_boogie |i#0@@107| (|Seq#Length| (Lit |shape#0@@8|))) (INTERNAL_lt_boogie |j#0@@6| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@107|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@107|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@107|) (LitInt |j#0@@6|)) (INTERNAL_add_boogie (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@107|)))) |j#0@@6|))))
 :qid |Sequencesidfy.678:25|
 :weight 3
 :skolemid |2651|
 :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@107|) (LitInt |j#0@@6|)))
))))
(assert (forall ((arg0@@516 T@U) (arg1@@238 T@U) (arg2@@132 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@516 arg1@@238 arg2@@132)) DatatypeTypeType)
 :qid |funType:Sequences.__default.UnflattenIndex|
 :pattern ( (Sequences.__default.UnflattenIndex arg0@@516 arg1@@238 arg2@@132))
)))
(assert (forall (($ly@@186 T@U) (|shape#0@@9| T@U) (|i#0@@108| Int) ) (!  (=> (and (= (type $ly@@186) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@186) |shape#0@@9| |i#0@@108|) (Sequences.__default.UnflattenIndex $ly@@186 |shape#0@@9| |i#0@@108|)))
 :qid |Sequencesidfy.685:12|
 :skolemid |2652|
 :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@186) |shape#0@@9| |i#0@@108|))
)))
(assert (forall (($ly@@187 T@U) (|shape#0@@10| T@U) (|i#0@@109| Int) ) (!  (=> (and (= (type $ly@@187) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@187 |shape#0@@10| |i#0@@109|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@109|)))
 :qid |Sequencesidfy.685:12|
 :skolemid |2653|
 :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@187) |shape#0@@10| |i#0@@109|))
)))
(assert  (=> true (forall (($ly@@188 T@U) (|shape#0@@11| T@U) (|i#0@@110| Int) ) (!  (=> (and (and (= (type $ly@@188) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@110|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@110|)) (INTERNAL_lt_boogie |i#0@@110| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@188 |shape#0@@11| |i#0@@110|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat)))
 :qid |Sequencesidfy.685:12|
 :skolemid |2654|
 :pattern ( (Sequences.__default.UnflattenIndex $ly@@188 |shape#0@@11| |i#0@@110|))
))))
(assert (forall (($ly@@189 T@U) (|shape#0@@12| T@U) (|i#0@@111| Int) ) (!  (=> (and (and (= (type $ly@@189) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@111|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@189 |shape#0@@12| |i#0@@111|) (INTERNAL_lt_boogie |i#0@@111| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))))
 :qid |Sequencesidfy.685:12|
 :skolemid |2655|
 :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@189 |shape#0@@12| |i#0@@111|))
)))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@190 T@U) (|shape#0@@13| T@U) (|i#0@@112| Int) ) (!  (=> (and (and (= (type $ly@@190) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@112|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@112|)) (INTERNAL_lt_boogie |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (INTERNAL_lt_boogie |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@112|)))) (=> (not (INTERNAL_lt_boogie |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@190) |shape#0@@13| |i#0@@112|) (ite (INTERNAL_lt_boogie |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@190 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@112|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (INTERNAL_sub_boogie (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (INTERNAL_sub_boogie |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)))))))))))
 :qid |Sequencesidfy.685:12|
 :skolemid |2656|
 :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@190) |shape#0@@13| |i#0@@112|))
))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@191 T@U) (|shape#0@@14| T@U) (|i#0@@113| Int) ) (!  (=> (and (and (= (type $ly@@191) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@113|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (INTERNAL_le_boogie 0 |i#0@@113|)) (INTERNAL_lt_boogie |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (INTERNAL_lt_boogie |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@113|))))) (=> (not (INTERNAL_lt_boogie |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@191) (Lit |shape#0@@14|) (LitInt |i#0@@113|)) (ite (INTERNAL_lt_boogie |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@191) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@113|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (INTERNAL_sub_boogie (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (INTERNAL_sub_boogie |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))))))))))))
 :qid |Sequencesidfy.685:12|
 :weight 3
 :skolemid |2657|
 :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@191) (Lit |shape#0@@14|) (LitInt |i#0@@113|)))
))))
(assert (forall (($ly@@192 T@U) (|s#0@@97| T@U) ) (!  (=> (and (= (type $ly@@192) LayerTypeType) (= (type |s#0@@97|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@192) |s#0@@97|) (Sequences.__default.seqMax $ly@@192 |s#0@@97|)))
 :qid |Sequencesidfy.795:22|
 :skolemid |2658|
 :pattern ( (Sequences.__default.seqMax ($LS $ly@@192) |s#0@@97|))
)))
(assert (forall (($ly@@193 T@U) (|s#0@@98| T@U) ) (!  (=> (and (= (type $ly@@193) LayerTypeType) (= (type |s#0@@98|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@193 |s#0@@98|) (Sequences.__default.seqMax $LZ |s#0@@98|)))
 :qid |Sequencesidfy.795:22|
 :skolemid |2659|
 :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@193) |s#0@@98|))
)))
(assert  (=> true (forall (($ly@@194 T@U) (|s#0@@99| T@U) ) (!  (=> (and (and (= (type $ly@@194) LayerTypeType) (= (type |s#0@@99|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@99|) (and ($Is |s#0@@99| (TSeq TInt)) (INTERNAL_lt_boogie 0 (|Seq#Length| |s#0@@99|))))) (and (forall ((|k#0@@19| T@U) ) (!  (=> (and (and (= (type |k#0@@19|) intType) true) (|Seq#Contains| |s#0@@99| ($Box |k#0@@19|))) (INTERNAL_ge_boogie (Sequences.__default.seqMax $ly@@194 |s#0@@99|) (U_2_int |k#0@@19|)))
 :qid |Sequencesidfy.797:20|
 :skolemid |2660|
 :pattern ( (|Seq#Contains| |s#0@@99| ($Box |k#0@@19|)))
)) (|Seq#Contains| |s#0@@99| ($Box (int_2_U (Sequences.__default.seqMax $ly@@194 |s#0@@99|))))))
 :qid |Sequencesidfy.795:22|
 :skolemid |2661|
 :pattern ( (Sequences.__default.seqMax $ly@@194 |s#0@@99|))
))))
(assert (forall (($ly@@195 T@U) (|s#0@@100| T@U) ) (!  (=> (and (and (= (type $ly@@195) LayerTypeType) (= (type |s#0@@100|) (SeqType BoxType))) ($Is |s#0@@100| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@195 |s#0@@100|) (INTERNAL_lt_boogie 0 (|Seq#Length| |s#0@@100|))))
 :qid |Sequencesidfy.795:22|
 :skolemid |2662|
 :pattern ( (|Sequences.__default.seqMax#requires| $ly@@195 |s#0@@100|))
)))
(assert  (=> true (forall (($ly@@196 T@U) (|s#0@@101| T@U) ) (!  (=> (and (and (= (type $ly@@196) LayerTypeType) (= (type |s#0@@101|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@101|) (and ($Is |s#0@@101| (TSeq TInt)) (INTERNAL_lt_boogie 0 (|Seq#Length| |s#0@@101|))))) (and (=> (not (= (|Seq#Length| |s#0@@101|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@101|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@101|))) (|Sequences.__default.Last#canCall| TInt |s#0@@101|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@196 (Sequences.__default.DropLast TInt |s#0@@101|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@101|)))))) (= (Sequences.__default.seqMax ($LS $ly@@196) |s#0@@101|) (ite (= (|Seq#Length| |s#0@@101|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@101| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@196 (Sequences.__default.DropLast TInt |s#0@@101|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@101|))))))))
 :qid |Sequencesidfy.795:22|
 :skolemid |2663|
 :pattern ( (Sequences.__default.seqMax ($LS $ly@@196) |s#0@@101|))
))))
(assert  (=> true (forall (($ly@@197 T@U) (|s#0@@102| T@U) ) (!  (=> (and (and (= (type $ly@@197) LayerTypeType) (= (type |s#0@@102|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@102|)) (and ($Is |s#0@@102| (TSeq TInt)) (INTERNAL_lt_boogie 0 (|Seq#Length| (Lit |s#0@@102|)))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@102|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@102|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@102|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@102|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@197) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@102|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@102|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@197) (Lit |s#0@@102|)) (ite (= (|Seq#Length| (Lit |s#0@@102|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@102|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@197) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@102|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@102|))))))))))
 :qid |Sequencesidfy.795:22|
 :weight 3
 :skolemid |2664|
 :pattern ( (Sequences.__default.seqMax ($LS $ly@@197) (Lit |s#0@@102|)))
))))
(assert (forall ((arg0@@517 T@U) (arg1@@239 T@U) (arg2@@133 Int) (arg3@@75 T@U) ) (! (= (type (Sequences.__default.fill arg0@@517 arg1@@239 arg2@@133 arg3@@75)) (SeqType BoxType))
 :qid |funType:Sequences.__default.fill|
 :pattern ( (Sequences.__default.fill arg0@@517 arg1@@239 arg2@@133 arg3@@75))
)))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@198 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@198) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@198 |n#0@@5| |t#0@@6|)))
 :qid |unknown.0:0|
 :skolemid |2665|
 :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@198) |n#0@@5| |t#0@@6|))
)))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@199 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@199 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|)))
 :qid |unknown.0:0|
 :skolemid |2666|
 :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@199) |n#0@@6| |t#0@@7|))
)))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@200 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (INTERNAL_ge_boogie |n#0@@7| 0)))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@200 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@114| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@114|) (INTERNAL_lt_boogie |i#0@@114| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@200 |n#0@@7| |t#0@@8|) |i#0@@114|) |t#0@@8|))
 :qid |Sequencesidfy.884:18|
 :skolemid |2667|
 :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@200 |n#0@@7| |t#0@@8|) |i#0@@114|))
))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@200 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2668|
 :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@200 |n#0@@7| |t#0@@8|))
))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@201 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@201 |n#0@@8| |t#0@@9|) (INTERNAL_ge_boogie |n#0@@8| 0)))
 :qid |unknown.0:0|
 :skolemid |2669|
 :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@201 |n#0@@8| |t#0@@9|))
)))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@202 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (INTERNAL_ge_boogie |n#0@@9| 0)))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (INTERNAL_sub_boogie |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@202) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@202 (INTERNAL_sub_boogie |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|))))))
 :qid |unknown.0:0|
 :skolemid |2670|
 :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@202) |n#0@@9| |t#0@@10|))
))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@203 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (INTERNAL_ge_boogie |n#0@@10| 0)))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (INTERNAL_sub_boogie |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@203) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@203) (LitInt (INTERNAL_sub_boogie |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2671|
 :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@203) (LitInt |n#0@@10|) |t#0@@11|))
))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@204 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (INTERNAL_ge_boogie |n#0@@11| 0)))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (INTERNAL_sub_boogie |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@204) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@204) (LitInt (INTERNAL_sub_boogie |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2672|
 :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@204) (LitInt |n#0@@11|) (Lit |t#0@@12|)))
))))
(assert  (=> true (forall ((Sequences._default.SeqHasUniqueElems$T T@U) (|s#0@@103| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqHasUniqueElems$T) TyType) (= (type |s#0@@103|) (SeqType BoxType))) (or (|Sequences.__default.SeqHasUniqueElems#canCall| Sequences._default.SeqHasUniqueElems$T |s#0@@103|) ($Is |s#0@@103| (TSeq Sequences._default.SeqHasUniqueElems$T)))) true)
 :qid |unknown.0:0|
 :skolemid |2673|
 :pattern ( (Sequences.__default.SeqHasUniqueElems Sequences._default.SeqHasUniqueElems$T |s#0@@103|))
))))
(assert (forall ((Sequences._default.SeqHasUniqueElems$T@@0 T@U) (|s#0@@104| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqHasUniqueElems$T@@0) TyType) (= (type |s#0@@104|) (SeqType BoxType))) ($Is |s#0@@104| (TSeq Sequences._default.SeqHasUniqueElems$T@@0))) (= (|Sequences.__default.SeqHasUniqueElems#requires| Sequences._default.SeqHasUniqueElems$T@@0 |s#0@@104|) true))
 :qid |unknown.0:0|
 :skolemid |2674|
 :pattern ( (|Sequences.__default.SeqHasUniqueElems#requires| Sequences._default.SeqHasUniqueElems$T@@0 |s#0@@104|))
)))
(assert  (=> true (forall ((Sequences._default.SeqHasUniqueElems$T@@1 T@U) (|s#0@@105| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqHasUniqueElems$T@@1) TyType) (= (type |s#0@@105|) (SeqType BoxType))) (or (|Sequences.__default.SeqHasUniqueElems#canCall| Sequences._default.SeqHasUniqueElems$T@@1 |s#0@@105|) ($Is |s#0@@105| (TSeq Sequences._default.SeqHasUniqueElems$T@@1)))) (= (Sequences.__default.SeqHasUniqueElems Sequences._default.SeqHasUniqueElems$T@@1 |s#0@@105|) (forall ((|i#0@@115| Int) (|j#0@@7| Int) ) (!  (=> (and (and (and (INTERNAL_le_boogie 0 |i#0@@115|) (INTERNAL_lt_boogie |i#0@@115| (|Seq#Length| |s#0@@105|))) (and (INTERNAL_le_boogie 0 |j#0@@7|) (INTERNAL_lt_boogie |j#0@@7| (|Seq#Length| |s#0@@105|)))) (= (|Seq#Index| |s#0@@105| |i#0@@115|) (|Seq#Index| |s#0@@105| |j#0@@7|))) (= |i#0@@115| |j#0@@7|))
 :qid |Sequencesidfy.896:12|
 :skolemid |2675|
 :pattern ( (|Seq#Index| |s#0@@105| |j#0@@7|) (|Seq#Index| |s#0@@105| |i#0@@115|))
))))
 :qid |unknown.0:0|
 :skolemid |2676|
 :pattern ( (Sequences.__default.SeqHasUniqueElems Sequences._default.SeqHasUniqueElems$T@@1 |s#0@@105|))
))))
(assert  (=> true (forall ((Sequences._default.SeqHasUniqueElems$T@@2 T@U) (|s#0@@106| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqHasUniqueElems$T@@2) TyType) (= (type |s#0@@106|) (SeqType BoxType))) (or (|Sequences.__default.SeqHasUniqueElems#canCall| Sequences._default.SeqHasUniqueElems$T@@2 (Lit |s#0@@106|)) ($Is |s#0@@106| (TSeq Sequences._default.SeqHasUniqueElems$T@@2)))) (= (Sequences.__default.SeqHasUniqueElems Sequences._default.SeqHasUniqueElems$T@@2 (Lit |s#0@@106|)) (forall ((|i#1@@19| Int) (|j#1@@1| Int) ) (!  (=> (and (and (and (INTERNAL_le_boogie 0 |i#1@@19|) (INTERNAL_lt_boogie |i#1@@19| (|Seq#Length| (Lit |s#0@@106|)))) (and (INTERNAL_le_boogie 0 |j#1@@1|) (INTERNAL_lt_boogie |j#1@@1| (|Seq#Length| (Lit |s#0@@106|))))) (= (|Seq#Index| (Lit |s#0@@106|) |i#1@@19|) (|Seq#Index| (Lit |s#0@@106|) |j#1@@1|))) (= |i#1@@19| |j#1@@1|))
 :qid |Sequencesidfy.896:12|
 :skolemid |2677|
 :pattern ( (|Seq#Index| |s#0@@106| |j#1@@1|) (|Seq#Index| |s#0@@106| |i#1@@19|))
))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2678|
 :pattern ( (Sequences.__default.SeqHasUniqueElems Sequences._default.SeqHasUniqueElems$T@@2 (Lit |s#0@@106|)))
))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (= (TagFamily Tclass.Maps.__default) tytagFamily$_default))
(assert (forall ((bx@@160 T@U) ) (!  (=> (and (= (type bx@@160) BoxType) ($IsBox bx@@160 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@160)) bx@@160) ($Is ($Unbox refType bx@@160) Tclass.Maps.__default)))
 :qid |unknown.0:0|
 :skolemid |2679|
 :pattern ( ($IsBox bx@@160 Tclass.Maps.__default))
)))
(assert (forall (($o@@49 T@U) ) (!  (=> (= (type $o@@49) refType) (= ($Is $o@@49 Tclass.Maps.__default)  (or (= $o@@49 null) (= (dtype $o@@49) Tclass.Maps.__default))))
 :qid |unknown.0:0|
 :skolemid |2680|
 :pattern ( ($Is $o@@49 Tclass.Maps.__default))
)))
(assert (forall (($o@@50 T@U) ($h@@115 T@U) ) (!  (=> (and (= (type $o@@50) refType) (= (type $h@@115) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@50 Tclass.Maps.__default $h@@115)  (or (= $o@@50 null) (U_2_bool (MapType1Select (MapType0Select $h@@115 $o@@50) alloc)))))
 :qid |unknown.0:0|
 :skolemid |2681|
 :pattern ( ($IsAlloc $o@@50 Tclass.Maps.__default $h@@115))
)))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0@@20| T@U) (|k#0@@20| T@U) (|v#0@@113| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0@@20|) (IMapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (= (type |v#0@@113|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@20| |k#0@@20| |v#0@@113|) (and (and ($Is |m#0@@20| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@20| Maps._default.IMapsTo$K)) ($IsBox |v#0@@113| Maps._default.IMapsTo$V)))) true)
 :qid |unknown.0:0|
 :skolemid |2682|
 :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@20| |k#0@@20| |v#0@@113|))
))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@21| T@U) (|k#0@@21| T@U) (|v#0@@114| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@21|) (IMapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (= (type |v#0@@114|) BoxType)) (and (and ($Is |m#0@@21| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@21| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@114| Maps._default.IMapsTo$V@@0))) (= (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@21| |k#0@@21| |v#0@@114|) true))
 :qid |unknown.0:0|
 :skolemid |2683|
 :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@21| |k#0@@21| |v#0@@114|))
)))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@22| T@U) (|k#0@@22| T@U) (|v#0@@115| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@22|) (IMapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (= (type |v#0@@115|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@22| |k#0@@22| |v#0@@115|) (and (and ($Is |m#0@@22| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@22| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@115| Maps._default.IMapsTo$V@@1)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@22| |k#0@@22| |v#0@@115|)  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@22|)) (= (MapType0Select (|IMap#Elements| |m#0@@22|) |k#0@@22|) |v#0@@115|))))
 :qid |unknown.0:0|
 :skolemid |2684|
 :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@22| |k#0@@22| |v#0@@115|))
))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@23| T@U) (|k#0@@23| T@U) (|v#0@@116| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@23|) (IMapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (= (type |v#0@@116|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@23|) (Lit |k#0@@23|) (Lit |v#0@@116|)) (and (and ($Is |m#0@@23| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@23| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@116| Maps._default.IMapsTo$V@@2)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@23|) (Lit |k#0@@23|) (Lit |v#0@@116|))  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@23|) |k#0@@23|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@23|)) (Lit |k#0@@23|)) (Lit |v#0@@116|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2685|
 :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@23|) (Lit |k#0@@23|) (Lit |v#0@@116|)))
))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@24| T@U) (|k#0@@24| T@U) (|v#0@@117| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (= (type |v#0@@117|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@24| |k#0@@24| |v#0@@117|) (and (and ($Is |m#0@@24| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@24| Maps._default.MapsTo$K)) ($IsBox |v#0@@117| Maps._default.MapsTo$V)))) true)
 :qid |unknown.0:0|
 :skolemid |2686|
 :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@24| |k#0@@24| |v#0@@117|))
))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@25| T@U) (|k#0@@25| T@U) (|v#0@@118| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (= (type |v#0@@118|) BoxType)) (and (and ($Is |m#0@@25| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@25| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@118| Maps._default.MapsTo$V@@0))) (= (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@25| |k#0@@25| |v#0@@118|) true))
 :qid |unknown.0:0|
 :skolemid |2687|
 :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@25| |k#0@@25| |v#0@@118|))
)))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@26| T@U) (|k#0@@26| T@U) (|v#0@@119| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (= (type |v#0@@119|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@26| |k#0@@26| |v#0@@119|) (and (and ($Is |m#0@@26| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@26| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@119| Maps._default.MapsTo$V@@1)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@26| |k#0@@26| |v#0@@119|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@26|)) (= (MapType0Select (|Map#Elements| |m#0@@26|) |k#0@@26|) |v#0@@119|))))
 :qid |unknown.0:0|
 :skolemid |2688|
 :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@26| |k#0@@26| |v#0@@119|))
))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@27| T@U) (|k#0@@27| T@U) (|v#0@@120| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (= (type |v#0@@120|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@27|) |k#0@@27| |v#0@@120|) (and (and ($Is |m#0@@27| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@27| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@120| Maps._default.MapsTo$V@@2)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@27|) |k#0@@27| |v#0@@120|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@27|) |k#0@@27|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@27|)) |k#0@@27|) |v#0@@120|))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2689|
 :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@27|) |k#0@@27| |v#0@@120|))
))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@28| T@U) (|k#0@@28| T@U) (|v#0@@121| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (= (type |v#0@@121|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@28|) (Lit |k#0@@28|) (Lit |v#0@@121|)) (and (and ($Is |m#0@@28| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@28| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@121| Maps._default.MapsTo$V@@3)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@28|) (Lit |k#0@@28|) (Lit |v#0@@121|))  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@28|) |k#0@@28|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@28|)) (Lit |k#0@@28|)) (Lit |v#0@@121|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2690|
 :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@28|) (Lit |k#0@@28|) (Lit |v#0@@121|)))
))))
(assert  (=> true (forall ((Maps._default.IMapInjective$K T@U) (Maps._default.IMapInjective$V T@U) (|m#0@@29| T@U) ) (!  (=> (and (and (and (= (type Maps._default.IMapInjective$K) TyType) (= (type Maps._default.IMapInjective$V) TyType)) (= (type |m#0@@29|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapInjective#canCall| Maps._default.IMapInjective$K Maps._default.IMapInjective$V |m#0@@29|) ($Is |m#0@@29| (TIMap Maps._default.IMapInjective$K Maps._default.IMapInjective$V)))) true)
 :qid |unknown.0:0|
 :skolemid |2691|
 :pattern ( (Maps.__default.IMapInjective Maps._default.IMapInjective$K Maps._default.IMapInjective$V |m#0@@29|))
))))
(assert (forall ((Maps._default.IMapInjective$K@@0 T@U) (Maps._default.IMapInjective$V@@0 T@U) (|m#0@@30| T@U) ) (!  (=> (and (and (and (= (type Maps._default.IMapInjective$K@@0) TyType) (= (type Maps._default.IMapInjective$V@@0) TyType)) (= (type |m#0@@30|) (IMapType BoxType BoxType))) ($Is |m#0@@30| (TIMap Maps._default.IMapInjective$K@@0 Maps._default.IMapInjective$V@@0))) (= (|Maps.__default.IMapInjective#requires| Maps._default.IMapInjective$K@@0 Maps._default.IMapInjective$V@@0 |m#0@@30|) true))
 :qid |unknown.0:0|
 :skolemid |2692|
 :pattern ( (|Maps.__default.IMapInjective#requires| Maps._default.IMapInjective$K@@0 Maps._default.IMapInjective$V@@0 |m#0@@30|))
)))
(assert  (=> true (forall ((Maps._default.IMapInjective$K@@1 T@U) (Maps._default.IMapInjective$V@@1 T@U) (|m#0@@31| T@U) ) (!  (=> (and (and (and (= (type Maps._default.IMapInjective$K@@1) TyType) (= (type Maps._default.IMapInjective$V@@1) TyType)) (= (type |m#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapInjective#canCall| Maps._default.IMapInjective$K@@1 Maps._default.IMapInjective$V@@1 |m#0@@31|) ($Is |m#0@@31| (TIMap Maps._default.IMapInjective$K@@1 Maps._default.IMapInjective$V@@1)))) (= (Maps.__default.IMapInjective Maps._default.IMapInjective$K@@1 Maps._default.IMapInjective$V@@1 |m#0@@31|)  (and true (forall ((|k1#0| T@U) (|k2#0| T@U) ) (!  (=> (and (= (type |k1#0|) BoxType) (= (type |k2#0|) BoxType)) (=> (and (and ($IsBox |k1#0| Maps._default.IMapInjective$K@@1) ($IsBox |k2#0| Maps._default.IMapInjective$K@@1)) (and (and (not (= |k1#0| |k2#0|)) (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@31|) |k1#0|))) (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@31|) |k2#0|)))) (not (= (MapType0Select (|IMap#Elements| |m#0@@31|) |k1#0|) (MapType0Select (|IMap#Elements| |m#0@@31|) |k2#0|)))))
 :qid |Mapsidfy.22:16|
 :skolemid |2693|
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@31|) |k2#0|) (MapType0Select (|IMap#Elements| |m#0@@31|) |k1#0|))
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@31|) |k2#0|) (MapType0Select (|IMap#Domain| |m#0@@31|) |k1#0|))
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@31|) |k1#0|) (MapType0Select (|IMap#Domain| |m#0@@31|) |k2#0|))
 :pattern ( (MapType0Select (|IMap#Domain| |m#0@@31|) |k2#0|) (MapType0Select (|IMap#Domain| |m#0@@31|) |k1#0|))
)))))
 :qid |unknown.0:0|
 :skolemid |2694|
 :pattern ( (Maps.__default.IMapInjective Maps._default.IMapInjective$K@@1 Maps._default.IMapInjective$V@@1 |m#0@@31|))
))))
(assert  (=> true (forall ((Maps._default.IMapInjective$K@@2 T@U) (Maps._default.IMapInjective$V@@2 T@U) (|m#0@@32| T@U) ) (!  (=> (and (and (and (= (type Maps._default.IMapInjective$K@@2) TyType) (= (type Maps._default.IMapInjective$V@@2) TyType)) (= (type |m#0@@32|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapInjective#canCall| Maps._default.IMapInjective$K@@2 Maps._default.IMapInjective$V@@2 (Lit |m#0@@32|)) ($Is |m#0@@32| (TIMap Maps._default.IMapInjective$K@@2 Maps._default.IMapInjective$V@@2)))) (= (Maps.__default.IMapInjective Maps._default.IMapInjective$K@@2 Maps._default.IMapInjective$V@@2 (Lit |m#0@@32|))  (and true (forall ((|k1#1| T@U) (|k2#1| T@U) ) (!  (=> (and (= (type |k1#1|) BoxType) (= (type |k2#1|) BoxType)) (=> (and (and ($IsBox |k1#1| Maps._default.IMapInjective$K@@2) ($IsBox |k2#1| Maps._default.IMapInjective$K@@2)) (and (and (not (= |k1#1| |k2#1|)) (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@32|) |k1#1|))) (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@32|) |k2#1|)))) (not (= (MapType0Select (|IMap#Elements| (Lit |m#0@@32|)) |k1#1|) (MapType0Select (|IMap#Elements| (Lit |m#0@@32|)) |k2#1|)))))
 :qid |Mapsidfy.22:16|
 :skolemid |2695|
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@32|) |k2#1|) (MapType0Select (|IMap#Elements| |m#0@@32|) |k1#1|))
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@32|) |k2#1|) (MapType0Select (|IMap#Domain| |m#0@@32|) |k1#1|))
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@32|) |k1#1|) (MapType0Select (|IMap#Domain| |m#0@@32|) |k2#1|))
 :pattern ( (MapType0Select (|IMap#Domain| |m#0@@32|) |k2#1|) (MapType0Select (|IMap#Domain| |m#0@@32|) |k1#1|))
)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2696|
 :pattern ( (Maps.__default.IMapInjective Maps._default.IMapInjective$K@@2 Maps._default.IMapInjective$V@@2 (Lit |m#0@@32|)))
))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@33| T@U) (|m'#0@@0| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@33| |m'#0@@0| |k#0@@29|) (and (and ($Is |m#0@@33| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@29| Maps._default.MapsAgreeOnKey$K)))) true)
 :qid |unknown.0:0|
 :skolemid |2697|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@33| |m'#0@@0| |k#0@@29|))
))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@34| T@U) (|m'#0@@1| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (and (and ($Is |m#0@@34| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@30| Maps._default.MapsAgreeOnKey$K@@0))) (= (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@34| |m'#0@@1| |k#0@@30|) true))
 :qid |unknown.0:0|
 :skolemid |2698|
 :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@34| |m'#0@@1| |k#0@@30|))
)))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@35| T@U) (|m'#0@@2| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@35| |m'#0@@2| |k#0@@31|) (and (and ($Is |m#0@@35| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@31| Maps._default.MapsAgreeOnKey$K@@1)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@35| |m'#0@@2| |k#0@@31|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@35|) |k#0@@31|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@31|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@35|) |k#0@@31|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@31|))) (= (MapType0Select (|Map#Elements| |m#0@@35|) |k#0@@31|) (MapType0Select (|Map#Elements| |m'#0@@2|) |k#0@@31|))))))
 :qid |unknown.0:0|
 :skolemid |2699|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@35| |m'#0@@2| |k#0@@31|))
))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@36| T@U) (|m'#0@@3| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@36|) (Lit |m'#0@@3|) |k#0@@32|) (and (and ($Is |m#0@@36| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@32| Maps._default.MapsAgreeOnKey$K@@2)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@36|) (Lit |m'#0@@3|) |k#0@@32|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@32|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@32|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@32|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@32|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@36|)) |k#0@@32|) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) |k#0@@32|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2700|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@36|) (Lit |m'#0@@3|) |k#0@@32|))
))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@37| T@U) (|m'#0@@4| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |m'#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@37|) (Lit |m'#0@@4|) (Lit |k#0@@33|)) (and (and ($Is |m#0@@37| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@4| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@33| Maps._default.MapsAgreeOnKey$K@@3)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@37|) (Lit |m'#0@@4|) (Lit |k#0@@33|))  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@37|) |k#0@@33|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@33|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@37|) |k#0@@33|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@33|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@37|)) (Lit |k#0@@33|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@4|)) (Lit |k#0@@33|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2701|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@37|) (Lit |m'#0@@4|) (Lit |k#0@@33|)))
))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@38| T@U) (|m'#0@@5| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@38|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@38| |m'#0@@5| |k#0@@34|) (and (and ($Is |m#0@@38| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@34| Maps._default.IMapsAgreeOnKey$K)))) true)
 :qid |unknown.0:0|
 :skolemid |2702|
 :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@38| |m'#0@@5| |k#0@@34|))
))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@39| T@U) (|m'#0@@6| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@39|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (and (and ($Is |m#0@@39| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@35| Maps._default.IMapsAgreeOnKey$K@@0))) (= (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@39| |m'#0@@6| |k#0@@35|) true))
 :qid |unknown.0:0|
 :skolemid |2703|
 :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@39| |m'#0@@6| |k#0@@35|))
)))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@40| T@U) (|m'#0@@7| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@40|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@40| |m'#0@@7| |k#0@@36|) (and (and ($Is |m#0@@40| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@36| Maps._default.IMapsAgreeOnKey$K@@1)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@40| |m'#0@@7| |k#0@@36|)  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@40|) |k#0@@36|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@36|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@40|) |k#0@@36|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@36|))) (= (MapType0Select (|IMap#Elements| |m#0@@40|) |k#0@@36|) (MapType0Select (|IMap#Elements| |m'#0@@7|) |k#0@@36|))))))
 :qid |unknown.0:0|
 :skolemid |2704|
 :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@40| |m'#0@@7| |k#0@@36|))
))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@41| T@U) (|m'#0@@8| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@41|) (IMapType BoxType BoxType))) (= (type |m'#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@41|) (Lit |m'#0@@8|) (Lit |k#0@@37|)) (and (and ($Is |m#0@@41| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@8| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@37| Maps._default.IMapsAgreeOnKey$K@@2)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@41|) (Lit |m'#0@@8|) (Lit |k#0@@37|))  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@41|) |k#0@@37|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@37|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@41|) |k#0@@37|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@37|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@41|)) (Lit |k#0@@37|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@8|)) (Lit |k#0@@37|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2705|
 :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@41|) (Lit |m'#0@@8|) (Lit |k#0@@37|)))
))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true)
 :qid |unknown.0:0|
 :skolemid |2706|
 :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|))
))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (= (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |2707|
 :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|))
)))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@8| T@U) ) (!  (=> (and (and (= (type |key#0@@8|) BoxType) ($IsBox |key#0@@8| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@8|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@8|))
 :qid |Mapsidfy.35:16|
 :skolemid |2709|
 :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@8|))
 :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@8|))
))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)  (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@9| T@U) ) (!  (=> (and (and (= (type |key#0@@9|) BoxType) ($IsBox |key#0@@9| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@9|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@9|))
 :qid |Mapsidfy.35:16|
 :skolemid |2708|
 :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@9|))
 :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@9|))
))))))
 :qid |unknown.0:0|
 :skolemid |2710|
 :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|))
))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@0| T@U) ) (!  (=> (and (and (= (type |key#1@@0|) BoxType) ($IsBox |key#1@@0| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@0|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@0|))
 :qid |Mapsidfy.35:16|
 :skolemid |2712|
 :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@0|))
 :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@0|))
))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))  (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@1| T@U) ) (!  (=> (and (and (= (type |key#1@@1|) BoxType) ($IsBox |key#1@@1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@1|))
 :qid |Mapsidfy.35:16|
 :skolemid |2711|
 :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@1|))
 :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@1|))
))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2713|
 :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)))
))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true)
 :qid |unknown.0:0|
 :skolemid |2714|
 :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|))
))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (= (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true))
 :qid |unknown.0:0|
 :skolemid |2715|
 :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|))
)))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@10| T@U) ) (!  (=> (and (and (= (type |key#0@@10|) BoxType) ($IsBox |key#0@@10| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@10|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@10|))
 :qid |Mapsidfy.40:16|
 :skolemid |2717|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@10|))
 :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@10|))
))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)  (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@11| T@U) ) (!  (=> (and (and (= (type |key#0@@11|) BoxType) ($IsBox |key#0@@11| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@11|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@11|))
 :qid |Mapsidfy.40:16|
 :skolemid |2716|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@11|))
 :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@11|))
))))))
 :qid |unknown.0:0|
 :skolemid |2718|
 :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|))
))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (and (= (type |key#1@@2|) BoxType) ($IsBox |key#1@@2| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@2|))
 :qid |Mapsidfy.40:16|
 :skolemid |2720|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@2|))
 :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@2|))
))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))  (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@3|))
 :qid |Mapsidfy.40:16|
 :skolemid |2719|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@3|))
 :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@3|))
))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2721|
 :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)))
))))
(assert  (=> true (forall ((Maps._default.MapsAgree$K T@U) (Maps._default.MapsAgree$V T@U) (|ma#0| T@U) (|mb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapsAgree$K) TyType) (= (type Maps._default.MapsAgree$V) TyType)) (= (type |ma#0|) (MapType BoxType BoxType))) (= (type |mb#0|) (MapType BoxType BoxType))) (or (|Maps.__default.MapsAgree#canCall| Maps._default.MapsAgree$K Maps._default.MapsAgree$V |ma#0| |mb#0|) (and ($Is |ma#0| (TMap Maps._default.MapsAgree$K Maps._default.MapsAgree$V)) ($Is |mb#0| (TMap Maps._default.MapsAgree$K Maps._default.MapsAgree$V))))) true)
 :qid |unknown.0:0|
 :skolemid |2722|
 :pattern ( (Maps.__default.MapsAgree Maps._default.MapsAgree$K Maps._default.MapsAgree$V |ma#0| |mb#0|))
))))
(assert (forall ((Maps._default.MapsAgree$K@@0 T@U) (Maps._default.MapsAgree$V@@0 T@U) (|ma#0@@0| T@U) (|mb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapsAgree$K@@0) TyType) (= (type Maps._default.MapsAgree$V@@0) TyType)) (= (type |ma#0@@0|) (MapType BoxType BoxType))) (= (type |mb#0@@0|) (MapType BoxType BoxType))) (and ($Is |ma#0@@0| (TMap Maps._default.MapsAgree$K@@0 Maps._default.MapsAgree$V@@0)) ($Is |mb#0@@0| (TMap Maps._default.MapsAgree$K@@0 Maps._default.MapsAgree$V@@0)))) (= (|Maps.__default.MapsAgree#requires| Maps._default.MapsAgree$K@@0 Maps._default.MapsAgree$V@@0 |ma#0@@0| |mb#0@@0|) true))
 :qid |unknown.0:0|
 :skolemid |2723|
 :pattern ( (|Maps.__default.MapsAgree#requires| Maps._default.MapsAgree$K@@0 Maps._default.MapsAgree$V@@0 |ma#0@@0| |mb#0@@0|))
)))
(assert  (=> true (forall ((Maps._default.MapsAgree$K@@1 T@U) (Maps._default.MapsAgree$V@@1 T@U) (|ma#0@@1| T@U) (|mb#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapsAgree$K@@1) TyType) (= (type Maps._default.MapsAgree$V@@1) TyType)) (= (type |ma#0@@1|) (MapType BoxType BoxType))) (= (type |mb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapsAgree#canCall| Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1 |ma#0@@1| |mb#0@@1|) (and ($Is |ma#0@@1| (TMap Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1)) ($Is |mb#0@@1| (TMap Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|key#0@@12| T@U) ) (!  (=> (and (and (= (type |key#0@@12|) BoxType) ($IsBox |key#0@@12| Maps._default.MapsAgree$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |ma#0@@1|) |key#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |mb#0@@1|) |key#0@@12|)))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1 |ma#0@@1| |mb#0@@1| |key#0@@12|))
 :qid |Mapsidfy.44:16|
 :skolemid |2725|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1 |ma#0@@1| |mb#0@@1| |key#0@@12|))
 :pattern ( (MapType0Select (|Map#Domain| |mb#0@@1|) |key#0@@12|))
 :pattern ( (MapType0Select (|Map#Domain| |ma#0@@1|) |key#0@@12|))
))) (= (Maps.__default.MapsAgree Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1 |ma#0@@1| |mb#0@@1|)  (and true (forall ((|key#0@@13| T@U) ) (!  (=> (= (type |key#0@@13|) BoxType) (=> (and ($IsBox |key#0@@13| Maps._default.MapsAgree$K@@1) (and (U_2_bool (MapType0Select (|Map#Domain| |ma#0@@1|) |key#0@@13|)) (U_2_bool (MapType0Select (|Map#Domain| |mb#0@@1|) |key#0@@13|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1 |ma#0@@1| |mb#0@@1| |key#0@@13|)))
 :qid |Mapsidfy.44:16|
 :skolemid |2724|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1 |ma#0@@1| |mb#0@@1| |key#0@@13|))
 :pattern ( (MapType0Select (|Map#Domain| |mb#0@@1|) |key#0@@13|))
 :pattern ( (MapType0Select (|Map#Domain| |ma#0@@1|) |key#0@@13|))
))))))
 :qid |unknown.0:0|
 :skolemid |2726|
 :pattern ( (Maps.__default.MapsAgree Maps._default.MapsAgree$K@@1 Maps._default.MapsAgree$V@@1 |ma#0@@1| |mb#0@@1|))
))))
(assert  (=> true (forall ((Maps._default.MapsAgree$K@@2 T@U) (Maps._default.MapsAgree$V@@2 T@U) (|ma#0@@2| T@U) (|mb#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapsAgree$K@@2) TyType) (= (type Maps._default.MapsAgree$V@@2) TyType)) (= (type |ma#0@@2|) (MapType BoxType BoxType))) (= (type |mb#0@@2|) (MapType BoxType BoxType))) (or (|Maps.__default.MapsAgree#canCall| Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2 (Lit |ma#0@@2|) (Lit |mb#0@@2|)) (and ($Is |ma#0@@2| (TMap Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2)) ($Is |mb#0@@2| (TMap Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.MapsAgree$K@@2)) (and (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |ma#0@@2|))) |key#1@@4|)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |mb#0@@2|))) |key#1@@4|)))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2 (Lit |ma#0@@2|) (Lit |mb#0@@2|) |key#1@@4|))
 :qid |Mapsidfy.44:16|
 :skolemid |2728|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2 |ma#0@@2| |mb#0@@2| |key#1@@4|))
 :pattern ( (MapType0Select (|Map#Domain| |mb#0@@2|) |key#1@@4|))
 :pattern ( (MapType0Select (|Map#Domain| |ma#0@@2|) |key#1@@4|))
))) (= (Maps.__default.MapsAgree Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2 (Lit |ma#0@@2|) (Lit |mb#0@@2|))  (and true (forall ((|key#1@@5| T@U) ) (!  (=> (= (type |key#1@@5|) BoxType) (=> (and ($IsBox |key#1@@5| Maps._default.MapsAgree$K@@2) (and (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |ma#0@@2|))) |key#1@@5|)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |mb#0@@2|))) |key#1@@5|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2 (Lit |ma#0@@2|) (Lit |mb#0@@2|) |key#1@@5|)))
 :qid |Mapsidfy.44:16|
 :skolemid |2727|
 :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2 |ma#0@@2| |mb#0@@2| |key#1@@5|))
 :pattern ( (MapType0Select (|Map#Domain| |mb#0@@2|) |key#1@@5|))
 :pattern ( (MapType0Select (|Map#Domain| |ma#0@@2|) |key#1@@5|))
))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2729|
 :pattern ( (Maps.__default.MapsAgree Maps._default.MapsAgree$K@@2 Maps._default.MapsAgree$V@@2 (Lit |ma#0@@2|) (Lit |mb#0@@2|)))
))))
(assert (forall ((arg0@@518 T@U) (arg1@@240 T@U) (arg2@@134 T@U) (arg3@@76 T@U) (arg4@@45 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@518 arg1@@240 arg2@@134 arg3@@76 arg4@@45)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapRemove|
 :pattern ( (Maps.__default.MapRemove arg0@@518 arg1@@240 arg2@@134 arg3@@76 arg4@@45))
)))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@205 T@U) (|m#0@@42| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@205) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@205) |m#0@@42| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@205 |m#0@@42| |ks#0|)))
 :qid |unknown.0:0|
 :skolemid |2730|
 :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@205) |m#0@@42| |ks#0|))
)))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@206 T@U) (|m#0@@43| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@206) LayerTypeType)) (= (type |m#0@@43|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@206 |m#0@@43| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@43| |ks#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2731|
 :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@206) |m#0@@43| |ks#0@@0|))
)))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@207 T@U) (|m#0@@44| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@207) LayerTypeType)) (= (type |m#0@@44|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@44| |ks#0@@1|) (and ($Is |m#0@@44| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@38| T@U) ) (!  (=> (and (and (= (type |k#0@@38|) BoxType) ($IsBox |k#0@@38| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@44|) |k#0@@38|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@38|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |k#0@@38|)))
 :qid |Mapsidfy.48:20|
 :skolemid |2732|
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |k#0@@38|))
 :pattern ( (MapType0Select |ks#0@@1| |k#0@@38|))
 :pattern ( (MapType0Select (|Map#Domain| |m#0@@44|) |k#0@@38|))
)) (forall ((|k#1@@1| T@U) ) (!  (=> (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |k#1@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@44|) |k#1@@1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |k#1@@1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1@@1|))))))
 :qid |Mapsidfy.49:20|
 :skolemid |2733|
 :pattern ( (MapType0Select |ks#0@@1| |k#1@@1|))
 :pattern ( (MapType0Select (|Map#Domain| |m#0@@44|) |k#1@@1|))
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |k#1@@1|))
))) (forall ((|j#0@@8| T@U) ) (!  (=> (and (and (= (type |j#0@@8|) BoxType) ($IsBox |j#0@@8| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |j#0@@8|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |j#0@@8|) (MapType0Select (|Map#Elements| |m#0@@44|) |j#0@@8|)))
 :qid |Mapsidfy.50:20|
 :skolemid |2734|
 :pattern ( (MapType0Select (|Map#Elements| |m#0@@44|) |j#0@@8|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |j#0@@8|))
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) |j#0@@8|))
))) (INTERNAL_le_boogie (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@44|)))) (INTERNAL_le_boogie (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|)) (|Map#Card| |m#0@@44|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2735|
 :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@44| |ks#0@@1|))
))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@208 T@U) (|m#0@@45| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@208) LayerTypeType)) (= (type |m#0@@45|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@45| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (= (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@208 |m#0@@45| |ks#0@@2|) true))
 :qid |unknown.0:0|
 :skolemid |2736|
 :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@208 |m#0@@45| |ks#0@@2|))
)))
(assert (forall ((arg0@@519 T@U) (arg1@@241 T@U) (arg2@@135 T@U) ) (! (= (type (|lambda#169| arg0@@519 arg1@@241 arg2@@135)) (MapType0Type BoxType boolType))
 :qid |funType:lambda#169|
 :pattern ( (|lambda#169| arg0@@519 arg1@@241 arg2@@135))
)))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@209 T@U) (|m#0@@46| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@209) LayerTypeType)) (= (type |m#0@@46|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@46| |ks#0@@3|) (and ($Is |m#0@@46| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@209) |m#0@@46| |ks#0@@3|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#169| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@46|) |ks#0@@3|) (|lambda#107| (|Map#Elements| |m#0@@46|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3))))
|m'#0@@9|)))
 :qid |unknown.0:0|
 :skolemid |2737|
 :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@209) |m#0@@46| |ks#0@@3|))
))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@210 T@U) (|m#0@@47| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@210) LayerTypeType)) (= (type |m#0@@47|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@47|) (Lit |ks#0@@4|)) (and ($Is |m#0@@47| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@210) (Lit |m#0@@47|) (Lit |ks#0@@4|)) (let ((|m'#1@@0| (|Map#Glue| (|lambda#169| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@47|) (Lit |ks#0@@4|)) (|lambda#107| (|Map#Elements| (Lit |m#0@@47|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4))))
|m'#1@@0|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2738|
 :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@210) (Lit |m#0@@47|) (Lit |ks#0@@4|)))
))))
(assert (forall ((arg0@@520 T@U) (arg1@@242 T@U) (arg2@@136 T@U) (arg3@@77 T@U) (arg4@@46 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@520 arg1@@242 arg2@@136 arg3@@77 arg4@@46)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapRemoveStrong|
 :pattern ( (Maps.__default.MapRemoveStrong arg0@@520 arg1@@242 arg2@@136 arg3@@77 arg4@@46))
)))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@211 T@U) (|m#0@@48| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@211) LayerTypeType)) (= (type |m#0@@48|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@211) |m#0@@48| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@211 |m#0@@48| |ks#0@@5|)))
 :qid |unknown.0:0|
 :skolemid |2739|
 :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@211) |m#0@@48| |ks#0@@5|))
)))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@212 T@U) (|m#0@@49| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@212) LayerTypeType)) (= (type |m#0@@49|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@212 |m#0@@49| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@49| |ks#0@@6|)))
 :qid |unknown.0:0|
 :skolemid |2740|
 :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@212) |m#0@@49| |ks#0@@6|))
)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@213 T@U) (|m#0@@50| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@213) LayerTypeType)) (= (type |m#0@@50|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@50| |ks#0@@7|) (and ($Is |m#0@@50| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@50|) |ks#0@@7|)) (forall ((|j#0@@9| T@U) ) (!  (=> (and (and (= (type |j#0@@9|) BoxType) ($IsBox |j#0@@9| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|)) |j#0@@9|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|)) |j#0@@9|) (MapType0Select (|Map#Elements| |m#0@@50|) |j#0@@9|)))
 :qid |Mapsidfy.61:20|
 :skolemid |2741|
 :pattern ( (MapType0Select (|Map#Elements| |m#0@@50|) |j#0@@9|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|)) |j#0@@9|))
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|)) |j#0@@9|))
))) (INTERNAL_le_boogie (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@50|)))) (INTERNAL_le_boogie (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|)) (|Map#Card| |m#0@@50|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2742|
 :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@50| |ks#0@@7|))
))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@214 T@U) (|m#0@@51| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@214) LayerTypeType)) (= (type |m#0@@51|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@51| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (= (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@214 |m#0@@51| |ks#0@@8|) true))
 :qid |unknown.0:0|
 :skolemid |2743|
 :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@214 |m#0@@51| |ks#0@@8|))
)))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@215 T@U) (|m#0@@52| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@215) LayerTypeType)) (= (type |m#0@@52|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@52| |ks#0@@9|) (and ($Is |m#0@@52| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@52| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@215) |m#0@@52| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@52| |ks#0@@9|)))))
 :qid |unknown.0:0|
 :skolemid |2744|
 :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@215) |m#0@@52| |ks#0@@9|))
))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@216 T@U) (|m#0@@53| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@216) LayerTypeType)) (= (type |m#0@@53|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@53|) (Lit |ks#0@@10|)) (and ($Is |m#0@@53| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@53|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@216) (Lit |m#0@@53|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@53|) (Lit |ks#0@@10|))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2745|
 :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@216) (Lit |m#0@@53|) (Lit |ks#0@@10|)))
))))
(assert (forall ((arg0@@521 T@U) (arg1@@243 T@U) (arg2@@137 T@U) (arg3@@78 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@521 arg1@@243 arg2@@137 arg3@@78)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapRemove1|
 :pattern ( (Maps.__default.MapRemove1 arg0@@521 arg1@@243 arg2@@137 arg3@@78))
)))
(assert  (=> true (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) (|m#0@@54| T@U) (|k#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type |m#0@@54|) (MapType BoxType BoxType))) (= (type |k#0@@39|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|) (and ($Is |m#0@@54| (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)) ($IsBox |k#0@@39| Maps._default.MapRemove1$K)))) (and (and (and (and (and (and (forall ((|j#0@@10| T@U) ) (!  (=> (and (and (= (type |j#0@@10|) BoxType) ($IsBox |j#0@@10| Maps._default.MapRemove1$K)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@54|) |j#0@@10|)) (not (= |j#0@@10| |k#0@@39|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#0@@10|)))
 :qid |Mapsidfy.70:18|
 :skolemid |2746|
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#0@@10|))
 :pattern ( (MapType0Select (|Map#Domain| |m#0@@54|) |j#0@@10|))
)) (forall ((|j#1@@2| T@U) ) (!  (=> (and (= (type |j#1@@2|) BoxType) ($IsBox |j#1@@2| Maps._default.MapRemove1$K)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#1@@2|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@54|) |j#1@@2|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#1@@2|)) (not (= |j#1@@2| |k#0@@39|)))))
 :qid |Mapsidfy.71:18|
 :skolemid |2747|
 :pattern ( (MapType0Select (|Map#Domain| |m#0@@54|) |j#1@@2|))
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#1@@2|))
))) (forall ((|j#2@@0| T@U) ) (!  (=> (and (and (= (type |j#2@@0|) BoxType) ($IsBox |j#2@@0| Maps._default.MapRemove1$K)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#2@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#2@@0|) (MapType0Select (|Map#Elements| |m#0@@54|) |j#2@@0|)))
 :qid |Mapsidfy.72:18|
 :skolemid |2748|
 :pattern ( (MapType0Select (|Map#Elements| |m#0@@54|) |j#2@@0|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#2@@0|))
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) |j#2@@0|))
))) (INTERNAL_le_boogie (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|))) (|Set#Card| (|Map#Domain| |m#0@@54|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@54|) |k#0@@39|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) (INTERNAL_sub_boogie (|Map#Card| |m#0@@54|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@54|) |k#0@@39|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|)) (|Map#Card| |m#0@@54|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|) (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V))))
 :qid |unknown.0:0|
 :skolemid |2749|
 :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@54| |k#0@@39|))
))))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) (|m#0@@55| T@U) (|k#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |k#0@@40|) BoxType)) (and ($Is |m#0@@55| (TMap Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0)) ($IsBox |k#0@@40| Maps._default.MapRemove1$K@@0))) (= (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@55| |k#0@@40|) true))
 :qid |unknown.0:0|
 :skolemid |2750|
 :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@55| |k#0@@40|))
)))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) (|m#0@@56| T@U) (|k#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |k#0@@41|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@56| |k#0@@41|) (and ($Is |m#0@@56| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@41| Maps._default.MapRemove1$K@@1)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@56| |k#0@@41|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@56| |k#0@@41|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 StartFuel_MapRemove_s._default.MapRemove1 |m#0@@56| |k#0@@41|))))
 :qid |unknown.0:0|
 :skolemid |2751|
 :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@56| |k#0@@41|))
))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) (|m#0@@57| T@U) (|k#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |k#0@@42|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@57|) |k#0@@42|) (and ($Is |m#0@@57| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@42| Maps._default.MapRemove1$K@@2)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@57|) |k#0@@42|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@57|) |k#0@@42|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@57|) |k#0@@42|))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2752|
 :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@57|) |k#0@@42|))
))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) (|m#0@@58| T@U) (|k#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |k#0@@43|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@58|) (Lit |k#0@@43|)) (and ($Is |m#0@@58| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@43| Maps._default.MapRemove1$K@@3)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@58|) (Lit |k#0@@43|)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@58|) (Lit |k#0@@43|)) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@58|) (Lit |k#0@@43|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2753|
 :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@58|) (Lit |k#0@@43|)))
))))
(assert (forall ((arg0@@522 T@U) (arg1@@244 T@U) (arg2@@138 T@U) (arg3@@79 T@U) (arg4@@47 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@522 arg1@@244 arg2@@138 arg3@@79 arg4@@47)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapRemove1Strong|
 :pattern ( (Maps.__default.MapRemove1Strong arg0@@522 arg1@@244 arg2@@138 arg3@@79 arg4@@47))
)))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@217 T@U) (|m#0@@59| T@U) (|k#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@217) LayerTypeType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |k#0@@44|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@217) |m#0@@59| |k#0@@44|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@217 |m#0@@59| |k#0@@44|)))
 :qid |unknown.0:0|
 :skolemid |2754|
 :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@217) |m#0@@59| |k#0@@44|))
)))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@218 T@U) (|m#0@@60| T@U) (|k#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@218) LayerTypeType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |k#0@@45|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@218 |m#0@@60| |k#0@@45|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@60| |k#0@@45|)))
 :qid |unknown.0:0|
 :skolemid |2755|
 :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@218) |m#0@@60| |k#0@@45|))
)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@219 T@U) (|m#0@@61| T@U) (|k#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@219) LayerTypeType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |k#0@@46|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@61| |k#0@@46|) (and ($Is |m#0@@61| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@46| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|)) (|Set#Difference| (|Map#Domain| |m#0@@61|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@46|))) (forall ((|j#0@@11| T@U) ) (!  (=> (and (and (= (type |j#0@@11|) BoxType) ($IsBox |j#0@@11| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|)) |j#0@@11|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|)) |j#0@@11|) (MapType0Select (|Map#Elements| |m#0@@61|) |j#0@@11|)))
 :qid |Mapsidfy.82:20|
 :skolemid |2756|
 :pattern ( (MapType0Select (|Map#Elements| |m#0@@61|) |j#0@@11|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|)) |j#0@@11|))
 :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|)) |j#0@@11|))
))) (INTERNAL_le_boogie (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|))) (|Set#Card| (|Map#Domain| |m#0@@61|)))) (INTERNAL_le_boogie (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|)) (|Map#Card| |m#0@@61|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2757|
 :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@61| |k#0@@46|))
))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@220 T@U) (|m#0@@62| T@U) (|k#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@220) LayerTypeType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |k#0@@47|) BoxType)) (and ($Is |m#0@@62| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@47| Maps._default.MapRemove1Strong$K@@2))) (= (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@220 |m#0@@62| |k#0@@47|) true))
 :qid |unknown.0:0|
 :skolemid |2758|
 :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@220 |m#0@@62| |k#0@@47|))
)))
(assert  (and (= (type MoreFuel_MapRemove_s._default.MapRemove10) LayerTypeType) (= (type StartFuelAssert_MapRemove_s._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@221 T@U) (|m#0@@63| T@U) (|k#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |k#0@@48|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@63| |k#0@@48|) (and ($Is |m#0@@63| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@48| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@63| |k#0@@48|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove10)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove10) MoreFuel_MapRemove_s._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@221) |m#0@@63| |k#0@@48|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@63| |k#0@@48|)))))
 :qid |unknown.0:0|
 :skolemid |2759|
 :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@221) |m#0@@63| |k#0@@48|))
))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@222 T@U) (|m#0@@64| T@U) (|k#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |m#0@@64|) (MapType BoxType BoxType))) (= (type |k#0@@49|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@64|) |k#0@@49|) (and ($Is |m#0@@64| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@49| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@64|) |k#0@@49|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove11)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove11) MoreFuel_MapRemove_s._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@222) (Lit |m#0@@64|) |k#0@@49|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@64|) |k#0@@49|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2760|
 :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@222) (Lit |m#0@@64|) |k#0@@49|))
))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@223 T@U) (|m#0@@65| T@U) (|k#0@@50| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |m#0@@65|) (MapType BoxType BoxType))) (= (type |k#0@@50|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@65|) (Lit |k#0@@50|)) (and ($Is |m#0@@65| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@50| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@65|) (Lit |k#0@@50|)) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove12)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove12) MoreFuel_MapRemove_s._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@223) (Lit |m#0@@65|) (Lit |k#0@@50|)) (Lit (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@65|) (Lit |k#0@@50|)))))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2761|
 :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@223) (Lit |m#0@@65|) (Lit |k#0@@50|)))
))))
(assert (forall ((arg0@@523 T@U) (arg1@@245 T@U) (arg2@@139 T@U) (arg3@@80 T@U) ) (! (= (type (Maps.__default.IMapInvert arg0@@523 arg1@@245 arg2@@139 arg3@@80)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.IMapInvert|
 :pattern ( (Maps.__default.IMapInvert arg0@@523 arg1@@245 arg2@@139 arg3@@80))
)))
(assert (forall ((Maps._default.IMapInvert$K T@U) (Maps._default.IMapInvert$V T@U) ($ly@@224 T@U) (|m#0@@66| T@U) ) (!  (=> (and (and (and (= (type Maps._default.IMapInvert$K) TyType) (= (type Maps._default.IMapInvert$V) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapInvert Maps._default.IMapInvert$K Maps._default.IMapInvert$V ($LS $ly@@224) |m#0@@66|) (Maps.__default.IMapInvert Maps._default.IMapInvert$K Maps._default.IMapInvert$V $ly@@224 |m#0@@66|)))
 :qid |unknown.0:0|
 :skolemid |2762|
 :pattern ( (Maps.__default.IMapInvert Maps._default.IMapInvert$K Maps._default.IMapInvert$V ($LS $ly@@224) |m#0@@66|))
)))
(assert (forall ((Maps._default.IMapInvert$K@@0 T@U) (Maps._default.IMapInvert$V@@0 T@U) ($ly@@225 T@U) (|m#0@@67| T@U) ) (!  (=> (and (and (and (= (type Maps._default.IMapInvert$K@@0) TyType) (= (type Maps._default.IMapInvert$V@@0) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@0 Maps._default.IMapInvert$V@@0 $ly@@225 |m#0@@67|) (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@0 Maps._default.IMapInvert$V@@0 $LZ |m#0@@67|)))
 :qid |unknown.0:0|
 :skolemid |2763|
 :pattern ( (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@0 Maps._default.IMapInvert$V@@0 (AsFuelBottom $ly@@225) |m#0@@67|))
)))
(assert  (=> true (forall ((Maps._default.IMapInvert$K@@1 T@U) (Maps._default.IMapInvert$V@@1 T@U) ($ly@@226 T@U) (|m#0@@68| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapInvert$K@@1) TyType) (= (type Maps._default.IMapInvert$V@@1) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |m#0@@68|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapInvert#canCall| Maps._default.IMapInvert$K@@1 Maps._default.IMapInvert$V@@1 |m#0@@68|) ($Is |m#0@@68| (TIMap Maps._default.IMapInvert$K@@1 Maps._default.IMapInvert$V@@1)))) ($Is (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@1 Maps._default.IMapInvert$V@@1 $ly@@226 |m#0@@68|) (TIMap Maps._default.IMapInvert$V@@1 Maps._default.IMapInvert$K@@1)))
 :qid |unknown.0:0|
 :skolemid |2764|
 :pattern ( (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@1 Maps._default.IMapInvert$V@@1 $ly@@226 |m#0@@68|))
))))
(assert (forall ((Maps._default.IMapInvert$K@@2 T@U) (Maps._default.IMapInvert$V@@2 T@U) ($ly@@227 T@U) ($Heap@@47 T@U) (|m#0@@69| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapInvert$K@@2) TyType) (= (type Maps._default.IMapInvert$V@@2) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type $Heap@@47) (MapType0Type refType MapType1Type))) (= (type |m#0@@69|) (IMapType BoxType BoxType))) (and ($IsGoodHeap $Heap@@47) ($Is |m#0@@69| (TIMap Maps._default.IMapInvert$K@@2 Maps._default.IMapInvert$V@@2)))) (= (|Maps.__default.IMapInvert#requires| Maps._default.IMapInvert$K@@2 Maps._default.IMapInvert$V@@2 $ly@@227 |m#0@@69|) true))
 :qid |unknown.0:0|
 :skolemid |2765|
 :pattern ( (|Maps.__default.IMapInvert#requires| Maps._default.IMapInvert$K@@2 Maps._default.IMapInvert$V@@2 $ly@@227 |m#0@@69|) ($IsGoodHeap $Heap@@47))
)))
(assert (forall ((arg0@@524 T@U) (arg1@@246 T@U) (arg2@@140 T@U) (arg3@@81 T@U) ) (! (= (type (|$let#8_a| arg0@@524 arg1@@246 arg2@@140 arg3@@81)) BoxType)
 :qid |funType:$let#8_a|
 :pattern ( (|$let#8_a| arg0@@524 arg1@@246 arg2@@140 arg3@@81))
)))
(assert (forall ((Maps._default.IMapInvert$K@@3 T@U) (Maps._default.IMapInvert$V@@3 T@U) (m@@67 T@U) (b@@93 T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapInvert$K@@3) TyType) (= (type Maps._default.IMapInvert$V@@3) TyType)) (= (type m@@67) (IMapType BoxType BoxType))) (= (type b@@93) BoxType)) (|$let#8$canCall| Maps._default.IMapInvert$K@@3 Maps._default.IMapInvert$V@@3 m@@67 b@@93)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@67) (|$let#8_a| Maps._default.IMapInvert$K@@3 Maps._default.IMapInvert$V@@3 m@@67 b@@93))) (= (MapType0Select (|IMap#Elements| m@@67) (|$let#8_a| Maps._default.IMapInvert$K@@3 Maps._default.IMapInvert$V@@3 m@@67 b@@93)) b@@93)))
 :qid |Mapsidfy.92:31|
 :skolemid |2766|
 :pattern ( (|$let#8_a| Maps._default.IMapInvert$K@@3 Maps._default.IMapInvert$V@@3 m@@67 b@@93))
)))
(assert (forall ((arg0@@525 T@U) (arg1@@247 T@U) (arg2@@141 T@U) ) (! (= (type (|lambda#174| arg0@@525 arg1@@247 arg2@@141)) (MapType0Type BoxType BoxType))
 :qid |funType:lambda#174|
 :pattern ( (|lambda#174| arg0@@525 arg1@@247 arg2@@141))
)))
(assert  (=> true (forall ((Maps._default.IMapInvert$K@@4 T@U) (Maps._default.IMapInvert$V@@4 T@U) ($ly@@228 T@U) ($Heap@@48 T@U) (|m#0@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapInvert$K@@4) TyType) (= (type Maps._default.IMapInvert$V@@4) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type $Heap@@48) (MapType0Type refType MapType1Type))) (= (type |m#0@@70|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapInvert#canCall| Maps._default.IMapInvert$K@@4 Maps._default.IMapInvert$V@@4 |m#0@@70|) (and ($IsGoodHeap $Heap@@48) ($Is |m#0@@70| (TIMap Maps._default.IMapInvert$K@@4 Maps._default.IMapInvert$V@@4))))) (and (forall ((|b#0@@48| T@U) ) (!  (=> (and (and (= (type |b#0@@48|) BoxType) ($IsBox |b#0@@48| Maps._default.IMapInvert$V@@4)) (U_2_bool (MapType0Select (|IMap#Values| |m#0@@70|) |b#0@@48|))) (|$let#8$canCall| Maps._default.IMapInvert$K@@4 Maps._default.IMapInvert$V@@4 |m#0@@70| |b#0@@48|))
 :qid |Mapsidfy.92:10|
 :skolemid |2767|
 :pattern ( (MapType0Select (|IMap#Values| |m#0@@70|) |b#0@@48|))
)) (= (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@4 Maps._default.IMapInvert$V@@4 ($LS $ly@@228) |m#0@@70|) (|IMap#Glue| (|lambda#128| Maps._default.IMapInvert$V@@4 (|IMap#Values| |m#0@@70|)) (|lambda#174| Maps._default.IMapInvert$K@@4 Maps._default.IMapInvert$V@@4 |m#0@@70|) (TIMap Maps._default.IMapInvert$V@@4 Maps._default.IMapInvert$K@@4)))))
 :qid |unknown.0:0|
 :skolemid |2768|
 :pattern ( (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@4 Maps._default.IMapInvert$V@@4 ($LS $ly@@228) |m#0@@70|) ($IsGoodHeap $Heap@@48))
))))
(assert  (=> true (forall ((Maps._default.IMapInvert$K@@5 T@U) (Maps._default.IMapInvert$V@@5 T@U) ($ly@@229 T@U) ($Heap@@49 T@U) (|m#0@@71| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapInvert$K@@5) TyType) (= (type Maps._default.IMapInvert$V@@5) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type $Heap@@49) (MapType0Type refType MapType1Type))) (= (type |m#0@@71|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapInvert#canCall| Maps._default.IMapInvert$K@@5 Maps._default.IMapInvert$V@@5 (Lit |m#0@@71|)) (and ($IsGoodHeap $Heap@@49) ($Is |m#0@@71| (TIMap Maps._default.IMapInvert$K@@5 Maps._default.IMapInvert$V@@5))))) (and (forall ((|b#0@@49| T@U) ) (!  (=> (and (and (= (type |b#0@@49|) BoxType) ($IsBox |b#0@@49| Maps._default.IMapInvert$V@@5)) (U_2_bool (MapType0Select (Lit (|IMap#Values| (Lit |m#0@@71|))) |b#0@@49|))) (|$let#8$canCall| Maps._default.IMapInvert$K@@5 Maps._default.IMapInvert$V@@5 (Lit |m#0@@71|) |b#0@@49|))
 :qid |Mapsidfy.92:10|
 :skolemid |2769|
 :pattern ( (MapType0Select (|IMap#Values| |m#0@@71|) |b#0@@49|))
)) (= (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@5 Maps._default.IMapInvert$V@@5 ($LS $ly@@229) (Lit |m#0@@71|)) (|IMap#Glue| (|lambda#128| Maps._default.IMapInvert$V@@5 (Lit (|IMap#Values| (Lit |m#0@@71|)))) (|lambda#174| Maps._default.IMapInvert$K@@5 Maps._default.IMapInvert$V@@5 (Lit |m#0@@71|)) (TIMap Maps._default.IMapInvert$V@@5 Maps._default.IMapInvert$K@@5)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2770|
 :pattern ( (Maps.__default.IMapInvert Maps._default.IMapInvert$K@@5 Maps._default.IMapInvert$V@@5 ($LS $ly@@229) (Lit |m#0@@71|)) ($IsGoodHeap $Heap@@49))
))))
(assert (forall ((arg0@@526 T@U) (arg1@@248 T@U) (arg2@@142 T@U) (arg3@@82 T@U) (arg4@@48 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@526 arg1@@248 arg2@@142 arg3@@82 arg4@@48)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.IMapRemove|
 :pattern ( (Maps.__default.IMapRemove arg0@@526 arg1@@248 arg2@@142 arg3@@82 arg4@@48))
)))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@230 T@U) (|m#0@@72| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |m#0@@72|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@230) |m#0@@72| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@230 |m#0@@72| |ks#0@@11|)))
 :qid |unknown.0:0|
 :skolemid |2771|
 :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@230) |m#0@@72| |ks#0@@11|))
)))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@231 T@U) (|m#0@@73| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |m#0@@73|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@231 |m#0@@73| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@73| |ks#0@@12|)))
 :qid |unknown.0:0|
 :skolemid |2772|
 :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@231) |m#0@@73| |ks#0@@12|))
)))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@232 T@U) (|m#0@@74| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |m#0@@74|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@74| |ks#0@@13|) (and ($Is |m#0@@74| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@74| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@74|) |ks#0@@13|)) (forall ((|j#0@@12| T@U) ) (!  (=> (and (and (= (type |j#0@@12|) BoxType) ($IsBox |j#0@@12| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@74| |ks#0@@13|)) |j#0@@12|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@74| |ks#0@@13|)) |j#0@@12|) (MapType0Select (|IMap#Elements| |m#0@@74|) |j#0@@12|)))
 :qid |Mapsidfy.103:20|
 :skolemid |2773|
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@74|) |j#0@@12|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@74| |ks#0@@13|)) |j#0@@12|))
 :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@74| |ks#0@@13|)) |j#0@@12|))
))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@74| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2774|
 :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@74| |ks#0@@13|))
))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@233 T@U) (|m#0@@75| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |m#0@@75|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@75| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (= (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@233 |m#0@@75| |ks#0@@14|) true))
 :qid |unknown.0:0|
 :skolemid |2775|
 :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@233 |m#0@@75| |ks#0@@14|))
)))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@234 T@U) (|m#0@@76| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |m#0@@76|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@76| |ks#0@@15|) (and ($Is |m#0@@76| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@234) |m#0@@76| |ks#0@@15|) (|IMap#Glue| (|lambda#169| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@76|) |ks#0@@15|) (|lambda#107| (|IMap#Elements| |m#0@@76|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3))))
 :qid |unknown.0:0|
 :skolemid |2776|
 :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@234) |m#0@@76| |ks#0@@15|))
))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@235 T@U) (|m#0@@77| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |m#0@@77|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@77|) (Lit |ks#0@@16|)) (and ($Is |m#0@@77| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@235) (Lit |m#0@@77|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#169| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@77|) (Lit |ks#0@@16|)) (|lambda#107| (|IMap#Elements| (Lit |m#0@@77|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2777|
 :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@235) (Lit |m#0@@77|) (Lit |ks#0@@16|)))
))))
(assert (forall ((arg0@@527 T@U) (arg1@@249 T@U) (arg2@@143 T@U) (arg3@@83 T@U) (arg4@@49 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@527 arg1@@249 arg2@@143 arg3@@83 arg4@@49)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.IMapRemove1|
 :pattern ( (Maps.__default.IMapRemove1 arg0@@527 arg1@@249 arg2@@143 arg3@@83 arg4@@49))
)))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@236 T@U) (|m#0@@78| T@U) (|k#0@@51| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |m#0@@78|) (IMapType BoxType BoxType))) (= (type |k#0@@51|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@236) |m#0@@78| |k#0@@51|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@236 |m#0@@78| |k#0@@51|)))
 :qid |unknown.0:0|
 :skolemid |2778|
 :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@236) |m#0@@78| |k#0@@51|))
)))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@237 T@U) (|m#0@@79| T@U) (|k#0@@52| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |m#0@@79|) (IMapType BoxType BoxType))) (= (type |k#0@@52|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@237 |m#0@@79| |k#0@@52|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@79| |k#0@@52|)))
 :qid |unknown.0:0|
 :skolemid |2779|
 :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@237) |m#0@@79| |k#0@@52|))
)))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@238 T@U) (|m#0@@80| T@U) (|k#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |m#0@@80|) (IMapType BoxType BoxType))) (= (type |k#0@@53|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@80| |k#0@@53|) (and ($Is |m#0@@80| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@53| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@80| |k#0@@53|)) (|ISet#Difference| (|IMap#Domain| |m#0@@80|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@53|))) (forall ((|j#0@@13| T@U) ) (!  (=> (and (and (= (type |j#0@@13|) BoxType) ($IsBox |j#0@@13| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@80| |k#0@@53|)) |j#0@@13|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@80| |k#0@@53|)) |j#0@@13|) (MapType0Select (|IMap#Elements| |m#0@@80|) |j#0@@13|)))
 :qid |Mapsidfy.110:20|
 :skolemid |2780|
 :pattern ( (MapType0Select (|IMap#Elements| |m#0@@80|) |j#0@@13|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@80| |k#0@@53|)) |j#0@@13|))
 :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@80| |k#0@@53|)) |j#0@@13|))
))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@80| |k#0@@53|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2781|
 :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@80| |k#0@@53|))
))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@239 T@U) (|m#0@@81| T@U) (|k#0@@54| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |m#0@@81|) (IMapType BoxType BoxType))) (= (type |k#0@@54|) BoxType)) (and ($Is |m#0@@81| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@54| Maps._default.IMapRemove1$K@@2))) (= (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@239 |m#0@@81| |k#0@@54|) true))
 :qid |unknown.0:0|
 :skolemid |2782|
 :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@239 |m#0@@81| |k#0@@54|))
)))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@240 T@U) (|m#0@@82| T@U) (|k#0@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |m#0@@82|) (IMapType BoxType BoxType))) (= (type |k#0@@55|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@82| |k#0@@55|) (and ($Is |m#0@@82| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@55| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@240) |m#0@@82| |k#0@@55|) (|IMap#Glue| (|lambda#106| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@82|) |k#0@@55|) (|lambda#107| (|IMap#Elements| |m#0@@82|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3))))
 :qid |unknown.0:0|
 :skolemid |2783|
 :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@240) |m#0@@82| |k#0@@55|))
))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@241 T@U) (|m#0@@83| T@U) (|k#0@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |m#0@@83|) (IMapType BoxType BoxType))) (= (type |k#0@@56|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@83|) (Lit |k#0@@56|)) (and ($Is |m#0@@83| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@56| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@241) (Lit |m#0@@83|) (Lit |k#0@@56|)) (|IMap#Glue| (|lambda#106| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@83|) |k#0@@56|) (|lambda#107| (|IMap#Elements| (Lit |m#0@@83|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2784|
 :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@241) (Lit |m#0@@83|) (Lit |k#0@@56|)))
))))
(assert (forall ((arg0@@528 T@U) (arg1@@250 T@U) (arg2@@144 T@U) (arg3@@84 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@528 arg1@@250 arg2@@144 arg3@@84)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapRestrict|
 :pattern ( (Maps.__default.MapRestrict arg0@@528 arg1@@250 arg2@@144 arg3@@84))
)))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@84| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@84|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@84| |ks#0@@17|) (and ($Is |m#0@@84| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@84| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)))
 :qid |unknown.0:0|
 :skolemid |2785|
 :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@84| |ks#0@@17|))
))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@85| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@85|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@85| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (= (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@85| |ks#0@@18|) true))
 :qid |unknown.0:0|
 :skolemid |2786|
 :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@85| |ks#0@@18|))
)))
(assert (forall ((arg0@@529 T@U) (arg1@@251 T@U) (arg2@@145 T@U) ) (! (= (type (|lambda#185| arg0@@529 arg1@@251 arg2@@145)) (MapType0Type BoxType boolType))
 :qid |funType:lambda#185|
 :pattern ( (|lambda#185| arg0@@529 arg1@@251 arg2@@145))
)))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@86| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@86|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@86| |ks#0@@19|) (and ($Is |m#0@@86| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@86| |ks#0@@19|) (|Map#Glue| (|lambda#185| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@86|)) (|lambda#107| (|Map#Elements| |m#0@@86|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2787|
 :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@86| |ks#0@@19|))
))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@87| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@87|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@87|) (Lit |ks#0@@20|)) (and ($Is |m#0@@87| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@87|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#185| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@87|)) (|lambda#107| (|Map#Elements| (Lit |m#0@@87|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2788|
 :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@87|) (Lit |ks#0@@20|)))
))))
(assert (forall ((arg0@@530 T@U) (arg1@@252 T@U) (arg2@@146 T@U) (arg3@@85 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@530 arg1@@252 arg2@@146 arg3@@85)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapIRestrict|
 :pattern ( (Maps.__default.MapIRestrict arg0@@530 arg1@@252 arg2@@146 arg3@@85))
)))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@88| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@88|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@88| |ks#0@@21|) (and ($Is |m#0@@88| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@88| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)))
 :qid |unknown.0:0|
 :skolemid |2789|
 :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@88| |ks#0@@21|))
))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@89| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@89|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@89| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (= (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@89| |ks#0@@22|) true))
 :qid |unknown.0:0|
 :skolemid |2790|
 :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@89| |ks#0@@22|))
)))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@90| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@90|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@90| |ks#0@@23|) (and ($Is |m#0@@90| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@90| |ks#0@@23|) (|Map#Glue| (|lambda#185| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@90|) |ks#0@@23|) (|lambda#107| (|Map#Elements| |m#0@@90|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2791|
 :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@90| |ks#0@@23|))
))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@91| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@91|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@91|) |ks#0@@24|) (and ($Is |m#0@@91| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@91|) |ks#0@@24|) (|Map#Glue| (|lambda#185| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@91|) |ks#0@@24|) (|lambda#107| (|Map#Elements| (Lit |m#0@@91|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2792|
 :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@91|) |ks#0@@24|))
))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@92| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@92|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@92|) (Lit |ks#0@@25|)) (and ($Is |m#0@@92| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@92|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#185| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@92|) (Lit |ks#0@@25|)) (|lambda#107| (|Map#Elements| (Lit |m#0@@92|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2793|
 :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@92|) (Lit |ks#0@@25|)))
))))
(assert (forall ((arg0@@531 T@U) (arg1@@253 T@U) (arg2@@147 T@U) (arg3@@86 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@531 arg1@@253 arg2@@147 arg3@@86)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.IMapRestrict|
 :pattern ( (Maps.__default.IMapRestrict arg0@@531 arg1@@253 arg2@@147 arg3@@86))
)))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@93| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@93|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@93| |ks#0@@26|) (and ($Is |m#0@@93| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@93| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)))
 :qid |unknown.0:0|
 :skolemid |2794|
 :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@93| |ks#0@@26|))
))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@94| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@94|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@94| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (= (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@94| |ks#0@@27|) true))
 :qid |unknown.0:0|
 :skolemid |2795|
 :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@94| |ks#0@@27|))
)))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@95| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@95|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@95| |ks#0@@28|) (and ($Is |m#0@@95| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@95| |ks#0@@28|) (|IMap#Glue| (|lambda#185| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@95|)) (|lambda#107| (|IMap#Elements| |m#0@@95|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2796|
 :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@95| |ks#0@@28|))
))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@96| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@96|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@96|) (Lit |ks#0@@29|)) (and ($Is |m#0@@96| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@96|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#185| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@96|)) (|lambda#107| (|IMap#Elements| (Lit |m#0@@96|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2797|
 :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@96|) (Lit |ks#0@@29|)))
))))
(assert (forall ((arg0@@532 T@U) (arg1@@254 T@U) (arg2@@148 T@U) (arg3@@87 T@U) (arg4@@50 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@532 arg1@@254 arg2@@148 arg3@@87 arg4@@50)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapDisjointUnion|
 :pattern ( (Maps.__default.MapDisjointUnion arg0@@532 arg1@@254 arg2@@148 arg3@@87 arg4@@50))
)))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@242 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@242) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@242 |mapa#0| |mapb#0|)))
 :qid |unknown.0:0|
 :skolemid |2798|
 :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@242) |mapa#0| |mapb#0|))
)))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@243 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@243 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2799|
 :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@243) |mapa#0@@0| |mapb#0@@0|))
)))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@244 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@57| T@U) ) (!  (=> (and (and (= (type |k#0@@57|) BoxType) ($IsBox |k#0@@57| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@57|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@57|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#0@@57|)))
 :qid |Mapsidfy.131:18|
 :skolemid |2800|
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#0@@57|))
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@57|))
 :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@57|))
))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@2|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@2|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#1@@2|)))
 :qid |Mapsidfy.132:18|
 :skolemid |2801|
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#1@@2|))
 :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@2|))
 :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@2|))
))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2802|
 :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|))
))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@245 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (= (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@245 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))))
 :qid |unknown.0:0|
 :skolemid |2803|
 :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@245 |mapa#0@@2| |mapb#0@@2|))
)))
(assert (forall ((arg0@@533 T@U) (arg1@@255 T@U) (arg2@@149 T@U) ) (! (= (type (|lambda#200| arg0@@533 arg1@@255 arg2@@149)) (MapType0Type BoxType BoxType))
 :qid |funType:lambda#200|
 :pattern ( (|lambda#200| arg0@@533 arg1@@255 arg2@@149))
)))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@246 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@246) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#128| Maps._default.MapDisjointUnion$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))) (|lambda#200| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))))
 :qid |unknown.0:0|
 :skolemid |2804|
 :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@246) |mapa#0@@3| |mapb#0@@3|))
))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@247 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@247) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#128| Maps._default.MapDisjointUnion$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#200| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2805|
 :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@247) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)))
))))
(assert (forall ((arg0@@534 T@U) (arg1@@256 T@U) (arg2@@150 T@U) (arg3@@88 T@U) (arg4@@51 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@534 arg1@@256 arg2@@150 arg3@@88 arg4@@51)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapUnionPreferA|
 :pattern ( (Maps.__default.MapUnionPreferA arg0@@534 arg1@@256 arg2@@150 arg3@@88 arg4@@51))
)))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@248 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@248) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@248) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@248 |mapa#0@@5| |mapb#0@@5|)))
 :qid |unknown.0:0|
 :skolemid |2806|
 :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@248) |mapa#0@@5| |mapb#0@@5|))
)))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@249 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@249) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@249 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|)))
 :qid |unknown.0:0|
 :skolemid |2807|
 :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@249) |mapa#0@@6| |mapb#0@@6|))
)))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@250 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@250) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@58| T@U) ) (!  (=> (and (and (= (type |k#0@@58|) BoxType) ($IsBox |k#0@@58| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@58|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#0@@58|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@58|)))
 :qid |Mapsidfy.141:20|
 :skolemid |2808|
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@58|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#0@@58|))
 :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@58|))
))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@3|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#1@@3|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@3|)))
 :qid |Mapsidfy.142:20|
 :skolemid |2809|
 :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@3|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#1@@3|))
 :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@3|))
))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)))
 :qid |Mapsidfy.143:20|
 :skolemid |2810|
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#2|))
 :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))
 :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|))
))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2811|
 :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|))
))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@251 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@251) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (= (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@251 |mapa#0@@8| |mapb#0@@8|) true))
 :qid |unknown.0:0|
 :skolemid |2812|
 :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@251 |mapa#0@@8| |mapb#0@@8|))
)))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@252 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@252) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@252) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#128| Maps._default.MapUnionPreferA$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|))) (|lambda#200| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))
 :qid |unknown.0:0|
 :skolemid |2813|
 :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@252) |mapa#0@@9| |mapb#0@@9|))
))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@253 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@253) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@253) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#128| Maps._default.MapUnionPreferA$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@10|)) (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#200| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2814|
 :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@253) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)))
))))
(assert (forall ((arg0@@535 T@U) (arg1@@257 T@U) (arg2@@151 T@U) (arg3@@89 T@U) (arg4@@52 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@535 arg1@@257 arg2@@151 arg3@@89 arg4@@52)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapUnionPreferB|
 :pattern ( (Maps.__default.MapUnionPreferB arg0@@535 arg1@@257 arg2@@151 arg3@@89 arg4@@52))
)))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@254 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@254) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@254) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@254 |mapa#0@@11| |mapb#0@@11|)))
 :qid |unknown.0:0|
 :skolemid |2815|
 :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@254) |mapa#0@@11| |mapb#0@@11|))
)))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@255 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@255) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@255 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|)))
 :qid |unknown.0:0|
 :skolemid |2816|
 :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@255) |mapa#0@@12| |mapb#0@@12|))
)))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@256 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@256) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@59| T@U) ) (!  (=> (and (and (= (type |k#0@@59|) BoxType) ($IsBox |k#0@@59| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@59|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#0@@59|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@59|)))
 :qid |Mapsidfy.150:20|
 :skolemid |2817|
 :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@59|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#0@@59|))
 :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@59|))
))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@4|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#1@@4|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@4|)))
 :qid |Mapsidfy.151:20|
 :skolemid |2818|
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@4|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#1@@4|))
 :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@4|))
))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)))
 :qid |Mapsidfy.152:20|
 :skolemid |2819|
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|))
 :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))
 :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|))
))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2820|
 :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|))
))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@257 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@257) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (= (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@257 |mapa#0@@14| |mapb#0@@14|) true))
 :qid |unknown.0:0|
 :skolemid |2821|
 :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@257 |mapa#0@@14| |mapb#0@@14|))
)))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@258 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@258) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@258) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#128| Maps._default.MapUnionPreferB$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|))) (|lambda#200| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))
 :qid |unknown.0:0|
 :skolemid |2822|
 :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@258) |mapa#0@@15| |mapb#0@@15|))
))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@259 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@259) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@259) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#128| Maps._default.MapUnionPreferB$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@16|)) (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#200| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2823|
 :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@259) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)))
))))
(assert (forall ((arg0@@536 T@U) (arg1@@258 T@U) (arg2@@152 T@U) (arg3@@90 T@U) (arg4@@53 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@536 arg1@@258 arg2@@152 arg3@@90 arg4@@53)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapUnion|
 :pattern ( (Maps.__default.MapUnion arg0@@536 arg1@@258 arg2@@152 arg3@@90 arg4@@53))
)))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@260 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@260) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@260) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@260 |mapa#0@@17| |mapb#0@@17|)))
 :qid |unknown.0:0|
 :skolemid |2824|
 :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@260) |mapa#0@@17| |mapb#0@@17|))
)))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@261 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@261) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@261 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|)))
 :qid |unknown.0:0|
 :skolemid |2825|
 :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@261) |mapa#0@@18| |mapb#0@@18|))
)))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@262 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@262) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@60| T@U) ) (!  (=> (and (and (= (type |k#0@@60|) BoxType) ($IsBox |k#0@@60| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@60|))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@60|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#0@@60|)))
 :qid |Mapsidfy.161:18|
 :skolemid |2826|
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#0@@60|))
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@60|))
 :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@60|))
))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@5|))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#1@@5|)))
 :qid |Mapsidfy.162:18|
 :skolemid |2827|
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#1@@5|))
 :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@5|))
 :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@5|))
))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|))))
 :qid |Mapsidfy.163:18|
 :skolemid |2828|
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|))
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|))
 :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|))
 :pattern ( (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|))
))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) (|Set#Equal| (|Map#Values| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Values| |mapa#0@@19|) (|Map#Values| |mapb#0@@19|))))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) (Maps.__default.IsSubMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) (Maps.__default.IsSubMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapb#0@@19| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2829|
 :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|))
))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@263 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@263) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (= (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@263 |mapa#0@@20| |mapb#0@@20|) true))
 :qid |unknown.0:0|
 :skolemid |2830|
 :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@263 |mapa#0@@20| |mapb#0@@20|))
)))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@264 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@264) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@264) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|))))
 :qid |unknown.0:0|
 :skolemid |2831|
 :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@264) |mapa#0@@21| |mapb#0@@21|))
))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@265 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@265) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@265) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2832|
 :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@265) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)))
))))
(assert (forall ((arg0@@537 T@U) (arg1@@259 T@U) (arg2@@153 T@U) (arg3@@91 T@U) (arg4@@54 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@537 arg1@@259 arg2@@153 arg3@@91 arg4@@54)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.IMapUnionPreferA|
 :pattern ( (Maps.__default.IMapUnionPreferA arg0@@537 arg1@@259 arg2@@153 arg3@@91 arg4@@54))
)))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@266 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@266) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@266) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@266 |mapa#0@@23| |mapb#0@@23|)))
 :qid |unknown.0:0|
 :skolemid |2833|
 :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@266) |mapa#0@@23| |mapb#0@@23|))
)))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@267 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@267) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@267 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|)))
 :qid |unknown.0:0|
 :skolemid |2834|
 :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@267) |mapa#0@@24| |mapb#0@@24|))
)))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@268 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@268) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@61| T@U) ) (!  (=> (and (and (= (type |k#0@@61|) BoxType) ($IsBox |k#0@@61| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@61|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#0@@61|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@61|)))
 :qid |Mapsidfy.173:20|
 :skolemid |2835|
 :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@61|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#0@@61|))
 :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@61|))
))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@6|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#1@@6|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@6|)))
 :qid |Mapsidfy.174:20|
 :skolemid |2836|
 :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@6|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#1@@6|))
 :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@6|))
))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)))
 :qid |Mapsidfy.175:20|
 :skolemid |2837|
 :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|))
 :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))
 :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|))
))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2838|
 :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|))
))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@269 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (= (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@269 |mapa#0@@26| |mapb#0@@26|) true))
 :qid |unknown.0:0|
 :skolemid |2839|
 :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@269 |mapa#0@@26| |mapb#0@@26|))
)))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@270 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@270) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#128| Maps._default.IMapUnionPreferA$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|))) (|lambda#200| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))
 :qid |unknown.0:0|
 :skolemid |2840|
 :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@270) |mapa#0@@27| |mapb#0@@27|))
))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@271 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@271) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#128| Maps._default.IMapUnionPreferA$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@28|)) (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#200| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2841|
 :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@271) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)))
))))
(assert (forall ((arg0@@538 T@U) (arg1@@260 T@U) (arg2@@154 T@U) (arg3@@92 T@U) (arg4@@55 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@538 arg1@@260 arg2@@154 arg3@@92 arg4@@55)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.IMapUnionPreferB|
 :pattern ( (Maps.__default.IMapUnionPreferB arg0@@538 arg1@@260 arg2@@154 arg3@@92 arg4@@55))
)))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@272 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@272) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@272 |mapa#0@@29| |mapb#0@@29|)))
 :qid |unknown.0:0|
 :skolemid |2842|
 :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@272) |mapa#0@@29| |mapb#0@@29|))
)))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@273 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@273 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|)))
 :qid |unknown.0:0|
 :skolemid |2843|
 :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@273) |mapa#0@@30| |mapb#0@@30|))
)))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@274 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@62| T@U) ) (!  (=> (and (and (= (type |k#0@@62|) BoxType) ($IsBox |k#0@@62| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@62|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#0@@62|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@62|)))
 :qid |Mapsidfy.182:20|
 :skolemid |2844|
 :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@62|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#0@@62|))
 :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@62|))
))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@7|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#1@@7|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@7|)))
 :qid |Mapsidfy.183:20|
 :skolemid |2845|
 :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@7|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#1@@7|))
 :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@7|))
))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)))
 :qid |Mapsidfy.184:20|
 :skolemid |2846|
 :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|))
 :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))
 :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|))
))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2847|
 :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|))
))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@275 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (= (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@275 |mapa#0@@32| |mapb#0@@32|) true))
 :qid |unknown.0:0|
 :skolemid |2848|
 :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@275 |mapa#0@@32| |mapb#0@@32|))
)))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@276 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@276) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#128| Maps._default.IMapUnionPreferB$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|))) (|lambda#200| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))
 :qid |unknown.0:0|
 :skolemid |2849|
 :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@276) |mapa#0@@33| |mapb#0@@33|))
))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@277 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@277) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#128| Maps._default.IMapUnionPreferB$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@34|)) (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#200| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2850|
 :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@277) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)))
))))
(assert (forall ((arg0@@539 T@U) (arg1@@261 T@U) (arg2@@155 T@U) (arg3@@93 T@U) (arg4@@56 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@539 arg1@@261 arg2@@155 arg3@@93 arg4@@56)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.IMapUnion|
 :pattern ( (Maps.__default.IMapUnion arg0@@539 arg1@@261 arg2@@155 arg3@@93 arg4@@56))
)))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@278 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@278) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@278 |mapa#0@@35| |mapb#0@@35|)))
 :qid |unknown.0:0|
 :skolemid |2851|
 :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@278) |mapa#0@@35| |mapb#0@@35|))
)))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@279 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@279 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|)))
 :qid |unknown.0:0|
 :skolemid |2852|
 :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@279) |mapa#0@@36| |mapb#0@@36|))
)))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@280 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@63| T@U) ) (!  (=> (and (and (= (type |k#0@@63|) BoxType) ($IsBox |k#0@@63| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@63|))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@63|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#0@@63|)))
 :qid |Mapsidfy.193:18|
 :skolemid |2853|
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#0@@63|))
 :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@63|))
 :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@63|))
))) (forall ((|k#1@@8| T@U) ) (!  (=> (and (and (= (type |k#1@@8|) BoxType) ($IsBox |k#1@@8| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@8|))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@8|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#1@@8|)))
 :qid |Mapsidfy.194:18|
 :skolemid |2854|
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#1@@8|))
 :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@8|))
 :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@8|))
))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|))))
 :qid |Mapsidfy.195:18|
 :skolemid |2855|
 :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|))
 :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|))
 :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|))
 :pattern ( (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|))
))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2856|
 :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|))
))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@281 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (= (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@281 |mapa#0@@38| |mapb#0@@38|) true))
 :qid |unknown.0:0|
 :skolemid |2857|
 :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@281 |mapa#0@@38| |mapb#0@@38|))
)))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@282 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@282) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|))))
 :qid |unknown.0:0|
 :skolemid |2858|
 :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@282) |mapa#0@@39| |mapb#0@@39|))
))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@283 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@283) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2859|
 :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@283) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)))
))))
(assert (forall ((arg0@@540 T@U) (arg1@@262 T@U) (arg2@@156 T@U) (arg3@@94 T@U) (arg4@@57 T@U) (arg5@@21 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@540 arg1@@262 arg2@@156 arg3@@94 arg4@@57 arg5@@21)) (MapType BoxType BoxType))
 :qid |funType:Maps.__default.MapDisjointUnion3|
 :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@540 arg1@@262 arg2@@156 arg3@@94 arg4@@57 arg5@@21))
)))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@284 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@284) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@284) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@284 |mapa#0@@41| |mapb#0@@41| |mapc#0|)))
 :qid |unknown.0:0|
 :skolemid |2860|
 :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@284) |mapa#0@@41| |mapb#0@@41| |mapc#0|))
)))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@285 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@285) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@285 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)))
 :qid |unknown.0:0|
 :skolemid |2861|
 :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@285) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))
)))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@286 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@286) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@64| T@U) ) (!  (=> (and (and (= (type |k#0@@64|) BoxType) ($IsBox |k#0@@64| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@64|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@64|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@64|)))
 :qid |Mapsidfy.205:18|
 :skolemid |2862|
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@64|))
 :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@64|))
 :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@64|))
))) (forall ((|k#1@@9| T@U) ) (!  (=> (and (and (= (type |k#1@@9|) BoxType) ($IsBox |k#1@@9| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@9|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@9|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@9|)))
 :qid |Mapsidfy.206:18|
 :skolemid |2863|
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@9|))
 :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@9|))
 :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@9|))
))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)))
 :qid |Mapsidfy.207:18|
 :skolemid |2864|
 :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))
 :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|))
 :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))
))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))))
 :qid |unknown.0:0|
 :skolemid |2865|
 :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|))
))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@287 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@287) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (= (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@287 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)  (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))))
 :qid |unknown.0:0|
 :skolemid |2866|
 :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@287 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|))
)))
(assert (forall ((arg0@@541 T@U) (arg1@@263 T@U) (arg2@@157 T@U) (arg3@@95 T@U) (arg4@@58 T@U) ) (! (= (type (|lambda#220| arg0@@541 arg1@@263 arg2@@157 arg3@@95 arg4@@58)) (MapType0Type BoxType BoxType))
 :qid |funType:lambda#220|
 :pattern ( (|lambda#220| arg0@@541 arg1@@263 arg2@@157 arg3@@95 arg4@@58))
)))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@288 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@288) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@288) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#128| Maps._default.MapDisjointUnion3$U@@3 (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|))) (|lambda#220| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))))
 :qid |unknown.0:0|
 :skolemid |2867|
 :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@288) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|))
))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@289 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@289) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@289) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#128| Maps._default.MapDisjointUnion3$U@@4 (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#220| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2868|
 :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@289) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)))
))))
(assert (forall ((arg0@@542 T@U) (arg1@@264 T@U) (arg2@@158 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@542 arg1@@264 arg2@@158)) (IMapType BoxType BoxType))
 :qid |funType:Maps.__default.MapToImap|
 :pattern ( (Maps.__default.MapToImap arg0@@542 arg1@@264 arg2@@158))
)))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@97| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@97|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@97|) ($Is |m#0@@97| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@97|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))
 :qid |unknown.0:0|
 :skolemid |2869|
 :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@97|))
))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@98| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@98|) (MapType BoxType BoxType))) ($Is |m#0@@98| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (= (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@98|) true))
 :qid |unknown.0:0|
 :skolemid |2870|
 :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@98|))
)))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@99| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@99|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@99|) ($Is |m#0@@99| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@99|) (|IMap#Glue| (|lambda#128| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@99|)) (|lambda#107| (|Map#Elements| |m#0@@99|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1))))
 :qid |unknown.0:0|
 :skolemid |2871|
 :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@99|))
))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@100| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@100|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@100|)) ($Is |m#0@@100| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@100|)) (|IMap#Glue| (|lambda#128| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@100|)) (|lambda#107| (|Map#Elements| (Lit |m#0@@100|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2))))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2872|
 :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@100|)))
))))
(assert (forall ((arg0@@543 T@U) (arg1@@265 T@U) (arg2@@159 T@U) (arg3@@96 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@543 arg1@@265 arg2@@159 arg3@@96)) DatatypeTypeType)
 :qid |funType:Maps.__default.MapLookupOption|
 :pattern ( (Maps.__default.MapLookupOption arg0@@543 arg1@@265 arg2@@159 arg3@@96))
)))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@101| T@U) (|key#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@101|) (MapType BoxType BoxType))) (= (type |key#0@@14|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@101| |key#0@@14|) (and ($Is |m#0@@101| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@14| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@101| |key#0@@14|) (Tclass.Options.Option Maps._default.MapLookupOption$V)))
 :qid |unknown.0:0|
 :skolemid |2873|
 :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@101| |key#0@@14|))
))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@102| T@U) (|key#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@102|) (MapType BoxType BoxType))) (= (type |key#0@@15|) BoxType)) (and ($Is |m#0@@102| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@15| Maps._default.MapLookupOption$K@@0))) (= (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@102| |key#0@@15|) true))
 :qid |unknown.0:0|
 :skolemid |2874|
 :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@102| |key#0@@15|))
)))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@103| T@U) (|key#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@103|) (MapType BoxType BoxType))) (= (type |key#0@@16|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@103| |key#0@@16|) (and ($Is |m#0@@103| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@16| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@103| |key#0@@16|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@103|) |key#0@@16|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@103|) |key#0@@16|)) |#Options.Option.None|)))
 :qid |unknown.0:0|
 :skolemid |2875|
 :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@103| |key#0@@16|))
))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@104| T@U) (|key#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@104|) (MapType BoxType BoxType))) (= (type |key#0@@17|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@104|) |key#0@@17|) (and ($Is |m#0@@104| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@17| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@104|) |key#0@@17|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@104|) |key#0@@17|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@104|)) |key#0@@17|)) |#Options.Option.None|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2876|
 :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@104|) |key#0@@17|))
))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@105| T@U) (|key#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@105|) (MapType BoxType BoxType))) (= (type |key#0@@18|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@105|) (Lit |key#0@@18|)) (and ($Is |m#0@@105| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@18| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@105|) (Lit |key#0@@18|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@105|) |key#0@@18|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@105|)) (Lit |key#0@@18|))) |#Options.Option.None|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2877|
 :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@105|) (Lit |key#0@@18|)))
))))
(assert (forall ((arg0@@544 T@U) (arg1@@266 T@U) (arg2@@160 T@U) (arg3@@97 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@544 arg1@@266 arg2@@160 arg3@@97)) DatatypeTypeType)
 :qid |funType:Maps.__default.ImapLookupOption|
 :pattern ( (Maps.__default.ImapLookupOption arg0@@544 arg1@@266 arg2@@160 arg3@@97))
)))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@106| T@U) (|key#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@106|) (IMapType BoxType BoxType))) (= (type |key#0@@19|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@106| |key#0@@19|) (and ($Is |m#0@@106| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@19| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@106| |key#0@@19|) (Tclass.Options.Option Maps._default.ImapLookupOption$V)))
 :qid |unknown.0:0|
 :skolemid |2878|
 :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@106| |key#0@@19|))
))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@107| T@U) (|key#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@107|) (IMapType BoxType BoxType))) (= (type |key#0@@20|) BoxType)) (and ($Is |m#0@@107| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@20| Maps._default.ImapLookupOption$K@@0))) (= (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@107| |key#0@@20|) true))
 :qid |unknown.0:0|
 :skolemid |2879|
 :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@107| |key#0@@20|))
)))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@108| T@U) (|key#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@108|) (IMapType BoxType BoxType))) (= (type |key#0@@21|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@108| |key#0@@21|) (and ($Is |m#0@@108| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@21| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@108| |key#0@@21|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@108|) |key#0@@21|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@108|) |key#0@@21|)) |#Options.Option.None|)))
 :qid |unknown.0:0|
 :skolemid |2880|
 :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@108| |key#0@@21|))
))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@109| T@U) (|key#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@109|) (IMapType BoxType BoxType))) (= (type |key#0@@22|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@109|) (Lit |key#0@@22|)) (and ($Is |m#0@@109| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@22| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@109|) (Lit |key#0@@22|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@109|) |key#0@@22|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@109|)) (Lit |key#0@@22|))) |#Options.Option.None|)))
 :qid |unknown.0:0|
 :weight 3
 :skolemid |2881|
 :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@109|) (Lit |key#0@@22|)))
))))
(assert (forall ((arg0@@545 T@U) (arg1@@267 T@U) ) (! (= (type (|#MsgHistoryMod.KeyedMessage.KeyedMessage| arg0@@545 arg1@@267)) DatatypeTypeType)
 :qid |funType:#MsgHistoryMod.KeyedMessage.KeyedMessage|
 :pattern ( (|#MsgHistoryMod.KeyedMessage.KeyedMessage| arg0@@545 arg1@@267))
)))
(assert (forall ((|a#0#0#0@@4| T@U) (|a#0#1#0@@2| T@U) ) (!  (=> (and (= (type |a#0#0#0@@4|) (SeqType BoxType)) (= (type |a#0#1#0@@2|) DatatypeTypeType)) (= (DatatypeCtorId (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#0#0#0@@4| |a#0#1#0@@2|)) |##MsgHistoryMod.KeyedMessage.KeyedMessage|))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2882|
 :pattern ( (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#0#0#0@@4| |a#0#1#0@@2|))
)))
(assert (forall ((d@@84 T@U) ) (!  (=> (= (type d@@84) DatatypeTypeType) (= (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@84) (= (DatatypeCtorId d@@84) |##MsgHistoryMod.KeyedMessage.KeyedMessage|)))
 :qid |unknown.0:0|
 :skolemid |2883|
 :pattern ( (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@84))
)))
(assert (forall ((d@@85 T@U) ) (!  (=> (and (= (type d@@85) DatatypeTypeType) (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@85)) (exists ((|a#1#0#0@@4| T@U) (|a#1#1#0@@2| T@U) ) (!  (and (and (= (type |a#1#0#0@@4|) (SeqType BoxType)) (= (type |a#1#1#0@@2|) DatatypeTypeType)) (= d@@85 (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#1#0#0@@4| |a#1#1#0@@2|)))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2884|
 :no-pattern (type |a#1#0#0@@4|)
 :no-pattern (type |a#1#1#0@@2|)
 :no-pattern (U_2_int |a#1#0#0@@4|)
 :no-pattern (U_2_bool |a#1#0#0@@4|)
 :no-pattern (U_2_int |a#1#1#0@@2|)
 :no-pattern (U_2_bool |a#1#1#0@@2|)
)))
 :qid |unknown.0:0|
 :skolemid |2885|
 :pattern ( (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@85))
)))
(assert (forall ((|a#2#0#0@@4| T@U) (|a#2#1#0@@2| T@U) ) (!  (=> (and (= (type |a#2#0#0@@4|) (SeqType BoxType)) (= (type |a#2#1#0@@2|) DatatypeTypeType)) (= ($Is (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#2#0#0@@4| |a#2#1#0@@2|) Tclass.MsgHistoryMod.KeyedMessage)  (and ($Is |a#2#0#0@@4| Tclass.KeyType.Key) ($Is |a#2#1#0@@2| Tclass.ValueMessage.Message))))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2886|
 :pattern ( ($Is (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#2#0#0@@4| |a#2#1#0@@2|) Tclass.MsgHistoryMod.KeyedMessage))
)))
(assert (forall ((|a#3#0#0@@4| T@U) (|a#3#1#0@@2| T@U) ($h@@116 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@4|) (SeqType BoxType)) (= (type |a#3#1#0@@2|) DatatypeTypeType)) (= (type $h@@116) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@116)) (= ($IsAlloc (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#3#0#0@@4| |a#3#1#0@@2|) Tclass.MsgHistoryMod.KeyedMessage $h@@116)  (and ($IsAlloc |a#3#0#0@@4| Tclass.KeyType.Key $h@@116) ($IsAlloc |a#3#1#0@@2| Tclass.ValueMessage.Message $h@@116))))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2887|
 :pattern ( ($IsAlloc (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#3#0#0@@4| |a#3#1#0@@2|) Tclass.MsgHistoryMod.KeyedMessage $h@@116))
)))
(assert (forall ((arg0@@546 T@U) ) (! (= (type (MsgHistoryMod.KeyedMessage.key arg0@@546)) (SeqType BoxType))
 :qid |funType:MsgHistoryMod.KeyedMessage.key|
 :pattern ( (MsgHistoryMod.KeyedMessage.key arg0@@546))
)))
(assert (forall ((d@@86 T@U) ($h@@117 T@U) ) (!  (=> (and (and (= (type d@@86) DatatypeTypeType) (= (type $h@@117) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@117) (and (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@86) ($IsAlloc d@@86 Tclass.MsgHistoryMod.KeyedMessage $h@@117)))) ($IsAlloc (MsgHistoryMod.KeyedMessage.key d@@86) Tclass.KeyType.Key $h@@117))
 :qid |unknown.0:0|
 :skolemid |2888|
 :pattern ( ($IsAlloc (MsgHistoryMod.KeyedMessage.key d@@86) Tclass.KeyType.Key $h@@117))
)))
(assert (forall ((arg0@@547 T@U) ) (! (= (type (MsgHistoryMod.KeyedMessage.message arg0@@547)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.KeyedMessage.message|
 :pattern ( (MsgHistoryMod.KeyedMessage.message arg0@@547))
)))
(assert (forall ((d@@87 T@U) ($h@@118 T@U) ) (!  (=> (and (and (= (type d@@87) DatatypeTypeType) (= (type $h@@118) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@118) (and (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@87) ($IsAlloc d@@87 Tclass.MsgHistoryMod.KeyedMessage $h@@118)))) ($IsAlloc (MsgHistoryMod.KeyedMessage.message d@@87) Tclass.ValueMessage.Message $h@@118))
 :qid |unknown.0:0|
 :skolemid |2889|
 :pattern ( ($IsAlloc (MsgHistoryMod.KeyedMessage.message d@@87) Tclass.ValueMessage.Message $h@@118))
)))
(assert (forall ((|a#4#0#0@@4| T@U) (|a#4#1#0@@2| T@U) ) (!  (=> (and (= (type |a#4#0#0@@4|) (SeqType BoxType)) (= (type |a#4#1#0@@2|) DatatypeTypeType)) (= (|#MsgHistoryMod.KeyedMessage.KeyedMessage| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@2|)) (Lit (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#4#0#0@@4| |a#4#1#0@@2|))))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2890|
 :pattern ( (|#MsgHistoryMod.KeyedMessage.KeyedMessage| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@2|)))
)))
(assert (forall ((|a#5#0#0@@6| T@U) (|a#5#1#0@@3| T@U) ) (!  (=> (and (= (type |a#5#0#0@@6|) (SeqType BoxType)) (= (type |a#5#1#0@@3|) DatatypeTypeType)) (= (MsgHistoryMod.KeyedMessage.key (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#5#0#0@@6| |a#5#1#0@@3|)) |a#5#0#0@@6|))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2891|
 :pattern ( (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#5#0#0@@6| |a#5#1#0@@3|))
)))
(assert (forall ((|a#6#0#0@@6| T@U) (|a#6#1#0@@4| T@U) ) (!  (=> (and (= (type |a#6#0#0@@6|) (SeqType BoxType)) (= (type |a#6#1#0@@4|) DatatypeTypeType)) (= (MsgHistoryMod.KeyedMessage.message (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#6#0#0@@6| |a#6#1#0@@4|)) |a#6#1#0@@4|))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2892|
 :pattern ( (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#6#0#0@@6| |a#6#1#0@@4|))
)))
(assert (forall ((|a#7#0#0@@6| T@U) (|a#7#1#0@@4| T@U) ) (!  (=> (and (= (type |a#7#0#0@@6|) (SeqType BoxType)) (= (type |a#7#1#0@@4|) DatatypeTypeType)) (< (DtRank |a#7#1#0@@4|) (DtRank (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#7#0#0@@6| |a#7#1#0@@4|))))
 :qid |MsgHistoryidfy.25:40|
 :skolemid |2893|
 :pattern ( (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |a#7#0#0@@6| |a#7#1#0@@4|))
)))
(assert (forall ((d@@88 T@U) ) (!  (=> (and (= (type d@@88) DatatypeTypeType) (|$IsA#MsgHistoryMod.KeyedMessage| d@@88)) (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@88))
 :qid |unknown.0:0|
 :skolemid |2894|
 :pattern ( (|$IsA#MsgHistoryMod.KeyedMessage| d@@88))
)))
(assert (forall ((d@@89 T@U) ) (!  (=> (and (= (type d@@89) DatatypeTypeType) ($Is d@@89 Tclass.MsgHistoryMod.KeyedMessage)) (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@89))
 :qid |unknown.0:0|
 :skolemid |2895|
 :pattern ( (MsgHistoryMod.KeyedMessage.KeyedMessage_q d@@89) ($Is d@@89 Tclass.MsgHistoryMod.KeyedMessage))
)))
(assert (forall ((a@@144 T@U) (b@@94 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) true) (= (|MsgHistoryMod.KeyedMessage#Equal| a@@144 b@@94)  (and (|Seq#Equal| (MsgHistoryMod.KeyedMessage.key a@@144) (MsgHistoryMod.KeyedMessage.key b@@94)) (|ValueMessage.Message#Equal| (MsgHistoryMod.KeyedMessage.message a@@144) (MsgHistoryMod.KeyedMessage.message b@@94)))))
 :qid |unknown.0:0|
 :skolemid |2896|
 :pattern ( (|MsgHistoryMod.KeyedMessage#Equal| a@@144 b@@94))
)))
(assert (forall ((a@@145 T@U) (b@@95 T@U) ) (!  (=> (and (= (type a@@145) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (= (|MsgHistoryMod.KeyedMessage#Equal| a@@145 b@@95) (= a@@145 b@@95)))
 :qid |unknown.0:0|
 :skolemid |2897|
 :pattern ( (|MsgHistoryMod.KeyedMessage#Equal| a@@145 b@@95))
)))
(assert (forall ((arg0@@548 T@U) (arg1@@268 Int) (arg2@@161 Int) ) (! (= (type (|#MsgHistoryMod.MsgHistory.MsgHistory| arg0@@548 arg1@@268 arg2@@161)) DatatypeTypeType)
 :qid |funType:#MsgHistoryMod.MsgHistory.MsgHistory|
 :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| arg0@@548 arg1@@268 arg2@@161))
)))
(assert (forall ((|a#8#0#0@@5| T@U) (|a#8#1#0@@3| Int) (|a#8#2#0@@0| Int) ) (!  (=> (= (type |a#8#0#0@@5|) (MapType BoxType BoxType)) (= (DatatypeCtorId (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#8#0#0@@5| |a#8#1#0@@3| |a#8#2#0@@0|)) |##MsgHistoryMod.MsgHistory.MsgHistory|))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2898|
 :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#8#0#0@@5| |a#8#1#0@@3| |a#8#2#0@@0|))
)))
(assert (forall ((d@@90 T@U) ) (!  (=> (= (type d@@90) DatatypeTypeType) (= (MsgHistoryMod.MsgHistory.MsgHistory_q d@@90) (= (DatatypeCtorId d@@90) |##MsgHistoryMod.MsgHistory.MsgHistory|)))
 :qid |unknown.0:0|
 :skolemid |2899|
 :pattern ( (MsgHistoryMod.MsgHistory.MsgHistory_q d@@90))
)))
(assert (forall ((d@@91 T@U) ) (!  (=> (and (= (type d@@91) DatatypeTypeType) (MsgHistoryMod.MsgHistory.MsgHistory_q d@@91)) (exists ((|a#9#0#0@@3| T@U) (|a#9#1#0@@1| Int) (|a#9#2#0@@0| Int) ) (!  (and (= (type |a#9#0#0@@3|) (MapType BoxType BoxType)) (= d@@91 (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#9#0#0@@3| |a#9#1#0@@1| |a#9#2#0@@0|)))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2900|
 :no-pattern (type |a#9#0#0@@3|)
 :no-pattern (U_2_int |a#9#0#0@@3|)
 :no-pattern (U_2_bool |a#9#0#0@@3|)
)))
 :qid |unknown.0:0|
 :skolemid |2901|
 :pattern ( (MsgHistoryMod.MsgHistory.MsgHistory_q d@@91))
)))
(assert (forall ((|a#10#0#0@@3| T@U) (|a#10#1#0@@1| Int) (|a#10#2#0@@0| Int) ) (!  (=> (= (type |a#10#0#0@@3|) (MapType BoxType BoxType)) (= ($Is (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#10#0#0@@3| |a#10#1#0@@1| |a#10#2#0@@0|) Tclass.MsgHistoryMod.MsgHistory)  (and (and ($Is |a#10#0#0@@3| (TMap Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage)) ($Is (int_2_U |a#10#1#0@@1|) Tclass._System.nat)) ($Is (int_2_U |a#10#2#0@@0|) Tclass._System.nat))))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2902|
 :pattern ( ($Is (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#10#0#0@@3| |a#10#1#0@@1| |a#10#2#0@@0|) Tclass.MsgHistoryMod.MsgHistory))
)))
(assert (forall ((|a#11#0#0@@3| T@U) (|a#11#1#0@@1| Int) (|a#11#2#0@@0| Int) ($h@@119 T@U) ) (!  (=> (and (and (= (type |a#11#0#0@@3|) (MapType BoxType BoxType)) (= (type $h@@119) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@119)) (= ($IsAlloc (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#11#0#0@@3| |a#11#1#0@@1| |a#11#2#0@@0|) Tclass.MsgHistoryMod.MsgHistory $h@@119)  (and (and ($IsAlloc |a#11#0#0@@3| (TMap Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage) $h@@119) ($IsAlloc (int_2_U |a#11#1#0@@1|) Tclass._System.nat $h@@119)) ($IsAlloc (int_2_U |a#11#2#0@@0|) Tclass._System.nat $h@@119))))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2903|
 :pattern ( ($IsAlloc (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#11#0#0@@3| |a#11#1#0@@1| |a#11#2#0@@0|) Tclass.MsgHistoryMod.MsgHistory $h@@119))
)))
(assert (forall ((d@@92 T@U) ($h@@120 T@U) ) (!  (=> (and (and (= (type d@@92) DatatypeTypeType) (= (type $h@@120) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@120) (and (MsgHistoryMod.MsgHistory.MsgHistory_q d@@92) ($IsAlloc d@@92 Tclass.MsgHistoryMod.MsgHistory $h@@120)))) ($IsAlloc (MsgHistoryMod.MsgHistory.msgs d@@92) (TMap Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage) $h@@120))
 :qid |unknown.0:0|
 :skolemid |2904|
 :pattern ( ($IsAlloc (MsgHistoryMod.MsgHistory.msgs d@@92) (TMap Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage) $h@@120))
)))
(assert (forall ((d@@93 T@U) ($h@@121 T@U) ) (!  (=> (and (and (= (type d@@93) DatatypeTypeType) (= (type $h@@121) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@121) (and (MsgHistoryMod.MsgHistory.MsgHistory_q d@@93) ($IsAlloc d@@93 Tclass.MsgHistoryMod.MsgHistory $h@@121)))) ($IsAlloc (int_2_U (MsgHistoryMod.MsgHistory.seqStart d@@93)) Tclass._System.nat $h@@121))
 :qid |unknown.0:0|
 :skolemid |2905|
 :pattern ( ($IsAlloc (int_2_U (MsgHistoryMod.MsgHistory.seqStart d@@93)) Tclass._System.nat $h@@121))
)))
(assert (forall ((d@@94 T@U) ($h@@122 T@U) ) (!  (=> (and (and (= (type d@@94) DatatypeTypeType) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@122) (and (MsgHistoryMod.MsgHistory.MsgHistory_q d@@94) ($IsAlloc d@@94 Tclass.MsgHistoryMod.MsgHistory $h@@122)))) ($IsAlloc (int_2_U (MsgHistoryMod.MsgHistory.seqEnd d@@94)) Tclass._System.nat $h@@122))
 :qid |unknown.0:0|
 :skolemid |2906|
 :pattern ( ($IsAlloc (int_2_U (MsgHistoryMod.MsgHistory.seqEnd d@@94)) Tclass._System.nat $h@@122))
)))
(assert (forall ((|a#12#0#0@@2| T@U) (|a#12#1#0@@1| Int) (|a#12#2#0@@0| Int) ) (!  (=> (= (type |a#12#0#0@@2|) (MapType BoxType BoxType)) (= (|#MsgHistoryMod.MsgHistory.MsgHistory| (Lit |a#12#0#0@@2|) (LitInt |a#12#1#0@@1|) (LitInt |a#12#2#0@@0|)) (Lit (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#12#0#0@@2| |a#12#1#0@@1| |a#12#2#0@@0|))))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2907|
 :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| (Lit |a#12#0#0@@2|) (LitInt |a#12#1#0@@1|) (LitInt |a#12#2#0@@0|)))
)))
(assert (forall ((|a#13#0#0@@0| T@U) (|a#13#1#0@@0| Int) (|a#13#2#0@@0| Int) ) (!  (=> (= (type |a#13#0#0@@0|) (MapType BoxType BoxType)) (= (MsgHistoryMod.MsgHistory.msgs (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0@@0|)) |a#13#0#0@@0|))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2908|
 :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0@@0|))
)))
(assert (forall ((|a#14#0#0@@1| T@U) (|a#14#1#0@@1| Int) (|a#14#2#0@@0| Int) (d@@95 T@U) ) (!  (=> (and (and (= (type |a#14#0#0@@1|) (MapType BoxType BoxType)) (= (type d@@95) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#14#0#0@@1|) ($Box d@@95)))) (< (DtRank d@@95) (DtRank (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#14#0#0@@1| |a#14#1#0@@1| |a#14#2#0@@0|))))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2909|
 :pattern ( (MapType0Select (|Map#Domain| |a#14#0#0@@1|) ($Box d@@95)) (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#14#0#0@@1| |a#14#1#0@@1| |a#14#2#0@@0|))
)))
(assert (forall ((|a#15#0#0@@1| T@U) (|a#15#1#0@@1| Int) (|a#15#2#0@@0| Int) (bx@@161 T@U) ) (!  (=> (and (and (= (type |a#15#0#0@@1|) (MapType BoxType BoxType)) (= (type bx@@161) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#15#0#0@@1|) bx@@161))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#15#0#0@@1|) bx@@161))) (DtRank (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#15#0#0@@1| |a#15#1#0@@1| |a#15#2#0@@0|))))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2910|
 :pattern ( (MapType0Select (|Map#Domain| |a#15#0#0@@1|) bx@@161) (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#15#0#0@@1| |a#15#1#0@@1| |a#15#2#0@@0|))
)))
(assert (forall ((|a#16#0#0@@1| T@U) (|a#16#1#0@@1| Int) (|a#16#2#0@@0| Int) ) (!  (=> (= (type |a#16#0#0@@1|) (MapType BoxType BoxType)) (= (MsgHistoryMod.MsgHistory.seqStart (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#16#0#0@@1| |a#16#1#0@@1| |a#16#2#0@@0|)) |a#16#1#0@@1|))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2911|
 :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#16#0#0@@1| |a#16#1#0@@1| |a#16#2#0@@0|))
)))
(assert (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0@@0| Int) (|a#17#2#0| Int) ) (!  (=> (= (type |a#17#0#0@@0|) (MapType BoxType BoxType)) (= (MsgHistoryMod.MsgHistory.seqEnd (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#17#0#0@@0| |a#17#1#0@@0| |a#17#2#0|)) |a#17#2#0|))
 :qid |MsgHistoryidfy.28:36|
 :skolemid |2912|
 :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#17#0#0@@0| |a#17#1#0@@0| |a#17#2#0|))
)))
(assert (forall ((d@@96 T@U) ) (!  (=> (and (= (type d@@96) DatatypeTypeType) (|$IsA#MsgHistoryMod.MsgHistory| d@@96)) (MsgHistoryMod.MsgHistory.MsgHistory_q d@@96))
 :qid |unknown.0:0|
 :skolemid |2913|
 :pattern ( (|$IsA#MsgHistoryMod.MsgHistory| d@@96))
)))
(assert (forall ((d@@97 T@U) ) (!  (=> (and (= (type d@@97) DatatypeTypeType) ($Is d@@97 Tclass.MsgHistoryMod.MsgHistory)) (MsgHistoryMod.MsgHistory.MsgHistory_q d@@97))
 :qid |unknown.0:0|
 :skolemid |2914|
 :pattern ( (MsgHistoryMod.MsgHistory.MsgHistory_q d@@97) ($Is d@@97 Tclass.MsgHistoryMod.MsgHistory))
)))
(assert (forall ((a@@146 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@146) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) true) (= (|MsgHistoryMod.MsgHistory#Equal| a@@146 b@@96)  (and (and (|Map#Equal| (MsgHistoryMod.MsgHistory.msgs a@@146) (MsgHistoryMod.MsgHistory.msgs b@@96)) (= (MsgHistoryMod.MsgHistory.seqStart a@@146) (MsgHistoryMod.MsgHistory.seqStart b@@96))) (= (MsgHistoryMod.MsgHistory.seqEnd a@@146) (MsgHistoryMod.MsgHistory.seqEnd b@@96)))))
 :qid |unknown.0:0|
 :skolemid |2915|
 :pattern ( (|MsgHistoryMod.MsgHistory#Equal| a@@146 b@@96))
)))
(assert (forall ((a@@147 T@U) (b@@97 T@U) ) (!  (=> (and (= (type a@@147) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (= (|MsgHistoryMod.MsgHistory#Equal| a@@147 b@@97) (= a@@147 b@@97)))
 :qid |unknown.0:0|
 :skolemid |2916|
 :pattern ( (|MsgHistoryMod.MsgHistory#Equal| a@@147 b@@97))
)))
(assert  (=> true (forall ((this@@43 T@U) ) (!  (=> (and (= (type this@@43) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.WF#canCall| this@@43) ($Is this@@43 Tclass.MsgHistoryMod.MsgHistory))) true)
 :qid |MsgHistoryidfy.34:15|
 :skolemid |2917|
 :pattern ( (MsgHistoryMod.MsgHistory.WF this@@43))
))))
(assert (forall ((this@@44 T@U) ) (!  (=> (and (= (type this@@44) DatatypeTypeType) ($Is this@@44 Tclass.MsgHistoryMod.MsgHistory)) (= (|MsgHistoryMod.MsgHistory.WF#requires| this@@44) true))
 :qid |MsgHistoryidfy.34:15|
 :skolemid |2918|
 :pattern ( (|MsgHistoryMod.MsgHistory.WF#requires| this@@44))
)))
(assert  (=> true (forall ((this@@45 T@U) ) (!  (=> (and (= (type this@@45) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.WF#canCall| this@@45) ($Is this@@45 Tclass.MsgHistoryMod.MsgHistory))) (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@45) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@45)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@45) (MsgHistoryMod.MsgHistory.seqEnd this@@45)) (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@45) (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| this@@45 (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs this@@45)))))) (= (MsgHistoryMod.MsgHistory.WF this@@45)  (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@45) (MsgHistoryMod.MsgHistory.seqEnd this@@45)) (MsgHistoryMod.MsgHistory.ContainsExactly this@@45 (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs this@@45)))))))
 :qid |MsgHistoryidfy.34:15|
 :skolemid |2919|
 :pattern ( (MsgHistoryMod.MsgHistory.WF this@@45))
))))
(assert  (=> true (forall ((this@@46 T@U) ) (!  (=> (and (= (type this@@46) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit this@@46)) ($Is this@@46 Tclass.MsgHistoryMod.MsgHistory))) (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@46)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@46))) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@46)) (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@46))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@46)) (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| (Lit this@@46) (Lit (|Map#Domain| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@46))))))))) (= (MsgHistoryMod.MsgHistory.WF (Lit this@@46))  (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@46)) (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@46))) (MsgHistoryMod.MsgHistory.ContainsExactly (Lit this@@46) (Lit (|Map#Domain| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@46))))))))))
 :qid |MsgHistoryidfy.34:15|
 :weight 3
 :skolemid |2920|
 :pattern ( (MsgHistoryMod.MsgHistory.WF (Lit this@@46)))
))))
(assert  (=> true (forall ((this@@47 T@U) (|lsns#0| T@U) ) (!  (=> (and (and (= (type this@@47) DatatypeTypeType) (= (type |lsns#0|) (MapType0Type BoxType boolType))) (or (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| this@@47 |lsns#0|) (and ($Is this@@47 Tclass.MsgHistoryMod.MsgHistory) ($Is |lsns#0| (TSet Tclass._System.nat))))) true)
 :qid |MsgHistoryidfy.40:15|
 :skolemid |2921|
 :pattern ( (MsgHistoryMod.MsgHistory.ContainsExactly this@@47 |lsns#0|))
))))
(assert (forall ((this@@48 T@U) (|lsns#0@@0| T@U) ) (!  (=> (and (and (= (type this@@48) DatatypeTypeType) (= (type |lsns#0@@0|) (MapType0Type BoxType boolType))) (and ($Is this@@48 Tclass.MsgHistoryMod.MsgHistory) ($Is |lsns#0@@0| (TSet Tclass._System.nat)))) (= (|MsgHistoryMod.MsgHistory.ContainsExactly#requires| this@@48 |lsns#0@@0|) true))
 :qid |MsgHistoryidfy.40:15|
 :skolemid |2922|
 :pattern ( (|MsgHistoryMod.MsgHistory.ContainsExactly#requires| this@@48 |lsns#0@@0|))
)))
(assert  (=> true (forall ((this@@49 T@U) (|lsns#0@@1| T@U) ) (!  (=> (and (and (= (type this@@49) DatatypeTypeType) (= (type |lsns#0@@1|) (MapType0Type BoxType boolType))) (or (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| this@@49 |lsns#0@@1|) (and ($Is this@@49 Tclass.MsgHistoryMod.MsgHistory) ($Is |lsns#0@@1| (TSet Tclass._System.nat))))) (and (forall ((|lsn#0@@1| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#0@@1|) (|MsgHistoryMod.MsgHistory.Contains#canCall| this@@49 |lsn#0@@1|))
 :qid |MsgHistoryidfy.42:14|
 :skolemid |2924|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@49 |lsn#0@@1|))
 :pattern ( (MapType0Select |lsns#0@@1| ($Box (int_2_U |lsn#0@@1|))))
)) (= (MsgHistoryMod.MsgHistory.ContainsExactly this@@49 |lsns#0@@1|) (forall ((|lsn#0@@2| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#0@@2|) (= (U_2_bool (MapType0Select |lsns#0@@1| ($Box (int_2_U |lsn#0@@2|)))) (MsgHistoryMod.MsgHistory.Contains this@@49 |lsn#0@@2|)))
 :qid |MsgHistoryidfy.42:14|
 :skolemid |2923|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@49 |lsn#0@@2|))
 :pattern ( (MapType0Select |lsns#0@@1| ($Box (int_2_U |lsn#0@@2|))))
)))))
 :qid |MsgHistoryidfy.40:15|
 :skolemid |2925|
 :pattern ( (MsgHistoryMod.MsgHistory.ContainsExactly this@@49 |lsns#0@@1|))
))))
(assert  (=> true (forall ((this@@50 T@U) (|lsns#0@@2| T@U) ) (!  (=> (and (and (= (type this@@50) DatatypeTypeType) (= (type |lsns#0@@2|) (MapType0Type BoxType boolType))) (or (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| (Lit this@@50) (Lit |lsns#0@@2|)) (and ($Is this@@50 Tclass.MsgHistoryMod.MsgHistory) ($Is |lsns#0@@2| (TSet Tclass._System.nat))))) (and (forall ((|lsn#1@@1| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#1@@1|) (|MsgHistoryMod.MsgHistory.Contains#canCall| (Lit this@@50) |lsn#1@@1|))
 :qid |MsgHistoryidfy.42:14|
 :skolemid |2927|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@50 |lsn#1@@1|))
 :pattern ( (MapType0Select |lsns#0@@2| ($Box (int_2_U |lsn#1@@1|))))
)) (= (MsgHistoryMod.MsgHistory.ContainsExactly (Lit this@@50) (Lit |lsns#0@@2|)) (forall ((|lsn#1@@2| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#1@@2|) (= (U_2_bool (MapType0Select (Lit |lsns#0@@2|) ($Box (int_2_U |lsn#1@@2|)))) (MsgHistoryMod.MsgHistory.Contains (Lit this@@50) |lsn#1@@2|)))
 :qid |MsgHistoryidfy.42:14|
 :skolemid |2926|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@50 |lsn#1@@2|))
 :pattern ( (MapType0Select |lsns#0@@2| ($Box (int_2_U |lsn#1@@2|))))
)))))
 :qid |MsgHistoryidfy.40:15|
 :weight 3
 :skolemid |2928|
 :pattern ( (MsgHistoryMod.MsgHistory.ContainsExactly (Lit this@@50) (Lit |lsns#0@@2|)))
))))
(assert  (=> true (forall ((this@@51 T@U) (|lsn#0@@3| Int) ) (!  (=> (and (= (type this@@51) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.Contains#canCall| this@@51 |lsn#0@@3|) (and ($Is this@@51 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@3|)))) true)
 :qid |MsgHistoryidfy.45:15|
 :skolemid |2929|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@51 |lsn#0@@3|))
))))
(assert (forall ((this@@52 T@U) (|lsn#0@@4| Int) ) (!  (=> (= (type this@@52) DatatypeTypeType) (=> (and ($Is this@@52 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@4|)) (= (|MsgHistoryMod.MsgHistory.Contains#requires| this@@52 |lsn#0@@4|) true)))
 :qid |MsgHistoryidfy.45:15|
 :skolemid |2930|
 :pattern ( (|MsgHistoryMod.MsgHistory.Contains#requires| this@@52 |lsn#0@@4|))
)))
(assert  (=> true (forall ((this@@53 T@U) (|lsn#0@@5| Int) ) (!  (=> (and (= (type this@@53) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.Contains#canCall| this@@53 |lsn#0@@5|) (and ($Is this@@53 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@5|)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@53) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@53) |lsn#0@@5|) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@53)))) (= (MsgHistoryMod.MsgHistory.Contains this@@53 |lsn#0@@5|)  (and true (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@53) |lsn#0@@5|) (INTERNAL_lt_boogie |lsn#0@@5| (MsgHistoryMod.MsgHistory.seqEnd this@@53)))))))
 :qid |MsgHistoryidfy.45:15|
 :skolemid |2931|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@53 |lsn#0@@5|))
))))
(assert  (=> true (forall ((this@@54 T@U) (|lsn#0@@6| Int) ) (!  (=> (and (= (type this@@54) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.Contains#canCall| (Lit this@@54) (LitInt |lsn#0@@6|)) (and ($Is this@@54 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@6|)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@54)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@54)) |lsn#0@@6|) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@54))))) (= (MsgHistoryMod.MsgHistory.Contains (Lit this@@54) (LitInt |lsn#0@@6|))  (and true (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@54)) |lsn#0@@6|) (INTERNAL_lt_boogie |lsn#0@@6| (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@54))))))))
 :qid |MsgHistoryidfy.45:15|
 :weight 3
 :skolemid |2932|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains (Lit this@@54) (LitInt |lsn#0@@6|)))
))))
(assert (forall ((arg0@@549 T@U) (arg1@@269 T@U) ) (! (= (type (MsgHistoryMod.MsgHistory.LSNSet arg0@@549 arg1@@269)) (MapType0Type BoxType boolType))
 :qid |funType:MsgHistoryMod.MsgHistory.LSNSet|
 :pattern ( (MsgHistoryMod.MsgHistory.LSNSet arg0@@549 arg1@@269))
)))
(assert (forall (($ly@@290 T@U) (this@@55 T@U) ) (!  (=> (and (= (type $ly@@290) LayerTypeType) (= (type this@@55) DatatypeTypeType)) (= (MsgHistoryMod.MsgHistory.LSNSet ($LS $ly@@290) this@@55) (MsgHistoryMod.MsgHistory.LSNSet $ly@@290 this@@55)))
 :qid |MsgHistoryidfy.52:24|
 :skolemid |2933|
 :pattern ( (MsgHistoryMod.MsgHistory.LSNSet ($LS $ly@@290) this@@55))
)))
(assert (forall (($ly@@291 T@U) (this@@56 T@U) ) (!  (=> (and (= (type $ly@@291) LayerTypeType) (= (type this@@56) DatatypeTypeType)) (= (MsgHistoryMod.MsgHistory.LSNSet $ly@@291 this@@56) (MsgHistoryMod.MsgHistory.LSNSet $LZ this@@56)))
 :qid |MsgHistoryidfy.52:24|
 :skolemid |2934|
 :pattern ( (MsgHistoryMod.MsgHistory.LSNSet (AsFuelBottom $ly@@291) this@@56))
)))
(assert  (=> true (forall (($ly@@292 T@U) (this@@57 T@U) ) (!  (=> (and (and (= (type $ly@@292) LayerTypeType) (= (type this@@57) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.LSNSet#canCall| this@@57) ($Is this@@57 Tclass.MsgHistoryMod.MsgHistory))) (and (MsgHistoryMod.MsgHistory.ContainsExactly this@@57 (MsgHistoryMod.MsgHistory.LSNSet $ly@@292 this@@57)) ($Is (MsgHistoryMod.MsgHistory.LSNSet $ly@@292 this@@57) (TSet Tclass._System.nat))))
 :qid |MsgHistoryidfy.52:24|
 :skolemid |2935|
 :pattern ( (MsgHistoryMod.MsgHistory.LSNSet $ly@@292 this@@57))
))))
(assert (forall (($ly@@293 T@U) (this@@58 T@U) ) (!  (=> (and (and (= (type $ly@@293) LayerTypeType) (= (type this@@58) DatatypeTypeType)) ($Is this@@58 Tclass.MsgHistoryMod.MsgHistory)) (= (|MsgHistoryMod.MsgHistory.LSNSet#requires| $ly@@293 this@@58) true))
 :qid |MsgHistoryidfy.52:24|
 :skolemid |2936|
 :pattern ( (|MsgHistoryMod.MsgHistory.LSNSet#requires| $ly@@293 this@@58))
)))
(assert (forall ((arg0@@550 T@U) (arg1@@270 Int) (arg2@@162 Int) ) (! (= (type (|lambda#227| arg0@@550 arg1@@270 arg2@@162)) (MapType0Type BoxType boolType))
 :qid |funType:lambda#227|
 :pattern ( (|lambda#227| arg0@@550 arg1@@270 arg2@@162))
)))
(assert  (=> true (forall (($ly@@294 T@U) (this@@59 T@U) ) (!  (=> (and (and (= (type $ly@@294) LayerTypeType) (= (type this@@59) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.LSNSet#canCall| this@@59) ($Is this@@59 Tclass.MsgHistoryMod.MsgHistory))) (and (forall ((|lsn#0@@7| Int) ) (!  (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@59) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@59) |lsn#0@@7|) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@59)))
 :qid |MsgHistoryidfy.55:11|
 :skolemid |2937|
 :pattern ( (INTERNAL_lt_boogie |lsn#0@@7| (MsgHistoryMod.MsgHistory.seqEnd this@@59)))
 :pattern ( (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@59) |lsn#0@@7|))
)) (= (MsgHistoryMod.MsgHistory.LSNSet ($LS $ly@@294) this@@59) (|lambda#227| TInt (MsgHistoryMod.MsgHistory.seqStart this@@59) (MsgHistoryMod.MsgHistory.seqEnd this@@59)))))
 :qid |MsgHistoryidfy.52:24|
 :skolemid |2938|
 :pattern ( (MsgHistoryMod.MsgHistory.LSNSet ($LS $ly@@294) this@@59))
))))
(assert  (=> true (forall (($ly@@295 T@U) (this@@60 T@U) ) (!  (=> (and (and (= (type $ly@@295) LayerTypeType) (= (type this@@60) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.LSNSet#canCall| (Lit this@@60)) ($Is this@@60 Tclass.MsgHistoryMod.MsgHistory))) (and (forall ((|lsn#1@@3| Int) ) (!  (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@60)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@60)) |lsn#1@@3|) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@60))))
 :qid |MsgHistoryidfy.55:11|
 :skolemid |2939|
 :pattern ( (INTERNAL_lt_boogie |lsn#1@@3| (MsgHistoryMod.MsgHistory.seqEnd this@@60)))
 :pattern ( (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@60) |lsn#1@@3|))
)) (= (MsgHistoryMod.MsgHistory.LSNSet ($LS $ly@@295) (Lit this@@60)) (|lambda#227| TInt (MsgHistoryMod.MsgHistory.seqStart (Lit this@@60)) (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@60))))))
 :qid |MsgHistoryidfy.52:24|
 :weight 3
 :skolemid |2940|
 :pattern ( (MsgHistoryMod.MsgHistory.LSNSet ($LS $ly@@295) (Lit this@@60)))
))))
(assert  (=> true (forall ((this@@61 T@U) ) (!  (=> (and (= (type this@@61) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| this@@61) (and ($Is this@@61 Tclass.MsgHistoryMod.MsgHistory) (MsgHistoryMod.MsgHistory.WF this@@61)))) true)
 :qid |MsgHistoryidfy.58:15|
 :skolemid |2941|
 :pattern ( (MsgHistoryMod.MsgHistory.IsEmpty this@@61))
))))
(assert (forall ((this@@62 T@U) ) (!  (=> (and (= (type this@@62) DatatypeTypeType) ($Is this@@62 Tclass.MsgHistoryMod.MsgHistory)) (= (|MsgHistoryMod.MsgHistory.IsEmpty#requires| this@@62) (MsgHistoryMod.MsgHistory.WF this@@62)))
 :qid |MsgHistoryidfy.58:15|
 :skolemid |2942|
 :pattern ( (|MsgHistoryMod.MsgHistory.IsEmpty#requires| this@@62))
)))
(assert  (=> true (forall ((this@@63 T@U) ) (!  (=> (and (= (type this@@63) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| this@@63) (and ($Is this@@63 Tclass.MsgHistoryMod.MsgHistory) (MsgHistoryMod.MsgHistory.WF this@@63)))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@63) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@63)) (= (MsgHistoryMod.MsgHistory.IsEmpty this@@63) (= (MsgHistoryMod.MsgHistory.seqEnd this@@63) (MsgHistoryMod.MsgHistory.seqStart this@@63)))))
 :qid |MsgHistoryidfy.58:15|
 :skolemid |2943|
 :pattern ( (MsgHistoryMod.MsgHistory.IsEmpty this@@63))
))))
(assert  (=> true (forall ((this@@64 T@U) ) (!  (=> (and (= (type this@@64) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| (Lit this@@64)) (and ($Is this@@64 Tclass.MsgHistoryMod.MsgHistory) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@64)))))))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@64)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@64))) (= (MsgHistoryMod.MsgHistory.IsEmpty (Lit this@@64)) (= (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@64))) (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit this@@64)))))))
 :qid |MsgHistoryidfy.58:15|
 :weight 3
 :skolemid |2944|
 :pattern ( (MsgHistoryMod.MsgHistory.IsEmpty (Lit this@@64)))
))))
(assert  (=> true (forall ((this@@65 T@U) ) (!  (=> (and (= (type this@@65) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.Len#canCall| this@@65) (and ($Is this@@65 Tclass.MsgHistoryMod.MsgHistory) (MsgHistoryMod.MsgHistory.WF this@@65)))) (INTERNAL_le_boogie 0 (MsgHistoryMod.MsgHistory.Len this@@65)))
 :qid |MsgHistoryidfy.64:14|
 :skolemid |2945|
 :pattern ( (MsgHistoryMod.MsgHistory.Len this@@65))
))))
(assert (forall ((this@@66 T@U) ) (!  (=> (and (= (type this@@66) DatatypeTypeType) ($Is this@@66 Tclass.MsgHistoryMod.MsgHistory)) (= (|MsgHistoryMod.MsgHistory.Len#requires| this@@66) (MsgHistoryMod.MsgHistory.WF this@@66)))
 :qid |MsgHistoryidfy.64:14|
 :skolemid |2946|
 :pattern ( (|MsgHistoryMod.MsgHistory.Len#requires| this@@66))
)))
(assert  (=> true (forall ((this@@67 T@U) ) (!  (=> (and (= (type this@@67) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.Len#canCall| this@@67) (and ($Is this@@67 Tclass.MsgHistoryMod.MsgHistory) (MsgHistoryMod.MsgHistory.WF this@@67)))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@67) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@67)) (= (MsgHistoryMod.MsgHistory.Len this@@67) (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd this@@67) (MsgHistoryMod.MsgHistory.seqStart this@@67)))))
 :qid |MsgHistoryidfy.64:14|
 :skolemid |2947|
 :pattern ( (MsgHistoryMod.MsgHistory.Len this@@67))
))))
(assert  (=> true (forall ((this@@68 T@U) ) (!  (=> (and (= (type this@@68) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.Len#canCall| (Lit this@@68)) (and ($Is this@@68 Tclass.MsgHistoryMod.MsgHistory) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@68)))))))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@68)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@68))) (= (MsgHistoryMod.MsgHistory.Len (Lit this@@68)) (LitInt (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@68)) (MsgHistoryMod.MsgHistory.seqStart (Lit this@@68)))))))
 :qid |MsgHistoryidfy.64:14|
 :weight 3
 :skolemid |2948|
 :pattern ( (MsgHistoryMod.MsgHistory.Len (Lit this@@68)))
))))
(assert  (=> true (forall ((this@@69 T@U) (|other#0| T@U) ) (!  (=> (and (and (= (type this@@69) DatatypeTypeType) (= (type |other#0|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.CanConcat#canCall| this@@69 |other#0|) (and (and ($Is this@@69 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF this@@69) (MsgHistoryMod.MsgHistory.WF |other#0|))))) true)
 :qid |MsgHistoryidfy.70:15|
 :skolemid |2949|
 :pattern ( (MsgHistoryMod.MsgHistory.CanConcat this@@69 |other#0|))
))))
(assert (forall ((this@@70 T@U) (|other#0@@0| T@U) ) (!  (=> (and (and (= (type this@@70) DatatypeTypeType) (= (type |other#0@@0|) DatatypeTypeType)) (and ($Is this@@70 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0@@0| Tclass.MsgHistoryMod.MsgHistory))) (= (|MsgHistoryMod.MsgHistory.CanConcat#requires| this@@70 |other#0@@0|)  (and (MsgHistoryMod.MsgHistory.WF this@@70) (MsgHistoryMod.MsgHistory.WF |other#0@@0|))))
 :qid |MsgHistoryidfy.70:15|
 :skolemid |2950|
 :pattern ( (|MsgHistoryMod.MsgHistory.CanConcat#requires| this@@70 |other#0@@0|))
)))
(assert  (=> true (forall ((this@@71 T@U) (|other#0@@1| T@U) ) (!  (=> (and (and (= (type this@@71) DatatypeTypeType) (= (type |other#0@@1|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.CanConcat#canCall| this@@71 |other#0@@1|) (and (and ($Is this@@71 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0@@1| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF this@@71) (MsgHistoryMod.MsgHistory.WF |other#0@@1|))))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@71) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| |other#0@@1| (MsgHistoryMod.MsgHistory.seqEnd this@@71))) (= (MsgHistoryMod.MsgHistory.CanConcat this@@71 |other#0@@1|) (MsgHistoryMod.MsgHistory.CanFollow |other#0@@1| (MsgHistoryMod.MsgHistory.seqEnd this@@71)))))
 :qid |MsgHistoryidfy.70:15|
 :skolemid |2951|
 :pattern ( (MsgHistoryMod.MsgHistory.CanConcat this@@71 |other#0@@1|))
))))
(assert  (=> true (forall ((this@@72 T@U) (|other#0@@2| T@U) ) (!  (=> (and (and (= (type this@@72) DatatypeTypeType) (= (type |other#0@@2|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.CanConcat#canCall| (Lit this@@72) (Lit |other#0@@2|)) (and (and ($Is this@@72 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0@@2| Tclass.MsgHistoryMod.MsgHistory)) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@72))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit |other#0@@2|))))))))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@72)) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (Lit |other#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@72))))) (= (MsgHistoryMod.MsgHistory.CanConcat (Lit this@@72) (Lit |other#0@@2|)) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit |other#0@@2|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@72))))))))))
 :qid |MsgHistoryidfy.70:15|
 :weight 3
 :skolemid |2952|
 :pattern ( (MsgHistoryMod.MsgHistory.CanConcat (Lit this@@72) (Lit |other#0@@2|)))
))))
(assert  (and (forall ((arg0@@551 T@U) (arg1@@271 T@U) ) (! (= (type (MsgHistoryMod.MsgHistory.Concat arg0@@551 arg1@@271)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.MsgHistory.Concat|
 :pattern ( (MsgHistoryMod.MsgHistory.Concat arg0@@551 arg1@@271))
)) (= (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet) LayerTypeType)))
(assert  (=> true (forall ((this@@73 T@U) (|other#0@@3| T@U) ) (!  (=> (and (and (= (type this@@73) DatatypeTypeType) (= (type |other#0@@3|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.Concat#canCall| this@@73 |other#0@@3|) (and (and ($Is this@@73 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0@@3| Tclass.MsgHistoryMod.MsgHistory)) (and (and (MsgHistoryMod.MsgHistory.WF this@@73) (MsgHistoryMod.MsgHistory.WF |other#0@@3|)) (MsgHistoryMod.MsgHistory.CanConcat this@@73 |other#0@@3|))))) (and (and (and (MsgHistoryMod.MsgHistory.WF (MsgHistoryMod.MsgHistory.Concat this@@73 |other#0@@3|)) (|Set#Equal| (MsgHistoryMod.MsgHistory.LSNSet StartFuel_MsgHistoryMod.MsgHistory.LSNSet (MsgHistoryMod.MsgHistory.Concat this@@73 |other#0@@3|)) (|Set#Union| (MsgHistoryMod.MsgHistory.LSNSet StartFuel_MsgHistoryMod.MsgHistory.LSNSet this@@73) (MsgHistoryMod.MsgHistory.LSNSet StartFuel_MsgHistoryMod.MsgHistory.LSNSet |other#0@@3|)))) (=> (MsgHistoryMod.MsgHistory.IsEmpty |other#0@@3|) (|MsgHistoryMod.MsgHistory#Equal| (MsgHistoryMod.MsgHistory.Concat this@@73 |other#0@@3|) this@@73))) ($Is (MsgHistoryMod.MsgHistory.Concat this@@73 |other#0@@3|) Tclass.MsgHistoryMod.MsgHistory)))
 :qid |MsgHistoryidfy.77:14|
 :skolemid |2953|
 :pattern ( (MsgHistoryMod.MsgHistory.Concat this@@73 |other#0@@3|))
))))
(assert (forall ((this@@74 T@U) (|other#0@@4| T@U) ) (!  (=> (and (and (= (type this@@74) DatatypeTypeType) (= (type |other#0@@4|) DatatypeTypeType)) (and ($Is this@@74 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0@@4| Tclass.MsgHistoryMod.MsgHistory))) (= (|MsgHistoryMod.MsgHistory.Concat#requires| this@@74 |other#0@@4|)  (and (and (MsgHistoryMod.MsgHistory.WF this@@74) (MsgHistoryMod.MsgHistory.WF |other#0@@4|)) (MsgHistoryMod.MsgHistory.CanConcat this@@74 |other#0@@4|))))
 :qid |MsgHistoryidfy.77:14|
 :skolemid |2954|
 :pattern ( (|MsgHistoryMod.MsgHistory.Concat#requires| this@@74 |other#0@@4|))
)))
(assert  (=> true (forall ((this@@75 T@U) (|other#0@@5| T@U) ) (!  (=> (and (and (= (type this@@75) DatatypeTypeType) (= (type |other#0@@5|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.Concat#canCall| this@@75 |other#0@@5|) (and (and ($Is this@@75 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0@@5| Tclass.MsgHistoryMod.MsgHistory)) (and (and (MsgHistoryMod.MsgHistory.WF this@@75) (MsgHistoryMod.MsgHistory.WF |other#0@@5|)) (MsgHistoryMod.MsgHistory.CanConcat this@@75 |other#0@@5|))))) (and (and (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@75) (MsgHistoryMod.MsgHistory.MsgHistory_q |other#0@@5|)) (|Maps.__default.MapDisjointUnion#canCall| Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage (MsgHistoryMod.MsgHistory.msgs this@@75) (MsgHistoryMod.MsgHistory.msgs |other#0@@5|))) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@75)) (MsgHistoryMod.MsgHistory.MsgHistory_q |other#0@@5|)) (= (MsgHistoryMod.MsgHistory.Concat this@@75 |other#0@@5|) (|#MsgHistoryMod.MsgHistory.MsgHistory| (Maps.__default.MapDisjointUnion Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage StartFuel_Maps._default.MapDisjointUnion (MsgHistoryMod.MsgHistory.msgs this@@75) (MsgHistoryMod.MsgHistory.msgs |other#0@@5|)) (MsgHistoryMod.MsgHistory.seqStart this@@75) (MsgHistoryMod.MsgHistory.seqEnd |other#0@@5|)))))
 :qid |MsgHistoryidfy.77:14|
 :skolemid |2955|
 :pattern ( (MsgHistoryMod.MsgHistory.Concat this@@75 |other#0@@5|))
))))
(assert  (=> true (forall ((this@@76 T@U) (|other#0@@6| T@U) ) (!  (=> (and (and (= (type this@@76) DatatypeTypeType) (= (type |other#0@@6|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.Concat#canCall| (Lit this@@76) (Lit |other#0@@6|)) (and (and ($Is this@@76 Tclass.MsgHistoryMod.MsgHistory) ($Is |other#0@@6| Tclass.MsgHistoryMod.MsgHistory)) (and (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@76))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit |other#0@@6|)))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanConcat (Lit this@@76) (Lit |other#0@@6|))))))))) (and (and (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@76)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |other#0@@6|))) (|Maps.__default.MapDisjointUnion#canCall| Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@76))) (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |other#0@@6|))))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@76))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |other#0@@6|))) (= (MsgHistoryMod.MsgHistory.Concat (Lit this@@76) (Lit |other#0@@6|)) (|#MsgHistoryMod.MsgHistory.MsgHistory| (Maps.__default.MapDisjointUnion Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage StartFuel_Maps._default.MapDisjointUnion (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@76))) (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |other#0@@6|)))) (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit this@@76))) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |other#0@@6|)))))))
 :qid |MsgHistoryidfy.77:14|
 :weight 3
 :skolemid |2956|
 :pattern ( (MsgHistoryMod.MsgHistory.Concat (Lit this@@76) (Lit |other#0@@6|)))
))))
(assert  (=> true (forall ((this@@77 T@U) (|lsn#0@@8| Int) ) (!  (=> (and (= (type this@@77) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.CanFollow#canCall| this@@77 |lsn#0@@8|) (and ($Is this@@77 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@8|)))) true)
 :qid |MsgHistoryidfy.89:15|
 :skolemid |2957|
 :pattern ( (MsgHistoryMod.MsgHistory.CanFollow this@@77 |lsn#0@@8|))
))))
(assert (forall ((this@@78 T@U) (|lsn#0@@9| Int) ) (!  (=> (= (type this@@78) DatatypeTypeType) (=> (and ($Is this@@78 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@9|)) (= (|MsgHistoryMod.MsgHistory.CanFollow#requires| this@@78 |lsn#0@@9|) true)))
 :qid |MsgHistoryidfy.89:15|
 :skolemid |2958|
 :pattern ( (|MsgHistoryMod.MsgHistory.CanFollow#requires| this@@78 |lsn#0@@9|))
)))
(assert  (=> true (forall ((this@@79 T@U) (|lsn#0@@10| Int) ) (!  (=> (and (= (type this@@79) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.CanFollow#canCall| this@@79 |lsn#0@@10|) (and ($Is this@@79 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@10|)))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@79) (= (MsgHistoryMod.MsgHistory.CanFollow this@@79 |lsn#0@@10|) (= (MsgHistoryMod.MsgHistory.seqStart this@@79) |lsn#0@@10|))))
 :qid |MsgHistoryidfy.89:15|
 :skolemid |2959|
 :pattern ( (MsgHistoryMod.MsgHistory.CanFollow this@@79 |lsn#0@@10|))
))))
(assert  (=> true (forall ((this@@80 T@U) (|lsn#0@@11| Int) ) (!  (=> (and (= (type this@@80) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (Lit this@@80) (LitInt |lsn#0@@11|)) (and ($Is this@@80 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@11|)))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@80)) (= (MsgHistoryMod.MsgHistory.CanFollow (Lit this@@80) (LitInt |lsn#0@@11|)) (= (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit this@@80))) (LitInt |lsn#0@@11|)))))
 :qid |MsgHistoryidfy.89:15|
 :weight 3
 :skolemid |2960|
 :pattern ( (MsgHistoryMod.MsgHistory.CanFollow (Lit this@@80) (LitInt |lsn#0@@11|)))
))))
(assert (forall ((arg0@@552 T@U) (arg1@@272 T@U) (arg2@@163 T@U) ) (! (= (type (MsgHistoryMod.MsgHistory.ApplyToStampedMap arg0@@552 arg1@@272 arg2@@163)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.MsgHistory.ApplyToStampedMap|
 :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap arg0@@552 arg1@@272 arg2@@163))
)))
(assert (forall (($ly@@296 T@U) (this@@81 T@U) (|orig#0| T@U) ) (!  (=> (and (and (= (type $ly@@296) LayerTypeType) (= (type this@@81) DatatypeTypeType)) (= (type |orig#0|) DatatypeTypeType)) (= (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@296) this@@81 |orig#0|) (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@296 this@@81 |orig#0|)))
 :qid |MsgHistoryidfy.94:14|
 :skolemid |2961|
 :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@296) this@@81 |orig#0|))
)))
(assert (forall (($ly@@297 T@U) (this@@82 T@U) (|orig#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@297) LayerTypeType) (= (type this@@82) DatatypeTypeType)) (= (type |orig#0@@0|) DatatypeTypeType)) (= (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@297 this@@82 |orig#0@@0|) (MsgHistoryMod.MsgHistory.ApplyToStampedMap $LZ this@@82 |orig#0@@0|)))
 :qid |MsgHistoryidfy.94:14|
 :skolemid |2962|
 :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap (AsFuelBottom $ly@@297) this@@82 |orig#0@@0|))
)))
(assert  (=> true (forall (($ly@@298 T@U) (this@@83 T@U) (|orig#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@298) LayerTypeType) (= (type this@@83) DatatypeTypeType)) (= (type |orig#0@@1|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| this@@83 |orig#0@@1|) (and (and ($Is this@@83 Tclass.MsgHistoryMod.MsgHistory) ($Is |orig#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))) (and (MsgHistoryMod.MsgHistory.WF this@@83) (MsgHistoryMod.MsgHistory.CanFollow this@@83 (StampedMod.Stamped.seqEnd |orig#0@@1|)))))) (and (= (StampedMod.Stamped.seqEnd (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@298 this@@83 |orig#0@@1|)) (INTERNAL_add_boogie (StampedMod.Stamped.seqEnd |orig#0@@1|) (MsgHistoryMod.MsgHistory.Len this@@83))) ($Is (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@298 this@@83 |orig#0@@1|) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))
 :qid |MsgHistoryidfy.94:14|
 :skolemid |2963|
 :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@298 this@@83 |orig#0@@1|))
))))
(assert (forall (($ly@@299 T@U) (this@@84 T@U) (|orig#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@299) LayerTypeType) (= (type this@@84) DatatypeTypeType)) (= (type |orig#0@@2|) DatatypeTypeType)) (and ($Is this@@84 Tclass.MsgHistoryMod.MsgHistory) ($Is |orig#0@@2| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))) (= (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#requires| $ly@@299 this@@84 |orig#0@@2|)  (and (MsgHistoryMod.MsgHistory.WF this@@84) (MsgHistoryMod.MsgHistory.CanFollow this@@84 (StampedMod.Stamped.seqEnd |orig#0@@2|)))))
 :qid |MsgHistoryidfy.94:14|
 :skolemid |2964|
 :pattern ( (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#requires| $ly@@299 this@@84 |orig#0@@2|))
)))
(assert  (=> true (forall (($ly@@300 T@U) (this@@85 T@U) (|orig#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@300) LayerTypeType) (= (type this@@85) DatatypeTypeType)) (= (type |orig#0@@3|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| this@@85 |orig#0@@3|) (and (and ($Is this@@85 Tclass.MsgHistoryMod.MsgHistory) ($Is |orig#0@@3| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))) (and (MsgHistoryMod.MsgHistory.WF this@@85) (MsgHistoryMod.MsgHistory.CanFollow this@@85 (StampedMod.Stamped.seqEnd |orig#0@@3|)))))) (and (and (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| this@@85) (=> (not (MsgHistoryMod.MsgHistory.IsEmpty this@@85)) (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@85) (let ((|lastLsn#0| (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd this@@85) 1)))
 (and (and (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| this@@85 |lastLsn#0|) (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (MsgHistoryMod.MsgHistory.DiscardRecent this@@85 |lastLsn#0|) |orig#0@@3|)) (let ((|subMap#0| (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@300 (MsgHistoryMod.MsgHistory.DiscardRecent this@@85 |lastLsn#0|) |orig#0@@3|)))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@85) (MsgHistoryMod.KeyedMessage.KeyedMessage_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@85)) ($Box (int_2_U |lastLsn#0|)))))) (let ((|key#0@@23| (MsgHistoryMod.KeyedMessage.key ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@85)) ($Box (int_2_U |lastLsn#0|)))))))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@85) (MsgHistoryMod.KeyedMessage.KeyedMessage_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@85)) ($Box (int_2_U |lastLsn#0|)))))) (let ((|newMessage#0| (MsgHistoryMod.KeyedMessage.message ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@85)) ($Box (int_2_U |lastLsn#0|)))))))
 (and (StampedMod.Stamped.Stamped_q |subMap#0|) (let ((|oldMessage#0| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#0|))) ($Box |key#0@@23|)))))
 (and (and (StampedMod.Stamped.Stamped_q |subMap#0|) (|ValueMessage.__default.Merge#canCall| |newMessage#0| |oldMessage#0|)) (StampedMod.Stamped.Stamped_q |subMap#0|)))))))))))))) (= (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@300) this@@85 |orig#0@@3|) (ite (MsgHistoryMod.MsgHistory.IsEmpty this@@85) |orig#0@@3| (let ((|lastLsn#0@@0| (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd this@@85) 1)))
(let ((|subMap#0@@0| (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@300 (MsgHistoryMod.MsgHistory.DiscardRecent this@@85 |lastLsn#0@@0|) |orig#0@@3|)))
(let ((|key#0@@24| (MsgHistoryMod.KeyedMessage.key ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@85)) ($Box (int_2_U |lastLsn#0@@0|)))))))
(let ((|newMessage#0@@0| (MsgHistoryMod.KeyedMessage.message ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@85)) ($Box (int_2_U |lastLsn#0@@0|)))))))
(let ((|oldMessage#0@@0| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#0@@0|))) ($Box |key#0@@24|)))))
(|#StampedMod.Stamped.Stamped| ($Box (|IMap#Build| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#0@@0|)) ($Box |key#0@@24|) ($Box (ValueMessage.__default.Merge |newMessage#0@@0| |oldMessage#0@@0|)))) (INTERNAL_add_boogie (StampedMod.Stamped.seqEnd |subMap#0@@0|) 1)))))))))))
 :qid |MsgHistoryidfy.94:14|
 :skolemid |2965|
 :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@300) this@@85 |orig#0@@3|))
))))
(assert  (=> true (forall (($ly@@301 T@U) (this@@86 T@U) (|orig#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@301) LayerTypeType) (= (type this@@86) DatatypeTypeType)) (= (type |orig#0@@4|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (Lit this@@86) |orig#0@@4|) (and (and ($Is this@@86 Tclass.MsgHistoryMod.MsgHistory) ($Is |orig#0@@4| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@86))))) (MsgHistoryMod.MsgHistory.CanFollow (Lit this@@86) (StampedMod.Stamped.seqEnd |orig#0@@4|)))))) (and (and (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| (Lit this@@86)) (=> (not (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.IsEmpty (Lit this@@86)))))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@86)) (let ((|lastLsn#1| (LitInt (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@86)) 1))))
 (and (and (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit this@@86) |lastLsn#1|) (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@86) |lastLsn#1|) |orig#0@@4|)) (let ((|subMap#1| (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@301) (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@86) |lastLsn#1|) |orig#0@@4|)))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@86)) (MsgHistoryMod.KeyedMessage.KeyedMessage_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@86)))) ($Box (int_2_U |lastLsn#1|)))))) (let ((|key#1@@6| (MsgHistoryMod.KeyedMessage.key ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@86)))) ($Box (int_2_U |lastLsn#1|)))))))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@86)) (MsgHistoryMod.KeyedMessage.KeyedMessage_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@86)))) ($Box (int_2_U |lastLsn#1|)))))) (let ((|newMessage#1| (MsgHistoryMod.KeyedMessage.message ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@86)))) ($Box (int_2_U |lastLsn#1|)))))))
 (and (StampedMod.Stamped.Stamped_q |subMap#1|) (let ((|oldMessage#1| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#1|))) ($Box |key#1@@6|)))))
 (and (and (StampedMod.Stamped.Stamped_q |subMap#1|) (|ValueMessage.__default.Merge#canCall| |newMessage#1| |oldMessage#1|)) (StampedMod.Stamped.Stamped_q |subMap#1|)))))))))))))) (= (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@301) (Lit this@@86) |orig#0@@4|) (ite (MsgHistoryMod.MsgHistory.IsEmpty (Lit this@@86)) |orig#0@@4| (let ((|lastLsn#1@@0| (LitInt (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@86)) 1))))
(let ((|subMap#1@@0| (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@301) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@86) |lastLsn#1@@0|)) |orig#0@@4|)))
(let ((|key#1@@7| (MsgHistoryMod.KeyedMessage.key ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@86)))) ($Box (int_2_U |lastLsn#1@@0|)))))))
(let ((|newMessage#1@@0| (MsgHistoryMod.KeyedMessage.message ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@86)))) ($Box (int_2_U |lastLsn#1@@0|)))))))
(let ((|oldMessage#1@@0| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#1@@0|))) ($Box |key#1@@7|)))))
(|#StampedMod.Stamped.Stamped| ($Box (|IMap#Build| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#1@@0|)) ($Box |key#1@@7|) ($Box (ValueMessage.__default.Merge |newMessage#1@@0| |oldMessage#1@@0|)))) (INTERNAL_add_boogie (StampedMod.Stamped.seqEnd |subMap#1@@0|) 1)))))))))))
 :qid |MsgHistoryidfy.94:14|
 :weight 3
 :skolemid |2966|
 :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@301) (Lit this@@86) |orig#0@@4|))
))))
(assert  (=> true (forall (($ly@@302 T@U) (this@@87 T@U) (|orig#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@302) LayerTypeType) (= (type this@@87) DatatypeTypeType)) (= (type |orig#0@@5|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (Lit this@@87) (Lit |orig#0@@5|)) (and (and ($Is this@@87 Tclass.MsgHistoryMod.MsgHistory) ($Is |orig#0@@5| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@87))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit this@@87) (LitInt (StampedMod.Stamped.seqEnd (Lit |orig#0@@5|))))))))))) (and (and (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| (Lit this@@87)) (=> (not (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.IsEmpty (Lit this@@87)))))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@87)) (let ((|lastLsn#2| (LitInt (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@87)) 1))))
 (and (and (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit this@@87) |lastLsn#2|) (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@87) |lastLsn#2|) (Lit |orig#0@@5|))) (let ((|subMap#2| (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@302) (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@87) |lastLsn#2|) (Lit |orig#0@@5|))))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@87)) (MsgHistoryMod.KeyedMessage.KeyedMessage_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@87)))) ($Box (int_2_U |lastLsn#2|)))))) (let ((|key#2@@0| (MsgHistoryMod.KeyedMessage.key ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@87)))) ($Box (int_2_U |lastLsn#2|)))))))
 (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@87)) (MsgHistoryMod.KeyedMessage.KeyedMessage_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@87)))) ($Box (int_2_U |lastLsn#2|)))))) (let ((|newMessage#2| (MsgHistoryMod.KeyedMessage.message ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@87)))) ($Box (int_2_U |lastLsn#2|)))))))
 (and (StampedMod.Stamped.Stamped_q |subMap#2|) (let ((|oldMessage#2| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#2|))) ($Box |key#2@@0|)))))
 (and (and (StampedMod.Stamped.Stamped_q |subMap#2|) (|ValueMessage.__default.Merge#canCall| |newMessage#2| |oldMessage#2|)) (StampedMod.Stamped.Stamped_q |subMap#2|)))))))))))))) (= (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@302) (Lit this@@87) (Lit |orig#0@@5|)) (ite (MsgHistoryMod.MsgHistory.IsEmpty (Lit this@@87)) |orig#0@@5| (let ((|lastLsn#2@@0| (LitInt (INTERNAL_sub_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@87)) 1))))
(let ((|subMap#2@@0| (Lit (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@302) (Lit (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@87) |lastLsn#2@@0|)) (Lit |orig#0@@5|)))))
(let ((|key#2@@1| (MsgHistoryMod.KeyedMessage.key ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@87)))) ($Box (int_2_U |lastLsn#2@@0|)))))))
(let ((|newMessage#2@@0| (MsgHistoryMod.KeyedMessage.message ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@87)))) ($Box (int_2_U |lastLsn#2@@0|)))))))
(let ((|oldMessage#2@@0| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#2@@0|)))) ($Box |key#2@@1|)))))
(|#StampedMod.Stamped.Stamped| ($Box (|IMap#Build| (Lit ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value |subMap#2@@0|))) ($Box |key#2@@1|) ($Box (ValueMessage.__default.Merge |newMessage#2@@0| |oldMessage#2@@0|)))) (LitInt (INTERNAL_add_boogie (StampedMod.Stamped.seqEnd |subMap#2@@0|) 1))))))))))))
 :qid |MsgHistoryidfy.94:14|
 :weight 3
 :skolemid |2967|
 :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@302) (Lit this@@87) (Lit |orig#0@@5|)))
))))
(assert  (=> true (forall ((this@@88 T@U) (|lsn#0@@12| Int) ) (!  (=> (and (= (type this@@88) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| this@@88 |lsn#0@@12|) (and ($Is this@@88 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@12|)))) true)
 :qid |MsgHistoryidfy.112:15|
 :skolemid |2968|
 :pattern ( (MsgHistoryMod.MsgHistory.CanDiscardTo this@@88 |lsn#0@@12|))
))))
(assert (forall ((this@@89 T@U) (|lsn#0@@13| Int) ) (!  (=> (= (type this@@89) DatatypeTypeType) (=> (and ($Is this@@89 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@13|)) (= (|MsgHistoryMod.MsgHistory.CanDiscardTo#requires| this@@89 |lsn#0@@13|) true)))
 :qid |MsgHistoryidfy.112:15|
 :skolemid |2969|
 :pattern ( (|MsgHistoryMod.MsgHistory.CanDiscardTo#requires| this@@89 |lsn#0@@13|))
)))
(assert  (=> true (forall ((this@@90 T@U) (|lsn#0@@14| Int) ) (!  (=> (and (= (type this@@90) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| this@@90 |lsn#0@@14|) (and ($Is this@@90 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@14|)))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@90) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@90) |lsn#0@@14|) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@90))) (= (MsgHistoryMod.MsgHistory.CanDiscardTo this@@90 |lsn#0@@14|)  (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@90) |lsn#0@@14|) (INTERNAL_le_boogie |lsn#0@@14| (MsgHistoryMod.MsgHistory.seqEnd this@@90))))))
 :qid |MsgHistoryidfy.112:15|
 :skolemid |2970|
 :pattern ( (MsgHistoryMod.MsgHistory.CanDiscardTo this@@90 |lsn#0@@14|))
))))
(assert  (=> true (forall ((this@@91 T@U) (|lsn#0@@15| Int) ) (!  (=> (and (= (type this@@91) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (Lit this@@91) (LitInt |lsn#0@@15|)) (and ($Is this@@91 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@15|)))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@91)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@91)) |lsn#0@@15|) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@91)))) (= (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit this@@91) (LitInt |lsn#0@@15|))  (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@91)) |lsn#0@@15|) (INTERNAL_le_boogie |lsn#0@@15| (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@91)))))))
 :qid |MsgHistoryidfy.112:15|
 :weight 3
 :skolemid |2971|
 :pattern ( (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit this@@91) (LitInt |lsn#0@@15|)))
))))
(assert (forall ((arg0@@553 T@U) (arg1@@273 Int) ) (! (= (type (MsgHistoryMod.MsgHistory.DiscardOld arg0@@553 arg1@@273)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.MsgHistory.DiscardOld|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardOld arg0@@553 arg1@@273))
)))
(assert  (=> true (forall ((this@@92 T@U) (|lsn#0@@16| Int) ) (!  (=> (and (= (type this@@92) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.DiscardOld#canCall| this@@92 |lsn#0@@16|) (and (and ($Is this@@92 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@16|)) (and (MsgHistoryMod.MsgHistory.WF this@@92) (MsgHistoryMod.MsgHistory.CanDiscardTo this@@92 |lsn#0@@16|))))) (and (MsgHistoryMod.MsgHistory.WF (MsgHistoryMod.MsgHistory.DiscardOld this@@92 |lsn#0@@16|)) ($Is (MsgHistoryMod.MsgHistory.DiscardOld this@@92 |lsn#0@@16|) Tclass.MsgHistoryMod.MsgHistory)))
 :qid |MsgHistoryidfy.121:14|
 :skolemid |2972|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardOld this@@92 |lsn#0@@16|))
))))
(assert (forall ((this@@93 T@U) (|lsn#0@@17| Int) ) (!  (=> (= (type this@@93) DatatypeTypeType) (=> (and ($Is this@@93 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@17|)) (= (|MsgHistoryMod.MsgHistory.DiscardOld#requires| this@@93 |lsn#0@@17|)  (and (MsgHistoryMod.MsgHistory.WF this@@93) (MsgHistoryMod.MsgHistory.CanDiscardTo this@@93 |lsn#0@@17|)))))
 :qid |MsgHistoryidfy.121:14|
 :skolemid |2973|
 :pattern ( (|MsgHistoryMod.MsgHistory.DiscardOld#requires| this@@93 |lsn#0@@17|))
)))
(assert  (=> true (forall ((this@@94 T@U) (|lsn#0@@18| Int) ) (!  (=> (and (= (type this@@94) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.DiscardOld#canCall| this@@94 |lsn#0@@18|) (and (and ($Is this@@94 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@18|)) (and (MsgHistoryMod.MsgHistory.WF this@@94) (MsgHistoryMod.MsgHistory.CanDiscardTo this@@94 |lsn#0@@18|))))) (and (and (forall ((|k#0@@65| T@U) ) (!  (=> (= (type |k#0@@65|) intType) (and (=> (INTERNAL_le_boogie |lsn#0@@18| (U_2_int |k#0@@65|)) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@94)) (=> (and (INTERNAL_le_boogie |lsn#0@@18| (U_2_int |k#0@@65|)) (INTERNAL_lt_boogie (U_2_int |k#0@@65|) (MsgHistoryMod.MsgHistory.seqEnd this@@94))) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@94))))
 :qid |MsgHistoryidfy.126:26|
 :skolemid |2974|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@94)) ($Box |k#0@@65|))))
)) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@94)) (= (MsgHistoryMod.MsgHistory.DiscardOld this@@94 |lsn#0@@18|) (let ((|keepMap#0| (|Map#Glue| (|lambda#227| TInt |lsn#0@@18| (MsgHistoryMod.MsgHistory.seqEnd this@@94)) (|lambda#107| (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@94))) (TMap TInt Tclass.MsgHistoryMod.KeyedMessage))))
(|#MsgHistoryMod.MsgHistory.MsgHistory| |keepMap#0| |lsn#0@@18| (MsgHistoryMod.MsgHistory.seqEnd this@@94))))))
 :qid |MsgHistoryidfy.121:14|
 :skolemid |2975|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardOld this@@94 |lsn#0@@18|))
))))
(assert  (=> true (forall ((this@@95 T@U) (|lsn#0@@19| Int) ) (!  (=> (and (= (type this@@95) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.DiscardOld#canCall| (Lit this@@95) (LitInt |lsn#0@@19|)) (and (and ($Is this@@95 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@19|)) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@95))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit this@@95) (LitInt |lsn#0@@19|))))))))) (and (and (forall ((|k#0@@66| T@U) ) (!  (=> (= (type |k#0@@66|) intType) (and (=> (INTERNAL_le_boogie |lsn#0@@19| (U_2_int |k#0@@66|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@95))) (=> (and (INTERNAL_le_boogie |lsn#0@@19| (U_2_int |k#0@@66|)) (INTERNAL_lt_boogie (U_2_int |k#0@@66|) (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@95)))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@95)))))
 :qid |MsgHistoryidfy.126:26|
 :skolemid |2976|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@95)) ($Box |k#0@@66|))))
)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@95))) (= (MsgHistoryMod.MsgHistory.DiscardOld (Lit this@@95) (LitInt |lsn#0@@19|)) (let ((|keepMap#1| (|Map#Glue| (|lambda#227| TInt |lsn#0@@19| (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@95))) (|lambda#107| (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@95))))) (TMap TInt Tclass.MsgHistoryMod.KeyedMessage))))
(|#MsgHistoryMod.MsgHistory.MsgHistory| |keepMap#1| (LitInt |lsn#0@@19|) (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@95))))))))
 :qid |MsgHistoryidfy.121:14|
 :weight 3
 :skolemid |2977|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardOld (Lit this@@95) (LitInt |lsn#0@@19|)))
))))
(assert (forall ((arg0@@554 T@U) (arg1@@274 Int) ) (! (= (type (MsgHistoryMod.MsgHistory.MaybeDiscardOld arg0@@554 arg1@@274)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.MsgHistory.MaybeDiscardOld|
 :pattern ( (MsgHistoryMod.MsgHistory.MaybeDiscardOld arg0@@554 arg1@@274))
)))
(assert  (=> true (forall ((this@@96 T@U) (|lsn#0@@20| Int) ) (!  (=> (and (= (type this@@96) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.MaybeDiscardOld#canCall| this@@96 |lsn#0@@20|) (and (and ($Is this@@96 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@20|)) (and (MsgHistoryMod.MsgHistory.WF this@@96) (INTERNAL_le_boogie |lsn#0@@20| (MsgHistoryMod.MsgHistory.seqEnd this@@96)))))) (and (MsgHistoryMod.MsgHistory.WF (MsgHistoryMod.MsgHistory.MaybeDiscardOld this@@96 |lsn#0@@20|)) ($Is (MsgHistoryMod.MsgHistory.MaybeDiscardOld this@@96 |lsn#0@@20|) Tclass.MsgHistoryMod.MsgHistory)))
 :qid |MsgHistoryidfy.130:14|
 :skolemid |2978|
 :pattern ( (MsgHistoryMod.MsgHistory.MaybeDiscardOld this@@96 |lsn#0@@20|))
))))
(assert (forall ((this@@97 T@U) (|lsn#0@@21| Int) ) (!  (=> (= (type this@@97) DatatypeTypeType) (=> (and ($Is this@@97 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@21|)) (= (|MsgHistoryMod.MsgHistory.MaybeDiscardOld#requires| this@@97 |lsn#0@@21|)  (and (MsgHistoryMod.MsgHistory.WF this@@97) (INTERNAL_le_boogie |lsn#0@@21| (MsgHistoryMod.MsgHistory.seqEnd this@@97))))))
 :qid |MsgHistoryidfy.130:14|
 :skolemid |2979|
 :pattern ( (|MsgHistoryMod.MsgHistory.MaybeDiscardOld#requires| this@@97 |lsn#0@@21|))
)))
(assert  (=> true (forall ((this@@98 T@U) (|lsn#0@@22| Int) ) (!  (=> (and (= (type this@@98) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.MaybeDiscardOld#canCall| this@@98 |lsn#0@@22|) (and (and ($Is this@@98 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@22|)) (and (MsgHistoryMod.MsgHistory.WF this@@98) (INTERNAL_le_boogie |lsn#0@@22| (MsgHistoryMod.MsgHistory.seqEnd this@@98)))))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@98) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@98) |lsn#0@@22|) (|MsgHistoryMod.MsgHistory.DiscardOld#canCall| this@@98 |lsn#0@@22|))) (= (MsgHistoryMod.MsgHistory.MaybeDiscardOld this@@98 |lsn#0@@22|) (ite (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@98) |lsn#0@@22|) (MsgHistoryMod.MsgHistory.DiscardOld this@@98 |lsn#0@@22|) this@@98))))
 :qid |MsgHistoryidfy.130:14|
 :skolemid |2980|
 :pattern ( (MsgHistoryMod.MsgHistory.MaybeDiscardOld this@@98 |lsn#0@@22|))
))))
(assert  (=> true (forall ((this@@99 T@U) (|lsn#0@@23| Int) ) (!  (=> (and (= (type this@@99) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.MaybeDiscardOld#canCall| (Lit this@@99) (LitInt |lsn#0@@23|)) (and (and ($Is this@@99 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@23|)) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@99))))) (INTERNAL_le_boogie |lsn#0@@23| (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@99))))))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@99)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@99)) |lsn#0@@23|) (|MsgHistoryMod.MsgHistory.DiscardOld#canCall| (Lit this@@99) (LitInt |lsn#0@@23|)))) (= (MsgHistoryMod.MsgHistory.MaybeDiscardOld (Lit this@@99) (LitInt |lsn#0@@23|)) (ite (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@99)) |lsn#0@@23|) (MsgHistoryMod.MsgHistory.DiscardOld (Lit this@@99) (LitInt |lsn#0@@23|)) this@@99))))
 :qid |MsgHistoryidfy.130:14|
 :weight 3
 :skolemid |2981|
 :pattern ( (MsgHistoryMod.MsgHistory.MaybeDiscardOld (Lit this@@99) (LitInt |lsn#0@@23|)))
))))
(assert  (=> true (forall ((this@@100 T@U) (|lsn#0@@24| Int) ) (!  (=> (and (= (type this@@100) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| this@@100 |lsn#0@@24|) (and (and ($Is this@@100 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@24|)) (and (MsgHistoryMod.MsgHistory.CanDiscardTo this@@100 |lsn#0@@24|) (MsgHistoryMod.MsgHistory.WF this@@100))))) (and (MsgHistoryMod.MsgHistory.WF (MsgHistoryMod.MsgHistory.DiscardRecent this@@100 |lsn#0@@24|)) ($Is (MsgHistoryMod.MsgHistory.DiscardRecent this@@100 |lsn#0@@24|) Tclass.MsgHistoryMod.MsgHistory)))
 :qid |MsgHistoryidfy.140:14|
 :skolemid |2982|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardRecent this@@100 |lsn#0@@24|))
))))
(assert (forall ((this@@101 T@U) (|lsn#0@@25| Int) ) (!  (=> (= (type this@@101) DatatypeTypeType) (=> (and ($Is this@@101 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@25|)) (= (|MsgHistoryMod.MsgHistory.DiscardRecent#requires| this@@101 |lsn#0@@25|)  (and (MsgHistoryMod.MsgHistory.CanDiscardTo this@@101 |lsn#0@@25|) (MsgHistoryMod.MsgHistory.WF this@@101)))))
 :qid |MsgHistoryidfy.140:14|
 :skolemid |2983|
 :pattern ( (|MsgHistoryMod.MsgHistory.DiscardRecent#requires| this@@101 |lsn#0@@25|))
)))
(assert  (=> true (forall ((this@@102 T@U) (|lsn#0@@26| Int) ) (!  (=> (and (= (type this@@102) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| this@@102 |lsn#0@@26|) (and (and ($Is this@@102 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@26|)) (and (MsgHistoryMod.MsgHistory.CanDiscardTo this@@102 |lsn#0@@26|) (MsgHistoryMod.MsgHistory.WF this@@102))))) (and (and (forall ((|k#0@@67| T@U) ) (!  (=> (= (type |k#0@@67|) intType) (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@102) (=> (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@102) (U_2_int |k#0@@67|)) (INTERNAL_lt_boogie (U_2_int |k#0@@67|) |lsn#0@@26|)) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@102))))
 :qid |MsgHistoryidfy.145:26|
 :skolemid |2984|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@102)) ($Box |k#0@@67|))))
)) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@102)) (= (MsgHistoryMod.MsgHistory.DiscardRecent this@@102 |lsn#0@@26|) (let ((|keepMap#0@@0| (|Map#Glue| (|lambda#227| TInt (MsgHistoryMod.MsgHistory.seqStart this@@102) |lsn#0@@26|) (|lambda#107| (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@102))) (TMap TInt Tclass.MsgHistoryMod.KeyedMessage))))
(|#MsgHistoryMod.MsgHistory.MsgHistory| |keepMap#0@@0| (MsgHistoryMod.MsgHistory.seqStart this@@102) |lsn#0@@26|)))))
 :qid |MsgHistoryidfy.140:14|
 :skolemid |2985|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardRecent this@@102 |lsn#0@@26|))
))))
(assert  (=> true (forall ((this@@103 T@U) (|lsn#0@@27| Int) ) (!  (=> (and (= (type this@@103) DatatypeTypeType) (or (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (Lit this@@103) (LitInt |lsn#0@@27|)) (and (and ($Is this@@103 Tclass.MsgHistoryMod.MsgHistory) (INTERNAL_le_boogie 0 |lsn#0@@27|)) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit this@@103) (LitInt |lsn#0@@27|))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@103))))))))) (and (and (forall ((|k#0@@68| T@U) ) (!  (=> (= (type |k#0@@68|) intType) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@103)) (=> (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@103)) (U_2_int |k#0@@68|)) (INTERNAL_lt_boogie (U_2_int |k#0@@68|) |lsn#0@@27|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@103)))))
 :qid |MsgHistoryidfy.145:26|
 :skolemid |2986|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@103)) ($Box |k#0@@68|))))
)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@103))) (= (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@103) (LitInt |lsn#0@@27|)) (let ((|keepMap#1@@0| (|Map#Glue| (|lambda#227| TInt (MsgHistoryMod.MsgHistory.seqStart (Lit this@@103)) |lsn#0@@27|) (|lambda#107| (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@103))))) (TMap TInt Tclass.MsgHistoryMod.KeyedMessage))))
(|#MsgHistoryMod.MsgHistory.MsgHistory| |keepMap#1@@0| (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit this@@103))) (LitInt |lsn#0@@27|))))))
 :qid |MsgHistoryidfy.140:14|
 :weight 3
 :skolemid |2987|
 :pattern ( (MsgHistoryMod.MsgHistory.DiscardRecent (Lit this@@103) (LitInt |lsn#0@@27|)))
))))
(assert  (=> true (forall ((this@@104 T@U) (|subseq#0| T@U) ) (!  (=> (and (and (and (= (type this@@104) DatatypeTypeType) (= (type |subseq#0|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| this@@104 |subseq#0|) (and (and ($Is this@@104 Tclass.MsgHistoryMod.MsgHistory) ($Is |subseq#0| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF this@@104) (MsgHistoryMod.MsgHistory.WF |subseq#0|))))) (and (MsgHistoryMod.MsgHistory.IncludesSubseq this@@104 |subseq#0|) (MsgHistoryMod.MsgHistory.IsEmpty this@@104))) (MsgHistoryMod.MsgHistory.IsEmpty |subseq#0|))
 :qid |MsgHistoryidfy.149:15|
 :skolemid |2988|
 :pattern ( (MsgHistoryMod.MsgHistory.IncludesSubseq this@@104 |subseq#0|))
))))
(assert (forall ((this@@105 T@U) (|subseq#0@@0| T@U) ) (!  (=> (and (and (= (type this@@105) DatatypeTypeType) (= (type |subseq#0@@0|) DatatypeTypeType)) (and ($Is this@@105 Tclass.MsgHistoryMod.MsgHistory) ($Is |subseq#0@@0| Tclass.MsgHistoryMod.MsgHistory))) (= (|MsgHistoryMod.MsgHistory.IncludesSubseq#requires| this@@105 |subseq#0@@0|)  (and (MsgHistoryMod.MsgHistory.WF this@@105) (MsgHistoryMod.MsgHistory.WF |subseq#0@@0|))))
 :qid |MsgHistoryidfy.149:15|
 :skolemid |2989|
 :pattern ( (|MsgHistoryMod.MsgHistory.IncludesSubseq#requires| this@@105 |subseq#0@@0|))
)))
(assert  (=> true (forall ((this@@106 T@U) (|subseq#0@@1| T@U) ) (!  (=> (and (and (= (type this@@106) DatatypeTypeType) (= (type |subseq#0@@1|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| this@@106 |subseq#0@@1|) (and (and ($Is this@@106 Tclass.MsgHistoryMod.MsgHistory) ($Is |subseq#0@@1| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF this@@106) (MsgHistoryMod.MsgHistory.WF |subseq#0@@1|))))) (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@106) (MsgHistoryMod.MsgHistory.MsgHistory_q |subseq#0@@1|)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@106) (MsgHistoryMod.MsgHistory.seqStart |subseq#0@@1|)) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q |subseq#0@@1|) (MsgHistoryMod.MsgHistory.MsgHistory_q this@@106)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd |subseq#0@@1|) (MsgHistoryMod.MsgHistory.seqEnd this@@106)) (forall ((|lsn#0@@28| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#0@@28|) (and (|MsgHistoryMod.MsgHistory.Contains#canCall| |subseq#0@@1| |lsn#0@@28|) (=> (MsgHistoryMod.MsgHistory.Contains |subseq#0@@1| |lsn#0@@28|) (and (|MsgHistoryMod.MsgHistory.Contains#canCall| this@@106 |lsn#0@@28|) (=> (MsgHistoryMod.MsgHistory.Contains this@@106 |lsn#0@@28|) (and (and (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@106)) ($Box (int_2_U |lsn#0@@28|))))) (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |subseq#0@@1|)) ($Box (int_2_U |lsn#0@@28|)))))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q this@@106) (MsgHistoryMod.MsgHistory.MsgHistory_q |subseq#0@@1|))))))))
 :qid |MsgHistoryidfy.156:31|
 :skolemid |2991|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |subseq#0@@1|)) ($Box (int_2_U |lsn#0@@28|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@106)) ($Box (int_2_U |lsn#0@@28|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@106 |lsn#0@@28|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |subseq#0@@1| |lsn#0@@28|))
)))))) (= (MsgHistoryMod.MsgHistory.IncludesSubseq this@@106 |subseq#0@@1|)  (and (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@106) (MsgHistoryMod.MsgHistory.seqStart |subseq#0@@1|)) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd |subseq#0@@1|) (MsgHistoryMod.MsgHistory.seqEnd this@@106))) (let ((|result#0| (forall ((|lsn#0@@29| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |lsn#0@@29|) (MsgHistoryMod.MsgHistory.Contains |subseq#0@@1| |lsn#0@@29|)) (and (MsgHistoryMod.MsgHistory.Contains this@@106 |lsn#0@@29|) (|MsgHistoryMod.KeyedMessage#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@106)) ($Box (int_2_U |lsn#0@@29|)))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |subseq#0@@1|)) ($Box (int_2_U |lsn#0@@29|)))))))
 :qid |MsgHistoryidfy.156:31|
 :skolemid |2990|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |subseq#0@@1|)) ($Box (int_2_U |lsn#0@@29|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@106)) ($Box (int_2_U |lsn#0@@29|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@106 |lsn#0@@29|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |subseq#0@@1| |lsn#0@@29|))
))))
|result#0|)))))
 :qid |MsgHistoryidfy.149:15|
 :skolemid |2993|
 :pattern ( (MsgHistoryMod.MsgHistory.IncludesSubseq this@@106 |subseq#0@@1|))
))))
(assert  (=> true (forall ((this@@107 T@U) (|subseq#0@@2| T@U) ) (!  (=> (and (and (= (type this@@107) DatatypeTypeType) (= (type |subseq#0@@2|) DatatypeTypeType)) (or (|MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| (Lit this@@107) (Lit |subseq#0@@2|)) (and (and ($Is this@@107 Tclass.MsgHistoryMod.MsgHistory) ($Is |subseq#0@@2| Tclass.MsgHistoryMod.MsgHistory)) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit this@@107))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit |subseq#0@@2|))))))))) (and (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@107)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |subseq#0@@2|))) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@107)) (MsgHistoryMod.MsgHistory.seqStart (Lit |subseq#0@@2|))) (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |subseq#0@@2|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@107))) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit |subseq#0@@2|)) (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@107))) (forall ((|lsn#1@@4| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#1@@4|) (and (|MsgHistoryMod.MsgHistory.Contains#canCall| (Lit |subseq#0@@2|) |lsn#1@@4|) (=> (MsgHistoryMod.MsgHistory.Contains (Lit |subseq#0@@2|) |lsn#1@@4|) (and (|MsgHistoryMod.MsgHistory.Contains#canCall| (Lit this@@107) |lsn#1@@4|) (=> (MsgHistoryMod.MsgHistory.Contains (Lit this@@107) |lsn#1@@4|) (and (and (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@107)))) ($Box (int_2_U |lsn#1@@4|))))) (|$IsA#MsgHistoryMod.KeyedMessage| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |subseq#0@@2|)))) ($Box (int_2_U |lsn#1@@4|)))))) (and (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit this@@107)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |subseq#0@@2|)))))))))
 :qid |MsgHistoryidfy.156:31|
 :skolemid |2995|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |subseq#0@@2|)) ($Box (int_2_U |lsn#1@@4|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@107)) ($Box (int_2_U |lsn#1@@4|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@107 |lsn#1@@4|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |subseq#0@@2| |lsn#1@@4|))
)))))) (= (MsgHistoryMod.MsgHistory.IncludesSubseq (Lit this@@107) (Lit |subseq#0@@2|))  (and (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (Lit this@@107)) (MsgHistoryMod.MsgHistory.seqStart (Lit |subseq#0@@2|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit |subseq#0@@2|)) (MsgHistoryMod.MsgHistory.seqEnd (Lit this@@107)))) (let ((|result#1| (forall ((|lsn#1@@5| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |lsn#1@@5|) (MsgHistoryMod.MsgHistory.Contains (Lit |subseq#0@@2|) |lsn#1@@5|)) (and (MsgHistoryMod.MsgHistory.Contains (Lit this@@107) |lsn#1@@5|) (|MsgHistoryMod.KeyedMessage#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit this@@107)))) ($Box (int_2_U |lsn#1@@5|)))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MsgHistoryMod.MsgHistory.msgs (Lit |subseq#0@@2|)))) ($Box (int_2_U |lsn#1@@5|)))))))
 :qid |MsgHistoryidfy.156:31|
 :skolemid |2994|
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs |subseq#0@@2|)) ($Box (int_2_U |lsn#1@@5|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@107)) ($Box (int_2_U |lsn#1@@5|)))))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@107 |lsn#1@@5|))
 :pattern ( (MsgHistoryMod.MsgHistory.Contains |subseq#0@@2| |lsn#1@@5|))
))))
|result#1|)))))
 :qid |MsgHistoryidfy.149:15|
 :weight 3
 :skolemid |2997|
 :pattern ( (MsgHistoryMod.MsgHistory.IncludesSubseq (Lit this@@107) (Lit |subseq#0@@2|)))
))))
(assert (= (type Tclass.MsgHistoryMod.__default) TyType))
(assert (= (Tag Tclass.MsgHistoryMod.__default) Tagclass.MsgHistoryMod.__default))
(assert (= (TagFamily Tclass.MsgHistoryMod.__default) tytagFamily$_default))
(assert (forall ((bx@@162 T@U) ) (!  (=> (and (= (type bx@@162) BoxType) ($IsBox bx@@162 Tclass.MsgHistoryMod.__default)) (and (= ($Box ($Unbox refType bx@@162)) bx@@162) ($Is ($Unbox refType bx@@162) Tclass.MsgHistoryMod.__default)))
 :qid |unknown.0:0|
 :skolemid |2998|
 :pattern ( ($IsBox bx@@162 Tclass.MsgHistoryMod.__default))
)))
(assert (forall (($o@@51 T@U) ) (!  (=> (= (type $o@@51) refType) (= ($Is $o@@51 Tclass.MsgHistoryMod.__default)  (or (= $o@@51 null) (= (dtype $o@@51) Tclass.MsgHistoryMod.__default))))
 :qid |unknown.0:0|
 :skolemid |2999|
 :pattern ( ($Is $o@@51 Tclass.MsgHistoryMod.__default))
)))
(assert (forall (($o@@52 T@U) ($h@@123 T@U) ) (!  (=> (and (= (type $o@@52) refType) (= (type $h@@123) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@52 Tclass.MsgHistoryMod.__default $h@@123)  (or (= $o@@52 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@52) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3000|
 :pattern ( ($IsAlloc $o@@52 Tclass.MsgHistoryMod.__default $h@@123))
)))
(assert (forall ((arg0@@555 Int) ) (! (= (type (MsgHistoryMod.__default.EmptyHistoryAt arg0@@555)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.__default.EmptyHistoryAt|
 :pattern ( (MsgHistoryMod.__default.EmptyHistoryAt arg0@@555))
)))
(assert  (=> true (forall ((|lsn#0@@30| Int) ) (!  (=> (or (|MsgHistoryMod.__default.EmptyHistoryAt#canCall| |lsn#0@@30|) (INTERNAL_le_boogie 0 |lsn#0@@30|)) (and (MsgHistoryMod.MsgHistory.WF (MsgHistoryMod.__default.EmptyHistoryAt |lsn#0@@30|)) ($Is (MsgHistoryMod.__default.EmptyHistoryAt |lsn#0@@30|) Tclass.MsgHistoryMod.MsgHistory)))
 :qid |MsgHistoryidfy.162:27|
 :skolemid |3001|
 :pattern ( (MsgHistoryMod.__default.EmptyHistoryAt |lsn#0@@30|))
))))
(assert (forall ((|lsn#0@@31| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#0@@31|) (= (|MsgHistoryMod.__default.EmptyHistoryAt#requires| |lsn#0@@31|) true))
 :qid |MsgHistoryidfy.162:27|
 :skolemid |3002|
 :pattern ( (|MsgHistoryMod.__default.EmptyHistoryAt#requires| |lsn#0@@31|))
)))
(assert  (=> true (forall ((|lsn#0@@32| Int) ) (!  (=> (or (|MsgHistoryMod.__default.EmptyHistoryAt#canCall| |lsn#0@@32|) (INTERNAL_le_boogie 0 |lsn#0@@32|)) (= (MsgHistoryMod.__default.EmptyHistoryAt |lsn#0@@32|) (|#MsgHistoryMod.MsgHistory.MsgHistory| (Lit (|Map#Empty| BoxType BoxType)) |lsn#0@@32| |lsn#0@@32|)))
 :qid |MsgHistoryidfy.162:27|
 :skolemid |3003|
 :pattern ( (MsgHistoryMod.__default.EmptyHistoryAt |lsn#0@@32|))
))))
(assert  (=> true (forall ((|lsn#0@@33| Int) ) (!  (=> (or (|MsgHistoryMod.__default.EmptyHistoryAt#canCall| (LitInt |lsn#0@@33|)) (INTERNAL_le_boogie 0 |lsn#0@@33|)) (= (MsgHistoryMod.__default.EmptyHistoryAt (LitInt |lsn#0@@33|)) (Lit (|#MsgHistoryMod.MsgHistory.MsgHistory| (Lit (|Map#Empty| BoxType BoxType)) (LitInt |lsn#0@@33|) (LitInt |lsn#0@@33|)))))
 :qid |MsgHistoryidfy.162:27|
 :weight 3
 :skolemid |3004|
 :pattern ( (MsgHistoryMod.__default.EmptyHistoryAt (LitInt |lsn#0@@33|)))
))))
(assert (forall ((arg0@@556 Int) (arg1@@275 T@U) ) (! (= (type (MsgHistoryMod.__default.SingletonAt arg0@@556 arg1@@275)) DatatypeTypeType)
 :qid |funType:MsgHistoryMod.__default.SingletonAt|
 :pattern ( (MsgHistoryMod.__default.SingletonAt arg0@@556 arg1@@275))
)))
(assert  (=> true (forall ((|lsn#0@@34| Int) (|msg#0@@3| T@U) ) (!  (=> (and (= (type |msg#0@@3|) DatatypeTypeType) (or (|MsgHistoryMod.__default.SingletonAt#canCall| |lsn#0@@34| |msg#0@@3|) (and (INTERNAL_le_boogie 0 |lsn#0@@34|) ($Is |msg#0@@3| Tclass.MsgHistoryMod.KeyedMessage)))) ($Is (MsgHistoryMod.__default.SingletonAt |lsn#0@@34| |msg#0@@3|) Tclass.MsgHistoryMod.MsgHistory))
 :qid |MsgHistoryidfy.168:24|
 :skolemid |3005|
 :pattern ( (MsgHistoryMod.__default.SingletonAt |lsn#0@@34| |msg#0@@3|))
))))
(assert (forall ((|lsn#0@@35| Int) (|msg#0@@4| T@U) ) (!  (=> (= (type |msg#0@@4|) DatatypeTypeType) (=> (and (INTERNAL_le_boogie 0 |lsn#0@@35|) ($Is |msg#0@@4| Tclass.MsgHistoryMod.KeyedMessage)) (= (|MsgHistoryMod.__default.SingletonAt#requires| |lsn#0@@35| |msg#0@@4|) true)))
 :qid |MsgHistoryidfy.168:24|
 :skolemid |3006|
 :pattern ( (|MsgHistoryMod.__default.SingletonAt#requires| |lsn#0@@35| |msg#0@@4|))
)))
(assert  (=> true (forall ((|lsn#0@@36| Int) (|msg#0@@5| T@U) ) (!  (=> (and (= (type |msg#0@@5|) DatatypeTypeType) (or (|MsgHistoryMod.__default.SingletonAt#canCall| |lsn#0@@36| |msg#0@@5|) (and (INTERNAL_le_boogie 0 |lsn#0@@36|) ($Is |msg#0@@5| Tclass.MsgHistoryMod.KeyedMessage)))) (= (MsgHistoryMod.__default.SingletonAt |lsn#0@@36| |msg#0@@5|) (|#MsgHistoryMod.MsgHistory.MsgHistory| (|Map#Build| (|Map#Empty| BoxType BoxType) ($Box (int_2_U |lsn#0@@36|)) ($Box |msg#0@@5|)) |lsn#0@@36| (INTERNAL_add_boogie |lsn#0@@36| 1))))
 :qid |MsgHistoryidfy.168:24|
 :skolemid |3007|
 :pattern ( (MsgHistoryMod.__default.SingletonAt |lsn#0@@36| |msg#0@@5|))
))))
(assert  (=> true (forall ((|lsn#0@@37| Int) (|msg#0@@6| T@U) ) (!  (=> (and (= (type |msg#0@@6|) DatatypeTypeType) (or (|MsgHistoryMod.__default.SingletonAt#canCall| (LitInt |lsn#0@@37|) (Lit |msg#0@@6|)) (and (INTERNAL_le_boogie 0 |lsn#0@@37|) ($Is |msg#0@@6| Tclass.MsgHistoryMod.KeyedMessage)))) (= (MsgHistoryMod.__default.SingletonAt (LitInt |lsn#0@@37|) (Lit |msg#0@@6|)) (Lit (|#MsgHistoryMod.MsgHistory.MsgHistory| (Lit (|Map#Build| (|Map#Empty| BoxType BoxType) ($Box (int_2_U (LitInt |lsn#0@@37|))) ($Box (Lit |msg#0@@6|)))) (LitInt |lsn#0@@37|) (LitInt (INTERNAL_add_boogie |lsn#0@@37| 1))))))
 :qid |MsgHistoryidfy.168:24|
 :weight 3
 :skolemid |3008|
 :pattern ( (MsgHistoryMod.__default.SingletonAt (LitInt |lsn#0@@37|) (Lit |msg#0@@6|)))
))))
(assert  (=> true (forall ((|stampedMap#0| T@U) (|history#0| T@U) ) (!  (=> (and (and (= (type |stampedMap#0|) DatatypeTypeType) (= (type |history#0|) DatatypeTypeType)) (or (|MsgHistoryMod.__default.MapPlusHistory#canCall| |stampedMap#0| |history#0|) (and (and ($Is |stampedMap#0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |history#0| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF |history#0|) (MsgHistoryMod.MsgHistory.CanFollow |history#0| (StampedMod.Stamped.seqEnd |stampedMap#0|)))))) ($Is (MsgHistoryMod.__default.MapPlusHistory |stampedMap#0| |history#0|) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))
 :qid |MsgHistoryidfy.178:27|
 :skolemid |3009|
 :pattern ( (MsgHistoryMod.__default.MapPlusHistory |stampedMap#0| |history#0|))
))))
(assert (forall ((|stampedMap#0@@0| T@U) (|history#0@@0| T@U) ) (!  (=> (and (and (= (type |stampedMap#0@@0|) DatatypeTypeType) (= (type |history#0@@0|) DatatypeTypeType)) (and ($Is |stampedMap#0@@0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |history#0@@0| Tclass.MsgHistoryMod.MsgHistory))) (= (|MsgHistoryMod.__default.MapPlusHistory#requires| |stampedMap#0@@0| |history#0@@0|)  (and (MsgHistoryMod.MsgHistory.WF |history#0@@0|) (MsgHistoryMod.MsgHistory.CanFollow |history#0@@0| (StampedMod.Stamped.seqEnd |stampedMap#0@@0|)))))
 :qid |MsgHistoryidfy.178:27|
 :skolemid |3010|
 :pattern ( (|MsgHistoryMod.__default.MapPlusHistory#requires| |stampedMap#0@@0| |history#0@@0|))
)))
(assert  (=> true (forall ((|stampedMap#0@@1| T@U) (|history#0@@1| T@U) ) (!  (=> (and (and (= (type |stampedMap#0@@1|) DatatypeTypeType) (= (type |history#0@@1|) DatatypeTypeType)) (or (|MsgHistoryMod.__default.MapPlusHistory#canCall| |stampedMap#0@@1| |history#0@@1|) (and (and ($Is |stampedMap#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |history#0@@1| Tclass.MsgHistoryMod.MsgHistory)) (and (MsgHistoryMod.MsgHistory.WF |history#0@@1|) (MsgHistoryMod.MsgHistory.CanFollow |history#0@@1| (StampedMod.Stamped.seqEnd |stampedMap#0@@1|)))))) (and (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| |history#0@@1| |stampedMap#0@@1|) (= (MsgHistoryMod.__default.MapPlusHistory |stampedMap#0@@1| |history#0@@1|) (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $LZ) |history#0@@1| |stampedMap#0@@1|))))
 :qid |MsgHistoryidfy.178:27|
 :skolemid |3011|
 :pattern ( (MsgHistoryMod.__default.MapPlusHistory |stampedMap#0@@1| |history#0@@1|))
))))
(assert  (=> true (forall ((|stampedMap#0@@2| T@U) (|history#0@@2| T@U) ) (!  (=> (and (and (= (type |stampedMap#0@@2|) DatatypeTypeType) (= (type |history#0@@2|) DatatypeTypeType)) (or (|MsgHistoryMod.__default.MapPlusHistory#canCall| (Lit |stampedMap#0@@2|) (Lit |history#0@@2|)) (and (and ($Is |stampedMap#0@@2| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |history#0@@2| Tclass.MsgHistoryMod.MsgHistory)) (and (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit |history#0@@2|))))) (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit |history#0@@2|) (LitInt (StampedMod.Stamped.seqEnd (Lit |stampedMap#0@@2|))))))))))) (and (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (Lit |history#0@@2|) (Lit |stampedMap#0@@2|)) (= (MsgHistoryMod.__default.MapPlusHistory (Lit |stampedMap#0@@2|) (Lit |history#0@@2|)) (Lit (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $LZ) (Lit |history#0@@2|) (Lit |stampedMap#0@@2|))))))
 :qid |MsgHistoryidfy.178:27|
 :weight 3
 :skolemid |3012|
 :pattern ( (MsgHistoryMod.__default.MapPlusHistory (Lit |stampedMap#0@@2|) (Lit |history#0@@2|)))
))))
(assert (forall ((arg0@@557 T@U) ) (! (= (type (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| arg0@@557)) DatatypeTypeType)
 :qid |funType:#AbstractJournal.TransitionLabel.ReadForRecoveryLabel|
 :pattern ( (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| arg0@@557))
)))
(assert (forall ((|a#0#0#0@@5| T@U) ) (!  (=> (= (type |a#0#0#0@@5|) DatatypeTypeType) (= (DatatypeCtorId (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#0#0#0@@5|)) |##AbstractJournal.TransitionLabel.ReadForRecoveryLabel|))
 :qid |AbstractJournalidfy.14:28|
 :skolemid |3013|
 :pattern ( (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#0#0#0@@5|))
)))
(assert (forall ((d@@98 T@U) ) (!  (=> (= (type d@@98) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@98) (= (DatatypeCtorId d@@98) |##AbstractJournal.TransitionLabel.ReadForRecoveryLabel|)))
 :qid |unknown.0:0|
 :skolemid |3014|
 :pattern ( (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@98))
)))
(assert (forall ((d@@99 T@U) ) (!  (=> (and (= (type d@@99) DatatypeTypeType) (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@99)) (exists ((|a#1#0#0@@5| T@U) ) (!  (and (= (type |a#1#0#0@@5|) DatatypeTypeType) (= d@@99 (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#1#0#0@@5|)))
 :qid |AbstractJournalidfy.14:28|
 :skolemid |3015|
 :no-pattern (type |a#1#0#0@@5|)
 :no-pattern (U_2_int |a#1#0#0@@5|)
 :no-pattern (U_2_bool |a#1#0#0@@5|)
)))
 :qid |unknown.0:0|
 :skolemid |3016|
 :pattern ( (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@99))
)))
(assert (= (type Tclass.AbstractJournal.TransitionLabel) TyType))
(assert (= (Tag Tclass.AbstractJournal.TransitionLabel) Tagclass.AbstractJournal.TransitionLabel))
(assert (= (TagFamily Tclass.AbstractJournal.TransitionLabel) tytagFamily$TransitionLabel))
(assert (forall ((bx@@163 T@U) ) (!  (=> (and (= (type bx@@163) BoxType) ($IsBox bx@@163 Tclass.AbstractJournal.TransitionLabel)) (and (= ($Box ($Unbox DatatypeTypeType bx@@163)) bx@@163) ($Is ($Unbox DatatypeTypeType bx@@163) Tclass.AbstractJournal.TransitionLabel)))
 :qid |unknown.0:0|
 :skolemid |3017|
 :pattern ( ($IsBox bx@@163 Tclass.AbstractJournal.TransitionLabel))
)))
(assert (forall ((|a#2#0#0@@5| T@U) ) (!  (=> (= (type |a#2#0#0@@5|) DatatypeTypeType) (= ($Is (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#2#0#0@@5|) Tclass.AbstractJournal.TransitionLabel) ($Is |a#2#0#0@@5| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |AbstractJournalidfy.14:28|
 :skolemid |3018|
 :pattern ( ($Is (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#2#0#0@@5|) Tclass.AbstractJournal.TransitionLabel))
)))
(assert (forall ((|a#3#0#0@@5| T@U) ($h@@124 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@5|) DatatypeTypeType) (= (type $h@@124) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@124)) (= ($IsAlloc (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#3#0#0@@5|) Tclass.AbstractJournal.TransitionLabel $h@@124) ($IsAlloc |a#3#0#0@@5| Tclass.MsgHistoryMod.MsgHistory $h@@124)))
 :qid |AbstractJournalidfy.14:28|
 :skolemid |3019|
 :pattern ( ($IsAlloc (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#3#0#0@@5|) Tclass.AbstractJournal.TransitionLabel $h@@124))
)))
(assert (forall ((arg0@@558 T@U) ) (! (= (type (AbstractJournal.TransitionLabel.messages arg0@@558)) DatatypeTypeType)
 :qid |funType:AbstractJournal.TransitionLabel.messages|
 :pattern ( (AbstractJournal.TransitionLabel.messages arg0@@558))
)))
(assert (forall ((d@@100 T@U) ($h@@125 T@U) ) (!  (=> (and (and (= (type d@@100) DatatypeTypeType) (= (type $h@@125) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@125) (and (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@100) ($IsAlloc d@@100 Tclass.AbstractJournal.TransitionLabel $h@@125)))) ($IsAlloc (AbstractJournal.TransitionLabel.messages d@@100) Tclass.MsgHistoryMod.MsgHistory $h@@125))
 :qid |unknown.0:0|
 :skolemid |3020|
 :pattern ( ($IsAlloc (AbstractJournal.TransitionLabel.messages d@@100) Tclass.MsgHistoryMod.MsgHistory $h@@125))
)))
(assert (forall ((|a#4#0#0@@5| T@U) ) (!  (=> (= (type |a#4#0#0@@5|) DatatypeTypeType) (= (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (Lit |a#4#0#0@@5|)) (Lit (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#4#0#0@@5|))))
 :qid |AbstractJournalidfy.14:28|
 :skolemid |3021|
 :pattern ( (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (Lit |a#4#0#0@@5|)))
)))
(assert (forall ((|a#5#0#0@@7| T@U) ) (!  (=> (= (type |a#5#0#0@@7|) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.messages (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#5#0#0@@7|)) |a#5#0#0@@7|))
 :qid |AbstractJournalidfy.14:28|
 :skolemid |3022|
 :pattern ( (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#5#0#0@@7|))
)))
(assert (forall ((|a#6#0#0@@7| T@U) ) (!  (=> (= (type |a#6#0#0@@7|) DatatypeTypeType) (< (DtRank |a#6#0#0@@7|) (DtRank (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#6#0#0@@7|))))
 :qid |AbstractJournalidfy.14:28|
 :skolemid |3023|
 :pattern ( (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| |a#6#0#0@@7|))
)))
(assert (forall ((arg0@@559 T@U) ) (! (= (type (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| arg0@@559)) DatatypeTypeType)
 :qid |funType:#AbstractJournal.TransitionLabel.FreezeForCommitLabel|
 :pattern ( (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| arg0@@559))
)))
(assert (forall ((|a#7#0#0@@7| T@U) ) (!  (=> (= (type |a#7#0#0@@7|) DatatypeTypeType) (= (DatatypeCtorId (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#7#0#0@@7|)) |##AbstractJournal.TransitionLabel.FreezeForCommitLabel|))
 :qid |AbstractJournalidfy.15:28|
 :skolemid |3024|
 :pattern ( (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#7#0#0@@7|))
)))
(assert (forall ((d@@101 T@U) ) (!  (=> (= (type d@@101) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@101) (= (DatatypeCtorId d@@101) |##AbstractJournal.TransitionLabel.FreezeForCommitLabel|)))
 :qid |unknown.0:0|
 :skolemid |3025|
 :pattern ( (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@101))
)))
(assert (forall ((d@@102 T@U) ) (!  (=> (and (= (type d@@102) DatatypeTypeType) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@102)) (exists ((|a#8#0#0@@6| T@U) ) (!  (and (= (type |a#8#0#0@@6|) DatatypeTypeType) (= d@@102 (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#8#0#0@@6|)))
 :qid |AbstractJournalidfy.15:28|
 :skolemid |3026|
 :no-pattern (type |a#8#0#0@@6|)
 :no-pattern (U_2_int |a#8#0#0@@6|)
 :no-pattern (U_2_bool |a#8#0#0@@6|)
)))
 :qid |unknown.0:0|
 :skolemid |3027|
 :pattern ( (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@102))
)))
(assert (forall ((|a#9#0#0@@4| T@U) ) (!  (=> (= (type |a#9#0#0@@4|) DatatypeTypeType) (= ($Is (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#9#0#0@@4|) Tclass.AbstractJournal.TransitionLabel) ($Is |a#9#0#0@@4| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |AbstractJournalidfy.15:28|
 :skolemid |3028|
 :pattern ( ($Is (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#9#0#0@@4|) Tclass.AbstractJournal.TransitionLabel))
)))
(assert (forall ((|a#10#0#0@@4| T@U) ($h@@126 T@U) ) (!  (=> (and (and (= (type |a#10#0#0@@4|) DatatypeTypeType) (= (type $h@@126) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@126)) (= ($IsAlloc (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#10#0#0@@4|) Tclass.AbstractJournal.TransitionLabel $h@@126) ($IsAlloc |a#10#0#0@@4| Tclass.MsgHistoryMod.MsgHistory $h@@126)))
 :qid |AbstractJournalidfy.15:28|
 :skolemid |3029|
 :pattern ( ($IsAlloc (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#10#0#0@@4|) Tclass.AbstractJournal.TransitionLabel $h@@126))
)))
(assert (forall ((arg0@@560 T@U) ) (! (= (type (AbstractJournal.TransitionLabel.frozenJournal arg0@@560)) DatatypeTypeType)
 :qid |funType:AbstractJournal.TransitionLabel.frozenJournal|
 :pattern ( (AbstractJournal.TransitionLabel.frozenJournal arg0@@560))
)))
(assert (forall ((d@@103 T@U) ($h@@127 T@U) ) (!  (=> (and (and (= (type d@@103) DatatypeTypeType) (= (type $h@@127) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@127) (and (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@103) ($IsAlloc d@@103 Tclass.AbstractJournal.TransitionLabel $h@@127)))) ($IsAlloc (AbstractJournal.TransitionLabel.frozenJournal d@@103) Tclass.MsgHistoryMod.MsgHistory $h@@127))
 :qid |unknown.0:0|
 :skolemid |3030|
 :pattern ( ($IsAlloc (AbstractJournal.TransitionLabel.frozenJournal d@@103) Tclass.MsgHistoryMod.MsgHistory $h@@127))
)))
(assert (forall ((|a#11#0#0@@4| T@U) ) (!  (=> (= (type |a#11#0#0@@4|) DatatypeTypeType) (= (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| (Lit |a#11#0#0@@4|)) (Lit (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#11#0#0@@4|))))
 :qid |AbstractJournalidfy.15:28|
 :skolemid |3031|
 :pattern ( (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| (Lit |a#11#0#0@@4|)))
)))
(assert (forall ((|a#12#0#0@@3| T@U) ) (!  (=> (= (type |a#12#0#0@@3|) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.frozenJournal (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#12#0#0@@3|)) |a#12#0#0@@3|))
 :qid |AbstractJournalidfy.15:28|
 :skolemid |3032|
 :pattern ( (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#12#0#0@@3|))
)))
(assert (forall ((|a#13#0#0@@1| T@U) ) (!  (=> (= (type |a#13#0#0@@1|) DatatypeTypeType) (< (DtRank |a#13#0#0@@1|) (DtRank (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#13#0#0@@1|))))
 :qid |AbstractJournalidfy.15:28|
 :skolemid |3033|
 :pattern ( (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |a#13#0#0@@1|))
)))
(assert (forall ((arg0@@561 Int) ) (! (= (type (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| arg0@@561)) DatatypeTypeType)
 :qid |funType:#AbstractJournal.TransitionLabel.QueryEndLsnLabel|
 :pattern ( (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| arg0@@561))
)))
(assert (forall ((|a#14#0#0@@2| Int) ) (! (= (DatatypeCtorId (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#14#0#0@@2|)) |##AbstractJournal.TransitionLabel.QueryEndLsnLabel|)
 :qid |AbstractJournalidfy.16:24|
 :skolemid |3034|
 :pattern ( (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#14#0#0@@2|))
)))
(assert (forall ((d@@104 T@U) ) (!  (=> (= (type d@@104) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@104) (= (DatatypeCtorId d@@104) |##AbstractJournal.TransitionLabel.QueryEndLsnLabel|)))
 :qid |unknown.0:0|
 :skolemid |3035|
 :pattern ( (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@104))
)))
(assert (forall ((d@@105 T@U) ) (!  (=> (and (= (type d@@105) DatatypeTypeType) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@105)) (exists ((|a#15#0#0@@2| Int) ) (! (= d@@105 (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#15#0#0@@2|))
 :qid |AbstractJournalidfy.16:24|
 :skolemid |3036|
)))
 :qid |unknown.0:0|
 :skolemid |3037|
 :pattern ( (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@105))
)))
(assert (forall ((|a#16#0#0@@2| Int) ) (! (= ($Is (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#16#0#0@@2|) Tclass.AbstractJournal.TransitionLabel) ($Is (int_2_U |a#16#0#0@@2|) Tclass._System.nat))
 :qid |AbstractJournalidfy.16:24|
 :skolemid |3038|
 :pattern ( ($Is (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#16#0#0@@2|) Tclass.AbstractJournal.TransitionLabel))
)))
(assert (forall ((|a#17#0#0@@1| Int) ($h@@128 T@U) ) (!  (=> (and (= (type $h@@128) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@128)) (= ($IsAlloc (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#17#0#0@@1|) Tclass.AbstractJournal.TransitionLabel $h@@128) ($IsAlloc (int_2_U |a#17#0#0@@1|) Tclass._System.nat $h@@128)))
 :qid |AbstractJournalidfy.16:24|
 :skolemid |3039|
 :pattern ( ($IsAlloc (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#17#0#0@@1|) Tclass.AbstractJournal.TransitionLabel $h@@128))
)))
(assert (forall ((d@@106 T@U) ($h@@129 T@U) ) (!  (=> (and (and (= (type d@@106) DatatypeTypeType) (= (type $h@@129) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@129) (and (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@106) ($IsAlloc d@@106 Tclass.AbstractJournal.TransitionLabel $h@@129)))) ($IsAlloc (int_2_U (AbstractJournal.TransitionLabel.endLsn d@@106)) Tclass._System.nat $h@@129))
 :qid |unknown.0:0|
 :skolemid |3040|
 :pattern ( ($IsAlloc (int_2_U (AbstractJournal.TransitionLabel.endLsn d@@106)) Tclass._System.nat $h@@129))
)))
(assert (forall ((|a#18#0#0@@1| Int) ) (! (= (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (LitInt |a#18#0#0@@1|)) (Lit (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#18#0#0@@1|)))
 :qid |AbstractJournalidfy.16:24|
 :skolemid |3041|
 :pattern ( (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (LitInt |a#18#0#0@@1|)))
)))
(assert (forall ((|a#19#0#0@@1| Int) ) (! (= (AbstractJournal.TransitionLabel.endLsn (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#19#0#0@@1|)) |a#19#0#0@@1|)
 :qid |AbstractJournalidfy.16:24|
 :skolemid |3042|
 :pattern ( (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| |a#19#0#0@@1|))
)))
(assert (forall ((arg0@@562 T@U) ) (! (= (type (|#AbstractJournal.TransitionLabel.PutLabel| arg0@@562)) DatatypeTypeType)
 :qid |funType:#AbstractJournal.TransitionLabel.PutLabel|
 :pattern ( (|#AbstractJournal.TransitionLabel.PutLabel| arg0@@562))
)))
(assert (forall ((|a#20#0#0@@1| T@U) ) (!  (=> (= (type |a#20#0#0@@1|) DatatypeTypeType) (= (DatatypeCtorId (|#AbstractJournal.TransitionLabel.PutLabel| |a#20#0#0@@1|)) |##AbstractJournal.TransitionLabel.PutLabel|))
 :qid |AbstractJournalidfy.17:16|
 :skolemid |3043|
 :pattern ( (|#AbstractJournal.TransitionLabel.PutLabel| |a#20#0#0@@1|))
)))
(assert (forall ((d@@107 T@U) ) (!  (=> (= (type d@@107) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.PutLabel_q d@@107) (= (DatatypeCtorId d@@107) |##AbstractJournal.TransitionLabel.PutLabel|)))
 :qid |unknown.0:0|
 :skolemid |3044|
 :pattern ( (AbstractJournal.TransitionLabel.PutLabel_q d@@107))
)))
(assert (forall ((d@@108 T@U) ) (!  (=> (and (= (type d@@108) DatatypeTypeType) (AbstractJournal.TransitionLabel.PutLabel_q d@@108)) (exists ((|a#21#0#0@@1| T@U) ) (!  (and (= (type |a#21#0#0@@1|) DatatypeTypeType) (= d@@108 (|#AbstractJournal.TransitionLabel.PutLabel| |a#21#0#0@@1|)))
 :qid |AbstractJournalidfy.17:16|
 :skolemid |3045|
 :no-pattern (type |a#21#0#0@@1|)
 :no-pattern (U_2_int |a#21#0#0@@1|)
 :no-pattern (U_2_bool |a#21#0#0@@1|)
)))
 :qid |unknown.0:0|
 :skolemid |3046|
 :pattern ( (AbstractJournal.TransitionLabel.PutLabel_q d@@108))
)))
(assert (forall ((|a#22#0#0@@1| T@U) ) (!  (=> (= (type |a#22#0#0@@1|) DatatypeTypeType) (= ($Is (|#AbstractJournal.TransitionLabel.PutLabel| |a#22#0#0@@1|) Tclass.AbstractJournal.TransitionLabel) ($Is |a#22#0#0@@1| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |AbstractJournalidfy.17:16|
 :skolemid |3047|
 :pattern ( ($Is (|#AbstractJournal.TransitionLabel.PutLabel| |a#22#0#0@@1|) Tclass.AbstractJournal.TransitionLabel))
)))
(assert (forall ((|a#23#0#0@@0| T@U) ($h@@130 T@U) ) (!  (=> (and (and (= (type |a#23#0#0@@0|) DatatypeTypeType) (= (type $h@@130) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@130)) (= ($IsAlloc (|#AbstractJournal.TransitionLabel.PutLabel| |a#23#0#0@@0|) Tclass.AbstractJournal.TransitionLabel $h@@130) ($IsAlloc |a#23#0#0@@0| Tclass.MsgHistoryMod.MsgHistory $h@@130)))
 :qid |AbstractJournalidfy.17:16|
 :skolemid |3048|
 :pattern ( ($IsAlloc (|#AbstractJournal.TransitionLabel.PutLabel| |a#23#0#0@@0|) Tclass.AbstractJournal.TransitionLabel $h@@130))
)))
(assert (forall ((d@@109 T@U) ($h@@131 T@U) ) (!  (=> (and (and (= (type d@@109) DatatypeTypeType) (= (type $h@@131) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@131) (and (AbstractJournal.TransitionLabel.PutLabel_q d@@109) ($IsAlloc d@@109 Tclass.AbstractJournal.TransitionLabel $h@@131)))) ($IsAlloc (AbstractJournal.TransitionLabel.messages d@@109) Tclass.MsgHistoryMod.MsgHistory $h@@131))
 :qid |unknown.0:0|
 :skolemid |3049|
 :pattern ( ($IsAlloc (AbstractJournal.TransitionLabel.messages d@@109) Tclass.MsgHistoryMod.MsgHistory $h@@131))
)))
(assert (forall ((|a#24#0#0| T@U) ) (!  (=> (= (type |a#24#0#0|) DatatypeTypeType) (= (|#AbstractJournal.TransitionLabel.PutLabel| (Lit |a#24#0#0|)) (Lit (|#AbstractJournal.TransitionLabel.PutLabel| |a#24#0#0|))))
 :qid |AbstractJournalidfy.17:16|
 :skolemid |3050|
 :pattern ( (|#AbstractJournal.TransitionLabel.PutLabel| (Lit |a#24#0#0|)))
)))
(assert (forall ((|a#25#0#0| T@U) ) (!  (=> (= (type |a#25#0#0|) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.messages (|#AbstractJournal.TransitionLabel.PutLabel| |a#25#0#0|)) |a#25#0#0|))
 :qid |AbstractJournalidfy.17:16|
 :skolemid |3051|
 :pattern ( (|#AbstractJournal.TransitionLabel.PutLabel| |a#25#0#0|))
)))
(assert (forall ((|a#26#0#0| T@U) ) (!  (=> (= (type |a#26#0#0|) DatatypeTypeType) (< (DtRank |a#26#0#0|) (DtRank (|#AbstractJournal.TransitionLabel.PutLabel| |a#26#0#0|))))
 :qid |AbstractJournalidfy.17:16|
 :skolemid |3052|
 :pattern ( (|#AbstractJournal.TransitionLabel.PutLabel| |a#26#0#0|))
)))
(assert (forall ((arg0@@563 Int) (arg1@@276 Int) ) (! (= (type (|#AbstractJournal.TransitionLabel.DiscardOldLabel| arg0@@563 arg1@@276)) DatatypeTypeType)
 :qid |funType:#AbstractJournal.TransitionLabel.DiscardOldLabel|
 :pattern ( (|#AbstractJournal.TransitionLabel.DiscardOldLabel| arg0@@563 arg1@@276))
)))
(assert (forall ((|a#27#0#0| Int) (|a#27#1#0| Int) ) (! (= (DatatypeCtorId (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#27#0#0| |a#27#1#0|)) |##AbstractJournal.TransitionLabel.DiscardOldLabel|)
 :qid |AbstractJournalidfy.18:23|
 :skolemid |3053|
 :pattern ( (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#27#0#0| |a#27#1#0|))
)))
(assert (forall ((d@@110 T@U) ) (!  (=> (= (type d@@110) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@110) (= (DatatypeCtorId d@@110) |##AbstractJournal.TransitionLabel.DiscardOldLabel|)))
 :qid |unknown.0:0|
 :skolemid |3054|
 :pattern ( (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@110))
)))
(assert (forall ((d@@111 T@U) ) (!  (=> (and (= (type d@@111) DatatypeTypeType) (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@111)) (exists ((|a#28#0#0| Int) (|a#28#1#0| Int) ) (! (= d@@111 (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#28#0#0| |a#28#1#0|))
 :qid |AbstractJournalidfy.18:23|
 :skolemid |3055|
)))
 :qid |unknown.0:0|
 :skolemid |3056|
 :pattern ( (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@111))
)))
(assert (forall ((|a#29#0#0| Int) (|a#29#1#0| Int) ) (! (= ($Is (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#29#0#0| |a#29#1#0|) Tclass.AbstractJournal.TransitionLabel)  (and ($Is (int_2_U |a#29#0#0|) Tclass._System.nat) ($Is (int_2_U |a#29#1#0|) Tclass._System.nat)))
 :qid |AbstractJournalidfy.18:23|
 :skolemid |3057|
 :pattern ( ($Is (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#29#0#0| |a#29#1#0|) Tclass.AbstractJournal.TransitionLabel))
)))
(assert (forall ((|a#30#0#0| Int) (|a#30#1#0| Int) ($h@@132 T@U) ) (!  (=> (and (= (type $h@@132) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@132)) (= ($IsAlloc (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#30#0#0| |a#30#1#0|) Tclass.AbstractJournal.TransitionLabel $h@@132)  (and ($IsAlloc (int_2_U |a#30#0#0|) Tclass._System.nat $h@@132) ($IsAlloc (int_2_U |a#30#1#0|) Tclass._System.nat $h@@132))))
 :qid |AbstractJournalidfy.18:23|
 :skolemid |3058|
 :pattern ( ($IsAlloc (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#30#0#0| |a#30#1#0|) Tclass.AbstractJournal.TransitionLabel $h@@132))
)))
(assert (forall ((d@@112 T@U) ($h@@133 T@U) ) (!  (=> (and (and (= (type d@@112) DatatypeTypeType) (= (type $h@@133) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@133) (and (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@112) ($IsAlloc d@@112 Tclass.AbstractJournal.TransitionLabel $h@@133)))) ($IsAlloc (int_2_U (AbstractJournal.TransitionLabel.startLsn d@@112)) Tclass._System.nat $h@@133))
 :qid |unknown.0:0|
 :skolemid |3059|
 :pattern ( ($IsAlloc (int_2_U (AbstractJournal.TransitionLabel.startLsn d@@112)) Tclass._System.nat $h@@133))
)))
(assert (forall ((d@@113 T@U) ($h@@134 T@U) ) (!  (=> (and (and (= (type d@@113) DatatypeTypeType) (= (type $h@@134) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@134) (and (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@113) ($IsAlloc d@@113 Tclass.AbstractJournal.TransitionLabel $h@@134)))) ($IsAlloc (int_2_U (AbstractJournal.TransitionLabel.requireEnd d@@113)) Tclass._System.nat $h@@134))
 :qid |unknown.0:0|
 :skolemid |3060|
 :pattern ( ($IsAlloc (int_2_U (AbstractJournal.TransitionLabel.requireEnd d@@113)) Tclass._System.nat $h@@134))
)))
(assert (forall ((|a#31#0#0| Int) (|a#31#1#0| Int) ) (! (= (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (LitInt |a#31#0#0|) (LitInt |a#31#1#0|)) (Lit (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#31#0#0| |a#31#1#0|)))
 :qid |AbstractJournalidfy.18:23|
 :skolemid |3061|
 :pattern ( (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (LitInt |a#31#0#0|) (LitInt |a#31#1#0|)))
)))
(assert (forall ((|a#32#0#0| Int) (|a#32#1#0| Int) ) (! (= (AbstractJournal.TransitionLabel.startLsn (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#32#0#0| |a#32#1#0|)) |a#32#0#0|)
 :qid |AbstractJournalidfy.18:23|
 :skolemid |3062|
 :pattern ( (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#32#0#0| |a#32#1#0|))
)))
(assert (forall ((|a#33#0#0| Int) (|a#33#1#0| Int) ) (! (= (AbstractJournal.TransitionLabel.requireEnd (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#33#0#0| |a#33#1#0|)) |a#33#1#0|)
 :qid |AbstractJournalidfy.18:23|
 :skolemid |3063|
 :pattern ( (|#AbstractJournal.TransitionLabel.DiscardOldLabel| |a#33#0#0| |a#33#1#0|))
)))
(assert (= (type |#AbstractJournal.TransitionLabel.InternalLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AbstractJournal.TransitionLabel.InternalLabel|) |##AbstractJournal.TransitionLabel.InternalLabel|))
(assert (forall ((d@@114 T@U) ) (!  (=> (= (type d@@114) DatatypeTypeType) (= (AbstractJournal.TransitionLabel.InternalLabel_q d@@114) (= (DatatypeCtorId d@@114) |##AbstractJournal.TransitionLabel.InternalLabel|)))
 :qid |unknown.0:0|
 :skolemid |3064|
 :pattern ( (AbstractJournal.TransitionLabel.InternalLabel_q d@@114))
)))
(assert (forall ((d@@115 T@U) ) (!  (=> (and (= (type d@@115) DatatypeTypeType) (AbstractJournal.TransitionLabel.InternalLabel_q d@@115)) (= d@@115 |#AbstractJournal.TransitionLabel.InternalLabel|))
 :qid |unknown.0:0|
 :skolemid |3065|
 :pattern ( (AbstractJournal.TransitionLabel.InternalLabel_q d@@115))
)))
(assert ($Is |#AbstractJournal.TransitionLabel.InternalLabel| Tclass.AbstractJournal.TransitionLabel))
(assert (forall (($h@@135 T@U) ) (!  (=> (and (= (type $h@@135) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@135)) ($IsAlloc |#AbstractJournal.TransitionLabel.InternalLabel| Tclass.AbstractJournal.TransitionLabel $h@@135))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3066|
 :pattern ( ($IsAlloc |#AbstractJournal.TransitionLabel.InternalLabel| Tclass.AbstractJournal.TransitionLabel $h@@135))
)))
(assert (= |#AbstractJournal.TransitionLabel.InternalLabel| (Lit |#AbstractJournal.TransitionLabel.InternalLabel|)))
(assert (forall ((d@@116 T@U) ) (!  (=> (and (= (type d@@116) DatatypeTypeType) (|$IsA#AbstractJournal.TransitionLabel| d@@116)) (or (or (or (or (or (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@116) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@116)) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@116)) (AbstractJournal.TransitionLabel.PutLabel_q d@@116)) (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@116)) (AbstractJournal.TransitionLabel.InternalLabel_q d@@116)))
 :qid |unknown.0:0|
 :skolemid |3067|
 :pattern ( (|$IsA#AbstractJournal.TransitionLabel| d@@116))
)))
(assert (forall ((d@@117 T@U) ) (!  (=> (and (= (type d@@117) DatatypeTypeType) ($Is d@@117 Tclass.AbstractJournal.TransitionLabel)) (or (or (or (or (or (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@117) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@117)) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@117)) (AbstractJournal.TransitionLabel.PutLabel_q d@@117)) (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@117)) (AbstractJournal.TransitionLabel.InternalLabel_q d@@117)))
 :qid |unknown.0:0|
 :skolemid |3068|
 :pattern ( (AbstractJournal.TransitionLabel.InternalLabel_q d@@117) ($Is d@@117 Tclass.AbstractJournal.TransitionLabel))
 :pattern ( (AbstractJournal.TransitionLabel.DiscardOldLabel_q d@@117) ($Is d@@117 Tclass.AbstractJournal.TransitionLabel))
 :pattern ( (AbstractJournal.TransitionLabel.PutLabel_q d@@117) ($Is d@@117 Tclass.AbstractJournal.TransitionLabel))
 :pattern ( (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q d@@117) ($Is d@@117 Tclass.AbstractJournal.TransitionLabel))
 :pattern ( (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q d@@117) ($Is d@@117 Tclass.AbstractJournal.TransitionLabel))
 :pattern ( (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q d@@117) ($Is d@@117 Tclass.AbstractJournal.TransitionLabel))
)))
(assert (forall ((a@@148 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@148) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) (and (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q a@@148) (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q b@@98))) (= (|AbstractJournal.TransitionLabel#Equal| a@@148 b@@98) (|MsgHistoryMod.MsgHistory#Equal| (AbstractJournal.TransitionLabel.messages a@@148) (AbstractJournal.TransitionLabel.messages b@@98))))
 :qid |unknown.0:0|
 :skolemid |3069|
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@148 b@@98) (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q a@@148))
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@148 b@@98) (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q b@@98))
)))
(assert (forall ((a@@149 T@U) (b@@99 T@U) ) (!  (=> (and (and (= (type a@@149) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (and (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q a@@149) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q b@@99))) (= (|AbstractJournal.TransitionLabel#Equal| a@@149 b@@99) (|MsgHistoryMod.MsgHistory#Equal| (AbstractJournal.TransitionLabel.frozenJournal a@@149) (AbstractJournal.TransitionLabel.frozenJournal b@@99))))
 :qid |unknown.0:0|
 :skolemid |3070|
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@149 b@@99) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q a@@149))
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@149 b@@99) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q b@@99))
)))
(assert (forall ((a@@150 T@U) (b@@100 T@U) ) (!  (=> (and (and (= (type a@@150) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) (and (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q a@@150) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q b@@100))) (= (|AbstractJournal.TransitionLabel#Equal| a@@150 b@@100) (= (AbstractJournal.TransitionLabel.endLsn a@@150) (AbstractJournal.TransitionLabel.endLsn b@@100))))
 :qid |unknown.0:0|
 :skolemid |3071|
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@150 b@@100) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q a@@150))
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@150 b@@100) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q b@@100))
)))
(assert (forall ((a@@151 T@U) (b@@101 T@U) ) (!  (=> (and (and (= (type a@@151) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (and (AbstractJournal.TransitionLabel.PutLabel_q a@@151) (AbstractJournal.TransitionLabel.PutLabel_q b@@101))) (= (|AbstractJournal.TransitionLabel#Equal| a@@151 b@@101) (|MsgHistoryMod.MsgHistory#Equal| (AbstractJournal.TransitionLabel.messages a@@151) (AbstractJournal.TransitionLabel.messages b@@101))))
 :qid |unknown.0:0|
 :skolemid |3072|
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@151 b@@101) (AbstractJournal.TransitionLabel.PutLabel_q a@@151))
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@151 b@@101) (AbstractJournal.TransitionLabel.PutLabel_q b@@101))
)))
(assert (forall ((a@@152 T@U) (b@@102 T@U) ) (!  (=> (and (and (= (type a@@152) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) (and (AbstractJournal.TransitionLabel.DiscardOldLabel_q a@@152) (AbstractJournal.TransitionLabel.DiscardOldLabel_q b@@102))) (= (|AbstractJournal.TransitionLabel#Equal| a@@152 b@@102)  (and (= (AbstractJournal.TransitionLabel.startLsn a@@152) (AbstractJournal.TransitionLabel.startLsn b@@102)) (= (AbstractJournal.TransitionLabel.requireEnd a@@152) (AbstractJournal.TransitionLabel.requireEnd b@@102)))))
 :qid |unknown.0:0|
 :skolemid |3073|
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@152 b@@102) (AbstractJournal.TransitionLabel.DiscardOldLabel_q a@@152))
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@152 b@@102) (AbstractJournal.TransitionLabel.DiscardOldLabel_q b@@102))
)))
(assert (forall ((a@@153 T@U) (b@@103 T@U) ) (!  (=> (and (and (= (type a@@153) DatatypeTypeType) (= (type b@@103) DatatypeTypeType)) (and (AbstractJournal.TransitionLabel.InternalLabel_q a@@153) (AbstractJournal.TransitionLabel.InternalLabel_q b@@103))) (= (|AbstractJournal.TransitionLabel#Equal| a@@153 b@@103) true))
 :qid |unknown.0:0|
 :skolemid |3074|
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@153 b@@103) (AbstractJournal.TransitionLabel.InternalLabel_q a@@153))
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@153 b@@103) (AbstractJournal.TransitionLabel.InternalLabel_q b@@103))
)))
(assert (forall ((a@@154 T@U) (b@@104 T@U) ) (!  (=> (and (= (type a@@154) DatatypeTypeType) (= (type b@@104) DatatypeTypeType)) (= (|AbstractJournal.TransitionLabel#Equal| a@@154 b@@104) (= a@@154 b@@104)))
 :qid |unknown.0:0|
 :skolemid |3075|
 :pattern ( (|AbstractJournal.TransitionLabel#Equal| a@@154 b@@104))
)))
(assert (forall ((arg0@@564 T@U) ) (! (= (type (|#AbstractJournal.Variables.Variables| arg0@@564)) DatatypeTypeType)
 :qid |funType:#AbstractJournal.Variables.Variables|
 :pattern ( (|#AbstractJournal.Variables.Variables| arg0@@564))
)))
(assert (forall ((|a#39#0#0@@0| T@U) ) (!  (=> (= (type |a#39#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#AbstractJournal.Variables.Variables| |a#39#0#0@@0|)) |##AbstractJournal.Variables.Variables|))
 :qid |AbstractJournalidfy.25:34|
 :skolemid |3076|
 :pattern ( (|#AbstractJournal.Variables.Variables| |a#39#0#0@@0|))
)))
(assert (forall ((d@@118 T@U) ) (!  (=> (= (type d@@118) DatatypeTypeType) (= (AbstractJournal.Variables.Variables_q d@@118) (= (DatatypeCtorId d@@118) |##AbstractJournal.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |3077|
 :pattern ( (AbstractJournal.Variables.Variables_q d@@118))
)))
(assert (forall ((d@@119 T@U) ) (!  (=> (and (= (type d@@119) DatatypeTypeType) (AbstractJournal.Variables.Variables_q d@@119)) (exists ((|a#40#0#0| T@U) ) (!  (and (= (type |a#40#0#0|) DatatypeTypeType) (= d@@119 (|#AbstractJournal.Variables.Variables| |a#40#0#0|)))
 :qid |AbstractJournalidfy.25:34|
 :skolemid |3078|
 :no-pattern (type |a#40#0#0|)
 :no-pattern (U_2_int |a#40#0#0|)
 :no-pattern (U_2_bool |a#40#0#0|)
)))
 :qid |unknown.0:0|
 :skolemid |3079|
 :pattern ( (AbstractJournal.Variables.Variables_q d@@119))
)))
(assert (= (type Tclass.AbstractJournal.Variables) TyType))
(assert (= (Tag Tclass.AbstractJournal.Variables) Tagclass.AbstractJournal.Variables))
(assert (= (TagFamily Tclass.AbstractJournal.Variables) tytagFamily$Variables))
(assert (forall ((bx@@164 T@U) ) (!  (=> (and (= (type bx@@164) BoxType) ($IsBox bx@@164 Tclass.AbstractJournal.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@164)) bx@@164) ($Is ($Unbox DatatypeTypeType bx@@164) Tclass.AbstractJournal.Variables)))
 :qid |unknown.0:0|
 :skolemid |3080|
 :pattern ( ($IsBox bx@@164 Tclass.AbstractJournal.Variables))
)))
(assert (forall ((|a#41#0#0| T@U) ) (!  (=> (= (type |a#41#0#0|) DatatypeTypeType) (= ($Is (|#AbstractJournal.Variables.Variables| |a#41#0#0|) Tclass.AbstractJournal.Variables) ($Is |a#41#0#0| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |AbstractJournalidfy.25:34|
 :skolemid |3081|
 :pattern ( ($Is (|#AbstractJournal.Variables.Variables| |a#41#0#0|) Tclass.AbstractJournal.Variables))
)))
(assert (forall ((|a#42#0#0| T@U) ($h@@136 T@U) ) (!  (=> (and (and (= (type |a#42#0#0|) DatatypeTypeType) (= (type $h@@136) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@136)) (= ($IsAlloc (|#AbstractJournal.Variables.Variables| |a#42#0#0|) Tclass.AbstractJournal.Variables $h@@136) ($IsAlloc |a#42#0#0| Tclass.MsgHistoryMod.MsgHistory $h@@136)))
 :qid |AbstractJournalidfy.25:34|
 :skolemid |3082|
 :pattern ( ($IsAlloc (|#AbstractJournal.Variables.Variables| |a#42#0#0|) Tclass.AbstractJournal.Variables $h@@136))
)))
(assert (forall ((d@@120 T@U) ($h@@137 T@U) ) (!  (=> (and (and (= (type d@@120) DatatypeTypeType) (= (type $h@@137) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@137) (and (AbstractJournal.Variables.Variables_q d@@120) ($IsAlloc d@@120 Tclass.AbstractJournal.Variables $h@@137)))) ($IsAlloc (AbstractJournal.Variables.journal d@@120) Tclass.MsgHistoryMod.MsgHistory $h@@137))
 :qid |unknown.0:0|
 :skolemid |3083|
 :pattern ( ($IsAlloc (AbstractJournal.Variables.journal d@@120) Tclass.MsgHistoryMod.MsgHistory $h@@137))
)))
(assert (forall ((|a#43#0#0| T@U) ) (!  (=> (= (type |a#43#0#0|) DatatypeTypeType) (= (|#AbstractJournal.Variables.Variables| (Lit |a#43#0#0|)) (Lit (|#AbstractJournal.Variables.Variables| |a#43#0#0|))))
 :qid |AbstractJournalidfy.25:34|
 :skolemid |3084|
 :pattern ( (|#AbstractJournal.Variables.Variables| (Lit |a#43#0#0|)))
)))
(assert (forall ((|a#44#0#0| T@U) ) (!  (=> (= (type |a#44#0#0|) DatatypeTypeType) (= (AbstractJournal.Variables.journal (|#AbstractJournal.Variables.Variables| |a#44#0#0|)) |a#44#0#0|))
 :qid |AbstractJournalidfy.25:34|
 :skolemid |3085|
 :pattern ( (|#AbstractJournal.Variables.Variables| |a#44#0#0|))
)))
(assert (forall ((|a#45#0#0| T@U) ) (!  (=> (= (type |a#45#0#0|) DatatypeTypeType) (< (DtRank |a#45#0#0|) (DtRank (|#AbstractJournal.Variables.Variables| |a#45#0#0|))))
 :qid |AbstractJournalidfy.25:34|
 :skolemid |3086|
 :pattern ( (|#AbstractJournal.Variables.Variables| |a#45#0#0|))
)))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) (|$IsA#AbstractJournal.Variables| d@@121)) (AbstractJournal.Variables.Variables_q d@@121))
 :qid |unknown.0:0|
 :skolemid |3087|
 :pattern ( (|$IsA#AbstractJournal.Variables| d@@121))
)))
(assert (forall ((d@@122 T@U) ) (!  (=> (and (= (type d@@122) DatatypeTypeType) ($Is d@@122 Tclass.AbstractJournal.Variables)) (AbstractJournal.Variables.Variables_q d@@122))
 :qid |unknown.0:0|
 :skolemid |3088|
 :pattern ( (AbstractJournal.Variables.Variables_q d@@122) ($Is d@@122 Tclass.AbstractJournal.Variables))
)))
(assert (forall ((a@@155 T@U) (b@@105 T@U) ) (!  (=> (and (and (= (type a@@155) DatatypeTypeType) (= (type b@@105) DatatypeTypeType)) true) (= (|AbstractJournal.Variables#Equal| a@@155 b@@105) (|MsgHistoryMod.MsgHistory#Equal| (AbstractJournal.Variables.journal a@@155) (AbstractJournal.Variables.journal b@@105))))
 :qid |unknown.0:0|
 :skolemid |3089|
 :pattern ( (|AbstractJournal.Variables#Equal| a@@155 b@@105))
)))
(assert (forall ((a@@156 T@U) (b@@106 T@U) ) (!  (=> (and (= (type a@@156) DatatypeTypeType) (= (type b@@106) DatatypeTypeType)) (= (|AbstractJournal.Variables#Equal| a@@156 b@@106) (= a@@156 b@@106)))
 :qid |unknown.0:0|
 :skolemid |3090|
 :pattern ( (|AbstractJournal.Variables#Equal| a@@156 b@@106))
)))
(assert  (=> true (forall ((this@@108 T@U) ) (!  (=> (and (= (type this@@108) DatatypeTypeType) (or (|AbstractJournal.Variables.WF#canCall| this@@108) ($Is this@@108 Tclass.AbstractJournal.Variables))) true)
 :qid |AbstractJournalidfy.27:15|
 :skolemid |3091|
 :pattern ( (AbstractJournal.Variables.WF this@@108))
))))
(assert (forall ((this@@109 T@U) ) (!  (=> (and (= (type this@@109) DatatypeTypeType) ($Is this@@109 Tclass.AbstractJournal.Variables)) (= (|AbstractJournal.Variables.WF#requires| this@@109) true))
 :qid |AbstractJournalidfy.27:15|
 :skolemid |3092|
 :pattern ( (|AbstractJournal.Variables.WF#requires| this@@109))
)))
(assert  (=> true (forall ((this@@110 T@U) ) (!  (=> (and (= (type this@@110) DatatypeTypeType) (or (|AbstractJournal.Variables.WF#canCall| this@@110) ($Is this@@110 Tclass.AbstractJournal.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (AbstractJournal.Variables.Variables_q this@@110) (|MsgHistoryMod.MsgHistory.WF#canCall| (AbstractJournal.Variables.journal this@@110)))) (= (AbstractJournal.Variables.WF this@@110)  (and true (MsgHistoryMod.MsgHistory.WF (AbstractJournal.Variables.journal this@@110))))))
 :qid |AbstractJournalidfy.27:15|
 :skolemid |3093|
 :pattern ( (AbstractJournal.Variables.WF this@@110))
))))
(assert  (=> true (forall ((this@@111 T@U) ) (!  (=> (and (= (type this@@111) DatatypeTypeType) (or (|AbstractJournal.Variables.WF#canCall| (Lit this@@111)) ($Is this@@111 Tclass.AbstractJournal.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (AbstractJournal.Variables.Variables_q (Lit this@@111)) (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit (AbstractJournal.Variables.journal (Lit this@@111)))))) (= (AbstractJournal.Variables.WF (Lit this@@111)) (U_2_bool (Lit (bool_2_U  (and true (MsgHistoryMod.MsgHistory.WF (Lit (AbstractJournal.Variables.journal (Lit this@@111)))))))))))
 :qid |AbstractJournalidfy.27:15|
 :weight 3
 :skolemid |3094|
 :pattern ( (AbstractJournal.Variables.WF (Lit this@@111)))
))))
(assert  (=> true (forall ((this@@112 T@U) (|lsn#0@@38| Int) ) (!  (=> (and (= (type this@@112) DatatypeTypeType) (or (|AbstractJournal.Variables.CanEndAt#canCall| this@@112 |lsn#0@@38|) (and ($Is this@@112 Tclass.AbstractJournal.Variables) (INTERNAL_le_boogie 0 |lsn#0@@38|)))) true)
 :qid |AbstractJournalidfy.31:15|
 :skolemid |3095|
 :pattern ( (AbstractJournal.Variables.CanEndAt this@@112 |lsn#0@@38|))
))))
(assert (forall ((this@@113 T@U) (|lsn#0@@39| Int) ) (!  (=> (= (type this@@113) DatatypeTypeType) (=> (and ($Is this@@113 Tclass.AbstractJournal.Variables) (INTERNAL_le_boogie 0 |lsn#0@@39|)) (= (|AbstractJournal.Variables.CanEndAt#requires| this@@113 |lsn#0@@39|) true)))
 :qid |AbstractJournalidfy.31:15|
 :skolemid |3096|
 :pattern ( (|AbstractJournal.Variables.CanEndAt#requires| this@@113 |lsn#0@@39|))
)))
(assert  (=> true (forall ((this@@114 T@U) (|lsn#0@@40| Int) ) (!  (=> (and (= (type this@@114) DatatypeTypeType) (or (|AbstractJournal.Variables.CanEndAt#canCall| this@@114 |lsn#0@@40|) (and ($Is this@@114 Tclass.AbstractJournal.Variables) (INTERNAL_le_boogie 0 |lsn#0@@40|)))) (and (and (AbstractJournal.Variables.Variables_q this@@114) (MsgHistoryMod.MsgHistory.MsgHistory_q (AbstractJournal.Variables.journal this@@114))) (= (AbstractJournal.Variables.CanEndAt this@@114 |lsn#0@@40|) (= (MsgHistoryMod.MsgHistory.seqEnd (AbstractJournal.Variables.journal this@@114)) |lsn#0@@40|))))
 :qid |AbstractJournalidfy.31:15|
 :skolemid |3097|
 :pattern ( (AbstractJournal.Variables.CanEndAt this@@114 |lsn#0@@40|))
))))
(assert  (=> true (forall ((this@@115 T@U) (|lsn#0@@41| Int) ) (!  (=> (and (= (type this@@115) DatatypeTypeType) (or (|AbstractJournal.Variables.CanEndAt#canCall| (Lit this@@115) (LitInt |lsn#0@@41|)) (and ($Is this@@115 Tclass.AbstractJournal.Variables) (INTERNAL_le_boogie 0 |lsn#0@@41|)))) (and (and (AbstractJournal.Variables.Variables_q (Lit this@@115)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (AbstractJournal.Variables.journal (Lit this@@115))))) (= (AbstractJournal.Variables.CanEndAt (Lit this@@115) (LitInt |lsn#0@@41|)) (= (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (AbstractJournal.Variables.journal (Lit this@@115))))) (LitInt |lsn#0@@41|)))))
 :qid |AbstractJournalidfy.31:15|
 :weight 3
 :skolemid |3098|
 :pattern ( (AbstractJournal.Variables.CanEndAt (Lit this@@115) (LitInt |lsn#0@@41|)))
))))
(assert (= (type Tclass.AbstractJournal.__default) TyType))
(assert (= (Tag Tclass.AbstractJournal.__default) Tagclass.AbstractJournal.__default))
(assert (= (TagFamily Tclass.AbstractJournal.__default) tytagFamily$_default))
(assert (forall ((bx@@165 T@U) ) (!  (=> (and (= (type bx@@165) BoxType) ($IsBox bx@@165 Tclass.AbstractJournal.__default)) (and (= ($Box ($Unbox refType bx@@165)) bx@@165) ($Is ($Unbox refType bx@@165) Tclass.AbstractJournal.__default)))
 :qid |unknown.0:0|
 :skolemid |3099|
 :pattern ( ($IsBox bx@@165 Tclass.AbstractJournal.__default))
)))
(assert (forall (($o@@53 T@U) ) (!  (=> (= (type $o@@53) refType) (= ($Is $o@@53 Tclass.AbstractJournal.__default)  (or (= $o@@53 null) (= (dtype $o@@53) Tclass.AbstractJournal.__default))))
 :qid |unknown.0:0|
 :skolemid |3100|
 :pattern ( ($Is $o@@53 Tclass.AbstractJournal.__default))
)))
(assert (forall (($o@@54 T@U) ($h@@138 T@U) ) (!  (=> (and (= (type $o@@54) refType) (= (type $h@@138) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@54 Tclass.AbstractJournal.__default $h@@138)  (or (= $o@@54 null) (U_2_bool (MapType1Select (MapType0Select $h@@138 $o@@54) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3101|
 :pattern ( ($IsAlloc $o@@54 Tclass.AbstractJournal.__default $h@@138))
)))
(assert  (=> true (forall ((|v#0@@122| T@U) (|v'#0@@39| T@U) (|lbl#0| T@U) ) (!  (=> (and (and (and (= (type |v#0@@122|) DatatypeTypeType) (= (type |v'#0@@39|) DatatypeTypeType)) (= (type |lbl#0|) DatatypeTypeType)) (or (|AbstractJournal.__default.ReadForRecovery#canCall| |v#0@@122| |v'#0@@39| |lbl#0|) (and (and ($Is |v#0@@122| Tclass.AbstractJournal.Variables) ($Is |v'#0@@39| Tclass.AbstractJournal.Variables)) ($Is |lbl#0| Tclass.AbstractJournal.TransitionLabel)))) true)
 :qid |AbstractJournalidfy.38:29|
 :skolemid |3102|
 :pattern ( (AbstractJournal.__default.ReadForRecovery |v#0@@122| |v'#0@@39| |lbl#0|))
))))
(assert (forall ((|v#0@@123| T@U) (|v'#0@@40| T@U) (|lbl#0@@0| T@U) ) (!  (=> (and (and (and (= (type |v#0@@123|) DatatypeTypeType) (= (type |v'#0@@40|) DatatypeTypeType)) (= (type |lbl#0@@0|) DatatypeTypeType)) (and (and ($Is |v#0@@123| Tclass.AbstractJournal.Variables) ($Is |v'#0@@40| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@0| Tclass.AbstractJournal.TransitionLabel))) (= (|AbstractJournal.__default.ReadForRecovery#requires| |v#0@@123| |v'#0@@40| |lbl#0@@0|) true))
 :qid |AbstractJournalidfy.38:29|
 :skolemid |3103|
 :pattern ( (|AbstractJournal.__default.ReadForRecovery#requires| |v#0@@123| |v'#0@@40| |lbl#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@124| T@U) (|v'#0@@41| T@U) (|lbl#0@@1| T@U) ) (!  (=> (and (and (and (= (type |v#0@@124|) DatatypeTypeType) (= (type |v'#0@@41|) DatatypeTypeType)) (= (type |lbl#0@@1|) DatatypeTypeType)) (or (|AbstractJournal.__default.ReadForRecovery#canCall| |v#0@@124| |v'#0@@41| |lbl#0@@1|) (and (and ($Is |v#0@@124| Tclass.AbstractJournal.Variables) ($Is |v'#0@@41| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@1| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| |v#0@@124|) (=> (AbstractJournal.Variables.WF |v#0@@124|) (=> (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@1|) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (AbstractJournal.TransitionLabel.messages |lbl#0@@1|)) (=> (MsgHistoryMod.MsgHistory.WF (AbstractJournal.TransitionLabel.messages |lbl#0@@1|)) (and (and (AbstractJournal.Variables.Variables_q |v#0@@124|) (|MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| (AbstractJournal.Variables.journal |v#0@@124|) (AbstractJournal.TransitionLabel.messages |lbl#0@@1|))) (=> (MsgHistoryMod.MsgHistory.IncludesSubseq (AbstractJournal.Variables.journal |v#0@@124|) (AbstractJournal.TransitionLabel.messages |lbl#0@@1|)) (and (|$IsA#AbstractJournal.Variables| |v'#0@@41|) (|$IsA#AbstractJournal.Variables| |v#0@@124|))))))))) (= (AbstractJournal.__default.ReadForRecovery |v#0@@124| |v'#0@@41| |lbl#0@@1|)  (and (and (and (and (AbstractJournal.Variables.WF |v#0@@124|) (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@1|)) (MsgHistoryMod.MsgHistory.WF (AbstractJournal.TransitionLabel.messages |lbl#0@@1|))) (MsgHistoryMod.MsgHistory.IncludesSubseq (AbstractJournal.Variables.journal |v#0@@124|) (AbstractJournal.TransitionLabel.messages |lbl#0@@1|))) (|AbstractJournal.Variables#Equal| |v'#0@@41| |v#0@@124|)))))
 :qid |AbstractJournalidfy.38:29|
 :skolemid |3104|
 :pattern ( (AbstractJournal.__default.ReadForRecovery |v#0@@124| |v'#0@@41| |lbl#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@125| T@U) (|v'#0@@42| T@U) (|lbl#0@@2| T@U) ) (!  (=> (and (and (and (= (type |v#0@@125|) DatatypeTypeType) (= (type |v'#0@@42|) DatatypeTypeType)) (= (type |lbl#0@@2|) DatatypeTypeType)) (or (|AbstractJournal.__default.ReadForRecovery#canCall| (Lit |v#0@@125|) (Lit |v'#0@@42|) (Lit |lbl#0@@2|)) (and (and ($Is |v#0@@125| Tclass.AbstractJournal.Variables) ($Is |v'#0@@42| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@2| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| (Lit |v#0@@125|)) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.Variables.WF (Lit |v#0@@125|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@2|))))) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@2|))))))) (and (and (AbstractJournal.Variables.Variables_q (Lit |v#0@@125|)) (|MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| (Lit (AbstractJournal.Variables.journal (Lit |v#0@@125|))) (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.IncludesSubseq (Lit (AbstractJournal.Variables.journal (Lit |v#0@@125|))) (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@2|))))))) (and (|$IsA#AbstractJournal.Variables| (Lit |v'#0@@42|)) (|$IsA#AbstractJournal.Variables| (Lit |v#0@@125|)))))))))) (= (AbstractJournal.__default.ReadForRecovery (Lit |v#0@@125|) (Lit |v'#0@@42|) (Lit |lbl#0@@2|))  (and (and (and (and (AbstractJournal.Variables.WF (Lit |v#0@@125|)) (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@2|))) (MsgHistoryMod.MsgHistory.WF (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@2|))))) (MsgHistoryMod.MsgHistory.IncludesSubseq (Lit (AbstractJournal.Variables.journal (Lit |v#0@@125|))) (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@2|))))) (|AbstractJournal.Variables#Equal| |v'#0@@42| |v#0@@125|)))))
 :qid |AbstractJournalidfy.38:29|
 :weight 3
 :skolemid |3105|
 :pattern ( (AbstractJournal.__default.ReadForRecovery (Lit |v#0@@125|) (Lit |v'#0@@42|) (Lit |lbl#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@126| T@U) (|v'#0@@43| T@U) (|lbl#0@@3| T@U) ) (!  (=> (and (and (and (= (type |v#0@@126|) DatatypeTypeType) (= (type |v'#0@@43|) DatatypeTypeType)) (= (type |lbl#0@@3|) DatatypeTypeType)) (or (|AbstractJournal.__default.FreezeForCommit#canCall| |v#0@@126| |v'#0@@43| |lbl#0@@3|) (and (and ($Is |v#0@@126| Tclass.AbstractJournal.Variables) ($Is |v'#0@@43| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@3| Tclass.AbstractJournal.TransitionLabel)))) true)
 :qid |AbstractJournalidfy.48:29|
 :skolemid |3106|
 :pattern ( (AbstractJournal.__default.FreezeForCommit |v#0@@126| |v'#0@@43| |lbl#0@@3|))
))))
(assert (forall ((|v#0@@127| T@U) (|v'#0@@44| T@U) (|lbl#0@@4| T@U) ) (!  (=> (and (and (and (= (type |v#0@@127|) DatatypeTypeType) (= (type |v'#0@@44|) DatatypeTypeType)) (= (type |lbl#0@@4|) DatatypeTypeType)) (and (and ($Is |v#0@@127| Tclass.AbstractJournal.Variables) ($Is |v'#0@@44| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@4| Tclass.AbstractJournal.TransitionLabel))) (= (|AbstractJournal.__default.FreezeForCommit#requires| |v#0@@127| |v'#0@@44| |lbl#0@@4|) true))
 :qid |AbstractJournalidfy.48:29|
 :skolemid |3107|
 :pattern ( (|AbstractJournal.__default.FreezeForCommit#requires| |v#0@@127| |v'#0@@44| |lbl#0@@4|))
)))
(assert  (=> true (forall ((|v#0@@128| T@U) (|v'#0@@45| T@U) (|lbl#0@@5| T@U) ) (!  (=> (and (and (and (= (type |v#0@@128|) DatatypeTypeType) (= (type |v'#0@@45|) DatatypeTypeType)) (= (type |lbl#0@@5|) DatatypeTypeType)) (or (|AbstractJournal.__default.FreezeForCommit#canCall| |v#0@@128| |v'#0@@45| |lbl#0@@5|) (and (and ($Is |v#0@@128| Tclass.AbstractJournal.Variables) ($Is |v'#0@@45| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@5| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| |v#0@@128|) (=> (AbstractJournal.Variables.WF |v#0@@128|) (=> (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q |lbl#0@@5|) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (AbstractJournal.TransitionLabel.frozenJournal |lbl#0@@5|)) (=> (MsgHistoryMod.MsgHistory.WF (AbstractJournal.TransitionLabel.frozenJournal |lbl#0@@5|)) (and (and (AbstractJournal.Variables.Variables_q |v#0@@128|) (|MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| (AbstractJournal.Variables.journal |v#0@@128|) (AbstractJournal.TransitionLabel.frozenJournal |lbl#0@@5|))) (=> (MsgHistoryMod.MsgHistory.IncludesSubseq (AbstractJournal.Variables.journal |v#0@@128|) (AbstractJournal.TransitionLabel.frozenJournal |lbl#0@@5|)) (and (|$IsA#AbstractJournal.Variables| |v'#0@@45|) (|$IsA#AbstractJournal.Variables| |v#0@@128|))))))))) (= (AbstractJournal.__default.FreezeForCommit |v#0@@128| |v'#0@@45| |lbl#0@@5|)  (and (and (and (and (AbstractJournal.Variables.WF |v#0@@128|) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q |lbl#0@@5|)) (MsgHistoryMod.MsgHistory.WF (AbstractJournal.TransitionLabel.frozenJournal |lbl#0@@5|))) (MsgHistoryMod.MsgHistory.IncludesSubseq (AbstractJournal.Variables.journal |v#0@@128|) (AbstractJournal.TransitionLabel.frozenJournal |lbl#0@@5|))) (|AbstractJournal.Variables#Equal| |v'#0@@45| |v#0@@128|)))))
 :qid |AbstractJournalidfy.48:29|
 :skolemid |3108|
 :pattern ( (AbstractJournal.__default.FreezeForCommit |v#0@@128| |v'#0@@45| |lbl#0@@5|))
))))
(assert  (=> true (forall ((|v#0@@129| T@U) (|v'#0@@46| T@U) (|lbl#0@@6| T@U) ) (!  (=> (and (and (and (= (type |v#0@@129|) DatatypeTypeType) (= (type |v'#0@@46|) DatatypeTypeType)) (= (type |lbl#0@@6|) DatatypeTypeType)) (or (|AbstractJournal.__default.FreezeForCommit#canCall| (Lit |v#0@@129|) (Lit |v'#0@@46|) (Lit |lbl#0@@6|)) (and (and ($Is |v#0@@129| Tclass.AbstractJournal.Variables) ($Is |v'#0@@46| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@6| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| (Lit |v#0@@129|)) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.Variables.WF (Lit |v#0@@129|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q (Lit |lbl#0@@6|))))) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit (AbstractJournal.TransitionLabel.frozenJournal (Lit |lbl#0@@6|)))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit (AbstractJournal.TransitionLabel.frozenJournal (Lit |lbl#0@@6|))))))) (and (and (AbstractJournal.Variables.Variables_q (Lit |v#0@@129|)) (|MsgHistoryMod.MsgHistory.IncludesSubseq#canCall| (Lit (AbstractJournal.Variables.journal (Lit |v#0@@129|))) (Lit (AbstractJournal.TransitionLabel.frozenJournal (Lit |lbl#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.IncludesSubseq (Lit (AbstractJournal.Variables.journal (Lit |v#0@@129|))) (Lit (AbstractJournal.TransitionLabel.frozenJournal (Lit |lbl#0@@6|))))))) (and (|$IsA#AbstractJournal.Variables| (Lit |v'#0@@46|)) (|$IsA#AbstractJournal.Variables| (Lit |v#0@@129|)))))))))) (= (AbstractJournal.__default.FreezeForCommit (Lit |v#0@@129|) (Lit |v'#0@@46|) (Lit |lbl#0@@6|))  (and (and (and (and (AbstractJournal.Variables.WF (Lit |v#0@@129|)) (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q (Lit |lbl#0@@6|))) (MsgHistoryMod.MsgHistory.WF (Lit (AbstractJournal.TransitionLabel.frozenJournal (Lit |lbl#0@@6|))))) (MsgHistoryMod.MsgHistory.IncludesSubseq (Lit (AbstractJournal.Variables.journal (Lit |v#0@@129|))) (Lit (AbstractJournal.TransitionLabel.frozenJournal (Lit |lbl#0@@6|))))) (|AbstractJournal.Variables#Equal| |v'#0@@46| |v#0@@129|)))))
 :qid |AbstractJournalidfy.48:29|
 :weight 3
 :skolemid |3109|
 :pattern ( (AbstractJournal.__default.FreezeForCommit (Lit |v#0@@129|) (Lit |v'#0@@46|) (Lit |lbl#0@@6|)))
))))
(assert  (=> true (forall ((|v#0@@130| T@U) (|v'#0@@47| T@U) (|lbl#0@@7| T@U) ) (!  (=> (and (and (and (= (type |v#0@@130|) DatatypeTypeType) (= (type |v'#0@@47|) DatatypeTypeType)) (= (type |lbl#0@@7|) DatatypeTypeType)) (or (|AbstractJournal.__default.ObserveFreshJournal#canCall| |v#0@@130| |v'#0@@47| |lbl#0@@7|) (and (and ($Is |v#0@@130| Tclass.AbstractJournal.Variables) ($Is |v'#0@@47| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@7| Tclass.AbstractJournal.TransitionLabel)))) true)
 :qid |AbstractJournalidfy.59:33|
 :skolemid |3110|
 :pattern ( (AbstractJournal.__default.ObserveFreshJournal |v#0@@130| |v'#0@@47| |lbl#0@@7|))
))))
(assert (forall ((|v#0@@131| T@U) (|v'#0@@48| T@U) (|lbl#0@@8| T@U) ) (!  (=> (and (and (and (= (type |v#0@@131|) DatatypeTypeType) (= (type |v'#0@@48|) DatatypeTypeType)) (= (type |lbl#0@@8|) DatatypeTypeType)) (and (and ($Is |v#0@@131| Tclass.AbstractJournal.Variables) ($Is |v'#0@@48| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@8| Tclass.AbstractJournal.TransitionLabel))) (= (|AbstractJournal.__default.ObserveFreshJournal#requires| |v#0@@131| |v'#0@@48| |lbl#0@@8|) true))
 :qid |AbstractJournalidfy.59:33|
 :skolemid |3111|
 :pattern ( (|AbstractJournal.__default.ObserveFreshJournal#requires| |v#0@@131| |v'#0@@48| |lbl#0@@8|))
)))
(assert  (=> true (forall ((|v#0@@132| T@U) (|v'#0@@49| T@U) (|lbl#0@@9| T@U) ) (!  (=> (and (and (and (= (type |v#0@@132|) DatatypeTypeType) (= (type |v'#0@@49|) DatatypeTypeType)) (= (type |lbl#0@@9|) DatatypeTypeType)) (or (|AbstractJournal.__default.ObserveFreshJournal#canCall| |v#0@@132| |v'#0@@49| |lbl#0@@9|) (and (and ($Is |v#0@@132| Tclass.AbstractJournal.Variables) ($Is |v'#0@@49| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@9| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| |v#0@@132|) (=> (AbstractJournal.Variables.WF |v#0@@132|) (=> (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@9|) (and (|AbstractJournal.Variables.CanEndAt#canCall| |v#0@@132| (AbstractJournal.TransitionLabel.endLsn |lbl#0@@9|)) (=> (AbstractJournal.Variables.CanEndAt |v#0@@132| (AbstractJournal.TransitionLabel.endLsn |lbl#0@@9|)) (and (|$IsA#AbstractJournal.Variables| |v'#0@@49|) (|$IsA#AbstractJournal.Variables| |v#0@@132|))))))) (= (AbstractJournal.__default.ObserveFreshJournal |v#0@@132| |v'#0@@49| |lbl#0@@9|)  (and (and (and (AbstractJournal.Variables.WF |v#0@@132|) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@9|)) (AbstractJournal.Variables.CanEndAt |v#0@@132| (AbstractJournal.TransitionLabel.endLsn |lbl#0@@9|))) (|AbstractJournal.Variables#Equal| |v'#0@@49| |v#0@@132|)))))
 :qid |AbstractJournalidfy.59:33|
 :skolemid |3112|
 :pattern ( (AbstractJournal.__default.ObserveFreshJournal |v#0@@132| |v'#0@@49| |lbl#0@@9|))
))))
(assert  (=> true (forall ((|v#0@@133| T@U) (|v'#0@@50| T@U) (|lbl#0@@10| T@U) ) (!  (=> (and (and (and (= (type |v#0@@133|) DatatypeTypeType) (= (type |v'#0@@50|) DatatypeTypeType)) (= (type |lbl#0@@10|) DatatypeTypeType)) (or (|AbstractJournal.__default.ObserveFreshJournal#canCall| (Lit |v#0@@133|) (Lit |v'#0@@50|) (Lit |lbl#0@@10|)) (and (and ($Is |v#0@@133| Tclass.AbstractJournal.Variables) ($Is |v'#0@@50| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@10| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| (Lit |v#0@@133|)) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.Variables.WF (Lit |v#0@@133|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@10|))))) (and (|AbstractJournal.Variables.CanEndAt#canCall| (Lit |v#0@@133|) (LitInt (AbstractJournal.TransitionLabel.endLsn (Lit |lbl#0@@10|)))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.Variables.CanEndAt (Lit |v#0@@133|) (LitInt (AbstractJournal.TransitionLabel.endLsn (Lit |lbl#0@@10|))))))) (and (|$IsA#AbstractJournal.Variables| (Lit |v'#0@@50|)) (|$IsA#AbstractJournal.Variables| (Lit |v#0@@133|)))))))) (= (AbstractJournal.__default.ObserveFreshJournal (Lit |v#0@@133|) (Lit |v'#0@@50|) (Lit |lbl#0@@10|))  (and (and (and (AbstractJournal.Variables.WF (Lit |v#0@@133|)) (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@10|))) (AbstractJournal.Variables.CanEndAt (Lit |v#0@@133|) (LitInt (AbstractJournal.TransitionLabel.endLsn (Lit |lbl#0@@10|))))) (|AbstractJournal.Variables#Equal| |v'#0@@50| |v#0@@133|)))))
 :qid |AbstractJournalidfy.59:33|
 :weight 3
 :skolemid |3113|
 :pattern ( (AbstractJournal.__default.ObserveFreshJournal (Lit |v#0@@133|) (Lit |v'#0@@50|) (Lit |lbl#0@@10|)))
))))
(assert  (=> true (forall ((|v#0@@134| T@U) (|v'#0@@51| T@U) (|lbl#0@@11| T@U) ) (!  (=> (and (and (and (= (type |v#0@@134|) DatatypeTypeType) (= (type |v'#0@@51|) DatatypeTypeType)) (= (type |lbl#0@@11|) DatatypeTypeType)) (or (|AbstractJournal.__default.Put#canCall| |v#0@@134| |v'#0@@51| |lbl#0@@11|) (and (and ($Is |v#0@@134| Tclass.AbstractJournal.Variables) ($Is |v'#0@@51| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@11| Tclass.AbstractJournal.TransitionLabel)))) true)
 :qid |AbstractJournalidfy.67:17|
 :skolemid |3114|
 :pattern ( (AbstractJournal.__default.Put |v#0@@134| |v'#0@@51| |lbl#0@@11|))
))))
(assert (forall ((|v#0@@135| T@U) (|v'#0@@52| T@U) (|lbl#0@@12| T@U) ) (!  (=> (and (and (and (= (type |v#0@@135|) DatatypeTypeType) (= (type |v'#0@@52|) DatatypeTypeType)) (= (type |lbl#0@@12|) DatatypeTypeType)) (and (and ($Is |v#0@@135| Tclass.AbstractJournal.Variables) ($Is |v'#0@@52| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@12| Tclass.AbstractJournal.TransitionLabel))) (= (|AbstractJournal.__default.Put#requires| |v#0@@135| |v'#0@@52| |lbl#0@@12|) true))
 :qid |AbstractJournalidfy.67:17|
 :skolemid |3115|
 :pattern ( (|AbstractJournal.__default.Put#requires| |v#0@@135| |v'#0@@52| |lbl#0@@12|))
)))
(assert  (=> true (forall ((|v#0@@136| T@U) (|v'#0@@53| T@U) (|lbl#0@@13| T@U) ) (!  (=> (and (and (and (= (type |v#0@@136|) DatatypeTypeType) (= (type |v'#0@@53|) DatatypeTypeType)) (= (type |lbl#0@@13|) DatatypeTypeType)) (or (|AbstractJournal.__default.Put#canCall| |v#0@@136| |v'#0@@53| |lbl#0@@13|) (and (and ($Is |v#0@@136| Tclass.AbstractJournal.Variables) ($Is |v'#0@@53| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@13| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| |v#0@@136|) (=> (AbstractJournal.Variables.WF |v#0@@136|) (=> (AbstractJournal.TransitionLabel.PutLabel_q |lbl#0@@13|) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (AbstractJournal.TransitionLabel.messages |lbl#0@@13|)) (=> (MsgHistoryMod.MsgHistory.WF (AbstractJournal.TransitionLabel.messages |lbl#0@@13|)) (and (and (and (AbstractJournal.Variables.Variables_q |v#0@@136|) (MsgHistoryMod.MsgHistory.MsgHistory_q (AbstractJournal.Variables.journal |v#0@@136|))) (MsgHistoryMod.MsgHistory.MsgHistory_q (AbstractJournal.TransitionLabel.messages |lbl#0@@13|))) (=> (= (MsgHistoryMod.MsgHistory.seqEnd (AbstractJournal.Variables.journal |v#0@@136|)) (MsgHistoryMod.MsgHistory.seqStart (AbstractJournal.TransitionLabel.messages |lbl#0@@13|))) (and (and (|$IsA#AbstractJournal.Variables| |v'#0@@53|) (|$IsA#AbstractJournal.Variables| (let ((|dt_update#journal#0#0| (MsgHistoryMod.MsgHistory.Concat (AbstractJournal.Variables.journal |v#0@@136|) (AbstractJournal.TransitionLabel.messages |lbl#0@@13|))))
(|#AbstractJournal.Variables.Variables| |dt_update#journal#0#0|)))) (and (AbstractJournal.Variables.Variables_q |v#0@@136|) (|MsgHistoryMod.MsgHistory.Concat#canCall| (AbstractJournal.Variables.journal |v#0@@136|) (AbstractJournal.TransitionLabel.messages |lbl#0@@13|))))))))))) (= (AbstractJournal.__default.Put |v#0@@136| |v'#0@@53| |lbl#0@@13|)  (and (and (and (and (AbstractJournal.Variables.WF |v#0@@136|) (AbstractJournal.TransitionLabel.PutLabel_q |lbl#0@@13|)) (MsgHistoryMod.MsgHistory.WF (AbstractJournal.TransitionLabel.messages |lbl#0@@13|))) (= (MsgHistoryMod.MsgHistory.seqEnd (AbstractJournal.Variables.journal |v#0@@136|)) (MsgHistoryMod.MsgHistory.seqStart (AbstractJournal.TransitionLabel.messages |lbl#0@@13|)))) (|AbstractJournal.Variables#Equal| |v'#0@@53| (let ((|dt_update#journal#0#0@@0| (MsgHistoryMod.MsgHistory.Concat (AbstractJournal.Variables.journal |v#0@@136|) (AbstractJournal.TransitionLabel.messages |lbl#0@@13|))))
(|#AbstractJournal.Variables.Variables| |dt_update#journal#0#0@@0|)))))))
 :qid |AbstractJournalidfy.67:17|
 :skolemid |3116|
 :pattern ( (AbstractJournal.__default.Put |v#0@@136| |v'#0@@53| |lbl#0@@13|))
))))
(assert  (=> true (forall ((|v#0@@137| T@U) (|v'#0@@54| T@U) (|lbl#0@@14| T@U) ) (!  (=> (and (and (and (= (type |v#0@@137|) DatatypeTypeType) (= (type |v'#0@@54|) DatatypeTypeType)) (= (type |lbl#0@@14|) DatatypeTypeType)) (or (|AbstractJournal.__default.Put#canCall| (Lit |v#0@@137|) (Lit |v'#0@@54|) (Lit |lbl#0@@14|)) (and (and ($Is |v#0@@137| Tclass.AbstractJournal.Variables) ($Is |v'#0@@54| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@14| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| (Lit |v#0@@137|)) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.Variables.WF (Lit |v#0@@137|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@14|))))) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|)))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|))))))) (and (and (and (AbstractJournal.Variables.Variables_q (Lit |v#0@@137|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (AbstractJournal.Variables.journal (Lit |v#0@@137|))))) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|))))) (=> (= (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (AbstractJournal.Variables.journal (Lit |v#0@@137|))))) (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|)))))) (and (and (|$IsA#AbstractJournal.Variables| (Lit |v'#0@@54|)) (|$IsA#AbstractJournal.Variables| (let ((|dt_update#journal#0#1| (Lit (MsgHistoryMod.MsgHistory.Concat (Lit (AbstractJournal.Variables.journal (Lit |v#0@@137|))) (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|)))))))
(Lit (|#AbstractJournal.Variables.Variables| |dt_update#journal#0#1|))))) (and (AbstractJournal.Variables.Variables_q (Lit |v#0@@137|)) (|MsgHistoryMod.MsgHistory.Concat#canCall| (Lit (AbstractJournal.Variables.journal (Lit |v#0@@137|))) (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|))))))))))))) (= (AbstractJournal.__default.Put (Lit |v#0@@137|) (Lit |v'#0@@54|) (Lit |lbl#0@@14|))  (and (and (and (and (AbstractJournal.Variables.WF (Lit |v#0@@137|)) (AbstractJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@14|))) (MsgHistoryMod.MsgHistory.WF (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|))))) (= (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (AbstractJournal.Variables.journal (Lit |v#0@@137|))))) (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|))))))) (|AbstractJournal.Variables#Equal| |v'#0@@54| (let ((|dt_update#journal#0#1@@0| (Lit (MsgHistoryMod.MsgHistory.Concat (Lit (AbstractJournal.Variables.journal (Lit |v#0@@137|))) (Lit (AbstractJournal.TransitionLabel.messages (Lit |lbl#0@@14|)))))))
(Lit (|#AbstractJournal.Variables.Variables| |dt_update#journal#0#1@@0|))))))))
 :qid |AbstractJournalidfy.67:17|
 :weight 3
 :skolemid |3117|
 :pattern ( (AbstractJournal.__default.Put (Lit |v#0@@137|) (Lit |v'#0@@54|) (Lit |lbl#0@@14|)))
))))
(assert  (=> true (forall ((|v#0@@138| T@U) (|v'#0@@55| T@U) (|lbl#0@@15| T@U) ) (!  (=> (and (and (and (= (type |v#0@@138|) DatatypeTypeType) (= (type |v'#0@@55|) DatatypeTypeType)) (= (type |lbl#0@@15|) DatatypeTypeType)) (or (|AbstractJournal.__default.DiscardOld#canCall| |v#0@@138| |v'#0@@55| |lbl#0@@15|) (and (and ($Is |v#0@@138| Tclass.AbstractJournal.Variables) ($Is |v'#0@@55| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@15| Tclass.AbstractJournal.TransitionLabel)))) true)
 :qid |AbstractJournalidfy.76:24|
 :skolemid |3118|
 :pattern ( (AbstractJournal.__default.DiscardOld |v#0@@138| |v'#0@@55| |lbl#0@@15|))
))))
(assert (forall ((|v#0@@139| T@U) (|v'#0@@56| T@U) (|lbl#0@@16| T@U) ) (!  (=> (and (and (and (= (type |v#0@@139|) DatatypeTypeType) (= (type |v'#0@@56|) DatatypeTypeType)) (= (type |lbl#0@@16|) DatatypeTypeType)) (and (and ($Is |v#0@@139| Tclass.AbstractJournal.Variables) ($Is |v'#0@@56| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@16| Tclass.AbstractJournal.TransitionLabel))) (= (|AbstractJournal.__default.DiscardOld#requires| |v#0@@139| |v'#0@@56| |lbl#0@@16|) true))
 :qid |AbstractJournalidfy.76:24|
 :skolemid |3119|
 :pattern ( (|AbstractJournal.__default.DiscardOld#requires| |v#0@@139| |v'#0@@56| |lbl#0@@16|))
)))
(assert  (=> true (forall ((|v#0@@140| T@U) (|v'#0@@57| T@U) (|lbl#0@@17| T@U) ) (!  (=> (and (and (and (= (type |v#0@@140|) DatatypeTypeType) (= (type |v'#0@@57|) DatatypeTypeType)) (= (type |lbl#0@@17|) DatatypeTypeType)) (or (|AbstractJournal.__default.DiscardOld#canCall| |v#0@@140| |v'#0@@57| |lbl#0@@17|) (and (and ($Is |v#0@@140| Tclass.AbstractJournal.Variables) ($Is |v'#0@@57| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@17| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| |v#0@@140|) (=> (AbstractJournal.Variables.WF |v#0@@140|) (=> (AbstractJournal.TransitionLabel.DiscardOldLabel_q |lbl#0@@17|) (and (and (AbstractJournal.Variables.Variables_q |v#0@@140|) (MsgHistoryMod.MsgHistory.MsgHistory_q (AbstractJournal.Variables.journal |v#0@@140|))) (=> (= (MsgHistoryMod.MsgHistory.seqEnd (AbstractJournal.Variables.journal |v#0@@140|)) (AbstractJournal.TransitionLabel.requireEnd |lbl#0@@17|)) (and (and (AbstractJournal.Variables.Variables_q |v#0@@140|) (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (AbstractJournal.Variables.journal |v#0@@140|) (AbstractJournal.TransitionLabel.startLsn |lbl#0@@17|))) (=> (MsgHistoryMod.MsgHistory.CanDiscardTo (AbstractJournal.Variables.journal |v#0@@140|) (AbstractJournal.TransitionLabel.startLsn |lbl#0@@17|)) (and (and (|$IsA#MsgHistoryMod.MsgHistory| (AbstractJournal.Variables.journal |v'#0@@57|)) (|$IsA#MsgHistoryMod.MsgHistory| (MsgHistoryMod.MsgHistory.DiscardOld (AbstractJournal.Variables.journal |v#0@@140|) (AbstractJournal.TransitionLabel.startLsn |lbl#0@@17|)))) (and (AbstractJournal.Variables.Variables_q |v'#0@@57|) (and (AbstractJournal.Variables.Variables_q |v#0@@140|) (|MsgHistoryMod.MsgHistory.DiscardOld#canCall| (AbstractJournal.Variables.journal |v#0@@140|) (AbstractJournal.TransitionLabel.startLsn |lbl#0@@17|)))))))))))) (= (AbstractJournal.__default.DiscardOld |v#0@@140| |v'#0@@57| |lbl#0@@17|)  (and (and (and (and (AbstractJournal.Variables.WF |v#0@@140|) (AbstractJournal.TransitionLabel.DiscardOldLabel_q |lbl#0@@17|)) (= (MsgHistoryMod.MsgHistory.seqEnd (AbstractJournal.Variables.journal |v#0@@140|)) (AbstractJournal.TransitionLabel.requireEnd |lbl#0@@17|))) (MsgHistoryMod.MsgHistory.CanDiscardTo (AbstractJournal.Variables.journal |v#0@@140|) (AbstractJournal.TransitionLabel.startLsn |lbl#0@@17|))) (|MsgHistoryMod.MsgHistory#Equal| (AbstractJournal.Variables.journal |v'#0@@57|) (MsgHistoryMod.MsgHistory.DiscardOld (AbstractJournal.Variables.journal |v#0@@140|) (AbstractJournal.TransitionLabel.startLsn |lbl#0@@17|)))))))
 :qid |AbstractJournalidfy.76:24|
 :skolemid |3120|
 :pattern ( (AbstractJournal.__default.DiscardOld |v#0@@140| |v'#0@@57| |lbl#0@@17|))
))))
(assert  (=> true (forall ((|v#0@@141| T@U) (|v'#0@@58| T@U) (|lbl#0@@18| T@U) ) (!  (=> (and (and (and (= (type |v#0@@141|) DatatypeTypeType) (= (type |v'#0@@58|) DatatypeTypeType)) (= (type |lbl#0@@18|) DatatypeTypeType)) (or (|AbstractJournal.__default.DiscardOld#canCall| (Lit |v#0@@141|) (Lit |v'#0@@58|) (Lit |lbl#0@@18|)) (and (and ($Is |v#0@@141| Tclass.AbstractJournal.Variables) ($Is |v'#0@@58| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@18| Tclass.AbstractJournal.TransitionLabel)))) (and (and (|AbstractJournal.Variables.WF#canCall| (Lit |v#0@@141|)) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.Variables.WF (Lit |v#0@@141|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.DiscardOldLabel_q (Lit |lbl#0@@18|))))) (and (and (AbstractJournal.Variables.Variables_q (Lit |v#0@@141|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))))) (=> (= (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))))) (LitInt (AbstractJournal.TransitionLabel.requireEnd (Lit |lbl#0@@18|)))) (and (and (AbstractJournal.Variables.Variables_q (Lit |v#0@@141|)) (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))) (LitInt (AbstractJournal.TransitionLabel.startLsn (Lit |lbl#0@@18|))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))) (LitInt (AbstractJournal.TransitionLabel.startLsn (Lit |lbl#0@@18|))))))) (and (and (|$IsA#MsgHistoryMod.MsgHistory| (Lit (AbstractJournal.Variables.journal (Lit |v'#0@@58|)))) (|$IsA#MsgHistoryMod.MsgHistory| (Lit (MsgHistoryMod.MsgHistory.DiscardOld (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))) (LitInt (AbstractJournal.TransitionLabel.startLsn (Lit |lbl#0@@18|))))))) (and (AbstractJournal.Variables.Variables_q (Lit |v'#0@@58|)) (and (AbstractJournal.Variables.Variables_q (Lit |v#0@@141|)) (|MsgHistoryMod.MsgHistory.DiscardOld#canCall| (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))) (LitInt (AbstractJournal.TransitionLabel.startLsn (Lit |lbl#0@@18|)))))))))))))) (= (AbstractJournal.__default.DiscardOld (Lit |v#0@@141|) (Lit |v'#0@@58|) (Lit |lbl#0@@18|))  (and (and (and (and (AbstractJournal.Variables.WF (Lit |v#0@@141|)) (AbstractJournal.TransitionLabel.DiscardOldLabel_q (Lit |lbl#0@@18|))) (= (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))))) (LitInt (AbstractJournal.TransitionLabel.requireEnd (Lit |lbl#0@@18|))))) (MsgHistoryMod.MsgHistory.CanDiscardTo (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))) (LitInt (AbstractJournal.TransitionLabel.startLsn (Lit |lbl#0@@18|))))) (|MsgHistoryMod.MsgHistory#Equal| (AbstractJournal.Variables.journal (Lit |v'#0@@58|)) (MsgHistoryMod.MsgHistory.DiscardOld (Lit (AbstractJournal.Variables.journal (Lit |v#0@@141|))) (LitInt (AbstractJournal.TransitionLabel.startLsn (Lit |lbl#0@@18|)))))))))
 :qid |AbstractJournalidfy.76:24|
 :weight 3
 :skolemid |3121|
 :pattern ( (AbstractJournal.__default.DiscardOld (Lit |v#0@@141|) (Lit |v'#0@@58|) (Lit |lbl#0@@18|)))
))))
(assert  (=> true (forall ((|v#0@@142| T@U) (|v'#0@@59| T@U) (|lbl#0@@19| T@U) ) (!  (=> (and (and (and (= (type |v#0@@142|) DatatypeTypeType) (= (type |v'#0@@59|) DatatypeTypeType)) (= (type |lbl#0@@19|) DatatypeTypeType)) (or (|AbstractJournal.__default.Internal#canCall| |v#0@@142| |v'#0@@59| |lbl#0@@19|) (and (and ($Is |v#0@@142| Tclass.AbstractJournal.Variables) ($Is |v'#0@@59| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@19| Tclass.AbstractJournal.TransitionLabel)))) true)
 :qid |AbstractJournalidfy.85:22|
 :skolemid |3122|
 :pattern ( (AbstractJournal.__default.Internal |v#0@@142| |v'#0@@59| |lbl#0@@19|))
))))
(assert (forall ((|v#0@@143| T@U) (|v'#0@@60| T@U) (|lbl#0@@20| T@U) ) (!  (=> (and (and (and (= (type |v#0@@143|) DatatypeTypeType) (= (type |v'#0@@60|) DatatypeTypeType)) (= (type |lbl#0@@20|) DatatypeTypeType)) (and (and ($Is |v#0@@143| Tclass.AbstractJournal.Variables) ($Is |v'#0@@60| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@20| Tclass.AbstractJournal.TransitionLabel))) (= (|AbstractJournal.__default.Internal#requires| |v#0@@143| |v'#0@@60| |lbl#0@@20|) true))
 :qid |AbstractJournalidfy.85:22|
 :skolemid |3123|
 :pattern ( (|AbstractJournal.__default.Internal#requires| |v#0@@143| |v'#0@@60| |lbl#0@@20|))
)))
(assert  (=> true (forall ((|v#0@@144| T@U) (|v'#0@@61| T@U) (|lbl#0@@21| T@U) ) (!  (=> (and (and (and (= (type |v#0@@144|) DatatypeTypeType) (= (type |v'#0@@61|) DatatypeTypeType)) (= (type |lbl#0@@21|) DatatypeTypeType)) (or (|AbstractJournal.__default.Internal#canCall| |v#0@@144| |v'#0@@61| |lbl#0@@21|) (and (and ($Is |v#0@@144| Tclass.AbstractJournal.Variables) ($Is |v'#0@@61| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@21| Tclass.AbstractJournal.TransitionLabel)))) (and (=> (AbstractJournal.TransitionLabel.InternalLabel_q |lbl#0@@21|) (and (|$IsA#AbstractJournal.Variables| |v'#0@@61|) (|$IsA#AbstractJournal.Variables| |v#0@@144|))) (= (AbstractJournal.__default.Internal |v#0@@144| |v'#0@@61| |lbl#0@@21|)  (and (AbstractJournal.TransitionLabel.InternalLabel_q |lbl#0@@21|) (|AbstractJournal.Variables#Equal| |v'#0@@61| |v#0@@144|)))))
 :qid |AbstractJournalidfy.85:22|
 :skolemid |3124|
 :pattern ( (AbstractJournal.__default.Internal |v#0@@144| |v'#0@@61| |lbl#0@@21|))
))))
(assert  (=> true (forall ((|v#0@@145| T@U) (|v'#0@@62| T@U) (|lbl#0@@22| T@U) ) (!  (=> (and (and (and (= (type |v#0@@145|) DatatypeTypeType) (= (type |v'#0@@62|) DatatypeTypeType)) (= (type |lbl#0@@22|) DatatypeTypeType)) (or (|AbstractJournal.__default.Internal#canCall| (Lit |v#0@@145|) (Lit |v'#0@@62|) (Lit |lbl#0@@22|)) (and (and ($Is |v#0@@145| Tclass.AbstractJournal.Variables) ($Is |v'#0@@62| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@22| Tclass.AbstractJournal.TransitionLabel)))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.InternalLabel_q (Lit |lbl#0@@22|))))) (and (|$IsA#AbstractJournal.Variables| (Lit |v'#0@@62|)) (|$IsA#AbstractJournal.Variables| (Lit |v#0@@145|)))) (= (AbstractJournal.__default.Internal (Lit |v#0@@145|) (Lit |v'#0@@62|) (Lit |lbl#0@@22|))  (and (AbstractJournal.TransitionLabel.InternalLabel_q (Lit |lbl#0@@22|)) (|AbstractJournal.Variables#Equal| |v'#0@@62| |v#0@@145|)))))
 :qid |AbstractJournalidfy.85:22|
 :weight 3
 :skolemid |3125|
 :pattern ( (AbstractJournal.__default.Internal (Lit |v#0@@145|) (Lit |v'#0@@62|) (Lit |lbl#0@@22|)))
))))
(assert  (=> true (forall ((|v#0@@146| T@U) (|persistentJournal#0| T@U) ) (!  (=> (and (and (= (type |v#0@@146|) DatatypeTypeType) (= (type |persistentJournal#0|) DatatypeTypeType)) (or (|AbstractJournal.__default.Init#canCall| |v#0@@146| |persistentJournal#0|) (and ($Is |v#0@@146| Tclass.AbstractJournal.Variables) ($Is |persistentJournal#0| Tclass.MsgHistoryMod.MsgHistory)))) true)
 :qid |AbstractJournalidfy.92:18|
 :skolemid |3126|
 :pattern ( (AbstractJournal.__default.Init |v#0@@146| |persistentJournal#0|))
))))
(assert (forall ((|v#0@@147| T@U) (|persistentJournal#0@@0| T@U) ) (!  (=> (and (and (= (type |v#0@@147|) DatatypeTypeType) (= (type |persistentJournal#0@@0|) DatatypeTypeType)) (and ($Is |v#0@@147| Tclass.AbstractJournal.Variables) ($Is |persistentJournal#0@@0| Tclass.MsgHistoryMod.MsgHistory))) (= (|AbstractJournal.__default.Init#requires| |v#0@@147| |persistentJournal#0@@0|) true))
 :qid |AbstractJournalidfy.92:18|
 :skolemid |3127|
 :pattern ( (|AbstractJournal.__default.Init#requires| |v#0@@147| |persistentJournal#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@148| T@U) (|persistentJournal#0@@1| T@U) ) (!  (=> (and (and (= (type |v#0@@148|) DatatypeTypeType) (= (type |persistentJournal#0@@1|) DatatypeTypeType)) (or (|AbstractJournal.__default.Init#canCall| |v#0@@148| |persistentJournal#0@@1|) (and ($Is |v#0@@148| Tclass.AbstractJournal.Variables) ($Is |persistentJournal#0@@1| Tclass.MsgHistoryMod.MsgHistory)))) (and (|$IsA#AbstractJournal.Variables| |v#0@@148|) (= (AbstractJournal.__default.Init |v#0@@148| |persistentJournal#0@@1|) (|AbstractJournal.Variables#Equal| |v#0@@148| (|#AbstractJournal.Variables.Variables| |persistentJournal#0@@1|)))))
 :qid |AbstractJournalidfy.92:18|
 :skolemid |3128|
 :pattern ( (AbstractJournal.__default.Init |v#0@@148| |persistentJournal#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@149| T@U) (|persistentJournal#0@@2| T@U) ) (!  (=> (and (and (= (type |v#0@@149|) DatatypeTypeType) (= (type |persistentJournal#0@@2|) DatatypeTypeType)) (or (|AbstractJournal.__default.Init#canCall| (Lit |v#0@@149|) (Lit |persistentJournal#0@@2|)) (and ($Is |v#0@@149| Tclass.AbstractJournal.Variables) ($Is |persistentJournal#0@@2| Tclass.MsgHistoryMod.MsgHistory)))) (and (|$IsA#AbstractJournal.Variables| (Lit |v#0@@149|)) (= (AbstractJournal.__default.Init (Lit |v#0@@149|) (Lit |persistentJournal#0@@2|)) (|AbstractJournal.Variables#Equal| |v#0@@149| (|#AbstractJournal.Variables.Variables| (Lit |persistentJournal#0@@2|))))))
 :qid |AbstractJournalidfy.92:18|
 :weight 3
 :skolemid |3129|
 :pattern ( (AbstractJournal.__default.Init (Lit |v#0@@149|) (Lit |persistentJournal#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@150| T@U) (|v'#0@@63| T@U) (|lbl#0@@23| T@U) ) (!  (=> (and (and (and (= (type |v#0@@150|) DatatypeTypeType) (= (type |v'#0@@63|) DatatypeTypeType)) (= (type |lbl#0@@23|) DatatypeTypeType)) (or (|AbstractJournal.__default.Next#canCall| |v#0@@150| |v'#0@@63| |lbl#0@@23|) (and (and ($Is |v#0@@150| Tclass.AbstractJournal.Variables) ($Is |v'#0@@63| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@23| Tclass.AbstractJournal.TransitionLabel)))) true)
 :qid |AbstractJournalidfy.97:18|
 :skolemid |3130|
 :pattern ( (AbstractJournal.__default.Next |v#0@@150| |v'#0@@63| |lbl#0@@23|))
))))
(assert (forall ((|v#0@@151| T@U) (|v'#0@@64| T@U) (|lbl#0@@24| T@U) ) (!  (=> (and (and (and (= (type |v#0@@151|) DatatypeTypeType) (= (type |v'#0@@64|) DatatypeTypeType)) (= (type |lbl#0@@24|) DatatypeTypeType)) (and (and ($Is |v#0@@151| Tclass.AbstractJournal.Variables) ($Is |v'#0@@64| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@24| Tclass.AbstractJournal.TransitionLabel))) (= (|AbstractJournal.__default.Next#requires| |v#0@@151| |v'#0@@64| |lbl#0@@24|) true))
 :qid |AbstractJournalidfy.97:18|
 :skolemid |3131|
 :pattern ( (|AbstractJournal.__default.Next#requires| |v#0@@151| |v'#0@@64| |lbl#0@@24|))
)))
(assert  (=> true (forall ((|v#0@@152| T@U) (|v'#0@@65| T@U) (|lbl#0@@25| T@U) ) (!  (=> (and (and (and (= (type |v#0@@152|) DatatypeTypeType) (= (type |v'#0@@65|) DatatypeTypeType)) (= (type |lbl#0@@25|) DatatypeTypeType)) (or (|AbstractJournal.__default.Next#canCall| |v#0@@152| |v'#0@@65| |lbl#0@@25|) (and (and ($Is |v#0@@152| Tclass.AbstractJournal.Variables) ($Is |v'#0@@65| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@25| Tclass.AbstractJournal.TransitionLabel)))) (and (and (=> (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@25|) (|AbstractJournal.__default.ReadForRecovery#canCall| |v#0@@152| |v'#0@@65| |lbl#0@@25|)) (=> (not (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@25|)) (and (=> (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q |lbl#0@@25|) (|AbstractJournal.__default.FreezeForCommit#canCall| |v#0@@152| |v'#0@@65| |lbl#0@@25|)) (=> (not (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q |lbl#0@@25|)) (and (=> (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@25|) (|AbstractJournal.__default.ObserveFreshJournal#canCall| |v#0@@152| |v'#0@@65| |lbl#0@@25|)) (=> (not (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@25|)) (and (=> (AbstractJournal.TransitionLabel.PutLabel_q |lbl#0@@25|) (|AbstractJournal.__default.Put#canCall| |v#0@@152| |v'#0@@65| |lbl#0@@25|)) (=> (not (AbstractJournal.TransitionLabel.PutLabel_q |lbl#0@@25|)) (and (=> (AbstractJournal.TransitionLabel.DiscardOldLabel_q |lbl#0@@25|) (|AbstractJournal.__default.DiscardOld#canCall| |v#0@@152| |v'#0@@65| |lbl#0@@25|)) (=> (not (AbstractJournal.TransitionLabel.DiscardOldLabel_q |lbl#0@@25|)) (|AbstractJournal.__default.Internal#canCall| |v#0@@152| |v'#0@@65| |lbl#0@@25|))))))))))) (= (AbstractJournal.__default.Next |v#0@@152| |v'#0@@65| |lbl#0@@25|) (ite (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@25|) (AbstractJournal.__default.ReadForRecovery |v#0@@152| |v'#0@@65| |lbl#0@@25|) (ite (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q |lbl#0@@25|) (AbstractJournal.__default.FreezeForCommit |v#0@@152| |v'#0@@65| |lbl#0@@25|) (ite (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@25|) (AbstractJournal.__default.ObserveFreshJournal |v#0@@152| |v'#0@@65| |lbl#0@@25|) (ite (AbstractJournal.TransitionLabel.PutLabel_q |lbl#0@@25|) (AbstractJournal.__default.Put |v#0@@152| |v'#0@@65| |lbl#0@@25|) (ite (AbstractJournal.TransitionLabel.DiscardOldLabel_q |lbl#0@@25|) (AbstractJournal.__default.DiscardOld |v#0@@152| |v'#0@@65| |lbl#0@@25|) (AbstractJournal.__default.Internal |v#0@@152| |v'#0@@65| |lbl#0@@25|)))))))))
 :qid |AbstractJournalidfy.97:18|
 :skolemid |3132|
 :pattern ( (AbstractJournal.__default.Next |v#0@@152| |v'#0@@65| |lbl#0@@25|))
))))
(assert  (=> true (forall ((|v#0@@153| T@U) (|v'#0@@66| T@U) (|lbl#0@@26| T@U) ) (!  (=> (and (and (and (= (type |v#0@@153|) DatatypeTypeType) (= (type |v'#0@@66|) DatatypeTypeType)) (= (type |lbl#0@@26|) DatatypeTypeType)) (or (|AbstractJournal.__default.Next#canCall| (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)) (and (and ($Is |v#0@@153| Tclass.AbstractJournal.Variables) ($Is |v'#0@@66| Tclass.AbstractJournal.Variables)) ($Is |lbl#0@@26| Tclass.AbstractJournal.TransitionLabel)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@26|))))) (|AbstractJournal.__default.ReadForRecovery#canCall| (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@26|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q (Lit |lbl#0@@26|))))) (|AbstractJournal.__default.FreezeForCommit#canCall| (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q (Lit |lbl#0@@26|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@26|))))) (|AbstractJournal.__default.ObserveFreshJournal#canCall| (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@26|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@26|))))) (|AbstractJournal.__default.Put#canCall| (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@26|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.DiscardOldLabel_q (Lit |lbl#0@@26|))))) (|AbstractJournal.__default.DiscardOld#canCall| (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractJournal.TransitionLabel.DiscardOldLabel_q (Lit |lbl#0@@26|)))))) (|AbstractJournal.__default.Internal#canCall| (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)))))))))))) (= (AbstractJournal.__default.Next (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)) (ite (AbstractJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@26|)) (AbstractJournal.__default.ReadForRecovery (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)) (ite (AbstractJournal.TransitionLabel.FreezeForCommitLabel_q (Lit |lbl#0@@26|)) (AbstractJournal.__default.FreezeForCommit (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)) (ite (AbstractJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@26|)) (AbstractJournal.__default.ObserveFreshJournal (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)) (ite (AbstractJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@26|)) (AbstractJournal.__default.Put (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)) (ite (AbstractJournal.TransitionLabel.DiscardOldLabel_q (Lit |lbl#0@@26|)) (AbstractJournal.__default.DiscardOld (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)) (AbstractJournal.__default.Internal (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|))))))))))
 :qid |AbstractJournalidfy.97:18|
 :weight 3
 :skolemid |3133|
 :pattern ( (AbstractJournal.__default.Next (Lit |v#0@@153|) (Lit |v'#0@@66|) (Lit |lbl#0@@26|)))
))))
(assert (= (type |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|) |##CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|))
(assert (forall ((d@@123 T@U) ) (!  (=> (= (type d@@123) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@123) (= (DatatypeCtorId d@@123) |##CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|)))
 :qid |unknown.0:0|
 :skolemid |3134|
 :pattern ( (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@123))
)))
(assert (forall ((d@@124 T@U) ) (!  (=> (and (= (type d@@124) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@124)) (= d@@124 |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|))
 :qid |unknown.0:0|
 :skolemid |3135|
 :pattern ( (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@124))
)))
(assert (= (type Tclass.CrashTolerantJournal.TransitionLabel) TyType))
(assert (= (Tag Tclass.CrashTolerantJournal.TransitionLabel) Tagclass.CrashTolerantJournal.TransitionLabel))
(assert (= (TagFamily Tclass.CrashTolerantJournal.TransitionLabel) tytagFamily$TransitionLabel))
(assert (forall ((bx@@166 T@U) ) (!  (=> (and (= (type bx@@166) BoxType) ($IsBox bx@@166 Tclass.CrashTolerantJournal.TransitionLabel)) (and (= ($Box ($Unbox DatatypeTypeType bx@@166)) bx@@166) ($Is ($Unbox DatatypeTypeType bx@@166) Tclass.CrashTolerantJournal.TransitionLabel)))
 :qid |unknown.0:0|
 :skolemid |3136|
 :pattern ( ($IsBox bx@@166 Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert ($Is |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel| Tclass.CrashTolerantJournal.TransitionLabel))
(assert (forall (($h@@139 T@U) ) (!  (=> (and (= (type $h@@139) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@139)) ($IsAlloc |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel| Tclass.CrashTolerantJournal.TransitionLabel $h@@139))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3137|
 :pattern ( ($IsAlloc |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel| Tclass.CrashTolerantJournal.TransitionLabel $h@@139))
)))
(assert (= |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel| (Lit |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|)))
(assert (forall ((arg0@@565 T@U) ) (! (= (type (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| arg0@@565)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| arg0@@565))
)))
(assert (forall ((|a#5#0#0@@8| T@U) ) (!  (=> (= (type |a#5#0#0@@8|) DatatypeTypeType) (= (DatatypeCtorId (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#5#0#0@@8|)) |##CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel|))
 :qid |CrashTolerantJournalidfy.20:28|
 :skolemid |3138|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#5#0#0@@8|))
)))
(assert (forall ((d@@125 T@U) ) (!  (=> (= (type d@@125) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@125) (= (DatatypeCtorId d@@125) |##CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel|)))
 :qid |unknown.0:0|
 :skolemid |3139|
 :pattern ( (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@125))
)))
(assert (forall ((d@@126 T@U) ) (!  (=> (and (= (type d@@126) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@126)) (exists ((|a#6#0#0@@8| T@U) ) (!  (and (= (type |a#6#0#0@@8|) DatatypeTypeType) (= d@@126 (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#6#0#0@@8|)))
 :qid |CrashTolerantJournalidfy.20:28|
 :skolemid |3140|
 :no-pattern (type |a#6#0#0@@8|)
 :no-pattern (U_2_int |a#6#0#0@@8|)
 :no-pattern (U_2_bool |a#6#0#0@@8|)
)))
 :qid |unknown.0:0|
 :skolemid |3141|
 :pattern ( (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@126))
)))
(assert (forall ((|a#7#0#0@@8| T@U) ) (!  (=> (= (type |a#7#0#0@@8|) DatatypeTypeType) (= ($Is (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#7#0#0@@8|) Tclass.CrashTolerantJournal.TransitionLabel) ($Is |a#7#0#0@@8| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |CrashTolerantJournalidfy.20:28|
 :skolemid |3142|
 :pattern ( ($Is (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#7#0#0@@8|) Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert (forall ((|a#8#0#0@@7| T@U) ($h@@140 T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@7|) DatatypeTypeType) (= (type $h@@140) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@140)) (= ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#8#0#0@@7|) Tclass.CrashTolerantJournal.TransitionLabel $h@@140) ($IsAlloc |a#8#0#0@@7| Tclass.MsgHistoryMod.MsgHistory $h@@140)))
 :qid |CrashTolerantJournalidfy.20:28|
 :skolemid |3143|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#8#0#0@@7|) Tclass.CrashTolerantJournal.TransitionLabel $h@@140))
)))
(assert (forall ((arg0@@566 T@U) ) (! (= (type (CrashTolerantJournal.TransitionLabel.records arg0@@566)) DatatypeTypeType)
 :qid |funType:CrashTolerantJournal.TransitionLabel.records|
 :pattern ( (CrashTolerantJournal.TransitionLabel.records arg0@@566))
)))
(assert (forall ((d@@127 T@U) ($h@@141 T@U) ) (!  (=> (and (and (= (type d@@127) DatatypeTypeType) (= (type $h@@141) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@141) (and (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@127) ($IsAlloc d@@127 Tclass.CrashTolerantJournal.TransitionLabel $h@@141)))) ($IsAlloc (CrashTolerantJournal.TransitionLabel.records d@@127) Tclass.MsgHistoryMod.MsgHistory $h@@141))
 :qid |unknown.0:0|
 :skolemid |3144|
 :pattern ( ($IsAlloc (CrashTolerantJournal.TransitionLabel.records d@@127) Tclass.MsgHistoryMod.MsgHistory $h@@141))
)))
(assert (forall ((|a#9#0#0@@5| T@U) ) (!  (=> (= (type |a#9#0#0@@5|) DatatypeTypeType) (= (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| (Lit |a#9#0#0@@5|)) (Lit (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#9#0#0@@5|))))
 :qid |CrashTolerantJournalidfy.20:28|
 :skolemid |3145|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| (Lit |a#9#0#0@@5|)))
)))
(assert (forall ((|a#10#0#0@@5| T@U) ) (!  (=> (= (type |a#10#0#0@@5|) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.records (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#10#0#0@@5|)) |a#10#0#0@@5|))
 :qid |CrashTolerantJournalidfy.20:28|
 :skolemid |3146|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#10#0#0@@5|))
)))
(assert (forall ((|a#11#0#0@@5| T@U) ) (!  (=> (= (type |a#11#0#0@@5|) DatatypeTypeType) (< (DtRank |a#11#0#0@@5|) (DtRank (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#11#0#0@@5|))))
 :qid |CrashTolerantJournalidfy.20:28|
 :skolemid |3147|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |a#11#0#0@@5|))
)))
(assert (forall ((arg0@@567 Int) ) (! (= (type (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| arg0@@567)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| arg0@@567))
)))
(assert (forall ((|a#12#0#0@@4| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#12#0#0@@4|)) |##CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel|)
 :qid |CrashTolerantJournalidfy.21:24|
 :skolemid |3148|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#12#0#0@@4|))
)))
(assert (forall ((d@@128 T@U) ) (!  (=> (= (type d@@128) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@128) (= (DatatypeCtorId d@@128) |##CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel|)))
 :qid |unknown.0:0|
 :skolemid |3149|
 :pattern ( (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@128))
)))
(assert (forall ((d@@129 T@U) ) (!  (=> (and (= (type d@@129) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@129)) (exists ((|a#13#0#0@@2| Int) ) (! (= d@@129 (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#13#0#0@@2|))
 :qid |CrashTolerantJournalidfy.21:24|
 :skolemid |3150|
)))
 :qid |unknown.0:0|
 :skolemid |3151|
 :pattern ( (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@129))
)))
(assert (forall ((|a#14#0#0@@3| Int) ) (! (= ($Is (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#14#0#0@@3|) Tclass.CrashTolerantJournal.TransitionLabel) ($Is (int_2_U |a#14#0#0@@3|) Tclass._System.nat))
 :qid |CrashTolerantJournalidfy.21:24|
 :skolemid |3152|
 :pattern ( ($Is (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#14#0#0@@3|) Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert (forall ((|a#15#0#0@@3| Int) ($h@@142 T@U) ) (!  (=> (and (= (type $h@@142) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@142)) (= ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#15#0#0@@3|) Tclass.CrashTolerantJournal.TransitionLabel $h@@142) ($IsAlloc (int_2_U |a#15#0#0@@3|) Tclass._System.nat $h@@142)))
 :qid |CrashTolerantJournalidfy.21:24|
 :skolemid |3153|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#15#0#0@@3|) Tclass.CrashTolerantJournal.TransitionLabel $h@@142))
)))
(assert (forall ((d@@130 T@U) ($h@@143 T@U) ) (!  (=> (and (and (= (type d@@130) DatatypeTypeType) (= (type $h@@143) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@143) (and (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@130) ($IsAlloc d@@130 Tclass.CrashTolerantJournal.TransitionLabel $h@@143)))) ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.endLsn d@@130)) Tclass._System.nat $h@@143))
 :qid |unknown.0:0|
 :skolemid |3154|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.endLsn d@@130)) Tclass._System.nat $h@@143))
)))
(assert (forall ((|a#16#0#0@@3| Int) ) (! (= (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt |a#16#0#0@@3|)) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#16#0#0@@3|)))
 :qid |CrashTolerantJournalidfy.21:24|
 :skolemid |3155|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt |a#16#0#0@@3|)))
)))
(assert (forall ((|a#17#0#0@@2| Int) ) (! (= (CrashTolerantJournal.TransitionLabel.endLsn (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#17#0#0@@2|)) |a#17#0#0@@2|)
 :qid |CrashTolerantJournalidfy.21:24|
 :skolemid |3156|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| |a#17#0#0@@2|))
)))
(assert (forall ((arg0@@568 T@U) ) (! (= (type (|#CrashTolerantJournal.TransitionLabel.PutLabel| arg0@@568)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.TransitionLabel.PutLabel|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.PutLabel| arg0@@568))
)))
(assert (forall ((|a#18#0#0@@2| T@U) ) (!  (=> (= (type |a#18#0#0@@2|) DatatypeTypeType) (= (DatatypeCtorId (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#18#0#0@@2|)) |##CrashTolerantJournal.TransitionLabel.PutLabel|))
 :qid |CrashTolerantJournalidfy.22:16|
 :skolemid |3157|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#18#0#0@@2|))
)))
(assert (forall ((d@@131 T@U) ) (!  (=> (= (type d@@131) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@131) (= (DatatypeCtorId d@@131) |##CrashTolerantJournal.TransitionLabel.PutLabel|)))
 :qid |unknown.0:0|
 :skolemid |3158|
 :pattern ( (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@131))
)))
(assert (forall ((d@@132 T@U) ) (!  (=> (and (= (type d@@132) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@132)) (exists ((|a#19#0#0@@2| T@U) ) (!  (and (= (type |a#19#0#0@@2|) DatatypeTypeType) (= d@@132 (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#19#0#0@@2|)))
 :qid |CrashTolerantJournalidfy.22:16|
 :skolemid |3159|
 :no-pattern (type |a#19#0#0@@2|)
 :no-pattern (U_2_int |a#19#0#0@@2|)
 :no-pattern (U_2_bool |a#19#0#0@@2|)
)))
 :qid |unknown.0:0|
 :skolemid |3160|
 :pattern ( (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@132))
)))
(assert (forall ((|a#20#0#0@@2| T@U) ) (!  (=> (= (type |a#20#0#0@@2|) DatatypeTypeType) (= ($Is (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#20#0#0@@2|) Tclass.CrashTolerantJournal.TransitionLabel) ($Is |a#20#0#0@@2| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |CrashTolerantJournalidfy.22:16|
 :skolemid |3161|
 :pattern ( ($Is (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#20#0#0@@2|) Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert (forall ((|a#21#0#0@@2| T@U) ($h@@144 T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@2|) DatatypeTypeType) (= (type $h@@144) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@144)) (= ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#21#0#0@@2|) Tclass.CrashTolerantJournal.TransitionLabel $h@@144) ($IsAlloc |a#21#0#0@@2| Tclass.MsgHistoryMod.MsgHistory $h@@144)))
 :qid |CrashTolerantJournalidfy.22:16|
 :skolemid |3162|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#21#0#0@@2|) Tclass.CrashTolerantJournal.TransitionLabel $h@@144))
)))
(assert (forall ((d@@133 T@U) ($h@@145 T@U) ) (!  (=> (and (and (= (type d@@133) DatatypeTypeType) (= (type $h@@145) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@145) (and (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@133) ($IsAlloc d@@133 Tclass.CrashTolerantJournal.TransitionLabel $h@@145)))) ($IsAlloc (CrashTolerantJournal.TransitionLabel.records d@@133) Tclass.MsgHistoryMod.MsgHistory $h@@145))
 :qid |unknown.0:0|
 :skolemid |3163|
 :pattern ( ($IsAlloc (CrashTolerantJournal.TransitionLabel.records d@@133) Tclass.MsgHistoryMod.MsgHistory $h@@145))
)))
(assert (forall ((|a#22#0#0@@2| T@U) ) (!  (=> (= (type |a#22#0#0@@2|) DatatypeTypeType) (= (|#CrashTolerantJournal.TransitionLabel.PutLabel| (Lit |a#22#0#0@@2|)) (Lit (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#22#0#0@@2|))))
 :qid |CrashTolerantJournalidfy.22:16|
 :skolemid |3164|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.PutLabel| (Lit |a#22#0#0@@2|)))
)))
(assert (forall ((|a#23#0#0@@1| T@U) ) (!  (=> (= (type |a#23#0#0@@1|) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.records (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#23#0#0@@1|)) |a#23#0#0@@1|))
 :qid |CrashTolerantJournalidfy.22:16|
 :skolemid |3165|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#23#0#0@@1|))
)))
(assert (forall ((|a#24#0#0@@0| T@U) ) (!  (=> (= (type |a#24#0#0@@0|) DatatypeTypeType) (< (DtRank |a#24#0#0@@0|) (DtRank (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#24#0#0@@0|))))
 :qid |CrashTolerantJournalidfy.22:16|
 :skolemid |3166|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.PutLabel| |a#24#0#0@@0|))
)))
(assert (= (type |#CrashTolerantJournal.TransitionLabel.InternalLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantJournal.TransitionLabel.InternalLabel|) |##CrashTolerantJournal.TransitionLabel.InternalLabel|))
(assert (forall ((d@@134 T@U) ) (!  (=> (= (type d@@134) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.InternalLabel_q d@@134) (= (DatatypeCtorId d@@134) |##CrashTolerantJournal.TransitionLabel.InternalLabel|)))
 :qid |unknown.0:0|
 :skolemid |3167|
 :pattern ( (CrashTolerantJournal.TransitionLabel.InternalLabel_q d@@134))
)))
(assert (forall ((d@@135 T@U) ) (!  (=> (and (= (type d@@135) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.InternalLabel_q d@@135)) (= d@@135 |#CrashTolerantJournal.TransitionLabel.InternalLabel|))
 :qid |unknown.0:0|
 :skolemid |3168|
 :pattern ( (CrashTolerantJournal.TransitionLabel.InternalLabel_q d@@135))
)))
(assert ($Is |#CrashTolerantJournal.TransitionLabel.InternalLabel| Tclass.CrashTolerantJournal.TransitionLabel))
(assert (forall (($h@@146 T@U) ) (!  (=> (and (= (type $h@@146) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@146)) ($IsAlloc |#CrashTolerantJournal.TransitionLabel.InternalLabel| Tclass.CrashTolerantJournal.TransitionLabel $h@@146))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3169|
 :pattern ( ($IsAlloc |#CrashTolerantJournal.TransitionLabel.InternalLabel| Tclass.CrashTolerantJournal.TransitionLabel $h@@146))
)))
(assert (= |#CrashTolerantJournal.TransitionLabel.InternalLabel| (Lit |#CrashTolerantJournal.TransitionLabel.InternalLabel|)))
(assert (forall ((arg0@@569 Int) ) (! (= (type (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| arg0@@569)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| arg0@@569))
)))
(assert (forall ((|a#30#0#0@@0| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#30#0#0@@0|)) |##CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel|)
 :qid |CrashTolerantJournalidfy.24:32|
 :skolemid |3170|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#30#0#0@@0|))
)))
(assert (forall ((d@@136 T@U) ) (!  (=> (= (type d@@136) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@136) (= (DatatypeCtorId d@@136) |##CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel|)))
 :qid |unknown.0:0|
 :skolemid |3171|
 :pattern ( (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@136))
)))
(assert (forall ((d@@137 T@U) ) (!  (=> (and (= (type d@@137) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@137)) (exists ((|a#31#0#0@@0| Int) ) (! (= d@@137 (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#31#0#0@@0|))
 :qid |CrashTolerantJournalidfy.24:32|
 :skolemid |3172|
)))
 :qid |unknown.0:0|
 :skolemid |3173|
 :pattern ( (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@137))
)))
(assert (forall ((|a#32#0#0@@0| Int) ) (! (= ($Is (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#32#0#0@@0|) Tclass.CrashTolerantJournal.TransitionLabel) ($Is (int_2_U |a#32#0#0@@0|) Tclass._System.nat))
 :qid |CrashTolerantJournalidfy.24:32|
 :skolemid |3174|
 :pattern ( ($Is (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#32#0#0@@0|) Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert (forall ((|a#33#0#0@@0| Int) ($h@@147 T@U) ) (!  (=> (and (= (type $h@@147) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@147)) (= ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#33#0#0@@0|) Tclass.CrashTolerantJournal.TransitionLabel $h@@147) ($IsAlloc (int_2_U |a#33#0#0@@0|) Tclass._System.nat $h@@147)))
 :qid |CrashTolerantJournalidfy.24:32|
 :skolemid |3175|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#33#0#0@@0|) Tclass.CrashTolerantJournal.TransitionLabel $h@@147))
)))
(assert (forall ((d@@138 T@U) ($h@@148 T@U) ) (!  (=> (and (and (= (type d@@138) DatatypeTypeType) (= (type $h@@148) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@148) (and (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@138) ($IsAlloc d@@138 Tclass.CrashTolerantJournal.TransitionLabel $h@@148)))) ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.syncLsn d@@138)) Tclass._System.nat $h@@148))
 :qid |unknown.0:0|
 :skolemid |3176|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.syncLsn d@@138)) Tclass._System.nat $h@@148))
)))
(assert (forall ((|a#34#0#0@@0| Int) ) (! (= (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (LitInt |a#34#0#0@@0|)) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#34#0#0@@0|)))
 :qid |CrashTolerantJournalidfy.24:32|
 :skolemid |3177|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (LitInt |a#34#0#0@@0|)))
)))
(assert (forall ((|a#35#0#0@@0| Int) ) (! (= (CrashTolerantJournal.TransitionLabel.syncLsn (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#35#0#0@@0|)) |a#35#0#0@@0|)
 :qid |CrashTolerantJournalidfy.24:32|
 :skolemid |3178|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| |a#35#0#0@@0|))
)))
(assert (forall ((arg0@@570 Int) (arg1@@277 Int) ) (! (= (type (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| arg0@@570 arg1@@277)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.TransitionLabel.CommitStartLabel|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| arg0@@570 arg1@@277))
)))
(assert (forall ((|a#36#0#0@@0| Int) (|a#36#1#0| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#36#0#0@@0| |a#36#1#0|)) |##CrashTolerantJournal.TransitionLabel.CommitStartLabel|)
 :qid |CrashTolerantJournalidfy.25:24|
 :skolemid |3179|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#36#0#0@@0| |a#36#1#0|))
)))
(assert (forall ((d@@139 T@U) ) (!  (=> (= (type d@@139) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@139) (= (DatatypeCtorId d@@139) |##CrashTolerantJournal.TransitionLabel.CommitStartLabel|)))
 :qid |unknown.0:0|
 :skolemid |3180|
 :pattern ( (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@139))
)))
(assert (forall ((d@@140 T@U) ) (!  (=> (and (= (type d@@140) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@140)) (exists ((|a#37#0#0@@0| Int) (|a#37#1#0| Int) ) (! (= d@@140 (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#37#0#0@@0| |a#37#1#0|))
 :qid |CrashTolerantJournalidfy.25:24|
 :skolemid |3181|
)))
 :qid |unknown.0:0|
 :skolemid |3182|
 :pattern ( (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@140))
)))
(assert (forall ((|a#38#0#0@@0| Int) (|a#38#1#0| Int) ) (! (= ($Is (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#38#0#0@@0| |a#38#1#0|) Tclass.CrashTolerantJournal.TransitionLabel)  (and ($Is (int_2_U |a#38#0#0@@0|) Tclass._System.nat) ($Is (int_2_U |a#38#1#0|) Tclass._System.nat)))
 :qid |CrashTolerantJournalidfy.25:24|
 :skolemid |3183|
 :pattern ( ($Is (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#38#0#0@@0| |a#38#1#0|) Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert (forall ((|a#39#0#0@@1| Int) (|a#39#1#0| Int) ($h@@149 T@U) ) (!  (=> (and (= (type $h@@149) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@149)) (= ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#39#0#0@@1| |a#39#1#0|) Tclass.CrashTolerantJournal.TransitionLabel $h@@149)  (and ($IsAlloc (int_2_U |a#39#0#0@@1|) Tclass._System.nat $h@@149) ($IsAlloc (int_2_U |a#39#1#0|) Tclass._System.nat $h@@149))))
 :qid |CrashTolerantJournalidfy.25:24|
 :skolemid |3184|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#39#0#0@@1| |a#39#1#0|) Tclass.CrashTolerantJournal.TransitionLabel $h@@149))
)))
(assert (forall ((d@@141 T@U) ($h@@150 T@U) ) (!  (=> (and (and (= (type d@@141) DatatypeTypeType) (= (type $h@@150) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@150) (and (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@141) ($IsAlloc d@@141 Tclass.CrashTolerantJournal.TransitionLabel $h@@150)))) ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.newBoundaryLsn d@@141)) Tclass._System.nat $h@@150))
 :qid |unknown.0:0|
 :skolemid |3185|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.newBoundaryLsn d@@141)) Tclass._System.nat $h@@150))
)))
(assert (forall ((d@@142 T@U) ($h@@151 T@U) ) (!  (=> (and (and (= (type d@@142) DatatypeTypeType) (= (type $h@@151) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@151) (and (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@142) ($IsAlloc d@@142 Tclass.CrashTolerantJournal.TransitionLabel $h@@151)))) ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.maxLsn d@@142)) Tclass._System.nat $h@@151))
 :qid |unknown.0:0|
 :skolemid |3186|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.maxLsn d@@142)) Tclass._System.nat $h@@151))
)))
(assert (forall ((|a#40#0#0@@0| Int) (|a#40#1#0| Int) ) (! (= (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| (LitInt |a#40#0#0@@0|) (LitInt |a#40#1#0|)) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#40#0#0@@0| |a#40#1#0|)))
 :qid |CrashTolerantJournalidfy.25:24|
 :skolemid |3187|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| (LitInt |a#40#0#0@@0|) (LitInt |a#40#1#0|)))
)))
(assert (forall ((|a#41#0#0@@0| Int) (|a#41#1#0| Int) ) (! (= (CrashTolerantJournal.TransitionLabel.newBoundaryLsn (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#41#0#0@@0| |a#41#1#0|)) |a#41#0#0@@0|)
 :qid |CrashTolerantJournalidfy.25:24|
 :skolemid |3188|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#41#0#0@@0| |a#41#1#0|))
)))
(assert (forall ((|a#42#0#0@@0| Int) (|a#42#1#0| Int) ) (! (= (CrashTolerantJournal.TransitionLabel.maxLsn (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#42#0#0@@0| |a#42#1#0|)) |a#42#1#0|)
 :qid |CrashTolerantJournalidfy.25:24|
 :skolemid |3189|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |a#42#0#0@@0| |a#42#1#0|))
)))
(assert (forall ((arg0@@571 Int) ) (! (= (type (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| arg0@@571)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| arg0@@571))
)))
(assert (forall ((|a#43#0#0@@0| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#43#0#0@@0|)) |##CrashTolerantJournal.TransitionLabel.CommitCompleteLabel|)
 :qid |CrashTolerantJournalidfy.26:27|
 :skolemid |3190|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#43#0#0@@0|))
)))
(assert (forall ((d@@143 T@U) ) (!  (=> (= (type d@@143) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@143) (= (DatatypeCtorId d@@143) |##CrashTolerantJournal.TransitionLabel.CommitCompleteLabel|)))
 :qid |unknown.0:0|
 :skolemid |3191|
 :pattern ( (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@143))
)))
(assert (forall ((d@@144 T@U) ) (!  (=> (and (= (type d@@144) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@144)) (exists ((|a#44#0#0@@0| Int) ) (! (= d@@144 (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#44#0#0@@0|))
 :qid |CrashTolerantJournalidfy.26:27|
 :skolemid |3192|
)))
 :qid |unknown.0:0|
 :skolemid |3193|
 :pattern ( (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@144))
)))
(assert (forall ((|a#45#0#0@@0| Int) ) (! (= ($Is (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#45#0#0@@0|) Tclass.CrashTolerantJournal.TransitionLabel) ($Is (int_2_U |a#45#0#0@@0|) Tclass._System.nat))
 :qid |CrashTolerantJournalidfy.26:27|
 :skolemid |3194|
 :pattern ( ($Is (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#45#0#0@@0|) Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert (forall ((|a#46#0#0| Int) ($h@@152 T@U) ) (!  (=> (and (= (type $h@@152) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@152)) (= ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#46#0#0|) Tclass.CrashTolerantJournal.TransitionLabel $h@@152) ($IsAlloc (int_2_U |a#46#0#0|) Tclass._System.nat $h@@152)))
 :qid |CrashTolerantJournalidfy.26:27|
 :skolemid |3195|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#46#0#0|) Tclass.CrashTolerantJournal.TransitionLabel $h@@152))
)))
(assert (forall ((d@@145 T@U) ($h@@153 T@U) ) (!  (=> (and (and (= (type d@@145) DatatypeTypeType) (= (type $h@@153) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@153) (and (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@145) ($IsAlloc d@@145 Tclass.CrashTolerantJournal.TransitionLabel $h@@153)))) ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.requireEnd d@@145)) Tclass._System.nat $h@@153))
 :qid |unknown.0:0|
 :skolemid |3196|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantJournal.TransitionLabel.requireEnd d@@145)) Tclass._System.nat $h@@153))
)))
(assert (forall ((|a#47#0#0| Int) ) (! (= (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (LitInt |a#47#0#0|)) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#47#0#0|)))
 :qid |CrashTolerantJournalidfy.26:27|
 :skolemid |3197|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (LitInt |a#47#0#0|)))
)))
(assert (forall ((|a#48#0#0| Int) ) (! (= (CrashTolerantJournal.TransitionLabel.requireEnd (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#48#0#0|)) |a#48#0#0|)
 :qid |CrashTolerantJournalidfy.26:27|
 :skolemid |3198|
 :pattern ( (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| |a#48#0#0|))
)))
(assert (= (type |#CrashTolerantJournal.TransitionLabel.CrashLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantJournal.TransitionLabel.CrashLabel|) |##CrashTolerantJournal.TransitionLabel.CrashLabel|))
(assert (forall ((d@@146 T@U) ) (!  (=> (= (type d@@146) DatatypeTypeType) (= (CrashTolerantJournal.TransitionLabel.CrashLabel_q d@@146) (= (DatatypeCtorId d@@146) |##CrashTolerantJournal.TransitionLabel.CrashLabel|)))
 :qid |unknown.0:0|
 :skolemid |3199|
 :pattern ( (CrashTolerantJournal.TransitionLabel.CrashLabel_q d@@146))
)))
(assert (forall ((d@@147 T@U) ) (!  (=> (and (= (type d@@147) DatatypeTypeType) (CrashTolerantJournal.TransitionLabel.CrashLabel_q d@@147)) (= d@@147 |#CrashTolerantJournal.TransitionLabel.CrashLabel|))
 :qid |unknown.0:0|
 :skolemid |3200|
 :pattern ( (CrashTolerantJournal.TransitionLabel.CrashLabel_q d@@147))
)))
(assert ($Is |#CrashTolerantJournal.TransitionLabel.CrashLabel| Tclass.CrashTolerantJournal.TransitionLabel))
(assert (forall (($h@@154 T@U) ) (!  (=> (and (= (type $h@@154) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@154)) ($IsAlloc |#CrashTolerantJournal.TransitionLabel.CrashLabel| Tclass.CrashTolerantJournal.TransitionLabel $h@@154))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3201|
 :pattern ( ($IsAlloc |#CrashTolerantJournal.TransitionLabel.CrashLabel| Tclass.CrashTolerantJournal.TransitionLabel $h@@154))
)))
(assert (= |#CrashTolerantJournal.TransitionLabel.CrashLabel| (Lit |#CrashTolerantJournal.TransitionLabel.CrashLabel|)))
(assert (forall ((d@@148 T@U) ) (!  (=> (and (= (type d@@148) DatatypeTypeType) (|$IsA#CrashTolerantJournal.TransitionLabel| d@@148)) (or (or (or (or (or (or (or (or (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@148) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@148)) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@148)) (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@148)) (CrashTolerantJournal.TransitionLabel.InternalLabel_q d@@148)) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@148)) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@148)) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@148)) (CrashTolerantJournal.TransitionLabel.CrashLabel_q d@@148)))
 :qid |unknown.0:0|
 :skolemid |3202|
 :pattern ( (|$IsA#CrashTolerantJournal.TransitionLabel| d@@148))
)))
(assert (forall ((d@@149 T@U) ) (!  (=> (and (= (type d@@149) DatatypeTypeType) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel)) (or (or (or (or (or (or (or (or (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@149) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@149)) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@149)) (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@149)) (CrashTolerantJournal.TransitionLabel.InternalLabel_q d@@149)) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@149)) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@149)) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@149)) (CrashTolerantJournal.TransitionLabel.CrashLabel_q d@@149)))
 :qid |unknown.0:0|
 :skolemid |3203|
 :pattern ( (CrashTolerantJournal.TransitionLabel.CrashLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.InternalLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.PutLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
 :pattern ( (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@149) ($Is d@@149 Tclass.CrashTolerantJournal.TransitionLabel))
)))
(assert (forall ((a@@157 T@U) (b@@107 T@U) ) (!  (=> (and (and (= (type a@@157) DatatypeTypeType) (= (type b@@107) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q a@@157) (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q b@@107))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@157 b@@107) true))
 :qid |unknown.0:0|
 :skolemid |3204|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@157 b@@107) (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q a@@157))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@157 b@@107) (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q b@@107))
)))
(assert (forall ((a@@158 T@U) (b@@108 T@U) ) (!  (=> (and (and (= (type a@@158) DatatypeTypeType) (= (type b@@108) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q a@@158) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q b@@108))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@158 b@@108) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.TransitionLabel.records a@@158) (CrashTolerantJournal.TransitionLabel.records b@@108))))
 :qid |unknown.0:0|
 :skolemid |3205|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@158 b@@108) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q a@@158))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@158 b@@108) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q b@@108))
)))
(assert (forall ((a@@159 T@U) (b@@109 T@U) ) (!  (=> (and (and (= (type a@@159) DatatypeTypeType) (= (type b@@109) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q a@@159) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q b@@109))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@159 b@@109) (= (CrashTolerantJournal.TransitionLabel.endLsn a@@159) (CrashTolerantJournal.TransitionLabel.endLsn b@@109))))
 :qid |unknown.0:0|
 :skolemid |3206|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@159 b@@109) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q a@@159))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@159 b@@109) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q b@@109))
)))
(assert (forall ((a@@160 T@U) (b@@110 T@U) ) (!  (=> (and (and (= (type a@@160) DatatypeTypeType) (= (type b@@110) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.PutLabel_q a@@160) (CrashTolerantJournal.TransitionLabel.PutLabel_q b@@110))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@160 b@@110) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.TransitionLabel.records a@@160) (CrashTolerantJournal.TransitionLabel.records b@@110))))
 :qid |unknown.0:0|
 :skolemid |3207|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@160 b@@110) (CrashTolerantJournal.TransitionLabel.PutLabel_q a@@160))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@160 b@@110) (CrashTolerantJournal.TransitionLabel.PutLabel_q b@@110))
)))
(assert (forall ((a@@161 T@U) (b@@111 T@U) ) (!  (=> (and (and (= (type a@@161) DatatypeTypeType) (= (type b@@111) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.InternalLabel_q a@@161) (CrashTolerantJournal.TransitionLabel.InternalLabel_q b@@111))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@161 b@@111) true))
 :qid |unknown.0:0|
 :skolemid |3208|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@161 b@@111) (CrashTolerantJournal.TransitionLabel.InternalLabel_q a@@161))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@161 b@@111) (CrashTolerantJournal.TransitionLabel.InternalLabel_q b@@111))
)))
(assert (forall ((a@@162 T@U) (b@@112 T@U) ) (!  (=> (and (and (= (type a@@162) DatatypeTypeType) (= (type b@@112) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q a@@162) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q b@@112))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@162 b@@112) (= (CrashTolerantJournal.TransitionLabel.syncLsn a@@162) (CrashTolerantJournal.TransitionLabel.syncLsn b@@112))))
 :qid |unknown.0:0|
 :skolemid |3209|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@162 b@@112) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q a@@162))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@162 b@@112) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q b@@112))
)))
(assert (forall ((a@@163 T@U) (b@@113 T@U) ) (!  (=> (and (and (= (type a@@163) DatatypeTypeType) (= (type b@@113) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q a@@163) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q b@@113))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@163 b@@113)  (and (= (CrashTolerantJournal.TransitionLabel.newBoundaryLsn a@@163) (CrashTolerantJournal.TransitionLabel.newBoundaryLsn b@@113)) (= (CrashTolerantJournal.TransitionLabel.maxLsn a@@163) (CrashTolerantJournal.TransitionLabel.maxLsn b@@113)))))
 :qid |unknown.0:0|
 :skolemid |3210|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@163 b@@113) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q a@@163))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@163 b@@113) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q b@@113))
)))
(assert (forall ((a@@164 T@U) (b@@114 T@U) ) (!  (=> (and (and (= (type a@@164) DatatypeTypeType) (= (type b@@114) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q a@@164) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q b@@114))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@164 b@@114) (= (CrashTolerantJournal.TransitionLabel.requireEnd a@@164) (CrashTolerantJournal.TransitionLabel.requireEnd b@@114))))
 :qid |unknown.0:0|
 :skolemid |3211|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@164 b@@114) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q a@@164))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@164 b@@114) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q b@@114))
)))
(assert (forall ((a@@165 T@U) (b@@115 T@U) ) (!  (=> (and (and (= (type a@@165) DatatypeTypeType) (= (type b@@115) DatatypeTypeType)) (and (CrashTolerantJournal.TransitionLabel.CrashLabel_q a@@165) (CrashTolerantJournal.TransitionLabel.CrashLabel_q b@@115))) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@165 b@@115) true))
 :qid |unknown.0:0|
 :skolemid |3212|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@165 b@@115) (CrashTolerantJournal.TransitionLabel.CrashLabel_q a@@165))
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@165 b@@115) (CrashTolerantJournal.TransitionLabel.CrashLabel_q b@@115))
)))
(assert (forall ((a@@166 T@U) (b@@116 T@U) ) (!  (=> (and (= (type a@@166) DatatypeTypeType) (= (type b@@116) DatatypeTypeType)) (= (|CrashTolerantJournal.TransitionLabel#Equal| a@@166 b@@116) (= a@@166 b@@116)))
 :qid |unknown.0:0|
 :skolemid |3213|
 :pattern ( (|CrashTolerantJournal.TransitionLabel#Equal| a@@166 b@@116))
)))
(assert (= (type |#CrashTolerantJournal.Ephemeral.Unknown|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantJournal.Ephemeral.Unknown|) |##CrashTolerantJournal.Ephemeral.Unknown|))
(assert (forall ((d@@150 T@U) ) (!  (=> (= (type d@@150) DatatypeTypeType) (= (CrashTolerantJournal.Ephemeral.Unknown_q d@@150) (= (DatatypeCtorId d@@150) |##CrashTolerantJournal.Ephemeral.Unknown|)))
 :qid |unknown.0:0|
 :skolemid |3214|
 :pattern ( (CrashTolerantJournal.Ephemeral.Unknown_q d@@150))
)))
(assert (forall ((d@@151 T@U) ) (!  (=> (and (= (type d@@151) DatatypeTypeType) (CrashTolerantJournal.Ephemeral.Unknown_q d@@151)) (= d@@151 |#CrashTolerantJournal.Ephemeral.Unknown|))
 :qid |unknown.0:0|
 :skolemid |3215|
 :pattern ( (CrashTolerantJournal.Ephemeral.Unknown_q d@@151))
)))
(assert (= (type Tclass.CrashTolerantJournal.Ephemeral) TyType))
(assert (= (Tag Tclass.CrashTolerantJournal.Ephemeral) Tagclass.CrashTolerantJournal.Ephemeral))
(assert (= (TagFamily Tclass.CrashTolerantJournal.Ephemeral) tytagFamily$Ephemeral))
(assert (forall ((bx@@167 T@U) ) (!  (=> (and (= (type bx@@167) BoxType) ($IsBox bx@@167 Tclass.CrashTolerantJournal.Ephemeral)) (and (= ($Box ($Unbox DatatypeTypeType bx@@167)) bx@@167) ($Is ($Unbox DatatypeTypeType bx@@167) Tclass.CrashTolerantJournal.Ephemeral)))
 :qid |unknown.0:0|
 :skolemid |3216|
 :pattern ( ($IsBox bx@@167 Tclass.CrashTolerantJournal.Ephemeral))
)))
(assert ($Is |#CrashTolerantJournal.Ephemeral.Unknown| Tclass.CrashTolerantJournal.Ephemeral))
(assert (forall (($h@@155 T@U) ) (!  (=> (and (= (type $h@@155) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@155)) ($IsAlloc |#CrashTolerantJournal.Ephemeral.Unknown| Tclass.CrashTolerantJournal.Ephemeral $h@@155))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3217|
 :pattern ( ($IsAlloc |#CrashTolerantJournal.Ephemeral.Unknown| Tclass.CrashTolerantJournal.Ephemeral $h@@155))
)))
(assert (= |#CrashTolerantJournal.Ephemeral.Unknown| (Lit |#CrashTolerantJournal.Ephemeral.Unknown|)))
(assert (forall ((arg0@@572 T@U) ) (! (= (type (|#CrashTolerantJournal.Ephemeral.Known| arg0@@572)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.Ephemeral.Known|
 :pattern ( (|#CrashTolerantJournal.Ephemeral.Known| arg0@@572))
)))
(assert (forall ((|a#59#0#0| T@U) ) (!  (=> (= (type |a#59#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#CrashTolerantJournal.Ephemeral.Known| |a#59#0#0|)) |##CrashTolerantJournal.Ephemeral.Known|))
 :qid |CrashTolerantJournalidfy.40:13|
 :skolemid |3218|
 :pattern ( (|#CrashTolerantJournal.Ephemeral.Known| |a#59#0#0|))
)))
(assert (forall ((d@@152 T@U) ) (!  (=> (= (type d@@152) DatatypeTypeType) (= (CrashTolerantJournal.Ephemeral.Known_q d@@152) (= (DatatypeCtorId d@@152) |##CrashTolerantJournal.Ephemeral.Known|)))
 :qid |unknown.0:0|
 :skolemid |3219|
 :pattern ( (CrashTolerantJournal.Ephemeral.Known_q d@@152))
)))
(assert (forall ((d@@153 T@U) ) (!  (=> (and (= (type d@@153) DatatypeTypeType) (CrashTolerantJournal.Ephemeral.Known_q d@@153)) (exists ((|a#60#0#0| T@U) ) (!  (and (= (type |a#60#0#0|) DatatypeTypeType) (= d@@153 (|#CrashTolerantJournal.Ephemeral.Known| |a#60#0#0|)))
 :qid |CrashTolerantJournalidfy.40:13|
 :skolemid |3220|
 :no-pattern (type |a#60#0#0|)
 :no-pattern (U_2_int |a#60#0#0|)
 :no-pattern (U_2_bool |a#60#0#0|)
)))
 :qid |unknown.0:0|
 :skolemid |3221|
 :pattern ( (CrashTolerantJournal.Ephemeral.Known_q d@@153))
)))
(assert (forall ((|a#61#0#0| T@U) ) (!  (=> (= (type |a#61#0#0|) DatatypeTypeType) (= ($Is (|#CrashTolerantJournal.Ephemeral.Known| |a#61#0#0|) Tclass.CrashTolerantJournal.Ephemeral) ($Is |a#61#0#0| Tclass.AbstractJournal.Variables)))
 :qid |CrashTolerantJournalidfy.40:13|
 :skolemid |3222|
 :pattern ( ($Is (|#CrashTolerantJournal.Ephemeral.Known| |a#61#0#0|) Tclass.CrashTolerantJournal.Ephemeral))
)))
(assert (forall ((|a#62#0#0| T@U) ($h@@156 T@U) ) (!  (=> (and (and (= (type |a#62#0#0|) DatatypeTypeType) (= (type $h@@156) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@156)) (= ($IsAlloc (|#CrashTolerantJournal.Ephemeral.Known| |a#62#0#0|) Tclass.CrashTolerantJournal.Ephemeral $h@@156) ($IsAlloc |a#62#0#0| Tclass.AbstractJournal.Variables $h@@156)))
 :qid |CrashTolerantJournalidfy.40:13|
 :skolemid |3223|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.Ephemeral.Known| |a#62#0#0|) Tclass.CrashTolerantJournal.Ephemeral $h@@156))
)))
(assert (forall ((d@@154 T@U) ($h@@157 T@U) ) (!  (=> (and (and (= (type d@@154) DatatypeTypeType) (= (type $h@@157) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@157) (and (CrashTolerantJournal.Ephemeral.Known_q d@@154) ($IsAlloc d@@154 Tclass.CrashTolerantJournal.Ephemeral $h@@157)))) ($IsAlloc (CrashTolerantJournal.Ephemeral.v d@@154) Tclass.AbstractJournal.Variables $h@@157))
 :qid |unknown.0:0|
 :skolemid |3224|
 :pattern ( ($IsAlloc (CrashTolerantJournal.Ephemeral.v d@@154) Tclass.AbstractJournal.Variables $h@@157))
)))
(assert (forall ((|a#63#0#0| T@U) ) (!  (=> (= (type |a#63#0#0|) DatatypeTypeType) (= (|#CrashTolerantJournal.Ephemeral.Known| (Lit |a#63#0#0|)) (Lit (|#CrashTolerantJournal.Ephemeral.Known| |a#63#0#0|))))
 :qid |CrashTolerantJournalidfy.40:13|
 :skolemid |3225|
 :pattern ( (|#CrashTolerantJournal.Ephemeral.Known| (Lit |a#63#0#0|)))
)))
(assert (forall ((|a#64#0#0| T@U) ) (!  (=> (= (type |a#64#0#0|) DatatypeTypeType) (= (CrashTolerantJournal.Ephemeral.v (|#CrashTolerantJournal.Ephemeral.Known| |a#64#0#0|)) |a#64#0#0|))
 :qid |CrashTolerantJournalidfy.40:13|
 :skolemid |3226|
 :pattern ( (|#CrashTolerantJournal.Ephemeral.Known| |a#64#0#0|))
)))
(assert (forall ((|a#65#0#0| T@U) ) (!  (=> (= (type |a#65#0#0|) DatatypeTypeType) (< (DtRank |a#65#0#0|) (DtRank (|#CrashTolerantJournal.Ephemeral.Known| |a#65#0#0|))))
 :qid |CrashTolerantJournalidfy.40:13|
 :skolemid |3227|
 :pattern ( (|#CrashTolerantJournal.Ephemeral.Known| |a#65#0#0|))
)))
(assert (forall ((d@@155 T@U) ) (!  (=> (and (= (type d@@155) DatatypeTypeType) (|$IsA#CrashTolerantJournal.Ephemeral| d@@155)) (or (CrashTolerantJournal.Ephemeral.Unknown_q d@@155) (CrashTolerantJournal.Ephemeral.Known_q d@@155)))
 :qid |unknown.0:0|
 :skolemid |3228|
 :pattern ( (|$IsA#CrashTolerantJournal.Ephemeral| d@@155))
)))
(assert (forall ((d@@156 T@U) ) (!  (=> (and (= (type d@@156) DatatypeTypeType) ($Is d@@156 Tclass.CrashTolerantJournal.Ephemeral)) (or (CrashTolerantJournal.Ephemeral.Unknown_q d@@156) (CrashTolerantJournal.Ephemeral.Known_q d@@156)))
 :qid |unknown.0:0|
 :skolemid |3229|
 :pattern ( (CrashTolerantJournal.Ephemeral.Known_q d@@156) ($Is d@@156 Tclass.CrashTolerantJournal.Ephemeral))
 :pattern ( (CrashTolerantJournal.Ephemeral.Unknown_q d@@156) ($Is d@@156 Tclass.CrashTolerantJournal.Ephemeral))
)))
(assert (forall ((a@@167 T@U) (b@@117 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@117) DatatypeTypeType)) (and (CrashTolerantJournal.Ephemeral.Unknown_q a@@167) (CrashTolerantJournal.Ephemeral.Unknown_q b@@117))) (= (|CrashTolerantJournal.Ephemeral#Equal| a@@167 b@@117) true))
 :qid |unknown.0:0|
 :skolemid |3230|
 :pattern ( (|CrashTolerantJournal.Ephemeral#Equal| a@@167 b@@117) (CrashTolerantJournal.Ephemeral.Unknown_q a@@167))
 :pattern ( (|CrashTolerantJournal.Ephemeral#Equal| a@@167 b@@117) (CrashTolerantJournal.Ephemeral.Unknown_q b@@117))
)))
(assert (forall ((a@@168 T@U) (b@@118 T@U) ) (!  (=> (and (and (= (type a@@168) DatatypeTypeType) (= (type b@@118) DatatypeTypeType)) (and (CrashTolerantJournal.Ephemeral.Known_q a@@168) (CrashTolerantJournal.Ephemeral.Known_q b@@118))) (= (|CrashTolerantJournal.Ephemeral#Equal| a@@168 b@@118) (|AbstractJournal.Variables#Equal| (CrashTolerantJournal.Ephemeral.v a@@168) (CrashTolerantJournal.Ephemeral.v b@@118))))
 :qid |unknown.0:0|
 :skolemid |3231|
 :pattern ( (|CrashTolerantJournal.Ephemeral#Equal| a@@168 b@@118) (CrashTolerantJournal.Ephemeral.Known_q a@@168))
 :pattern ( (|CrashTolerantJournal.Ephemeral#Equal| a@@168 b@@118) (CrashTolerantJournal.Ephemeral.Known_q b@@118))
)))
(assert (forall ((a@@169 T@U) (b@@119 T@U) ) (!  (=> (and (= (type a@@169) DatatypeTypeType) (= (type b@@119) DatatypeTypeType)) (= (|CrashTolerantJournal.Ephemeral#Equal| a@@169 b@@119) (= a@@169 b@@119)))
 :qid |unknown.0:0|
 :skolemid |3232|
 :pattern ( (|CrashTolerantJournal.Ephemeral#Equal| a@@169 b@@119))
)))
(assert  (=> true (forall ((this@@116 T@U) ) (!  (=> (and (= (type this@@116) DatatypeTypeType) (or (|CrashTolerantJournal.Ephemeral.WF#canCall| this@@116) ($Is this@@116 Tclass.CrashTolerantJournal.Ephemeral))) true)
 :qid |CrashTolerantJournalidfy.42:15|
 :skolemid |3233|
 :pattern ( (CrashTolerantJournal.Ephemeral.WF this@@116))
))))
(assert (forall ((this@@117 T@U) ) (!  (=> (and (= (type this@@117) DatatypeTypeType) ($Is this@@117 Tclass.CrashTolerantJournal.Ephemeral)) (= (|CrashTolerantJournal.Ephemeral.WF#requires| this@@117) true))
 :qid |CrashTolerantJournalidfy.42:15|
 :skolemid |3234|
 :pattern ( (|CrashTolerantJournal.Ephemeral.WF#requires| this@@117))
)))
(assert  (=> true (forall ((this@@118 T@U) ) (!  (=> (and (= (type this@@118) DatatypeTypeType) (or (|CrashTolerantJournal.Ephemeral.WF#canCall| this@@118) ($Is this@@118 Tclass.CrashTolerantJournal.Ephemeral))) (and (=> (CrashTolerantJournal.Ephemeral.Known_q this@@118) (|AbstractJournal.Variables.WF#canCall| (CrashTolerantJournal.Ephemeral.v this@@118))) (= (CrashTolerantJournal.Ephemeral.WF this@@118)  (=> (CrashTolerantJournal.Ephemeral.Known_q this@@118) (AbstractJournal.Variables.WF (CrashTolerantJournal.Ephemeral.v this@@118))))))
 :qid |CrashTolerantJournalidfy.42:15|
 :skolemid |3235|
 :pattern ( (CrashTolerantJournal.Ephemeral.WF this@@118))
))))
(assert  (=> true (forall ((this@@119 T@U) ) (!  (=> (and (= (type this@@119) DatatypeTypeType) (or (|CrashTolerantJournal.Ephemeral.WF#canCall| (Lit this@@119)) ($Is this@@119 Tclass.CrashTolerantJournal.Ephemeral))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit this@@119))))) (|AbstractJournal.Variables.WF#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit this@@119))))) (= (CrashTolerantJournal.Ephemeral.WF (Lit this@@119)) (U_2_bool (Lit (bool_2_U  (=> (CrashTolerantJournal.Ephemeral.Known_q (Lit this@@119)) (AbstractJournal.Variables.WF (Lit (CrashTolerantJournal.Ephemeral.v (Lit this@@119)))))))))))
 :qid |CrashTolerantJournalidfy.42:15|
 :weight 3
 :skolemid |3236|
 :pattern ( (CrashTolerantJournal.Ephemeral.WF (Lit this@@119)))
))))
(assert (forall ((arg0@@573 T@U) (arg1@@278 T@U) (arg2@@164 T@U) ) (! (= (type (|#CrashTolerantJournal.Variables.Variables| arg0@@573 arg1@@278 arg2@@164)) DatatypeTypeType)
 :qid |funType:#CrashTolerantJournal.Variables.Variables|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| arg0@@573 arg1@@278 arg2@@164))
)))
(assert (forall ((|a#0#0#0@@6| T@U) (|a#0#1#0@@3| T@U) (|a#0#2#0| T@U) ) (!  (=> (and (and (= (type |a#0#0#0@@6|) DatatypeTypeType) (= (type |a#0#1#0@@3|) DatatypeTypeType)) (= (type |a#0#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#CrashTolerantJournal.Variables.Variables| |a#0#0#0@@6| |a#0#1#0@@3| |a#0#2#0|)) |##CrashTolerantJournal.Variables.Variables|))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3237|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| |a#0#0#0@@6| |a#0#1#0@@3| |a#0#2#0|))
)))
(assert (forall ((d@@157 T@U) ) (!  (=> (= (type d@@157) DatatypeTypeType) (= (CrashTolerantJournal.Variables.Variables_q d@@157) (= (DatatypeCtorId d@@157) |##CrashTolerantJournal.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |3238|
 :pattern ( (CrashTolerantJournal.Variables.Variables_q d@@157))
)))
(assert (forall ((d@@158 T@U) ) (!  (=> (and (= (type d@@158) DatatypeTypeType) (CrashTolerantJournal.Variables.Variables_q d@@158)) (exists ((|a#1#0#0@@6| T@U) (|a#1#1#0@@3| T@U) (|a#1#2#0| T@U) ) (!  (and (and (and (= (type |a#1#0#0@@6|) DatatypeTypeType) (= (type |a#1#1#0@@3|) DatatypeTypeType)) (= (type |a#1#2#0|) DatatypeTypeType)) (= d@@158 (|#CrashTolerantJournal.Variables.Variables| |a#1#0#0@@6| |a#1#1#0@@3| |a#1#2#0|)))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3239|
 :no-pattern (type |a#1#0#0@@6|)
 :no-pattern (type |a#1#1#0@@3|)
 :no-pattern (type |a#1#2#0|)
 :no-pattern (U_2_int |a#1#0#0@@6|)
 :no-pattern (U_2_bool |a#1#0#0@@6|)
 :no-pattern (U_2_int |a#1#1#0@@3|)
 :no-pattern (U_2_bool |a#1#1#0@@3|)
 :no-pattern (U_2_int |a#1#2#0|)
 :no-pattern (U_2_bool |a#1#2#0|)
)))
 :qid |unknown.0:0|
 :skolemid |3240|
 :pattern ( (CrashTolerantJournal.Variables.Variables_q d@@158))
)))
(assert (forall ((|a#2#0#0@@6| T@U) (|a#2#1#0@@3| T@U) (|a#2#2#0| T@U) ) (!  (=> (and (and (= (type |a#2#0#0@@6|) DatatypeTypeType) (= (type |a#2#1#0@@3|) DatatypeTypeType)) (= (type |a#2#2#0|) DatatypeTypeType)) (= ($Is (|#CrashTolerantJournal.Variables.Variables| |a#2#0#0@@6| |a#2#1#0@@3| |a#2#2#0|) Tclass.CrashTolerantJournal.Variables)  (and (and ($Is |a#2#0#0@@6| Tclass.MsgHistoryMod.MsgHistory) ($Is |a#2#1#0@@3| Tclass.CrashTolerantJournal.Ephemeral)) ($Is |a#2#2#0| (Tclass.Options.Option Tclass.MsgHistoryMod.MsgHistory)))))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3241|
 :pattern ( ($Is (|#CrashTolerantJournal.Variables.Variables| |a#2#0#0@@6| |a#2#1#0@@3| |a#2#2#0|) Tclass.CrashTolerantJournal.Variables))
)))
(assert (forall ((|a#3#0#0@@6| T@U) (|a#3#1#0@@3| T@U) (|a#3#2#0| T@U) ($h@@158 T@U) ) (!  (=> (and (and (and (and (= (type |a#3#0#0@@6|) DatatypeTypeType) (= (type |a#3#1#0@@3|) DatatypeTypeType)) (= (type |a#3#2#0|) DatatypeTypeType)) (= (type $h@@158) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@158)) (= ($IsAlloc (|#CrashTolerantJournal.Variables.Variables| |a#3#0#0@@6| |a#3#1#0@@3| |a#3#2#0|) Tclass.CrashTolerantJournal.Variables $h@@158)  (and (and ($IsAlloc |a#3#0#0@@6| Tclass.MsgHistoryMod.MsgHistory $h@@158) ($IsAlloc |a#3#1#0@@3| Tclass.CrashTolerantJournal.Ephemeral $h@@158)) ($IsAlloc |a#3#2#0| (Tclass.Options.Option Tclass.MsgHistoryMod.MsgHistory) $h@@158))))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3242|
 :pattern ( ($IsAlloc (|#CrashTolerantJournal.Variables.Variables| |a#3#0#0@@6| |a#3#1#0@@3| |a#3#2#0|) Tclass.CrashTolerantJournal.Variables $h@@158))
)))
(assert (forall ((d@@159 T@U) ($h@@159 T@U) ) (!  (=> (and (and (= (type d@@159) DatatypeTypeType) (= (type $h@@159) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@159) (and (CrashTolerantJournal.Variables.Variables_q d@@159) ($IsAlloc d@@159 Tclass.CrashTolerantJournal.Variables $h@@159)))) ($IsAlloc (CrashTolerantJournal.Variables.persistent d@@159) Tclass.MsgHistoryMod.MsgHistory $h@@159))
 :qid |unknown.0:0|
 :skolemid |3243|
 :pattern ( ($IsAlloc (CrashTolerantJournal.Variables.persistent d@@159) Tclass.MsgHistoryMod.MsgHistory $h@@159))
)))
(assert (forall ((d@@160 T@U) ($h@@160 T@U) ) (!  (=> (and (and (= (type d@@160) DatatypeTypeType) (= (type $h@@160) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@160) (and (CrashTolerantJournal.Variables.Variables_q d@@160) ($IsAlloc d@@160 Tclass.CrashTolerantJournal.Variables $h@@160)))) ($IsAlloc (CrashTolerantJournal.Variables.ephemeral d@@160) Tclass.CrashTolerantJournal.Ephemeral $h@@160))
 :qid |unknown.0:0|
 :skolemid |3244|
 :pattern ( ($IsAlloc (CrashTolerantJournal.Variables.ephemeral d@@160) Tclass.CrashTolerantJournal.Ephemeral $h@@160))
)))
(assert (forall ((d@@161 T@U) ($h@@161 T@U) ) (!  (=> (and (and (= (type d@@161) DatatypeTypeType) (= (type $h@@161) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@161) (and (CrashTolerantJournal.Variables.Variables_q d@@161) ($IsAlloc d@@161 Tclass.CrashTolerantJournal.Variables $h@@161)))) ($IsAlloc (CrashTolerantJournal.Variables.inFlight d@@161) (Tclass.Options.Option Tclass.MsgHistoryMod.MsgHistory) $h@@161))
 :qid |unknown.0:0|
 :skolemid |3245|
 :pattern ( ($IsAlloc (CrashTolerantJournal.Variables.inFlight d@@161) (Tclass.Options.Option Tclass.MsgHistoryMod.MsgHistory) $h@@161))
)))
(assert (forall ((|a#4#0#0@@6| T@U) (|a#4#1#0@@3| T@U) (|a#4#2#0| T@U) ) (!  (=> (and (and (= (type |a#4#0#0@@6|) DatatypeTypeType) (= (type |a#4#1#0@@3|) DatatypeTypeType)) (= (type |a#4#2#0|) DatatypeTypeType)) (= (|#CrashTolerantJournal.Variables.Variables| (Lit |a#4#0#0@@6|) (Lit |a#4#1#0@@3|) (Lit |a#4#2#0|)) (Lit (|#CrashTolerantJournal.Variables.Variables| |a#4#0#0@@6| |a#4#1#0@@3| |a#4#2#0|))))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3246|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| (Lit |a#4#0#0@@6|) (Lit |a#4#1#0@@3|) (Lit |a#4#2#0|)))
)))
(assert (forall ((|a#5#0#0@@9| T@U) (|a#5#1#0@@4| T@U) (|a#5#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#5#0#0@@9|) DatatypeTypeType) (= (type |a#5#1#0@@4|) DatatypeTypeType)) (= (type |a#5#2#0@@0|) DatatypeTypeType)) (= (CrashTolerantJournal.Variables.persistent (|#CrashTolerantJournal.Variables.Variables| |a#5#0#0@@9| |a#5#1#0@@4| |a#5#2#0@@0|)) |a#5#0#0@@9|))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3247|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| |a#5#0#0@@9| |a#5#1#0@@4| |a#5#2#0@@0|))
)))
(assert (forall ((|a#6#0#0@@9| T@U) (|a#6#1#0@@5| T@U) (|a#6#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#6#0#0@@9|) DatatypeTypeType) (= (type |a#6#1#0@@5|) DatatypeTypeType)) (= (type |a#6#2#0@@0|) DatatypeTypeType)) (< (DtRank |a#6#0#0@@9|) (DtRank (|#CrashTolerantJournal.Variables.Variables| |a#6#0#0@@9| |a#6#1#0@@5| |a#6#2#0@@0|))))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3248|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| |a#6#0#0@@9| |a#6#1#0@@5| |a#6#2#0@@0|))
)))
(assert (forall ((|a#7#0#0@@9| T@U) (|a#7#1#0@@5| T@U) (|a#7#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@9|) DatatypeTypeType) (= (type |a#7#1#0@@5|) DatatypeTypeType)) (= (type |a#7#2#0@@0|) DatatypeTypeType)) (= (CrashTolerantJournal.Variables.ephemeral (|#CrashTolerantJournal.Variables.Variables| |a#7#0#0@@9| |a#7#1#0@@5| |a#7#2#0@@0|)) |a#7#1#0@@5|))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3249|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| |a#7#0#0@@9| |a#7#1#0@@5| |a#7#2#0@@0|))
)))
(assert (forall ((|a#8#0#0@@8| T@U) (|a#8#1#0@@4| T@U) (|a#8#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@8|) DatatypeTypeType) (= (type |a#8#1#0@@4|) DatatypeTypeType)) (= (type |a#8#2#0@@1|) DatatypeTypeType)) (< (DtRank |a#8#1#0@@4|) (DtRank (|#CrashTolerantJournal.Variables.Variables| |a#8#0#0@@8| |a#8#1#0@@4| |a#8#2#0@@1|))))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3250|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| |a#8#0#0@@8| |a#8#1#0@@4| |a#8#2#0@@1|))
)))
(assert (forall ((|a#9#0#0@@6| T@U) (|a#9#1#0@@2| T@U) (|a#9#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@6|) DatatypeTypeType) (= (type |a#9#1#0@@2|) DatatypeTypeType)) (= (type |a#9#2#0@@1|) DatatypeTypeType)) (= (CrashTolerantJournal.Variables.inFlight (|#CrashTolerantJournal.Variables.Variables| |a#9#0#0@@6| |a#9#1#0@@2| |a#9#2#0@@1|)) |a#9#2#0@@1|))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3251|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| |a#9#0#0@@6| |a#9#1#0@@2| |a#9#2#0@@1|))
)))
(assert (forall ((|a#10#0#0@@6| T@U) (|a#10#1#0@@2| T@U) (|a#10#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#10#0#0@@6|) DatatypeTypeType) (= (type |a#10#1#0@@2|) DatatypeTypeType)) (= (type |a#10#2#0@@1|) DatatypeTypeType)) (< (DtRank |a#10#2#0@@1|) (DtRank (|#CrashTolerantJournal.Variables.Variables| |a#10#0#0@@6| |a#10#1#0@@2| |a#10#2#0@@1|))))
 :qid |CrashTolerantJournalidfy.48:5|
 :skolemid |3252|
 :pattern ( (|#CrashTolerantJournal.Variables.Variables| |a#10#0#0@@6| |a#10#1#0@@2| |a#10#2#0@@1|))
)))
(assert (forall ((d@@162 T@U) ) (!  (=> (and (= (type d@@162) DatatypeTypeType) (|$IsA#CrashTolerantJournal.Variables| d@@162)) (CrashTolerantJournal.Variables.Variables_q d@@162))
 :qid |unknown.0:0|
 :skolemid |3253|
 :pattern ( (|$IsA#CrashTolerantJournal.Variables| d@@162))
)))
(assert (forall ((d@@163 T@U) ) (!  (=> (and (= (type d@@163) DatatypeTypeType) ($Is d@@163 Tclass.CrashTolerantJournal.Variables)) (CrashTolerantJournal.Variables.Variables_q d@@163))
 :qid |unknown.0:0|
 :skolemid |3254|
 :pattern ( (CrashTolerantJournal.Variables.Variables_q d@@163) ($Is d@@163 Tclass.CrashTolerantJournal.Variables))
)))
(assert (forall ((a@@170 T@U) (b@@120 T@U) ) (!  (=> (and (and (= (type a@@170) DatatypeTypeType) (= (type b@@120) DatatypeTypeType)) true) (= (|CrashTolerantJournal.Variables#Equal| a@@170 b@@120)  (and (and (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent a@@170) (CrashTolerantJournal.Variables.persistent b@@120)) (|CrashTolerantJournal.Ephemeral#Equal| (CrashTolerantJournal.Variables.ephemeral a@@170) (CrashTolerantJournal.Variables.ephemeral b@@120))) (|Options.Option#Equal| (CrashTolerantJournal.Variables.inFlight a@@170) (CrashTolerantJournal.Variables.inFlight b@@120)))))
 :qid |unknown.0:0|
 :skolemid |3255|
 :pattern ( (|CrashTolerantJournal.Variables#Equal| a@@170 b@@120))
)))
(assert (forall ((a@@171 T@U) (b@@121 T@U) ) (!  (=> (and (= (type a@@171) DatatypeTypeType) (= (type b@@121) DatatypeTypeType)) (= (|CrashTolerantJournal.Variables#Equal| a@@171 b@@121) (= a@@171 b@@121)))
 :qid |unknown.0:0|
 :skolemid |3256|
 :pattern ( (|CrashTolerantJournal.Variables#Equal| a@@171 b@@121))
)))
(assert  (=> true (forall ((this@@120 T@U) ) (!  (=> (and (= (type this@@120) DatatypeTypeType) (or (|CrashTolerantJournal.Variables.WF#canCall| this@@120) ($Is this@@120 Tclass.CrashTolerantJournal.Variables))) true)
 :qid |CrashTolerantJournalidfy.53:15|
 :skolemid |3257|
 :pattern ( (CrashTolerantJournal.Variables.WF this@@120))
))))
(assert (forall ((this@@121 T@U) ) (!  (=> (and (= (type this@@121) DatatypeTypeType) ($Is this@@121 Tclass.CrashTolerantJournal.Variables)) (= (|CrashTolerantJournal.Variables.WF#requires| this@@121) true))
 :qid |CrashTolerantJournalidfy.53:15|
 :skolemid |3258|
 :pattern ( (|CrashTolerantJournal.Variables.WF#requires| this@@121))
)))
(assert  (=> true (forall ((this@@122 T@U) ) (!  (=> (and (= (type this@@122) DatatypeTypeType) (or (|CrashTolerantJournal.Variables.WF#canCall| this@@122) ($Is this@@122 Tclass.CrashTolerantJournal.Variables))) (and (and (and (CrashTolerantJournal.Variables.Variables_q this@@122) (|MsgHistoryMod.MsgHistory.WF#canCall| (CrashTolerantJournal.Variables.persistent this@@122))) (=> (MsgHistoryMod.MsgHistory.WF (CrashTolerantJournal.Variables.persistent this@@122)) (and (and (CrashTolerantJournal.Variables.Variables_q this@@122) (|CrashTolerantJournal.Ephemeral.WF#canCall| (CrashTolerantJournal.Variables.ephemeral this@@122))) (=> (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral this@@122)) (and (CrashTolerantJournal.Variables.Variables_q this@@122) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight this@@122)) (and (CrashTolerantJournal.Variables.Variables_q this@@122) (|MsgHistoryMod.MsgHistory.WF#canCall| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight this@@122))))))))))) (= (CrashTolerantJournal.Variables.WF this@@122)  (and (and (MsgHistoryMod.MsgHistory.WF (CrashTolerantJournal.Variables.persistent this@@122)) (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral this@@122))) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight this@@122)) (MsgHistoryMod.MsgHistory.WF ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight this@@122)))))))))
 :qid |CrashTolerantJournalidfy.53:15|
 :skolemid |3259|
 :pattern ( (CrashTolerantJournal.Variables.WF this@@122))
))))
(assert  (=> true (forall ((this@@123 T@U) ) (!  (=> (and (= (type this@@123) DatatypeTypeType) (or (|CrashTolerantJournal.Variables.WF#canCall| (Lit this@@123)) ($Is this@@123 Tclass.CrashTolerantJournal.Variables))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit this@@123)) (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit (CrashTolerantJournal.Variables.persistent (Lit this@@123))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit (CrashTolerantJournal.Variables.persistent (Lit this@@123))))))) (and (and (CrashTolerantJournal.Variables.Variables_q (Lit this@@123)) (|CrashTolerantJournal.Ephemeral.WF#canCall| (Lit (CrashTolerantJournal.Variables.ephemeral (Lit this@@123))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.WF (Lit (CrashTolerantJournal.Variables.ephemeral (Lit this@@123))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit this@@123)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit this@@123))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit this@@123)) (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit this@@123)))))))))))))) (= (CrashTolerantJournal.Variables.WF (Lit this@@123)) (U_2_bool (Lit (bool_2_U  (and (and (MsgHistoryMod.MsgHistory.WF (Lit (CrashTolerantJournal.Variables.persistent (Lit this@@123)))) (CrashTolerantJournal.Ephemeral.WF (Lit (CrashTolerantJournal.Variables.ephemeral (Lit this@@123))))) (=> (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit this@@123)))) (MsgHistoryMod.MsgHistory.WF (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit this@@123)))))))))))))))
 :qid |CrashTolerantJournalidfy.53:15|
 :weight 3
 :skolemid |3260|
 :pattern ( (CrashTolerantJournal.Variables.WF (Lit this@@123)))
))))
(assert (= (type Tclass.CrashTolerantJournal.__default) TyType))
(assert (= (Tag Tclass.CrashTolerantJournal.__default) Tagclass.CrashTolerantJournal.__default))
(assert (= (TagFamily Tclass.CrashTolerantJournal.__default) tytagFamily$_default))
(assert (forall ((bx@@168 T@U) ) (!  (=> (and (= (type bx@@168) BoxType) ($IsBox bx@@168 Tclass.CrashTolerantJournal.__default)) (and (= ($Box ($Unbox refType bx@@168)) bx@@168) ($Is ($Unbox refType bx@@168) Tclass.CrashTolerantJournal.__default)))
 :qid |unknown.0:0|
 :skolemid |3261|
 :pattern ( ($IsBox bx@@168 Tclass.CrashTolerantJournal.__default))
)))
(assert (forall (($o@@55 T@U) ) (!  (=> (= (type $o@@55) refType) (= ($Is $o@@55 Tclass.CrashTolerantJournal.__default)  (or (= $o@@55 null) (= (dtype $o@@55) Tclass.CrashTolerantJournal.__default))))
 :qid |unknown.0:0|
 :skolemid |3262|
 :pattern ( ($Is $o@@55 Tclass.CrashTolerantJournal.__default))
)))
(assert (forall (($o@@56 T@U) ($h@@162 T@U) ) (!  (=> (and (= (type $o@@56) refType) (= (type $h@@162) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@56 Tclass.CrashTolerantJournal.__default $h@@162)  (or (= $o@@56 null) (U_2_bool (MapType1Select (MapType0Select $h@@162 $o@@56) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3263|
 :pattern ( ($IsAlloc $o@@56 Tclass.CrashTolerantJournal.__default $h@@162))
)))
(assert  (=> true (forall ((|v#0@@154| T@U) (|v'#0@@67| T@U) (|lbl#0@@27| T@U) ) (!  (=> (and (and (and (= (type |v#0@@154|) DatatypeTypeType) (= (type |v'#0@@67|) DatatypeTypeType)) (= (type |lbl#0@@27|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.LoadEphemeralFromPersistent#canCall| |v#0@@154| |v'#0@@67| |lbl#0@@27|) (and (and ($Is |v#0@@154| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@67| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@27| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.60:41|
 :skolemid |3264|
 :pattern ( (CrashTolerantJournal.__default.LoadEphemeralFromPersistent |v#0@@154| |v'#0@@67| |lbl#0@@27|))
))))
(assert (forall ((|v#0@@155| T@U) (|v'#0@@68| T@U) (|lbl#0@@28| T@U) ) (!  (=> (and (and (and (= (type |v#0@@155|) DatatypeTypeType) (= (type |v'#0@@68|) DatatypeTypeType)) (= (type |lbl#0@@28|) DatatypeTypeType)) (and (and ($Is |v#0@@155| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@68| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@28| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.LoadEphemeralFromPersistent#requires| |v#0@@155| |v'#0@@68| |lbl#0@@28|) true))
 :qid |CrashTolerantJournalidfy.60:41|
 :skolemid |3265|
 :pattern ( (|CrashTolerantJournal.__default.LoadEphemeralFromPersistent#requires| |v#0@@155| |v'#0@@68| |lbl#0@@28|))
)))
(assert  (=> true (forall ((|v#0@@156| T@U) (|v'#0@@69| T@U) (|lbl#0@@29| T@U) ) (!  (=> (and (and (and (= (type |v#0@@156|) DatatypeTypeType) (= (type |v'#0@@69|) DatatypeTypeType)) (= (type |lbl#0@@29|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.LoadEphemeralFromPersistent#canCall| |v#0@@156| |v'#0@@69| |lbl#0@@29|) (and (and ($Is |v#0@@156| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@69| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@29| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@156|) (=> (CrashTolerantJournal.Variables.WF |v#0@@156|) (=> (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q |lbl#0@@29|) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@156|) (=> (CrashTolerantJournal.Ephemeral.Unknown_q (CrashTolerantJournal.Variables.ephemeral |v#0@@156|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@69|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@69|)) (and (and (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@69|) (CrashTolerantJournal.Variables.Variables_q |v#0@@156|)) (|AbstractJournal.__default.Init#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@69|)) (CrashTolerantJournal.Variables.persistent |v#0@@156|))) (=> (AbstractJournal.__default.Init (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@69|)) (CrashTolerantJournal.Variables.persistent |v#0@@156|)) (and (and (and (|$IsA#MsgHistoryMod.MsgHistory| (CrashTolerantJournal.Variables.persistent |v'#0@@69|)) (|$IsA#MsgHistoryMod.MsgHistory| (CrashTolerantJournal.Variables.persistent |v#0@@156|))) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@69|) (CrashTolerantJournal.Variables.Variables_q |v#0@@156|))) (=> (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent |v'#0@@69|) (CrashTolerantJournal.Variables.persistent |v#0@@156|)) (and (and (|$IsA#Options.Option| (CrashTolerantJournal.Variables.inFlight |v'#0@@69|)) (|$IsA#Options.Option| (CrashTolerantJournal.Variables.inFlight |v#0@@156|))) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@69|) (CrashTolerantJournal.Variables.Variables_q |v#0@@156|)))))))))))))) (= (CrashTolerantJournal.__default.LoadEphemeralFromPersistent |v#0@@156| |v'#0@@69| |lbl#0@@29|)  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@156|) (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q |lbl#0@@29|)) (CrashTolerantJournal.Ephemeral.Unknown_q (CrashTolerantJournal.Variables.ephemeral |v#0@@156|))) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@69|))) (AbstractJournal.__default.Init (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@69|)) (CrashTolerantJournal.Variables.persistent |v#0@@156|))) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent |v'#0@@69|) (CrashTolerantJournal.Variables.persistent |v#0@@156|))) (|Options.Option#Equal| (CrashTolerantJournal.Variables.inFlight |v'#0@@69|) (CrashTolerantJournal.Variables.inFlight |v#0@@156|))))))
 :qid |CrashTolerantJournalidfy.60:41|
 :skolemid |3266|
 :pattern ( (CrashTolerantJournal.__default.LoadEphemeralFromPersistent |v#0@@156| |v'#0@@69| |lbl#0@@29|))
))))
(assert  (=> true (forall ((|v#0@@157| T@U) (|v'#0@@70| T@U) (|lbl#0@@30| T@U) ) (!  (=> (and (and (and (= (type |v#0@@157|) DatatypeTypeType) (= (type |v'#0@@70|) DatatypeTypeType)) (= (type |lbl#0@@30|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.LoadEphemeralFromPersistent#canCall| (Lit |v#0@@157|) (Lit |v'#0@@70|) (Lit |lbl#0@@30|)) (and (and ($Is |v#0@@157| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@70| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@30| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@157|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@157|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q (Lit |lbl#0@@30|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@157|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Unknown_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@157|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@70|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@70|))))))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@70|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@157|))) (|AbstractJournal.__default.Init#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@70|))))) (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@157|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.__default.Init (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@70|))))) (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@157|))))))) (and (and (and (|$IsA#MsgHistoryMod.MsgHistory| (Lit (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@70|)))) (|$IsA#MsgHistoryMod.MsgHistory| (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@157|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@70|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@157|)))) (=> (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@70|)) (CrashTolerantJournal.Variables.persistent (Lit |v#0@@157|))) (and (and (|$IsA#Options.Option| (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@70|)))) (|$IsA#Options.Option| (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@157|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@70|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@157|))))))))))))))) (= (CrashTolerantJournal.__default.LoadEphemeralFromPersistent (Lit |v#0@@157|) (Lit |v'#0@@70|) (Lit |lbl#0@@30|))  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@157|)) (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q (Lit |lbl#0@@30|))) (CrashTolerantJournal.Ephemeral.Unknown_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@157|))))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@70|))))) (AbstractJournal.__default.Init (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@70|))))) (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@157|))))) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@70|)) (CrashTolerantJournal.Variables.persistent (Lit |v#0@@157|)))) (|Options.Option#Equal| (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@70|)) (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@157|)))))))
 :qid |CrashTolerantJournalidfy.60:41|
 :weight 3
 :skolemid |3267|
 :pattern ( (CrashTolerantJournal.__default.LoadEphemeralFromPersistent (Lit |v#0@@157|) (Lit |v'#0@@70|) (Lit |lbl#0@@30|)))
))))
(assert  (=> true (forall ((|v#0@@158| T@U) (|v'#0@@71| T@U) (|lbl#0@@31| T@U) ) (!  (=> (and (and (and (= (type |v#0@@158|) DatatypeTypeType) (= (type |v'#0@@71|) DatatypeTypeType)) (= (type |lbl#0@@31|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.ReadForRecovery#canCall| |v#0@@158| |v'#0@@71| |lbl#0@@31|) (and (and ($Is |v#0@@158| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@71| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@31| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.72:29|
 :skolemid |3268|
 :pattern ( (CrashTolerantJournal.__default.ReadForRecovery |v#0@@158| |v'#0@@71| |lbl#0@@31|))
))))
(assert (forall ((|v#0@@159| T@U) (|v'#0@@72| T@U) (|lbl#0@@32| T@U) ) (!  (=> (and (and (and (= (type |v#0@@159|) DatatypeTypeType) (= (type |v'#0@@72|) DatatypeTypeType)) (= (type |lbl#0@@32|) DatatypeTypeType)) (and (and ($Is |v#0@@159| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@72| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@32| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.ReadForRecovery#requires| |v#0@@159| |v'#0@@72| |lbl#0@@32|) true))
 :qid |CrashTolerantJournalidfy.72:29|
 :skolemid |3269|
 :pattern ( (|CrashTolerantJournal.__default.ReadForRecovery#requires| |v#0@@159| |v'#0@@72| |lbl#0@@32|))
)))
(assert  (=> true (forall ((|v#0@@160| T@U) (|v'#0@@73| T@U) (|lbl#0@@33| T@U) ) (!  (=> (and (and (and (= (type |v#0@@160|) DatatypeTypeType) (= (type |v'#0@@73|) DatatypeTypeType)) (= (type |lbl#0@@33|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.ReadForRecovery#canCall| |v#0@@160| |v'#0@@73| |lbl#0@@33|) (and (and ($Is |v#0@@160| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@73| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@33| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@160|) (=> (CrashTolerantJournal.Variables.WF |v#0@@160|) (=> (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@33|) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@160|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@160|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@73|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@73|)) (and (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@160|) (CrashTolerantJournal.Variables.Variables_q |v'#0@@73|)) (|AbstractJournal.__default.Next#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@160|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@73|)) (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (CrashTolerantJournal.TransitionLabel.records |lbl#0@@33|)))) (=> (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@160|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@73|)) (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (CrashTolerantJournal.TransitionLabel.records |lbl#0@@33|))) (and (|$IsA#CrashTolerantJournal.Variables| |v'#0@@73|) (|$IsA#CrashTolerantJournal.Variables| |v#0@@160|))))))))))) (= (CrashTolerantJournal.__default.ReadForRecovery |v#0@@160| |v'#0@@73| |lbl#0@@33|)  (and (and (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@160|) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@33|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@160|))) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@73|))) (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@160|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@73|)) (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (CrashTolerantJournal.TransitionLabel.records |lbl#0@@33|)))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@73| |v#0@@160|)))))
 :qid |CrashTolerantJournalidfy.72:29|
 :skolemid |3270|
 :pattern ( (CrashTolerantJournal.__default.ReadForRecovery |v#0@@160| |v'#0@@73| |lbl#0@@33|))
))))
(assert  (=> true (forall ((|v#0@@161| T@U) (|v'#0@@74| T@U) (|lbl#0@@34| T@U) ) (!  (=> (and (and (and (= (type |v#0@@161|) DatatypeTypeType) (= (type |v'#0@@74|) DatatypeTypeType)) (= (type |lbl#0@@34|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.ReadForRecovery#canCall| (Lit |v#0@@161|) (Lit |v'#0@@74|) (Lit |lbl#0@@34|)) (and (and ($Is |v#0@@161| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@74| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@34| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@161|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@161|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@34|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@161|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@161|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@74|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@74|))))))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@161|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@74|))) (|AbstractJournal.__default.Next#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@161|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@74|))))) (Lit (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (Lit (CrashTolerantJournal.TransitionLabel.records (Lit |lbl#0@@34|))))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@161|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@74|))))) (Lit (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (Lit (CrashTolerantJournal.TransitionLabel.records (Lit |lbl#0@@34|))))))))) (and (|$IsA#CrashTolerantJournal.Variables| (Lit |v'#0@@74|)) (|$IsA#CrashTolerantJournal.Variables| (Lit |v#0@@161|)))))))))))) (= (CrashTolerantJournal.__default.ReadForRecovery (Lit |v#0@@161|) (Lit |v'#0@@74|) (Lit |lbl#0@@34|))  (and (and (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@161|)) (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@34|))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@161|))))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@74|))))) (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@161|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@74|))))) (Lit (|#AbstractJournal.TransitionLabel.ReadForRecoveryLabel| (Lit (CrashTolerantJournal.TransitionLabel.records (Lit |lbl#0@@34|))))))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@74| |v#0@@161|)))))
 :qid |CrashTolerantJournalidfy.72:29|
 :weight 3
 :skolemid |3271|
 :pattern ( (CrashTolerantJournal.__default.ReadForRecovery (Lit |v#0@@161|) (Lit |v'#0@@74|) (Lit |lbl#0@@34|)))
))))
(assert  (=> true (forall ((|v#0@@162| T@U) (|v'#0@@75| T@U) (|lbl#0@@35| T@U) ) (!  (=> (and (and (and (= (type |v#0@@162|) DatatypeTypeType) (= (type |v'#0@@75|) DatatypeTypeType)) (= (type |lbl#0@@35|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.QueryEndLsn#canCall| |v#0@@162| |v'#0@@75| |lbl#0@@35|) (and (and ($Is |v#0@@162| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@75| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@35| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.83:25|
 :skolemid |3272|
 :pattern ( (CrashTolerantJournal.__default.QueryEndLsn |v#0@@162| |v'#0@@75| |lbl#0@@35|))
))))
(assert (forall ((|v#0@@163| T@U) (|v'#0@@76| T@U) (|lbl#0@@36| T@U) ) (!  (=> (and (and (and (= (type |v#0@@163|) DatatypeTypeType) (= (type |v'#0@@76|) DatatypeTypeType)) (= (type |lbl#0@@36|) DatatypeTypeType)) (and (and ($Is |v#0@@163| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@76| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@36| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.QueryEndLsn#requires| |v#0@@163| |v'#0@@76| |lbl#0@@36|) true))
 :qid |CrashTolerantJournalidfy.83:25|
 :skolemid |3273|
 :pattern ( (|CrashTolerantJournal.__default.QueryEndLsn#requires| |v#0@@163| |v'#0@@76| |lbl#0@@36|))
)))
(assert  (=> true (forall ((|v#0@@164| T@U) (|v'#0@@77| T@U) (|lbl#0@@37| T@U) ) (!  (=> (and (and (and (= (type |v#0@@164|) DatatypeTypeType) (= (type |v'#0@@77|) DatatypeTypeType)) (= (type |lbl#0@@37|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.QueryEndLsn#canCall| |v#0@@164| |v'#0@@77| |lbl#0@@37|) (and (and ($Is |v#0@@164| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@77| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@37| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@164|) (=> (CrashTolerantJournal.Variables.WF |v#0@@164|) (=> (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@37|) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@164|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@164|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@77|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@77|)) (and (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@164|) (CrashTolerantJournal.Variables.Variables_q |v'#0@@77|)) (|AbstractJournal.__default.Next#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@164|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@77|)) (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (CrashTolerantJournal.TransitionLabel.endLsn |lbl#0@@37|)))) (=> (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@164|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@77|)) (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (CrashTolerantJournal.TransitionLabel.endLsn |lbl#0@@37|))) (and (|$IsA#CrashTolerantJournal.Variables| |v'#0@@77|) (|$IsA#CrashTolerantJournal.Variables| |v#0@@164|))))))))))) (= (CrashTolerantJournal.__default.QueryEndLsn |v#0@@164| |v'#0@@77| |lbl#0@@37|)  (and (and (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@164|) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@37|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@164|))) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@77|))) (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@164|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@77|)) (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (CrashTolerantJournal.TransitionLabel.endLsn |lbl#0@@37|)))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@77| |v#0@@164|)))))
 :qid |CrashTolerantJournalidfy.83:25|
 :skolemid |3274|
 :pattern ( (CrashTolerantJournal.__default.QueryEndLsn |v#0@@164| |v'#0@@77| |lbl#0@@37|))
))))
(assert  (=> true (forall ((|v#0@@165| T@U) (|v'#0@@78| T@U) (|lbl#0@@38| T@U) ) (!  (=> (and (and (and (= (type |v#0@@165|) DatatypeTypeType) (= (type |v'#0@@78|) DatatypeTypeType)) (= (type |lbl#0@@38|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.QueryEndLsn#canCall| (Lit |v#0@@165|) (Lit |v'#0@@78|) (Lit |lbl#0@@38|)) (and (and ($Is |v#0@@165| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@78| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@38| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@165|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@165|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@38|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@165|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@165|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@78|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@78|))))))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@165|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@78|))) (|AbstractJournal.__default.Next#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@165|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@78|))))) (Lit (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CrashTolerantJournal.TransitionLabel.endLsn (Lit |lbl#0@@38|))))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@165|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@78|))))) (Lit (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CrashTolerantJournal.TransitionLabel.endLsn (Lit |lbl#0@@38|))))))))) (and (|$IsA#CrashTolerantJournal.Variables| (Lit |v'#0@@78|)) (|$IsA#CrashTolerantJournal.Variables| (Lit |v#0@@165|)))))))))))) (= (CrashTolerantJournal.__default.QueryEndLsn (Lit |v#0@@165|) (Lit |v'#0@@78|) (Lit |lbl#0@@38|))  (and (and (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@165|)) (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@38|))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@165|))))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@78|))))) (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@165|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@78|))))) (Lit (|#AbstractJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CrashTolerantJournal.TransitionLabel.endLsn (Lit |lbl#0@@38|))))))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@78| |v#0@@165|)))))
 :qid |CrashTolerantJournalidfy.83:25|
 :weight 3
 :skolemid |3275|
 :pattern ( (CrashTolerantJournal.__default.QueryEndLsn (Lit |v#0@@165|) (Lit |v'#0@@78|) (Lit |lbl#0@@38|)))
))))
(assert  (=> true (forall ((|v#0@@166| T@U) (|v'#0@@79| T@U) (|lbl#0@@39| T@U) ) (!  (=> (and (and (and (= (type |v#0@@166|) DatatypeTypeType) (= (type |v'#0@@79|) DatatypeTypeType)) (= (type |lbl#0@@39|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Put#canCall| |v#0@@166| |v'#0@@79| |lbl#0@@39|) (and (and ($Is |v#0@@166| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@79| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@39| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.94:17|
 :skolemid |3276|
 :pattern ( (CrashTolerantJournal.__default.Put |v#0@@166| |v'#0@@79| |lbl#0@@39|))
))))
(assert (forall ((|v#0@@167| T@U) (|v'#0@@80| T@U) (|lbl#0@@40| T@U) ) (!  (=> (and (and (and (= (type |v#0@@167|) DatatypeTypeType) (= (type |v'#0@@80|) DatatypeTypeType)) (= (type |lbl#0@@40|) DatatypeTypeType)) (and (and ($Is |v#0@@167| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@80| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@40| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.Put#requires| |v#0@@167| |v'#0@@80| |lbl#0@@40|) true))
 :qid |CrashTolerantJournalidfy.94:17|
 :skolemid |3277|
 :pattern ( (|CrashTolerantJournal.__default.Put#requires| |v#0@@167| |v'#0@@80| |lbl#0@@40|))
)))
(assert  (=> true (forall ((|v#0@@168| T@U) (|v'#0@@81| T@U) (|lbl#0@@41| T@U) ) (!  (=> (and (and (and (= (type |v#0@@168|) DatatypeTypeType) (= (type |v'#0@@81|) DatatypeTypeType)) (= (type |lbl#0@@41|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Put#canCall| |v#0@@168| |v'#0@@81| |lbl#0@@41|) (and (and ($Is |v#0@@168| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@81| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@41| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@168|) (=> (CrashTolerantJournal.Variables.WF |v#0@@168|) (=> (CrashTolerantJournal.TransitionLabel.PutLabel_q |lbl#0@@41|) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@168|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@168|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@81|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@81|)) (and (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@168|) (CrashTolerantJournal.Variables.Variables_q |v'#0@@81|)) (|AbstractJournal.__default.Next#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@168|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@81|)) (|#AbstractJournal.TransitionLabel.PutLabel| (CrashTolerantJournal.TransitionLabel.records |lbl#0@@41|)))) (=> (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@168|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@81|)) (|#AbstractJournal.TransitionLabel.PutLabel| (CrashTolerantJournal.TransitionLabel.records |lbl#0@@41|))) (and (and (and (|$IsA#MsgHistoryMod.MsgHistory| (CrashTolerantJournal.Variables.persistent |v'#0@@81|)) (|$IsA#MsgHistoryMod.MsgHistory| (CrashTolerantJournal.Variables.persistent |v#0@@168|))) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@81|) (CrashTolerantJournal.Variables.Variables_q |v#0@@168|))) (=> (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent |v'#0@@81|) (CrashTolerantJournal.Variables.persistent |v#0@@168|)) (and (and (|$IsA#Options.Option| (CrashTolerantJournal.Variables.inFlight |v'#0@@81|)) (|$IsA#Options.Option| (CrashTolerantJournal.Variables.inFlight |v#0@@168|))) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@81|) (CrashTolerantJournal.Variables.Variables_q |v#0@@168|)))))))))))))) (= (CrashTolerantJournal.__default.Put |v#0@@168| |v'#0@@81| |lbl#0@@41|)  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@168|) (CrashTolerantJournal.TransitionLabel.PutLabel_q |lbl#0@@41|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@168|))) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@81|))) (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@168|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@81|)) (|#AbstractJournal.TransitionLabel.PutLabel| (CrashTolerantJournal.TransitionLabel.records |lbl#0@@41|)))) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent |v'#0@@81|) (CrashTolerantJournal.Variables.persistent |v#0@@168|))) (|Options.Option#Equal| (CrashTolerantJournal.Variables.inFlight |v'#0@@81|) (CrashTolerantJournal.Variables.inFlight |v#0@@168|))))))
 :qid |CrashTolerantJournalidfy.94:17|
 :skolemid |3278|
 :pattern ( (CrashTolerantJournal.__default.Put |v#0@@168| |v'#0@@81| |lbl#0@@41|))
))))
(assert  (=> true (forall ((|v#0@@169| T@U) (|v'#0@@82| T@U) (|lbl#0@@42| T@U) ) (!  (=> (and (and (and (= (type |v#0@@169|) DatatypeTypeType) (= (type |v'#0@@82|) DatatypeTypeType)) (= (type |lbl#0@@42|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Put#canCall| (Lit |v#0@@169|) (Lit |v'#0@@82|) (Lit |lbl#0@@42|)) (and (and ($Is |v#0@@169| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@82| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@42| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@169|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@169|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@42|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@169|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@169|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@82|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@82|))))))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@169|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@82|))) (|AbstractJournal.__default.Next#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@169|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@82|))))) (Lit (|#AbstractJournal.TransitionLabel.PutLabel| (Lit (CrashTolerantJournal.TransitionLabel.records (Lit |lbl#0@@42|))))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@169|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@82|))))) (Lit (|#AbstractJournal.TransitionLabel.PutLabel| (Lit (CrashTolerantJournal.TransitionLabel.records (Lit |lbl#0@@42|))))))))) (and (and (and (|$IsA#MsgHistoryMod.MsgHistory| (Lit (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@82|)))) (|$IsA#MsgHistoryMod.MsgHistory| (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@169|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@82|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@169|)))) (=> (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@82|)) (CrashTolerantJournal.Variables.persistent (Lit |v#0@@169|))) (and (and (|$IsA#Options.Option| (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@82|)))) (|$IsA#Options.Option| (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@169|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@82|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@169|))))))))))))))) (= (CrashTolerantJournal.__default.Put (Lit |v#0@@169|) (Lit |v'#0@@82|) (Lit |lbl#0@@42|))  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@169|)) (CrashTolerantJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@42|))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@169|))))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@82|))))) (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@169|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@82|))))) (Lit (|#AbstractJournal.TransitionLabel.PutLabel| (Lit (CrashTolerantJournal.TransitionLabel.records (Lit |lbl#0@@42|))))))) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@82|)) (CrashTolerantJournal.Variables.persistent (Lit |v#0@@169|)))) (|Options.Option#Equal| (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@82|)) (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@169|)))))))
 :qid |CrashTolerantJournalidfy.94:17|
 :weight 3
 :skolemid |3279|
 :pattern ( (CrashTolerantJournal.__default.Put (Lit |v#0@@169|) (Lit |v'#0@@82|) (Lit |lbl#0@@42|)))
))))
(assert  (=> true (forall ((|v#0@@170| T@U) (|v'#0@@83| T@U) (|lbl#0@@43| T@U) ) (!  (=> (and (and (and (= (type |v#0@@170|) DatatypeTypeType) (= (type |v'#0@@83|) DatatypeTypeType)) (= (type |lbl#0@@43|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Internal#canCall| |v#0@@170| |v'#0@@83| |lbl#0@@43|) (and (and ($Is |v#0@@170| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@83| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@43| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.106:22|
 :skolemid |3280|
 :pattern ( (CrashTolerantJournal.__default.Internal |v#0@@170| |v'#0@@83| |lbl#0@@43|))
))))
(assert (forall ((|v#0@@171| T@U) (|v'#0@@84| T@U) (|lbl#0@@44| T@U) ) (!  (=> (and (and (and (= (type |v#0@@171|) DatatypeTypeType) (= (type |v'#0@@84|) DatatypeTypeType)) (= (type |lbl#0@@44|) DatatypeTypeType)) (and (and ($Is |v#0@@171| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@84| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@44| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.Internal#requires| |v#0@@171| |v'#0@@84| |lbl#0@@44|) true))
 :qid |CrashTolerantJournalidfy.106:22|
 :skolemid |3281|
 :pattern ( (|CrashTolerantJournal.__default.Internal#requires| |v#0@@171| |v'#0@@84| |lbl#0@@44|))
)))
(assert  (=> true (forall ((|v#0@@172| T@U) (|v'#0@@85| T@U) (|lbl#0@@45| T@U) ) (!  (=> (and (and (and (= (type |v#0@@172|) DatatypeTypeType) (= (type |v'#0@@85|) DatatypeTypeType)) (= (type |lbl#0@@45|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Internal#canCall| |v#0@@172| |v'#0@@85| |lbl#0@@45|) (and (and ($Is |v#0@@172| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@85| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@45| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@172|) (=> (CrashTolerantJournal.Variables.WF |v#0@@172|) (=> (CrashTolerantJournal.TransitionLabel.InternalLabel_q |lbl#0@@45|) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@172|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@172|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@85|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@85|)) (and (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@172|) (CrashTolerantJournal.Variables.Variables_q |v'#0@@85|)) (|AbstractJournal.__default.Next#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@172|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@85|)) (Lit |#AbstractJournal.TransitionLabel.InternalLabel|))) (=> (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@172|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@85|)) (Lit |#AbstractJournal.TransitionLabel.InternalLabel|)) (and (and (and (|$IsA#MsgHistoryMod.MsgHistory| (CrashTolerantJournal.Variables.persistent |v'#0@@85|)) (|$IsA#MsgHistoryMod.MsgHistory| (CrashTolerantJournal.Variables.persistent |v#0@@172|))) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@85|) (CrashTolerantJournal.Variables.Variables_q |v#0@@172|))) (=> (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent |v'#0@@85|) (CrashTolerantJournal.Variables.persistent |v#0@@172|)) (and (and (|$IsA#Options.Option| (CrashTolerantJournal.Variables.inFlight |v'#0@@85|)) (|$IsA#Options.Option| (CrashTolerantJournal.Variables.inFlight |v#0@@172|))) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@85|) (CrashTolerantJournal.Variables.Variables_q |v#0@@172|)))))))))))))) (= (CrashTolerantJournal.__default.Internal |v#0@@172| |v'#0@@85| |lbl#0@@45|)  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@172|) (CrashTolerantJournal.TransitionLabel.InternalLabel_q |lbl#0@@45|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@172|))) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@85|))) (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@172|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@85|)) (Lit |#AbstractJournal.TransitionLabel.InternalLabel|))) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent |v'#0@@85|) (CrashTolerantJournal.Variables.persistent |v#0@@172|))) (|Options.Option#Equal| (CrashTolerantJournal.Variables.inFlight |v'#0@@85|) (CrashTolerantJournal.Variables.inFlight |v#0@@172|))))))
 :qid |CrashTolerantJournalidfy.106:22|
 :skolemid |3282|
 :pattern ( (CrashTolerantJournal.__default.Internal |v#0@@172| |v'#0@@85| |lbl#0@@45|))
))))
(assert  (=> true (forall ((|v#0@@173| T@U) (|v'#0@@86| T@U) (|lbl#0@@46| T@U) ) (!  (=> (and (and (and (= (type |v#0@@173|) DatatypeTypeType) (= (type |v'#0@@86|) DatatypeTypeType)) (= (type |lbl#0@@46|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Internal#canCall| (Lit |v#0@@173|) (Lit |v'#0@@86|) (Lit |lbl#0@@46|)) (and (and ($Is |v#0@@173| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@86| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@46| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@173|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@173|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.InternalLabel_q (Lit |lbl#0@@46|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@173|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@173|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@86|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@86|))))))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@173|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@86|))) (|AbstractJournal.__default.Next#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@173|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@86|))))) (Lit |#AbstractJournal.TransitionLabel.InternalLabel|))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@173|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@86|))))) (Lit |#AbstractJournal.TransitionLabel.InternalLabel|))))) (and (and (and (|$IsA#MsgHistoryMod.MsgHistory| (Lit (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@86|)))) (|$IsA#MsgHistoryMod.MsgHistory| (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@173|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@86|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@173|)))) (=> (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@86|)) (CrashTolerantJournal.Variables.persistent (Lit |v#0@@173|))) (and (and (|$IsA#Options.Option| (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@86|)))) (|$IsA#Options.Option| (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@173|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@86|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@173|))))))))))))))) (= (CrashTolerantJournal.__default.Internal (Lit |v#0@@173|) (Lit |v'#0@@86|) (Lit |lbl#0@@46|))  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@173|)) (CrashTolerantJournal.TransitionLabel.InternalLabel_q (Lit |lbl#0@@46|))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@173|))))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@86|))))) (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@173|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@86|))))) (Lit |#AbstractJournal.TransitionLabel.InternalLabel|))) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantJournal.Variables.persistent (Lit |v'#0@@86|)) (CrashTolerantJournal.Variables.persistent (Lit |v#0@@173|)))) (|Options.Option#Equal| (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@86|)) (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@173|)))))))
 :qid |CrashTolerantJournalidfy.106:22|
 :weight 3
 :skolemid |3283|
 :pattern ( (CrashTolerantJournal.__default.Internal (Lit |v#0@@173|) (Lit |v'#0@@86|) (Lit |lbl#0@@46|)))
))))
(assert  (=> true (forall ((|v#0@@174| T@U) (|v'#0@@87| T@U) (|lbl#0@@47| T@U) ) (!  (=> (and (and (and (= (type |v#0@@174|) DatatypeTypeType) (= (type |v'#0@@87|) DatatypeTypeType)) (= (type |lbl#0@@47|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.QueryLsnPersistence#canCall| |v#0@@174| |v'#0@@87| |lbl#0@@47|) (and (and ($Is |v#0@@174| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@87| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@47| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.118:33|
 :skolemid |3284|
 :pattern ( (CrashTolerantJournal.__default.QueryLsnPersistence |v#0@@174| |v'#0@@87| |lbl#0@@47|))
))))
(assert (forall ((|v#0@@175| T@U) (|v'#0@@88| T@U) (|lbl#0@@48| T@U) ) (!  (=> (and (and (and (= (type |v#0@@175|) DatatypeTypeType) (= (type |v'#0@@88|) DatatypeTypeType)) (= (type |lbl#0@@48|) DatatypeTypeType)) (and (and ($Is |v#0@@175| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@88| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@48| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.QueryLsnPersistence#requires| |v#0@@175| |v'#0@@88| |lbl#0@@48|) true))
 :qid |CrashTolerantJournalidfy.118:33|
 :skolemid |3285|
 :pattern ( (|CrashTolerantJournal.__default.QueryLsnPersistence#requires| |v#0@@175| |v'#0@@88| |lbl#0@@48|))
)))
(assert  (=> true (forall ((|v#0@@176| T@U) (|v'#0@@89| T@U) (|lbl#0@@49| T@U) ) (!  (=> (and (and (and (= (type |v#0@@176|) DatatypeTypeType) (= (type |v'#0@@89|) DatatypeTypeType)) (= (type |lbl#0@@49|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.QueryLsnPersistence#canCall| |v#0@@176| |v'#0@@89| |lbl#0@@49|) (and (and ($Is |v#0@@176| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@89| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@49| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@176|) (=> (CrashTolerantJournal.Variables.WF |v#0@@176|) (=> (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q |lbl#0@@49|) (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@176|) (MsgHistoryMod.MsgHistory.MsgHistory_q (CrashTolerantJournal.Variables.persistent |v#0@@176|))) (=> (INTERNAL_le_boogie (CrashTolerantJournal.TransitionLabel.syncLsn |lbl#0@@49|) (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent |v#0@@176|))) (and (|$IsA#CrashTolerantJournal.Variables| |v'#0@@89|) (|$IsA#CrashTolerantJournal.Variables| |v#0@@176|))))))) (= (CrashTolerantJournal.__default.QueryLsnPersistence |v#0@@176| |v'#0@@89| |lbl#0@@49|)  (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@176|) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q |lbl#0@@49|)) (INTERNAL_le_boogie (CrashTolerantJournal.TransitionLabel.syncLsn |lbl#0@@49|) (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent |v#0@@176|)))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@89| |v#0@@176|)))))
 :qid |CrashTolerantJournalidfy.118:33|
 :skolemid |3286|
 :pattern ( (CrashTolerantJournal.__default.QueryLsnPersistence |v#0@@176| |v'#0@@89| |lbl#0@@49|))
))))
(assert  (=> true (forall ((|v#0@@177| T@U) (|v'#0@@90| T@U) (|lbl#0@@50| T@U) ) (!  (=> (and (and (and (= (type |v#0@@177|) DatatypeTypeType) (= (type |v'#0@@90|) DatatypeTypeType)) (= (type |lbl#0@@50|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.QueryLsnPersistence#canCall| (Lit |v#0@@177|) (Lit |v'#0@@90|) (Lit |lbl#0@@50|)) (and (and ($Is |v#0@@177| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@90| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@50| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@177|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@177|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q (Lit |lbl#0@@50|))))) (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@177|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@177|))))) (=> (INTERNAL_le_boogie (CrashTolerantJournal.TransitionLabel.syncLsn (Lit |lbl#0@@50|)) (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@177|))))) (and (|$IsA#CrashTolerantJournal.Variables| (Lit |v'#0@@90|)) (|$IsA#CrashTolerantJournal.Variables| (Lit |v#0@@177|)))))))) (= (CrashTolerantJournal.__default.QueryLsnPersistence (Lit |v#0@@177|) (Lit |v'#0@@90|) (Lit |lbl#0@@50|))  (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@177|)) (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q (Lit |lbl#0@@50|))) (INTERNAL_le_boogie (CrashTolerantJournal.TransitionLabel.syncLsn (Lit |lbl#0@@50|)) (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@177|)))))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@90| |v#0@@177|)))))
 :qid |CrashTolerantJournalidfy.118:33|
 :weight 3
 :skolemid |3287|
 :pattern ( (CrashTolerantJournal.__default.QueryLsnPersistence (Lit |v#0@@177|) (Lit |v'#0@@90|) (Lit |lbl#0@@50|)))
))))
(assert  (=> true (forall ((|v#0@@178| T@U) (|v'#0@@91| T@U) (|lbl#0@@51| T@U) ) (!  (=> (and (and (and (= (type |v#0@@178|) DatatypeTypeType) (= (type |v'#0@@91|) DatatypeTypeType)) (= (type |lbl#0@@51|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.CommitStart#canCall| |v#0@@178| |v'#0@@91| |lbl#0@@51|) (and (and ($Is |v#0@@178| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@91| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@51| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.126:25|
 :skolemid |3288|
 :pattern ( (CrashTolerantJournal.__default.CommitStart |v#0@@178| |v'#0@@91| |lbl#0@@51|))
))))
(assert (forall ((|v#0@@179| T@U) (|v'#0@@92| T@U) (|lbl#0@@52| T@U) ) (!  (=> (and (and (and (= (type |v#0@@179|) DatatypeTypeType) (= (type |v'#0@@92|) DatatypeTypeType)) (= (type |lbl#0@@52|) DatatypeTypeType)) (and (and ($Is |v#0@@179| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@92| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@52| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.CommitStart#requires| |v#0@@179| |v'#0@@92| |lbl#0@@52|) true))
 :qid |CrashTolerantJournalidfy.126:25|
 :skolemid |3289|
 :pattern ( (|CrashTolerantJournal.__default.CommitStart#requires| |v#0@@179| |v'#0@@92| |lbl#0@@52|))
)))
(assert  (=> true (forall ((|v#0@@180| T@U) (|v'#0@@93| T@U) (|lbl#0@@53| T@U) ) (!  (=> (and (and (and (= (type |v#0@@180|) DatatypeTypeType) (= (type |v'#0@@93|) DatatypeTypeType)) (= (type |lbl#0@@53|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.CommitStart#canCall| |v#0@@180| |v'#0@@93| |lbl#0@@53|) (and (and ($Is |v#0@@180| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@93| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@53| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@180|) (=> (CrashTolerantJournal.Variables.WF |v#0@@180|) (=> (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q |lbl#0@@53|) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@180|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@180|)) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@180|) (=> (Options.Option.None_q (CrashTolerantJournal.Variables.inFlight |v#0@@180|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@93|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@93|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@93|) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight |v'#0@@93|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@93|) (let ((|frozenJournal#0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v'#0@@93|)))))
 (and (MsgHistoryMod.MsgHistory.MsgHistory_q |frozenJournal#0|) (=> (= (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#0|) (CrashTolerantJournal.TransitionLabel.newBoundaryLsn |lbl#0@@53|)) (and (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@180|) (MsgHistoryMod.MsgHistory.MsgHistory_q (CrashTolerantJournal.Variables.persistent |v#0@@180|))) (MsgHistoryMod.MsgHistory.MsgHistory_q |frozenJournal#0|)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent |v#0@@180|)) (MsgHistoryMod.MsgHistory.seqEnd |frozenJournal#0|)) (and (MsgHistoryMod.MsgHistory.MsgHistory_q |frozenJournal#0|) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#0|) (CrashTolerantJournal.TransitionLabel.maxLsn |lbl#0@@53|)) (and (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@180|) (CrashTolerantJournal.Variables.Variables_q |v'#0@@93|)) (|AbstractJournal.__default.Next#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@180|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@93|)) (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |frozenJournal#0|))) (=> (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@180|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@93|)) (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |frozenJournal#0|)) (and (and (|$IsA#CrashTolerantJournal.Variables| |v'#0@@93|) (|$IsA#CrashTolerantJournal.Variables| (let ((|dt_update_tmp#0#0@@11| |v#0@@180|))
(let ((|dt_update#inFlight#0#0| (|#Options.Option.Some| ($Box |frozenJournal#0|))))
(let ((|dt_update#ephemeral#0#0| (CrashTolerantJournal.Variables.ephemeral |v'#0@@93|)))
(|#CrashTolerantJournal.Variables.Variables| (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#0@@11|) |dt_update#ephemeral#0#0| |dt_update#inFlight#0#0|)))))) (let ((|dt_update_tmp#0#0@@12| |v#0@@180|))
 (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@93|) (CrashTolerantJournal.Variables.Variables_q |dt_update_tmp#0#0@@12|))))))))))))))))))))))))) (= (CrashTolerantJournal.__default.CommitStart |v#0@@180| |v'#0@@93| |lbl#0@@53|)  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@180|) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q |lbl#0@@53|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@180|))) (Options.Option.None_q (CrashTolerantJournal.Variables.inFlight |v#0@@180|))) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@93|))) (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight |v'#0@@93|))) (let ((|frozenJournal#0@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v'#0@@93|)))))
 (and (and (and (and (= (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#0@@0|) (CrashTolerantJournal.TransitionLabel.newBoundaryLsn |lbl#0@@53|)) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent |v#0@@180|)) (MsgHistoryMod.MsgHistory.seqEnd |frozenJournal#0@@0|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#0@@0|) (CrashTolerantJournal.TransitionLabel.maxLsn |lbl#0@@53|))) (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@180|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@93|)) (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |frozenJournal#0@@0|))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@93| (let ((|dt_update_tmp#0#0@@13| |v#0@@180|))
(let ((|dt_update#inFlight#0#0@@0| (|#Options.Option.Some| ($Box |frozenJournal#0@@0|))))
(let ((|dt_update#ephemeral#0#0@@0| (CrashTolerantJournal.Variables.ephemeral |v'#0@@93|)))
(|#CrashTolerantJournal.Variables.Variables| (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#0@@13|) |dt_update#ephemeral#0#0@@0| |dt_update#inFlight#0#0@@0|)))))))))))
 :qid |CrashTolerantJournalidfy.126:25|
 :skolemid |3290|
 :pattern ( (CrashTolerantJournal.__default.CommitStart |v#0@@180| |v'#0@@93| |lbl#0@@53|))
))))
(assert  (=> true (forall ((|v#0@@181| T@U) (|v'#0@@94| T@U) (|lbl#0@@54| T@U) ) (!  (=> (and (and (and (= (type |v#0@@181|) DatatypeTypeType) (= (type |v'#0@@94|) DatatypeTypeType)) (= (type |lbl#0@@54|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.CommitStart#canCall| (Lit |v#0@@181|) (Lit |v'#0@@94|) (Lit |lbl#0@@54|)) (and (and ($Is |v#0@@181| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@94| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@54| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@181|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@181|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q (Lit |lbl#0@@54|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@181|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@181|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@181|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@181|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@94|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@94|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@94|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@94|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@94|)) (let ((|frozenJournal#1| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@94|))))))))
 (and (MsgHistoryMod.MsgHistory.MsgHistory_q |frozenJournal#1|) (=> (= (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#1|) (LitInt (CrashTolerantJournal.TransitionLabel.newBoundaryLsn (Lit |lbl#0@@54|)))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@181|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@181|))))) (MsgHistoryMod.MsgHistory.MsgHistory_q |frozenJournal#1|)) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@181|)))) (MsgHistoryMod.MsgHistory.seqEnd |frozenJournal#1|)) (and (MsgHistoryMod.MsgHistory.MsgHistory_q |frozenJournal#1|) (=> (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#1|) (CrashTolerantJournal.TransitionLabel.maxLsn (Lit |lbl#0@@54|))) (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@181|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@94|))) (|AbstractJournal.__default.Next#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@181|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@94|))))) (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |frozenJournal#1|))) (=> (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@181|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@94|))))) (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |frozenJournal#1|)) (and (and (|$IsA#CrashTolerantJournal.Variables| (Lit |v'#0@@94|)) (|$IsA#CrashTolerantJournal.Variables| (let ((|dt_update_tmp#0#1@@11| (Lit |v#0@@181|)))
(let ((|dt_update#inFlight#0#1| (|#Options.Option.Some| ($Box |frozenJournal#1|))))
(let ((|dt_update#ephemeral#0#1| (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@94|)))))
(|#CrashTolerantJournal.Variables.Variables| (Lit (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#1@@11|)) |dt_update#ephemeral#0#1| |dt_update#inFlight#0#1|)))))) (let ((|dt_update_tmp#0#1@@12| (Lit |v#0@@181|)))
 (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@94|)) (CrashTolerantJournal.Variables.Variables_q |dt_update_tmp#0#1@@12|))))))))))))))))))))))))) (= (CrashTolerantJournal.__default.CommitStart (Lit |v#0@@181|) (Lit |v'#0@@94|) (Lit |lbl#0@@54|))  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@181|)) (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q (Lit |lbl#0@@54|))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@181|))))) (Options.Option.None_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@181|))))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@94|))))) (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@94|))))) (let ((|frozenJournal#1@@0| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v'#0@@94|))))))))
 (and (and (and (and (= (LitInt (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#1@@0|)) (LitInt (CrashTolerantJournal.TransitionLabel.newBoundaryLsn (Lit |lbl#0@@54|)))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (Lit (CrashTolerantJournal.Variables.persistent (Lit |v#0@@181|)))) (MsgHistoryMod.MsgHistory.seqEnd |frozenJournal#1@@0|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart |frozenJournal#1@@0|) (CrashTolerantJournal.TransitionLabel.maxLsn (Lit |lbl#0@@54|)))) (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@181|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@94|))))) (Lit (|#AbstractJournal.TransitionLabel.FreezeForCommitLabel| |frozenJournal#1@@0|)))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@94| (let ((|dt_update_tmp#0#1@@13| (Lit |v#0@@181|)))
(let ((|dt_update#inFlight#0#1@@0| (Lit (|#Options.Option.Some| ($Box |frozenJournal#1@@0|)))))
(let ((|dt_update#ephemeral#0#1@@0| (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@94|)))))
(Lit (|#CrashTolerantJournal.Variables.Variables| (Lit (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#1@@13|)) |dt_update#ephemeral#0#1@@0| |dt_update#inFlight#0#1@@0|))))))))))))
 :qid |CrashTolerantJournalidfy.126:25|
 :weight 3
 :skolemid |3291|
 :pattern ( (CrashTolerantJournal.__default.CommitStart (Lit |v#0@@181|) (Lit |v'#0@@94|) (Lit |lbl#0@@54|)))
))))
(assert  (=> true (forall ((|v#0@@182| T@U) (|v'#0@@95| T@U) (|lbl#0@@55| T@U) ) (!  (=> (and (and (and (= (type |v#0@@182|) DatatypeTypeType) (= (type |v'#0@@95|) DatatypeTypeType)) (= (type |lbl#0@@55|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.CommitComplete#canCall| |v#0@@182| |v'#0@@95| |lbl#0@@55|) (and (and ($Is |v#0@@182| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@95| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@55| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.157:28|
 :skolemid |3292|
 :pattern ( (CrashTolerantJournal.__default.CommitComplete |v#0@@182| |v'#0@@95| |lbl#0@@55|))
))))
(assert (forall ((|v#0@@183| T@U) (|v'#0@@96| T@U) (|lbl#0@@56| T@U) ) (!  (=> (and (and (and (= (type |v#0@@183|) DatatypeTypeType) (= (type |v'#0@@96|) DatatypeTypeType)) (= (type |lbl#0@@56|) DatatypeTypeType)) (and (and ($Is |v#0@@183| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@96| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@56| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.CommitComplete#requires| |v#0@@183| |v'#0@@96| |lbl#0@@56|) true))
 :qid |CrashTolerantJournalidfy.157:28|
 :skolemid |3293|
 :pattern ( (|CrashTolerantJournal.__default.CommitComplete#requires| |v#0@@183| |v'#0@@96| |lbl#0@@56|))
)))
(assert  (=> true (forall ((|v#0@@184| T@U) (|v'#0@@97| T@U) (|lbl#0@@57| T@U) ) (!  (=> (and (and (and (= (type |v#0@@184|) DatatypeTypeType) (= (type |v'#0@@97|) DatatypeTypeType)) (= (type |lbl#0@@57|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.CommitComplete#canCall| |v#0@@184| |v'#0@@97| |lbl#0@@57|) (and (and ($Is |v#0@@184| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@97| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@57| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@184|) (=> (CrashTolerantJournal.Variables.WF |v#0@@184|) (=> (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q |lbl#0@@57|) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@184|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@184|)) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@184|) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight |v#0@@184|)) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@97|) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@97|)) (and (and (and (and (CrashTolerantJournal.Variables.Variables_q |v#0@@184|) (CrashTolerantJournal.Variables.Variables_q |v'#0@@97|)) (and (CrashTolerantJournal.Variables.Variables_q |v#0@@184|) (MsgHistoryMod.MsgHistory.MsgHistory_q ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v#0@@184|)))))) (|AbstractJournal.__default.Next#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@184|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@97|)) (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (MsgHistoryMod.MsgHistory.seqStart ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v#0@@184|)))) (CrashTolerantJournal.TransitionLabel.requireEnd |lbl#0@@57|)))) (=> (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@184|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@97|)) (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (MsgHistoryMod.MsgHistory.seqStart ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v#0@@184|)))) (CrashTolerantJournal.TransitionLabel.requireEnd |lbl#0@@57|))) (and (and (|$IsA#CrashTolerantJournal.Variables| |v'#0@@97|) (|$IsA#CrashTolerantJournal.Variables| (let ((|dt_update#inFlight#0#0@@1| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#0@@1| (CrashTolerantJournal.Variables.ephemeral |v'#0@@97|)))
(let ((|dt_update#persistent#0#0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v#0@@184|)))))
(|#CrashTolerantJournal.Variables.Variables| |dt_update#persistent#0#0| |dt_update#ephemeral#0#0@@1| |dt_update#inFlight#0#0@@1|)))))) (and (CrashTolerantJournal.Variables.Variables_q |v'#0@@97|) (CrashTolerantJournal.Variables.Variables_q |v#0@@184|)))))))))))))) (= (CrashTolerantJournal.__default.CommitComplete |v#0@@184| |v'#0@@97| |lbl#0@@57|)  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF |v#0@@184|) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q |lbl#0@@57|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v#0@@184|))) (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight |v#0@@184|))) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |v'#0@@97|))) (AbstractJournal.__default.Next (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v#0@@184|)) (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |v'#0@@97|)) (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (MsgHistoryMod.MsgHistory.seqStart ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v#0@@184|)))) (CrashTolerantJournal.TransitionLabel.requireEnd |lbl#0@@57|)))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@97| (let ((|dt_update#inFlight#0#0@@2| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#0@@2| (CrashTolerantJournal.Variables.ephemeral |v'#0@@97|)))
(let ((|dt_update#persistent#0#0@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |v#0@@184|)))))
(|#CrashTolerantJournal.Variables.Variables| |dt_update#persistent#0#0@@0| |dt_update#ephemeral#0#0@@2| |dt_update#inFlight#0#0@@2|)))))))))
 :qid |CrashTolerantJournalidfy.157:28|
 :skolemid |3294|
 :pattern ( (CrashTolerantJournal.__default.CommitComplete |v#0@@184| |v'#0@@97| |lbl#0@@57|))
))))
(assert  (=> true (forall ((|v#0@@185| T@U) (|v'#0@@98| T@U) (|lbl#0@@58| T@U) ) (!  (=> (and (and (and (= (type |v#0@@185|) DatatypeTypeType) (= (type |v'#0@@98|) DatatypeTypeType)) (= (type |lbl#0@@58|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.CommitComplete#canCall| (Lit |v#0@@185|) (Lit |v'#0@@98|) (Lit |lbl#0@@58|)) (and (and ($Is |v#0@@185| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@98| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@58| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@185|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@185|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q (Lit |lbl#0@@58|))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@185|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@185|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@185|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@98|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@98|))))))) (and (and (and (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@185|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@98|))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@185|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|))))))))) (|AbstractJournal.__default.Next#canCall| (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@185|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@98|))))) (Lit (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|)))))))) (LitInt (CrashTolerantJournal.TransitionLabel.requireEnd (Lit |lbl#0@@58|))))))) (=> (U_2_bool (Lit (bool_2_U (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@185|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@98|))))) (Lit (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|)))))))) (LitInt (CrashTolerantJournal.TransitionLabel.requireEnd (Lit |lbl#0@@58|))))))))) (and (and (|$IsA#CrashTolerantJournal.Variables| (Lit |v'#0@@98|)) (|$IsA#CrashTolerantJournal.Variables| (let ((|dt_update#inFlight#0#1@@1| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#1@@1| (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@98|)))))
(let ((|dt_update#persistent#0#1| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|))))))))
(Lit (|#CrashTolerantJournal.Variables.Variables| |dt_update#persistent#0#1| |dt_update#ephemeral#0#1@@1| |dt_update#inFlight#0#1@@1|))))))) (and (CrashTolerantJournal.Variables.Variables_q (Lit |v'#0@@98|)) (CrashTolerantJournal.Variables.Variables_q (Lit |v#0@@185|))))))))))))))) (= (CrashTolerantJournal.__default.CommitComplete (Lit |v#0@@185|) (Lit |v'#0@@98|) (Lit |lbl#0@@58|))  (and (and (and (and (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@185|)) (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q (Lit |lbl#0@@58|))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@185|))))) (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|))))) (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@98|))))) (AbstractJournal.__default.Next (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v#0@@185|))))) (Lit (CrashTolerantJournal.Ephemeral.v (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@98|))))) (Lit (|#AbstractJournal.TransitionLabel.DiscardOldLabel| (LitInt (MsgHistoryMod.MsgHistory.seqStart (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|)))))))) (LitInt (CrashTolerantJournal.TransitionLabel.requireEnd (Lit |lbl#0@@58|))))))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@98| (let ((|dt_update#inFlight#0#1@@2| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#1@@2| (Lit (CrashTolerantJournal.Variables.ephemeral (Lit |v'#0@@98|)))))
(let ((|dt_update#persistent#0#1@@0| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantJournal.Variables.inFlight (Lit |v#0@@185|))))))))
(Lit (|#CrashTolerantJournal.Variables.Variables| |dt_update#persistent#0#1@@0| |dt_update#ephemeral#0#1@@2| |dt_update#inFlight#0#1@@2|))))))))))
 :qid |CrashTolerantJournalidfy.157:28|
 :weight 3
 :skolemid |3295|
 :pattern ( (CrashTolerantJournal.__default.CommitComplete (Lit |v#0@@185|) (Lit |v'#0@@98|) (Lit |lbl#0@@58|)))
))))
(assert  (=> true (forall ((|v#0@@186| T@U) (|v'#0@@99| T@U) (|lbl#0@@59| T@U) ) (!  (=> (and (and (and (= (type |v#0@@186|) DatatypeTypeType) (= (type |v'#0@@99|) DatatypeTypeType)) (= (type |lbl#0@@59|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Crash#canCall| |v#0@@186| |v'#0@@99| |lbl#0@@59|) (and (and ($Is |v#0@@186| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@99| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@59| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.174:19|
 :skolemid |3296|
 :pattern ( (CrashTolerantJournal.__default.Crash |v#0@@186| |v'#0@@99| |lbl#0@@59|))
))))
(assert (forall ((|v#0@@187| T@U) (|v'#0@@100| T@U) (|lbl#0@@60| T@U) ) (!  (=> (and (and (and (= (type |v#0@@187|) DatatypeTypeType) (= (type |v'#0@@100|) DatatypeTypeType)) (= (type |lbl#0@@60|) DatatypeTypeType)) (and (and ($Is |v#0@@187| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@100| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@60| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.Crash#requires| |v#0@@187| |v'#0@@100| |lbl#0@@60|) true))
 :qid |CrashTolerantJournalidfy.174:19|
 :skolemid |3297|
 :pattern ( (|CrashTolerantJournal.__default.Crash#requires| |v#0@@187| |v'#0@@100| |lbl#0@@60|))
)))
(assert  (=> true (forall ((|v#0@@188| T@U) (|v'#0@@101| T@U) (|lbl#0@@61| T@U) ) (!  (=> (and (and (and (= (type |v#0@@188|) DatatypeTypeType) (= (type |v'#0@@101|) DatatypeTypeType)) (= (type |lbl#0@@61|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Crash#canCall| |v#0@@188| |v'#0@@101| |lbl#0@@61|) (and (and ($Is |v#0@@188| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@101| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@61| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| |v#0@@188|) (=> (CrashTolerantJournal.Variables.WF |v#0@@188|) (=> (CrashTolerantJournal.TransitionLabel.CrashLabel_q |lbl#0@@61|) (and (and (|$IsA#CrashTolerantJournal.Variables| |v'#0@@101|) (|$IsA#CrashTolerantJournal.Variables| (let ((|dt_update_tmp#0#0@@14| |v#0@@188|))
(let ((|dt_update#inFlight#0#0@@3| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#0@@3| (Lit |#CrashTolerantJournal.Ephemeral.Unknown|)))
(|#CrashTolerantJournal.Variables.Variables| (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#0@@14|) |dt_update#ephemeral#0#0@@3| |dt_update#inFlight#0#0@@3|)))))) (let ((|dt_update_tmp#0#0@@15| |v#0@@188|))
(CrashTolerantJournal.Variables.Variables_q |dt_update_tmp#0#0@@15|)))))) (= (CrashTolerantJournal.__default.Crash |v#0@@188| |v'#0@@101| |lbl#0@@61|)  (and (and (CrashTolerantJournal.Variables.WF |v#0@@188|) (CrashTolerantJournal.TransitionLabel.CrashLabel_q |lbl#0@@61|)) (|CrashTolerantJournal.Variables#Equal| |v'#0@@101| (let ((|dt_update_tmp#0#0@@16| |v#0@@188|))
(let ((|dt_update#inFlight#0#0@@4| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#0@@4| (Lit |#CrashTolerantJournal.Ephemeral.Unknown|)))
(|#CrashTolerantJournal.Variables.Variables| (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#0@@16|) |dt_update#ephemeral#0#0@@4| |dt_update#inFlight#0#0@@4|)))))))))
 :qid |CrashTolerantJournalidfy.174:19|
 :skolemid |3298|
 :pattern ( (CrashTolerantJournal.__default.Crash |v#0@@188| |v'#0@@101| |lbl#0@@61|))
))))
(assert  (=> true (forall ((|v#0@@189| T@U) (|v'#0@@102| T@U) (|lbl#0@@62| T@U) ) (!  (=> (and (and (and (= (type |v#0@@189|) DatatypeTypeType) (= (type |v'#0@@102|) DatatypeTypeType)) (= (type |lbl#0@@62|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Crash#canCall| (Lit |v#0@@189|) (Lit |v'#0@@102|) (Lit |lbl#0@@62|)) (and (and ($Is |v#0@@189| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@102| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@62| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (|CrashTolerantJournal.Variables.WF#canCall| (Lit |v#0@@189|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit |v#0@@189|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.CrashLabel_q (Lit |lbl#0@@62|))))) (and (and (|$IsA#CrashTolerantJournal.Variables| (Lit |v'#0@@102|)) (|$IsA#CrashTolerantJournal.Variables| (let ((|dt_update_tmp#0#1@@14| (Lit |v#0@@189|)))
(let ((|dt_update#inFlight#0#1@@3| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#1@@3| (Lit |#CrashTolerantJournal.Ephemeral.Unknown|)))
(Lit (|#CrashTolerantJournal.Variables.Variables| (Lit (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#1@@14|)) |dt_update#ephemeral#0#1@@3| |dt_update#inFlight#0#1@@3|))))))) (let ((|dt_update_tmp#0#1@@15| (Lit |v#0@@189|)))
(CrashTolerantJournal.Variables.Variables_q |dt_update_tmp#0#1@@15|)))))) (= (CrashTolerantJournal.__default.Crash (Lit |v#0@@189|) (Lit |v'#0@@102|) (Lit |lbl#0@@62|))  (and (and (CrashTolerantJournal.Variables.WF (Lit |v#0@@189|)) (CrashTolerantJournal.TransitionLabel.CrashLabel_q (Lit |lbl#0@@62|))) (|CrashTolerantJournal.Variables#Equal| |v'#0@@102| (let ((|dt_update_tmp#0#1@@16| (Lit |v#0@@189|)))
(let ((|dt_update#inFlight#0#1@@4| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#1@@4| (Lit |#CrashTolerantJournal.Ephemeral.Unknown|)))
(Lit (|#CrashTolerantJournal.Variables.Variables| (Lit (CrashTolerantJournal.Variables.persistent |dt_update_tmp#0#1@@16|)) |dt_update#ephemeral#0#1@@4| |dt_update#inFlight#0#1@@4|))))))))))
 :qid |CrashTolerantJournalidfy.174:19|
 :weight 3
 :skolemid |3299|
 :pattern ( (CrashTolerantJournal.__default.Crash (Lit |v#0@@189|) (Lit |v'#0@@102|) (Lit |lbl#0@@62|)))
))))
(assert  (=> true (forall ((|v#0@@190| T@U) ) (!  (=> (and (= (type |v#0@@190|) DatatypeTypeType) (or (|CrashTolerantJournal.__default.Init#canCall| |v#0@@190|) ($Is |v#0@@190| Tclass.CrashTolerantJournal.Variables))) true)
 :qid |CrashTolerantJournalidfy.184:18|
 :skolemid |3300|
 :pattern ( (CrashTolerantJournal.__default.Init |v#0@@190|))
))))
(assert (forall ((|v#0@@191| T@U) ) (!  (=> (and (= (type |v#0@@191|) DatatypeTypeType) ($Is |v#0@@191| Tclass.CrashTolerantJournal.Variables)) (= (|CrashTolerantJournal.__default.Init#requires| |v#0@@191|) true))
 :qid |CrashTolerantJournalidfy.184:18|
 :skolemid |3301|
 :pattern ( (|CrashTolerantJournal.__default.Init#requires| |v#0@@191|))
)))
(assert  (=> true (forall ((|v#0@@192| T@U) ) (!  (=> (and (= (type |v#0@@192|) DatatypeTypeType) (or (|CrashTolerantJournal.__default.Init#canCall| |v#0@@192|) ($Is |v#0@@192| Tclass.CrashTolerantJournal.Variables))) (and (|$IsA#CrashTolerantJournal.Variables| |v#0@@192|) (= (CrashTolerantJournal.__default.Init |v#0@@192|) (|CrashTolerantJournal.Variables#Equal| |v#0@@192| (|#CrashTolerantJournal.Variables.Variables| (Lit (|#MsgHistoryMod.MsgHistory.MsgHistory| (Lit (|Map#Empty| BoxType BoxType)) (LitInt 0) (LitInt 0))) (Lit |#CrashTolerantJournal.Ephemeral.Unknown|) (Lit |#Options.Option.None|))))))
 :qid |CrashTolerantJournalidfy.184:18|
 :skolemid |3302|
 :pattern ( (CrashTolerantJournal.__default.Init |v#0@@192|))
))))
(assert  (=> true (forall ((|v#0@@193| T@U) ) (!  (=> (and (= (type |v#0@@193|) DatatypeTypeType) (or (|CrashTolerantJournal.__default.Init#canCall| (Lit |v#0@@193|)) ($Is |v#0@@193| Tclass.CrashTolerantJournal.Variables))) (and (|$IsA#CrashTolerantJournal.Variables| (Lit |v#0@@193|)) (= (CrashTolerantJournal.__default.Init (Lit |v#0@@193|)) (|CrashTolerantJournal.Variables#Equal| |v#0@@193| (|#CrashTolerantJournal.Variables.Variables| (Lit (|#MsgHistoryMod.MsgHistory.MsgHistory| (Lit (|Map#Empty| BoxType BoxType)) (LitInt 0) (LitInt 0))) (Lit |#CrashTolerantJournal.Ephemeral.Unknown|) (Lit |#Options.Option.None|))))))
 :qid |CrashTolerantJournalidfy.184:18|
 :weight 3
 :skolemid |3303|
 :pattern ( (CrashTolerantJournal.__default.Init (Lit |v#0@@193|)))
))))
(assert  (=> true (forall ((|v#0@@194| T@U) (|v'#0@@103| T@U) (|lbl#0@@63| T@U) ) (!  (=> (and (and (and (= (type |v#0@@194|) DatatypeTypeType) (= (type |v'#0@@103|) DatatypeTypeType)) (= (type |lbl#0@@63|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Next#canCall| |v#0@@194| |v'#0@@103| |lbl#0@@63|) (and (and ($Is |v#0@@194| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@103| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@63| Tclass.CrashTolerantJournal.TransitionLabel)))) true)
 :qid |CrashTolerantJournalidfy.189:18|
 :skolemid |3304|
 :pattern ( (CrashTolerantJournal.__default.Next |v#0@@194| |v'#0@@103| |lbl#0@@63|))
))))
(assert (forall ((|v#0@@195| T@U) (|v'#0@@104| T@U) (|lbl#0@@64| T@U) ) (!  (=> (and (and (and (= (type |v#0@@195|) DatatypeTypeType) (= (type |v'#0@@104|) DatatypeTypeType)) (= (type |lbl#0@@64|) DatatypeTypeType)) (and (and ($Is |v#0@@195| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@104| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@64| Tclass.CrashTolerantJournal.TransitionLabel))) (= (|CrashTolerantJournal.__default.Next#requires| |v#0@@195| |v'#0@@104| |lbl#0@@64|) true))
 :qid |CrashTolerantJournalidfy.189:18|
 :skolemid |3305|
 :pattern ( (|CrashTolerantJournal.__default.Next#requires| |v#0@@195| |v'#0@@104| |lbl#0@@64|))
)))
(assert  (=> true (forall ((|v#0@@196| T@U) (|v'#0@@105| T@U) (|lbl#0@@65| T@U) ) (!  (=> (and (and (and (= (type |v#0@@196|) DatatypeTypeType) (= (type |v'#0@@105|) DatatypeTypeType)) (= (type |lbl#0@@65|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Next#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|) (and (and ($Is |v#0@@196| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@105| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@65| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (=> (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.LoadEphemeralFromPersistent#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q |lbl#0@@65|)) (and (=> (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.ReadForRecovery#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@65|)) (and (=> (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.QueryEndLsn#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@65|)) (and (=> (CrashTolerantJournal.TransitionLabel.PutLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.Put#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.PutLabel_q |lbl#0@@65|)) (and (=> (CrashTolerantJournal.TransitionLabel.InternalLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.Internal#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.InternalLabel_q |lbl#0@@65|)) (and (=> (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.QueryLsnPersistence#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q |lbl#0@@65|)) (and (=> (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.CommitStart#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q |lbl#0@@65|)) (and (=> (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q |lbl#0@@65|) (|CrashTolerantJournal.__default.CommitComplete#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|)) (=> (not (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q |lbl#0@@65|)) (|CrashTolerantJournal.__default.Crash#canCall| |v#0@@196| |v'#0@@105| |lbl#0@@65|))))))))))))))))) (= (CrashTolerantJournal.__default.Next |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.LoadEphemeralFromPersistent |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.ReadForRecovery |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.QueryEndLsn |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.PutLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.Put |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.InternalLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.Internal |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.QueryLsnPersistence |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.CommitStart |v#0@@196| |v'#0@@105| |lbl#0@@65|) (ite (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q |lbl#0@@65|) (CrashTolerantJournal.__default.CommitComplete |v#0@@196| |v'#0@@105| |lbl#0@@65|) (CrashTolerantJournal.__default.Crash |v#0@@196| |v'#0@@105| |lbl#0@@65|))))))))))))
 :qid |CrashTolerantJournalidfy.189:18|
 :skolemid |3306|
 :pattern ( (CrashTolerantJournal.__default.Next |v#0@@196| |v'#0@@105| |lbl#0@@65|))
))))
(assert  (=> true (forall ((|v#0@@197| T@U) (|v'#0@@106| T@U) (|lbl#0@@66| T@U) ) (!  (=> (and (and (and (= (type |v#0@@197|) DatatypeTypeType) (= (type |v'#0@@106|) DatatypeTypeType)) (= (type |lbl#0@@66|) DatatypeTypeType)) (or (|CrashTolerantJournal.__default.Next#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (and (and ($Is |v#0@@197| Tclass.CrashTolerantJournal.Variables) ($Is |v'#0@@106| Tclass.CrashTolerantJournal.Variables)) ($Is |lbl#0@@66| Tclass.CrashTolerantJournal.TransitionLabel)))) (and (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.LoadEphemeralFromPersistent#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q (Lit |lbl#0@@66|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.ReadForRecovery#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@66|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.QueryEndLsn#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@66|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.Put#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@66|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.InternalLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.Internal#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.InternalLabel_q (Lit |lbl#0@@66|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.QueryLsnPersistence#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q (Lit |lbl#0@@66|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.CommitStart#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q (Lit |lbl#0@@66|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q (Lit |lbl#0@@66|))))) (|CrashTolerantJournal.__default.CommitComplete#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q (Lit |lbl#0@@66|)))))) (|CrashTolerantJournal.__default.Crash#canCall| (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)))))))))))))))))) (= (CrashTolerantJournal.__default.Next (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.LoadEphemeralFromPersistent (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.ReadForRecovery (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.QueryEndLsn (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.PutLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.Put (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.InternalLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.Internal (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.QueryLsnPersistence (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.CommitStartLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.CommitStart (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (ite (CrashTolerantJournal.TransitionLabel.CommitCompleteLabel_q (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.CommitComplete (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)) (CrashTolerantJournal.__default.Crash (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)))))))))))))
 :qid |CrashTolerantJournalidfy.189:18|
 :weight 3
 :skolemid |3307|
 :pattern ( (CrashTolerantJournal.__default.Next (Lit |v#0@@197|) (Lit |v'#0@@106|) (Lit |lbl#0@@66|)))
))))
(assert (forall ((arg0@@574 Int) (arg1@@279 T@U) (arg2@@165 T@U) ) (! (= (type (|#AbstractMap.TransitionLabel.QueryLabel| arg0@@574 arg1@@279 arg2@@165)) DatatypeTypeType)
 :qid |funType:#AbstractMap.TransitionLabel.QueryLabel|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryLabel| arg0@@574 arg1@@279 arg2@@165))
)))
(assert (forall ((|a#0#0#0@@7| Int) (|a#0#1#0@@4| T@U) (|a#0#2#0@@0| T@U) ) (!  (=> (and (= (type |a#0#1#0@@4|) (SeqType BoxType)) (= (type |a#0#2#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#AbstractMap.TransitionLabel.QueryLabel| |a#0#0#0@@7| |a#0#1#0@@4| |a#0#2#0@@0|)) |##AbstractMap.TransitionLabel.QueryLabel|))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3308|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryLabel| |a#0#0#0@@7| |a#0#1#0@@4| |a#0#2#0@@0|))
)))
(assert (forall ((d@@164 T@U) ) (!  (=> (= (type d@@164) DatatypeTypeType) (= (AbstractMap.TransitionLabel.QueryLabel_q d@@164) (= (DatatypeCtorId d@@164) |##AbstractMap.TransitionLabel.QueryLabel|)))
 :qid |unknown.0:0|
 :skolemid |3309|
 :pattern ( (AbstractMap.TransitionLabel.QueryLabel_q d@@164))
)))
(assert (forall ((d@@165 T@U) ) (!  (=> (and (= (type d@@165) DatatypeTypeType) (AbstractMap.TransitionLabel.QueryLabel_q d@@165)) (exists ((|a#1#0#0@@7| Int) (|a#1#1#0@@4| T@U) (|a#1#2#0@@0| T@U) ) (!  (and (and (= (type |a#1#1#0@@4|) (SeqType BoxType)) (= (type |a#1#2#0@@0|) (SeqType BoxType))) (= d@@165 (|#AbstractMap.TransitionLabel.QueryLabel| |a#1#0#0@@7| |a#1#1#0@@4| |a#1#2#0@@0|)))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3310|
 :no-pattern (type |a#1#1#0@@4|)
 :no-pattern (type |a#1#2#0@@0|)
 :no-pattern (U_2_int |a#1#1#0@@4|)
 :no-pattern (U_2_bool |a#1#1#0@@4|)
 :no-pattern (U_2_int |a#1#2#0@@0|)
 :no-pattern (U_2_bool |a#1#2#0@@0|)
)))
 :qid |unknown.0:0|
 :skolemid |3311|
 :pattern ( (AbstractMap.TransitionLabel.QueryLabel_q d@@165))
)))
(assert (= (type Tclass.AbstractMap.TransitionLabel) TyType))
(assert (= (Tag Tclass.AbstractMap.TransitionLabel) Tagclass.AbstractMap.TransitionLabel))
(assert (= (TagFamily Tclass.AbstractMap.TransitionLabel) tytagFamily$TransitionLabel))
(assert (forall ((bx@@169 T@U) ) (!  (=> (and (= (type bx@@169) BoxType) ($IsBox bx@@169 Tclass.AbstractMap.TransitionLabel)) (and (= ($Box ($Unbox DatatypeTypeType bx@@169)) bx@@169) ($Is ($Unbox DatatypeTypeType bx@@169) Tclass.AbstractMap.TransitionLabel)))
 :qid |unknown.0:0|
 :skolemid |3312|
 :pattern ( ($IsBox bx@@169 Tclass.AbstractMap.TransitionLabel))
)))
(assert (forall ((|a#2#0#0@@7| Int) (|a#2#1#0@@4| T@U) (|a#2#2#0@@0| T@U) ) (!  (=> (and (= (type |a#2#1#0@@4|) (SeqType BoxType)) (= (type |a#2#2#0@@0|) (SeqType BoxType))) (= ($Is (|#AbstractMap.TransitionLabel.QueryLabel| |a#2#0#0@@7| |a#2#1#0@@4| |a#2#2#0@@0|) Tclass.AbstractMap.TransitionLabel)  (and (and ($Is (int_2_U |a#2#0#0@@7|) Tclass._System.nat) ($Is |a#2#1#0@@4| Tclass.KeyType.Key)) ($Is |a#2#2#0@@0| Tclass.ValueType.Value))))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3313|
 :pattern ( ($Is (|#AbstractMap.TransitionLabel.QueryLabel| |a#2#0#0@@7| |a#2#1#0@@4| |a#2#2#0@@0|) Tclass.AbstractMap.TransitionLabel))
)))
(assert (forall ((|a#3#0#0@@7| Int) (|a#3#1#0@@4| T@U) (|a#3#2#0@@0| T@U) ($h@@163 T@U) ) (!  (=> (and (and (and (= (type |a#3#1#0@@4|) (SeqType BoxType)) (= (type |a#3#2#0@@0|) (SeqType BoxType))) (= (type $h@@163) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@163)) (= ($IsAlloc (|#AbstractMap.TransitionLabel.QueryLabel| |a#3#0#0@@7| |a#3#1#0@@4| |a#3#2#0@@0|) Tclass.AbstractMap.TransitionLabel $h@@163)  (and (and ($IsAlloc (int_2_U |a#3#0#0@@7|) Tclass._System.nat $h@@163) ($IsAlloc |a#3#1#0@@4| Tclass.KeyType.Key $h@@163)) ($IsAlloc |a#3#2#0@@0| Tclass.ValueType.Value $h@@163))))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3314|
 :pattern ( ($IsAlloc (|#AbstractMap.TransitionLabel.QueryLabel| |a#3#0#0@@7| |a#3#1#0@@4| |a#3#2#0@@0|) Tclass.AbstractMap.TransitionLabel $h@@163))
)))
(assert (forall ((d@@166 T@U) ($h@@164 T@U) ) (!  (=> (and (and (= (type d@@166) DatatypeTypeType) (= (type $h@@164) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@164) (and (AbstractMap.TransitionLabel.QueryLabel_q d@@166) ($IsAlloc d@@166 Tclass.AbstractMap.TransitionLabel $h@@164)))) ($IsAlloc (int_2_U (AbstractMap.TransitionLabel.endLsn d@@166)) Tclass._System.nat $h@@164))
 :qid |unknown.0:0|
 :skolemid |3315|
 :pattern ( ($IsAlloc (int_2_U (AbstractMap.TransitionLabel.endLsn d@@166)) Tclass._System.nat $h@@164))
)))
(assert (forall ((arg0@@575 T@U) ) (! (= (type (AbstractMap.TransitionLabel.key arg0@@575)) (SeqType BoxType))
 :qid |funType:AbstractMap.TransitionLabel.key|
 :pattern ( (AbstractMap.TransitionLabel.key arg0@@575))
)))
(assert (forall ((d@@167 T@U) ($h@@165 T@U) ) (!  (=> (and (and (= (type d@@167) DatatypeTypeType) (= (type $h@@165) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@165) (and (AbstractMap.TransitionLabel.QueryLabel_q d@@167) ($IsAlloc d@@167 Tclass.AbstractMap.TransitionLabel $h@@165)))) ($IsAlloc (AbstractMap.TransitionLabel.key d@@167) Tclass.KeyType.Key $h@@165))
 :qid |unknown.0:0|
 :skolemid |3316|
 :pattern ( ($IsAlloc (AbstractMap.TransitionLabel.key d@@167) Tclass.KeyType.Key $h@@165))
)))
(assert (forall ((arg0@@576 T@U) ) (! (= (type (AbstractMap.TransitionLabel.value arg0@@576)) (SeqType BoxType))
 :qid |funType:AbstractMap.TransitionLabel.value|
 :pattern ( (AbstractMap.TransitionLabel.value arg0@@576))
)))
(assert (forall ((d@@168 T@U) ($h@@166 T@U) ) (!  (=> (and (and (= (type d@@168) DatatypeTypeType) (= (type $h@@166) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@166) (and (AbstractMap.TransitionLabel.QueryLabel_q d@@168) ($IsAlloc d@@168 Tclass.AbstractMap.TransitionLabel $h@@166)))) ($IsAlloc (AbstractMap.TransitionLabel.value d@@168) Tclass.ValueType.Value $h@@166))
 :qid |unknown.0:0|
 :skolemid |3317|
 :pattern ( ($IsAlloc (AbstractMap.TransitionLabel.value d@@168) Tclass.ValueType.Value $h@@166))
)))
(assert (forall ((|a#4#0#0@@7| Int) (|a#4#1#0@@4| T@U) (|a#4#2#0@@0| T@U) ) (!  (=> (and (= (type |a#4#1#0@@4|) (SeqType BoxType)) (= (type |a#4#2#0@@0|) (SeqType BoxType))) (= (|#AbstractMap.TransitionLabel.QueryLabel| (LitInt |a#4#0#0@@7|) (Lit |a#4#1#0@@4|) (Lit |a#4#2#0@@0|)) (Lit (|#AbstractMap.TransitionLabel.QueryLabel| |a#4#0#0@@7| |a#4#1#0@@4| |a#4#2#0@@0|))))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3318|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryLabel| (LitInt |a#4#0#0@@7|) (Lit |a#4#1#0@@4|) (Lit |a#4#2#0@@0|)))
)))
(assert (forall ((|a#5#0#0@@10| Int) (|a#5#1#0@@5| T@U) (|a#5#2#0@@1| T@U) ) (!  (=> (and (= (type |a#5#1#0@@5|) (SeqType BoxType)) (= (type |a#5#2#0@@1|) (SeqType BoxType))) (= (AbstractMap.TransitionLabel.endLsn (|#AbstractMap.TransitionLabel.QueryLabel| |a#5#0#0@@10| |a#5#1#0@@5| |a#5#2#0@@1|)) |a#5#0#0@@10|))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3319|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryLabel| |a#5#0#0@@10| |a#5#1#0@@5| |a#5#2#0@@1|))
)))
(assert (forall ((|a#6#0#0@@10| Int) (|a#6#1#0@@6| T@U) (|a#6#2#0@@1| T@U) ) (!  (=> (and (= (type |a#6#1#0@@6|) (SeqType BoxType)) (= (type |a#6#2#0@@1|) (SeqType BoxType))) (= (AbstractMap.TransitionLabel.key (|#AbstractMap.TransitionLabel.QueryLabel| |a#6#0#0@@10| |a#6#1#0@@6| |a#6#2#0@@1|)) |a#6#1#0@@6|))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3320|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryLabel| |a#6#0#0@@10| |a#6#1#0@@6| |a#6#2#0@@1|))
)))
(assert (forall ((|a#7#0#0@@10| Int) (|a#7#1#0@@6| T@U) (|a#7#2#0@@1| T@U) ) (!  (=> (and (= (type |a#7#1#0@@6|) (SeqType BoxType)) (= (type |a#7#2#0@@1|) (SeqType BoxType))) (= (AbstractMap.TransitionLabel.value (|#AbstractMap.TransitionLabel.QueryLabel| |a#7#0#0@@10| |a#7#1#0@@6| |a#7#2#0@@1|)) |a#7#2#0@@1|))
 :qid |AbstractMapidfy.16:18|
 :skolemid |3321|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryLabel| |a#7#0#0@@10| |a#7#1#0@@6| |a#7#2#0@@1|))
)))
(assert (forall ((arg0@@577 T@U) ) (! (= (type (|#AbstractMap.TransitionLabel.PutLabel| arg0@@577)) DatatypeTypeType)
 :qid |funType:#AbstractMap.TransitionLabel.PutLabel|
 :pattern ( (|#AbstractMap.TransitionLabel.PutLabel| arg0@@577))
)))
(assert (forall ((|a#8#0#0@@9| T@U) ) (!  (=> (= (type |a#8#0#0@@9|) DatatypeTypeType) (= (DatatypeCtorId (|#AbstractMap.TransitionLabel.PutLabel| |a#8#0#0@@9|)) |##AbstractMap.TransitionLabel.PutLabel|))
 :qid |AbstractMapidfy.17:16|
 :skolemid |3322|
 :pattern ( (|#AbstractMap.TransitionLabel.PutLabel| |a#8#0#0@@9|))
)))
(assert (forall ((d@@169 T@U) ) (!  (=> (= (type d@@169) DatatypeTypeType) (= (AbstractMap.TransitionLabel.PutLabel_q d@@169) (= (DatatypeCtorId d@@169) |##AbstractMap.TransitionLabel.PutLabel|)))
 :qid |unknown.0:0|
 :skolemid |3323|
 :pattern ( (AbstractMap.TransitionLabel.PutLabel_q d@@169))
)))
(assert (forall ((d@@170 T@U) ) (!  (=> (and (= (type d@@170) DatatypeTypeType) (AbstractMap.TransitionLabel.PutLabel_q d@@170)) (exists ((|a#9#0#0@@7| T@U) ) (!  (and (= (type |a#9#0#0@@7|) DatatypeTypeType) (= d@@170 (|#AbstractMap.TransitionLabel.PutLabel| |a#9#0#0@@7|)))
 :qid |AbstractMapidfy.17:16|
 :skolemid |3324|
 :no-pattern (type |a#9#0#0@@7|)
 :no-pattern (U_2_int |a#9#0#0@@7|)
 :no-pattern (U_2_bool |a#9#0#0@@7|)
)))
 :qid |unknown.0:0|
 :skolemid |3325|
 :pattern ( (AbstractMap.TransitionLabel.PutLabel_q d@@170))
)))
(assert (forall ((|a#10#0#0@@7| T@U) ) (!  (=> (= (type |a#10#0#0@@7|) DatatypeTypeType) (= ($Is (|#AbstractMap.TransitionLabel.PutLabel| |a#10#0#0@@7|) Tclass.AbstractMap.TransitionLabel) ($Is |a#10#0#0@@7| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |AbstractMapidfy.17:16|
 :skolemid |3326|
 :pattern ( ($Is (|#AbstractMap.TransitionLabel.PutLabel| |a#10#0#0@@7|) Tclass.AbstractMap.TransitionLabel))
)))
(assert (forall ((|a#11#0#0@@6| T@U) ($h@@167 T@U) ) (!  (=> (and (and (= (type |a#11#0#0@@6|) DatatypeTypeType) (= (type $h@@167) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@167)) (= ($IsAlloc (|#AbstractMap.TransitionLabel.PutLabel| |a#11#0#0@@6|) Tclass.AbstractMap.TransitionLabel $h@@167) ($IsAlloc |a#11#0#0@@6| Tclass.MsgHistoryMod.MsgHistory $h@@167)))
 :qid |AbstractMapidfy.17:16|
 :skolemid |3327|
 :pattern ( ($IsAlloc (|#AbstractMap.TransitionLabel.PutLabel| |a#11#0#0@@6|) Tclass.AbstractMap.TransitionLabel $h@@167))
)))
(assert (forall ((arg0@@578 T@U) ) (! (= (type (AbstractMap.TransitionLabel.puts arg0@@578)) DatatypeTypeType)
 :qid |funType:AbstractMap.TransitionLabel.puts|
 :pattern ( (AbstractMap.TransitionLabel.puts arg0@@578))
)))
(assert (forall ((d@@171 T@U) ($h@@168 T@U) ) (!  (=> (and (and (= (type d@@171) DatatypeTypeType) (= (type $h@@168) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@168) (and (AbstractMap.TransitionLabel.PutLabel_q d@@171) ($IsAlloc d@@171 Tclass.AbstractMap.TransitionLabel $h@@168)))) ($IsAlloc (AbstractMap.TransitionLabel.puts d@@171) Tclass.MsgHistoryMod.MsgHistory $h@@168))
 :qid |unknown.0:0|
 :skolemid |3328|
 :pattern ( ($IsAlloc (AbstractMap.TransitionLabel.puts d@@171) Tclass.MsgHistoryMod.MsgHistory $h@@168))
)))
(assert (forall ((|a#12#0#0@@5| T@U) ) (!  (=> (= (type |a#12#0#0@@5|) DatatypeTypeType) (= (|#AbstractMap.TransitionLabel.PutLabel| (Lit |a#12#0#0@@5|)) (Lit (|#AbstractMap.TransitionLabel.PutLabel| |a#12#0#0@@5|))))
 :qid |AbstractMapidfy.17:16|
 :skolemid |3329|
 :pattern ( (|#AbstractMap.TransitionLabel.PutLabel| (Lit |a#12#0#0@@5|)))
)))
(assert (forall ((|a#13#0#0@@3| T@U) ) (!  (=> (= (type |a#13#0#0@@3|) DatatypeTypeType) (= (AbstractMap.TransitionLabel.puts (|#AbstractMap.TransitionLabel.PutLabel| |a#13#0#0@@3|)) |a#13#0#0@@3|))
 :qid |AbstractMapidfy.17:16|
 :skolemid |3330|
 :pattern ( (|#AbstractMap.TransitionLabel.PutLabel| |a#13#0#0@@3|))
)))
(assert (forall ((|a#14#0#0@@4| T@U) ) (!  (=> (= (type |a#14#0#0@@4|) DatatypeTypeType) (< (DtRank |a#14#0#0@@4|) (DtRank (|#AbstractMap.TransitionLabel.PutLabel| |a#14#0#0@@4|))))
 :qid |AbstractMapidfy.17:16|
 :skolemid |3331|
 :pattern ( (|#AbstractMap.TransitionLabel.PutLabel| |a#14#0#0@@4|))
)))
(assert (forall ((arg0@@579 Int) ) (! (= (type (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| arg0@@579)) DatatypeTypeType)
 :qid |funType:#AbstractMap.TransitionLabel.QueryEndLsnLabel|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| arg0@@579))
)))
(assert (forall ((|a#15#0#0@@4| Int) ) (! (= (DatatypeCtorId (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#15#0#0@@4|)) |##AbstractMap.TransitionLabel.QueryEndLsnLabel|)
 :qid |AbstractMapidfy.18:24|
 :skolemid |3332|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#15#0#0@@4|))
)))
(assert (forall ((d@@172 T@U) ) (!  (=> (= (type d@@172) DatatypeTypeType) (= (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@172) (= (DatatypeCtorId d@@172) |##AbstractMap.TransitionLabel.QueryEndLsnLabel|)))
 :qid |unknown.0:0|
 :skolemid |3333|
 :pattern ( (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@172))
)))
(assert (forall ((d@@173 T@U) ) (!  (=> (and (= (type d@@173) DatatypeTypeType) (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@173)) (exists ((|a#16#0#0@@4| Int) ) (! (= d@@173 (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#16#0#0@@4|))
 :qid |AbstractMapidfy.18:24|
 :skolemid |3334|
)))
 :qid |unknown.0:0|
 :skolemid |3335|
 :pattern ( (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@173))
)))
(assert (forall ((|a#17#0#0@@3| Int) ) (! (= ($Is (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#17#0#0@@3|) Tclass.AbstractMap.TransitionLabel) ($Is (int_2_U |a#17#0#0@@3|) Tclass._System.nat))
 :qid |AbstractMapidfy.18:24|
 :skolemid |3336|
 :pattern ( ($Is (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#17#0#0@@3|) Tclass.AbstractMap.TransitionLabel))
)))
(assert (forall ((|a#18#0#0@@3| Int) ($h@@169 T@U) ) (!  (=> (and (= (type $h@@169) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@169)) (= ($IsAlloc (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#18#0#0@@3|) Tclass.AbstractMap.TransitionLabel $h@@169) ($IsAlloc (int_2_U |a#18#0#0@@3|) Tclass._System.nat $h@@169)))
 :qid |AbstractMapidfy.18:24|
 :skolemid |3337|
 :pattern ( ($IsAlloc (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#18#0#0@@3|) Tclass.AbstractMap.TransitionLabel $h@@169))
)))
(assert (forall ((d@@174 T@U) ($h@@170 T@U) ) (!  (=> (and (and (= (type d@@174) DatatypeTypeType) (= (type $h@@170) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@170) (and (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@174) ($IsAlloc d@@174 Tclass.AbstractMap.TransitionLabel $h@@170)))) ($IsAlloc (int_2_U (AbstractMap.TransitionLabel.endLsn d@@174)) Tclass._System.nat $h@@170))
 :qid |unknown.0:0|
 :skolemid |3338|
 :pattern ( ($IsAlloc (int_2_U (AbstractMap.TransitionLabel.endLsn d@@174)) Tclass._System.nat $h@@170))
)))
(assert (forall ((|a#19#0#0@@3| Int) ) (! (= (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| (LitInt |a#19#0#0@@3|)) (Lit (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#19#0#0@@3|)))
 :qid |AbstractMapidfy.18:24|
 :skolemid |3339|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| (LitInt |a#19#0#0@@3|)))
)))
(assert (forall ((|a#20#0#0@@3| Int) ) (! (= (AbstractMap.TransitionLabel.endLsn (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#20#0#0@@3|)) |a#20#0#0@@3|)
 :qid |AbstractMapidfy.18:24|
 :skolemid |3340|
 :pattern ( (|#AbstractMap.TransitionLabel.QueryEndLsnLabel| |a#20#0#0@@3|))
)))
(assert (forall ((arg0@@580 T@U) ) (! (= (type (|#AbstractMap.TransitionLabel.FreezeAsLabel| arg0@@580)) DatatypeTypeType)
 :qid |funType:#AbstractMap.TransitionLabel.FreezeAsLabel|
 :pattern ( (|#AbstractMap.TransitionLabel.FreezeAsLabel| arg0@@580))
)))
(assert (forall ((|a#21#0#0@@3| T@U) ) (!  (=> (= (type |a#21#0#0@@3|) DatatypeTypeType) (= (DatatypeCtorId (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#21#0#0@@3|)) |##AbstractMap.TransitionLabel.FreezeAsLabel|))
 :qid |AbstractMapidfy.19:21|
 :skolemid |3341|
 :pattern ( (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#21#0#0@@3|))
)))
(assert (forall ((d@@175 T@U) ) (!  (=> (= (type d@@175) DatatypeTypeType) (= (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@175) (= (DatatypeCtorId d@@175) |##AbstractMap.TransitionLabel.FreezeAsLabel|)))
 :qid |unknown.0:0|
 :skolemid |3342|
 :pattern ( (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@175))
)))
(assert (forall ((d@@176 T@U) ) (!  (=> (and (= (type d@@176) DatatypeTypeType) (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@176)) (exists ((|a#22#0#0@@3| T@U) ) (!  (and (= (type |a#22#0#0@@3|) DatatypeTypeType) (= d@@176 (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#22#0#0@@3|)))
 :qid |AbstractMapidfy.19:21|
 :skolemid |3343|
 :no-pattern (type |a#22#0#0@@3|)
 :no-pattern (U_2_int |a#22#0#0@@3|)
 :no-pattern (U_2_bool |a#22#0#0@@3|)
)))
 :qid |unknown.0:0|
 :skolemid |3344|
 :pattern ( (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@176))
)))
(assert (forall ((|a#23#0#0@@2| T@U) ) (!  (=> (= (type |a#23#0#0@@2|) DatatypeTypeType) (= ($Is (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#23#0#0@@2|) Tclass.AbstractMap.TransitionLabel) ($Is |a#23#0#0@@2| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))
 :qid |AbstractMapidfy.19:21|
 :skolemid |3345|
 :pattern ( ($Is (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#23#0#0@@2|) Tclass.AbstractMap.TransitionLabel))
)))
(assert (forall ((|a#24#0#0@@1| T@U) ($h@@171 T@U) ) (!  (=> (and (and (= (type |a#24#0#0@@1|) DatatypeTypeType) (= (type $h@@171) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@171)) (= ($IsAlloc (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#24#0#0@@1|) Tclass.AbstractMap.TransitionLabel $h@@171) ($IsAlloc |a#24#0#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@171)))
 :qid |AbstractMapidfy.19:21|
 :skolemid |3346|
 :pattern ( ($IsAlloc (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#24#0#0@@1|) Tclass.AbstractMap.TransitionLabel $h@@171))
)))
(assert (forall ((arg0@@581 T@U) ) (! (= (type (AbstractMap.TransitionLabel.stampedMap arg0@@581)) DatatypeTypeType)
 :qid |funType:AbstractMap.TransitionLabel.stampedMap|
 :pattern ( (AbstractMap.TransitionLabel.stampedMap arg0@@581))
)))
(assert (forall ((d@@177 T@U) ($h@@172 T@U) ) (!  (=> (and (and (= (type d@@177) DatatypeTypeType) (= (type $h@@172) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@172) (and (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@177) ($IsAlloc d@@177 Tclass.AbstractMap.TransitionLabel $h@@172)))) ($IsAlloc (AbstractMap.TransitionLabel.stampedMap d@@177) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@172))
 :qid |unknown.0:0|
 :skolemid |3347|
 :pattern ( ($IsAlloc (AbstractMap.TransitionLabel.stampedMap d@@177) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@172))
)))
(assert (forall ((|a#25#0#0@@0| T@U) ) (!  (=> (= (type |a#25#0#0@@0|) DatatypeTypeType) (= (|#AbstractMap.TransitionLabel.FreezeAsLabel| (Lit |a#25#0#0@@0|)) (Lit (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#25#0#0@@0|))))
 :qid |AbstractMapidfy.19:21|
 :skolemid |3348|
 :pattern ( (|#AbstractMap.TransitionLabel.FreezeAsLabel| (Lit |a#25#0#0@@0|)))
)))
(assert (forall ((|a#26#0#0@@0| T@U) ) (!  (=> (= (type |a#26#0#0@@0|) DatatypeTypeType) (= (AbstractMap.TransitionLabel.stampedMap (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#26#0#0@@0|)) |a#26#0#0@@0|))
 :qid |AbstractMapidfy.19:21|
 :skolemid |3349|
 :pattern ( (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#26#0#0@@0|))
)))
(assert (forall ((|a#27#0#0@@0| T@U) ) (!  (=> (= (type |a#27#0#0@@0|) DatatypeTypeType) (< (DtRank |a#27#0#0@@0|) (DtRank (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#27#0#0@@0|))))
 :qid |AbstractMapidfy.19:21|
 :skolemid |3350|
 :pattern ( (|#AbstractMap.TransitionLabel.FreezeAsLabel| |a#27#0#0@@0|))
)))
(assert (= (type |#AbstractMap.TransitionLabel.InternalLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AbstractMap.TransitionLabel.InternalLabel|) |##AbstractMap.TransitionLabel.InternalLabel|))
(assert (forall ((d@@178 T@U) ) (!  (=> (= (type d@@178) DatatypeTypeType) (= (AbstractMap.TransitionLabel.InternalLabel_q d@@178) (= (DatatypeCtorId d@@178) |##AbstractMap.TransitionLabel.InternalLabel|)))
 :qid |unknown.0:0|
 :skolemid |3351|
 :pattern ( (AbstractMap.TransitionLabel.InternalLabel_q d@@178))
)))
(assert (forall ((d@@179 T@U) ) (!  (=> (and (= (type d@@179) DatatypeTypeType) (AbstractMap.TransitionLabel.InternalLabel_q d@@179)) (= d@@179 |#AbstractMap.TransitionLabel.InternalLabel|))
 :qid |unknown.0:0|
 :skolemid |3352|
 :pattern ( (AbstractMap.TransitionLabel.InternalLabel_q d@@179))
)))
(assert ($Is |#AbstractMap.TransitionLabel.InternalLabel| Tclass.AbstractMap.TransitionLabel))
(assert (forall (($h@@173 T@U) ) (!  (=> (and (= (type $h@@173) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@173)) ($IsAlloc |#AbstractMap.TransitionLabel.InternalLabel| Tclass.AbstractMap.TransitionLabel $h@@173))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3353|
 :pattern ( ($IsAlloc |#AbstractMap.TransitionLabel.InternalLabel| Tclass.AbstractMap.TransitionLabel $h@@173))
)))
(assert (= |#AbstractMap.TransitionLabel.InternalLabel| (Lit |#AbstractMap.TransitionLabel.InternalLabel|)))
(assert (forall ((d@@180 T@U) ) (!  (=> (and (= (type d@@180) DatatypeTypeType) (|$IsA#AbstractMap.TransitionLabel| d@@180)) (or (or (or (or (AbstractMap.TransitionLabel.QueryLabel_q d@@180) (AbstractMap.TransitionLabel.PutLabel_q d@@180)) (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@180)) (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@180)) (AbstractMap.TransitionLabel.InternalLabel_q d@@180)))
 :qid |unknown.0:0|
 :skolemid |3354|
 :pattern ( (|$IsA#AbstractMap.TransitionLabel| d@@180))
)))
(assert (forall ((d@@181 T@U) ) (!  (=> (and (= (type d@@181) DatatypeTypeType) ($Is d@@181 Tclass.AbstractMap.TransitionLabel)) (or (or (or (or (AbstractMap.TransitionLabel.QueryLabel_q d@@181) (AbstractMap.TransitionLabel.PutLabel_q d@@181)) (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@181)) (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@181)) (AbstractMap.TransitionLabel.InternalLabel_q d@@181)))
 :qid |unknown.0:0|
 :skolemid |3355|
 :pattern ( (AbstractMap.TransitionLabel.InternalLabel_q d@@181) ($Is d@@181 Tclass.AbstractMap.TransitionLabel))
 :pattern ( (AbstractMap.TransitionLabel.FreezeAsLabel_q d@@181) ($Is d@@181 Tclass.AbstractMap.TransitionLabel))
 :pattern ( (AbstractMap.TransitionLabel.QueryEndLsnLabel_q d@@181) ($Is d@@181 Tclass.AbstractMap.TransitionLabel))
 :pattern ( (AbstractMap.TransitionLabel.PutLabel_q d@@181) ($Is d@@181 Tclass.AbstractMap.TransitionLabel))
 :pattern ( (AbstractMap.TransitionLabel.QueryLabel_q d@@181) ($Is d@@181 Tclass.AbstractMap.TransitionLabel))
)))
(assert (forall ((a@@172 T@U) (b@@122 T@U) ) (!  (=> (and (and (= (type a@@172) DatatypeTypeType) (= (type b@@122) DatatypeTypeType)) (and (AbstractMap.TransitionLabel.QueryLabel_q a@@172) (AbstractMap.TransitionLabel.QueryLabel_q b@@122))) (= (|AbstractMap.TransitionLabel#Equal| a@@172 b@@122)  (and (and (= (AbstractMap.TransitionLabel.endLsn a@@172) (AbstractMap.TransitionLabel.endLsn b@@122)) (|Seq#Equal| (AbstractMap.TransitionLabel.key a@@172) (AbstractMap.TransitionLabel.key b@@122))) (|Seq#Equal| (AbstractMap.TransitionLabel.value a@@172) (AbstractMap.TransitionLabel.value b@@122)))))
 :qid |unknown.0:0|
 :skolemid |3356|
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@172 b@@122) (AbstractMap.TransitionLabel.QueryLabel_q a@@172))
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@172 b@@122) (AbstractMap.TransitionLabel.QueryLabel_q b@@122))
)))
(assert (forall ((a@@173 T@U) (b@@123 T@U) ) (!  (=> (and (and (= (type a@@173) DatatypeTypeType) (= (type b@@123) DatatypeTypeType)) (and (AbstractMap.TransitionLabel.PutLabel_q a@@173) (AbstractMap.TransitionLabel.PutLabel_q b@@123))) (= (|AbstractMap.TransitionLabel#Equal| a@@173 b@@123) (|MsgHistoryMod.MsgHistory#Equal| (AbstractMap.TransitionLabel.puts a@@173) (AbstractMap.TransitionLabel.puts b@@123))))
 :qid |unknown.0:0|
 :skolemid |3357|
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@173 b@@123) (AbstractMap.TransitionLabel.PutLabel_q a@@173))
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@173 b@@123) (AbstractMap.TransitionLabel.PutLabel_q b@@123))
)))
(assert (forall ((a@@174 T@U) (b@@124 T@U) ) (!  (=> (and (and (= (type a@@174) DatatypeTypeType) (= (type b@@124) DatatypeTypeType)) (and (AbstractMap.TransitionLabel.QueryEndLsnLabel_q a@@174) (AbstractMap.TransitionLabel.QueryEndLsnLabel_q b@@124))) (= (|AbstractMap.TransitionLabel#Equal| a@@174 b@@124) (= (AbstractMap.TransitionLabel.endLsn a@@174) (AbstractMap.TransitionLabel.endLsn b@@124))))
 :qid |unknown.0:0|
 :skolemid |3358|
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@174 b@@124) (AbstractMap.TransitionLabel.QueryEndLsnLabel_q a@@174))
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@174 b@@124) (AbstractMap.TransitionLabel.QueryEndLsnLabel_q b@@124))
)))
(assert (forall ((a@@175 T@U) (b@@125 T@U) ) (!  (=> (and (and (= (type a@@175) DatatypeTypeType) (= (type b@@125) DatatypeTypeType)) (and (AbstractMap.TransitionLabel.FreezeAsLabel_q a@@175) (AbstractMap.TransitionLabel.FreezeAsLabel_q b@@125))) (= (|AbstractMap.TransitionLabel#Equal| a@@175 b@@125) (|StampedMod.Stamped#Equal| (AbstractMap.TransitionLabel.stampedMap a@@175) (AbstractMap.TransitionLabel.stampedMap b@@125))))
 :qid |unknown.0:0|
 :skolemid |3359|
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@175 b@@125) (AbstractMap.TransitionLabel.FreezeAsLabel_q a@@175))
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@175 b@@125) (AbstractMap.TransitionLabel.FreezeAsLabel_q b@@125))
)))
(assert (forall ((a@@176 T@U) (b@@126 T@U) ) (!  (=> (and (and (= (type a@@176) DatatypeTypeType) (= (type b@@126) DatatypeTypeType)) (and (AbstractMap.TransitionLabel.InternalLabel_q a@@176) (AbstractMap.TransitionLabel.InternalLabel_q b@@126))) (= (|AbstractMap.TransitionLabel#Equal| a@@176 b@@126) true))
 :qid |unknown.0:0|
 :skolemid |3360|
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@176 b@@126) (AbstractMap.TransitionLabel.InternalLabel_q a@@176))
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@176 b@@126) (AbstractMap.TransitionLabel.InternalLabel_q b@@126))
)))
(assert (forall ((a@@177 T@U) (b@@127 T@U) ) (!  (=> (and (= (type a@@177) DatatypeTypeType) (= (type b@@127) DatatypeTypeType)) (= (|AbstractMap.TransitionLabel#Equal| a@@177 b@@127) (= a@@177 b@@127)))
 :qid |unknown.0:0|
 :skolemid |3361|
 :pattern ( (|AbstractMap.TransitionLabel#Equal| a@@177 b@@127))
)))
(assert (forall ((arg0@@582 T@U) ) (! (= (type (|#AbstractMap.Variables.Variables| arg0@@582)) DatatypeTypeType)
 :qid |funType:#AbstractMap.Variables.Variables|
 :pattern ( (|#AbstractMap.Variables.Variables| arg0@@582))
)))
(assert (forall ((|a#33#0#0@@1| T@U) ) (!  (=> (= (type |a#33#0#0@@1|) DatatypeTypeType) (= (DatatypeCtorId (|#AbstractMap.Variables.Variables| |a#33#0#0@@1|)) |##AbstractMap.Variables.Variables|))
 :qid |AbstractMapidfy.22:34|
 :skolemid |3362|
 :pattern ( (|#AbstractMap.Variables.Variables| |a#33#0#0@@1|))
)))
(assert (forall ((d@@182 T@U) ) (!  (=> (= (type d@@182) DatatypeTypeType) (= (AbstractMap.Variables.Variables_q d@@182) (= (DatatypeCtorId d@@182) |##AbstractMap.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |3363|
 :pattern ( (AbstractMap.Variables.Variables_q d@@182))
)))
(assert (forall ((d@@183 T@U) ) (!  (=> (and (= (type d@@183) DatatypeTypeType) (AbstractMap.Variables.Variables_q d@@183)) (exists ((|a#34#0#0@@1| T@U) ) (!  (and (= (type |a#34#0#0@@1|) DatatypeTypeType) (= d@@183 (|#AbstractMap.Variables.Variables| |a#34#0#0@@1|)))
 :qid |AbstractMapidfy.22:34|
 :skolemid |3364|
 :no-pattern (type |a#34#0#0@@1|)
 :no-pattern (U_2_int |a#34#0#0@@1|)
 :no-pattern (U_2_bool |a#34#0#0@@1|)
)))
 :qid |unknown.0:0|
 :skolemid |3365|
 :pattern ( (AbstractMap.Variables.Variables_q d@@183))
)))
(assert (= (type Tclass.AbstractMap.Variables) TyType))
(assert (= (Tag Tclass.AbstractMap.Variables) Tagclass.AbstractMap.Variables))
(assert (= (TagFamily Tclass.AbstractMap.Variables) tytagFamily$Variables))
(assert (forall ((bx@@170 T@U) ) (!  (=> (and (= (type bx@@170) BoxType) ($IsBox bx@@170 Tclass.AbstractMap.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@170)) bx@@170) ($Is ($Unbox DatatypeTypeType bx@@170) Tclass.AbstractMap.Variables)))
 :qid |unknown.0:0|
 :skolemid |3366|
 :pattern ( ($IsBox bx@@170 Tclass.AbstractMap.Variables))
)))
(assert (forall ((|a#35#0#0@@1| T@U) ) (!  (=> (= (type |a#35#0#0@@1|) DatatypeTypeType) (= ($Is (|#AbstractMap.Variables.Variables| |a#35#0#0@@1|) Tclass.AbstractMap.Variables) ($Is |a#35#0#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))
 :qid |AbstractMapidfy.22:34|
 :skolemid |3367|
 :pattern ( ($Is (|#AbstractMap.Variables.Variables| |a#35#0#0@@1|) Tclass.AbstractMap.Variables))
)))
(assert (forall ((|a#36#0#0@@1| T@U) ($h@@174 T@U) ) (!  (=> (and (and (= (type |a#36#0#0@@1|) DatatypeTypeType) (= (type $h@@174) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@174)) (= ($IsAlloc (|#AbstractMap.Variables.Variables| |a#36#0#0@@1|) Tclass.AbstractMap.Variables $h@@174) ($IsAlloc |a#36#0#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@174)))
 :qid |AbstractMapidfy.22:34|
 :skolemid |3368|
 :pattern ( ($IsAlloc (|#AbstractMap.Variables.Variables| |a#36#0#0@@1|) Tclass.AbstractMap.Variables $h@@174))
)))
(assert (forall ((d@@184 T@U) ($h@@175 T@U) ) (!  (=> (and (and (= (type d@@184) DatatypeTypeType) (= (type $h@@175) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@175) (and (AbstractMap.Variables.Variables_q d@@184) ($IsAlloc d@@184 Tclass.AbstractMap.Variables $h@@175)))) ($IsAlloc (AbstractMap.Variables.stampedMap d@@184) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@175))
 :qid |unknown.0:0|
 :skolemid |3369|
 :pattern ( ($IsAlloc (AbstractMap.Variables.stampedMap d@@184) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@175))
)))
(assert (forall ((|a#37#0#0@@1| T@U) ) (!  (=> (= (type |a#37#0#0@@1|) DatatypeTypeType) (= (|#AbstractMap.Variables.Variables| (Lit |a#37#0#0@@1|)) (Lit (|#AbstractMap.Variables.Variables| |a#37#0#0@@1|))))
 :qid |AbstractMapidfy.22:34|
 :skolemid |3370|
 :pattern ( (|#AbstractMap.Variables.Variables| (Lit |a#37#0#0@@1|)))
)))
(assert (forall ((|a#38#0#0@@1| T@U) ) (!  (=> (= (type |a#38#0#0@@1|) DatatypeTypeType) (= (AbstractMap.Variables.stampedMap (|#AbstractMap.Variables.Variables| |a#38#0#0@@1|)) |a#38#0#0@@1|))
 :qid |AbstractMapidfy.22:34|
 :skolemid |3371|
 :pattern ( (|#AbstractMap.Variables.Variables| |a#38#0#0@@1|))
)))
(assert (forall ((|a#39#0#0@@2| T@U) ) (!  (=> (= (type |a#39#0#0@@2|) DatatypeTypeType) (< (DtRank |a#39#0#0@@2|) (DtRank (|#AbstractMap.Variables.Variables| |a#39#0#0@@2|))))
 :qid |AbstractMapidfy.22:34|
 :skolemid |3372|
 :pattern ( (|#AbstractMap.Variables.Variables| |a#39#0#0@@2|))
)))
(assert (forall ((d@@185 T@U) ) (!  (=> (and (= (type d@@185) DatatypeTypeType) (|$IsA#AbstractMap.Variables| d@@185)) (AbstractMap.Variables.Variables_q d@@185))
 :qid |unknown.0:0|
 :skolemid |3373|
 :pattern ( (|$IsA#AbstractMap.Variables| d@@185))
)))
(assert (forall ((d@@186 T@U) ) (!  (=> (and (= (type d@@186) DatatypeTypeType) ($Is d@@186 Tclass.AbstractMap.Variables)) (AbstractMap.Variables.Variables_q d@@186))
 :qid |unknown.0:0|
 :skolemid |3374|
 :pattern ( (AbstractMap.Variables.Variables_q d@@186) ($Is d@@186 Tclass.AbstractMap.Variables))
)))
(assert (forall ((a@@178 T@U) (b@@128 T@U) ) (!  (=> (and (and (= (type a@@178) DatatypeTypeType) (= (type b@@128) DatatypeTypeType)) true) (= (|AbstractMap.Variables#Equal| a@@178 b@@128) (|StampedMod.Stamped#Equal| (AbstractMap.Variables.stampedMap a@@178) (AbstractMap.Variables.stampedMap b@@128))))
 :qid |unknown.0:0|
 :skolemid |3375|
 :pattern ( (|AbstractMap.Variables#Equal| a@@178 b@@128))
)))
(assert (forall ((a@@179 T@U) (b@@129 T@U) ) (!  (=> (and (= (type a@@179) DatatypeTypeType) (= (type b@@129) DatatypeTypeType)) (= (|AbstractMap.Variables#Equal| a@@179 b@@129) (= a@@179 b@@129)))
 :qid |unknown.0:0|
 :skolemid |3376|
 :pattern ( (|AbstractMap.Variables#Equal| a@@179 b@@129))
)))
(assert (= (type Tclass.AbstractMap.__default) TyType))
(assert (= (Tag Tclass.AbstractMap.__default) Tagclass.AbstractMap.__default))
(assert (= (TagFamily Tclass.AbstractMap.__default) tytagFamily$_default))
(assert (forall ((bx@@171 T@U) ) (!  (=> (and (= (type bx@@171) BoxType) ($IsBox bx@@171 Tclass.AbstractMap.__default)) (and (= ($Box ($Unbox refType bx@@171)) bx@@171) ($Is ($Unbox refType bx@@171) Tclass.AbstractMap.__default)))
 :qid |unknown.0:0|
 :skolemid |3377|
 :pattern ( ($IsBox bx@@171 Tclass.AbstractMap.__default))
)))
(assert (forall (($o@@57 T@U) ) (!  (=> (= (type $o@@57) refType) (= ($Is $o@@57 Tclass.AbstractMap.__default)  (or (= $o@@57 null) (= (dtype $o@@57) Tclass.AbstractMap.__default))))
 :qid |unknown.0:0|
 :skolemid |3378|
 :pattern ( ($Is $o@@57 Tclass.AbstractMap.__default))
)))
(assert (forall (($o@@58 T@U) ($h@@176 T@U) ) (!  (=> (and (= (type $o@@58) refType) (= (type $h@@176) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@58 Tclass.AbstractMap.__default $h@@176)  (or (= $o@@58 null) (U_2_bool (MapType1Select (MapType0Select $h@@176 $o@@58) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3379|
 :pattern ( ($IsAlloc $o@@58 Tclass.AbstractMap.__default $h@@176))
)))
(assert  (=> true (forall ((|v#0@@198| T@U) (|v'#0@@107| T@U) (|lbl#0@@67| T@U) ) (!  (=> (and (and (and (= (type |v#0@@198|) DatatypeTypeType) (= (type |v'#0@@107|) DatatypeTypeType)) (= (type |lbl#0@@67|) DatatypeTypeType)) (or (|AbstractMap.__default.Query#canCall| |v#0@@198| |v'#0@@107| |lbl#0@@67|) (and (and ($Is |v#0@@198| Tclass.AbstractMap.Variables) ($Is |v'#0@@107| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@67| Tclass.AbstractMap.TransitionLabel)))) true)
 :qid |AbstractMapidfy.25:19|
 :skolemid |3380|
 :pattern ( (AbstractMap.__default.Query |v#0@@198| |v'#0@@107| |lbl#0@@67|))
))))
(assert (forall ((|v#0@@199| T@U) (|v'#0@@108| T@U) (|lbl#0@@68| T@U) ) (!  (=> (and (and (and (= (type |v#0@@199|) DatatypeTypeType) (= (type |v'#0@@108|) DatatypeTypeType)) (= (type |lbl#0@@68|) DatatypeTypeType)) (and (and ($Is |v#0@@199| Tclass.AbstractMap.Variables) ($Is |v'#0@@108| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@68| Tclass.AbstractMap.TransitionLabel))) (= (|AbstractMap.__default.Query#requires| |v#0@@199| |v'#0@@108| |lbl#0@@68|) true))
 :qid |AbstractMapidfy.25:19|
 :skolemid |3381|
 :pattern ( (|AbstractMap.__default.Query#requires| |v#0@@199| |v'#0@@108| |lbl#0@@68|))
)))
(assert  (=> true (forall ((|v#0@@200| T@U) (|v'#0@@109| T@U) (|lbl#0@@69| T@U) ) (!  (=> (and (and (and (= (type |v#0@@200|) DatatypeTypeType) (= (type |v'#0@@109|) DatatypeTypeType)) (= (type |lbl#0@@69|) DatatypeTypeType)) (or (|AbstractMap.__default.Query#canCall| |v#0@@200| |v'#0@@109| |lbl#0@@69|) (and (and ($Is |v#0@@200| Tclass.AbstractMap.Variables) ($Is |v'#0@@109| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@69| Tclass.AbstractMap.TransitionLabel)))) (and (=> (AbstractMap.TransitionLabel.QueryLabel_q |lbl#0@@69|) (and (and (AbstractMap.Variables.Variables_q |v#0@@200|) (StampedMod.Stamped.Stamped_q (AbstractMap.Variables.stampedMap |v#0@@200|))) (=> (= (AbstractMap.TransitionLabel.endLsn |lbl#0@@69|) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap |v#0@@200|))) (and (and (AbstractMap.Variables.Variables_q |v#0@@200|) (StampedMod.Stamped.Stamped_q (AbstractMap.Variables.stampedMap |v#0@@200|))) (=> (|Seq#Equal| (AbstractMap.TransitionLabel.value |lbl#0@@69|) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value (AbstractMap.Variables.stampedMap |v#0@@200|)))) ($Box (AbstractMap.TransitionLabel.key |lbl#0@@69|)))))) (and (|$IsA#AbstractMap.Variables| |v'#0@@109|) (|$IsA#AbstractMap.Variables| |v#0@@200|))))))) (= (AbstractMap.__default.Query |v#0@@200| |v'#0@@109| |lbl#0@@69|)  (and (and (AbstractMap.TransitionLabel.QueryLabel_q |lbl#0@@69|) (= (AbstractMap.TransitionLabel.endLsn |lbl#0@@69|) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap |v#0@@200|)))) (and (|Seq#Equal| (AbstractMap.TransitionLabel.value |lbl#0@@69|) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value (AbstractMap.Variables.stampedMap |v#0@@200|)))) ($Box (AbstractMap.TransitionLabel.key |lbl#0@@69|)))))) (|AbstractMap.Variables#Equal| |v'#0@@109| |v#0@@200|))))))
 :qid |AbstractMapidfy.25:19|
 :skolemid |3382|
 :pattern ( (AbstractMap.__default.Query |v#0@@200| |v'#0@@109| |lbl#0@@69|))
))))
(assert  (=> true (forall ((|v#0@@201| T@U) (|v'#0@@110| T@U) (|lbl#0@@70| T@U) ) (!  (=> (and (and (and (= (type |v#0@@201|) DatatypeTypeType) (= (type |v'#0@@110|) DatatypeTypeType)) (= (type |lbl#0@@70|) DatatypeTypeType)) (or (|AbstractMap.__default.Query#canCall| (Lit |v#0@@201|) (Lit |v'#0@@110|) (Lit |lbl#0@@70|)) (and (and ($Is |v#0@@201| Tclass.AbstractMap.Variables) ($Is |v'#0@@110| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@70| Tclass.AbstractMap.TransitionLabel)))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.QueryLabel_q (Lit |lbl#0@@70|))))) (and (and (AbstractMap.Variables.Variables_q (Lit |v#0@@201|)) (StampedMod.Stamped.Stamped_q (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@201|))))) (=> (= (LitInt (AbstractMap.TransitionLabel.endLsn (Lit |lbl#0@@70|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@201|)))))) (and (and (AbstractMap.Variables.Variables_q (Lit |v#0@@201|)) (StampedMod.Stamped.Stamped_q (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@201|))))) (=> (|Seq#Equal| (AbstractMap.TransitionLabel.value (Lit |lbl#0@@70|)) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@201|))))))) ($Box (Lit (AbstractMap.TransitionLabel.key (Lit |lbl#0@@70|)))))))) (and (|$IsA#AbstractMap.Variables| (Lit |v'#0@@110|)) (|$IsA#AbstractMap.Variables| (Lit |v#0@@201|)))))))) (= (AbstractMap.__default.Query (Lit |v#0@@201|) (Lit |v'#0@@110|) (Lit |lbl#0@@70|))  (and (and (AbstractMap.TransitionLabel.QueryLabel_q (Lit |lbl#0@@70|)) (= (LitInt (AbstractMap.TransitionLabel.endLsn (Lit |lbl#0@@70|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@201|))))))) (and (|Seq#Equal| (AbstractMap.TransitionLabel.value (Lit |lbl#0@@70|)) (ValueMessage.Message.value ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit ($Unbox (IMapType BoxType BoxType) (StampedMod.Stamped.value (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@201|))))))) ($Box (Lit (AbstractMap.TransitionLabel.key (Lit |lbl#0@@70|)))))))) (|AbstractMap.Variables#Equal| |v'#0@@110| |v#0@@201|))))))
 :qid |AbstractMapidfy.25:19|
 :weight 3
 :skolemid |3383|
 :pattern ( (AbstractMap.__default.Query (Lit |v#0@@201|) (Lit |v'#0@@110|) (Lit |lbl#0@@70|)))
))))
(assert  (=> true (forall ((|v#0@@202| T@U) (|v'#0@@111| T@U) (|lbl#0@@71| T@U) ) (!  (=> (and (and (and (= (type |v#0@@202|) DatatypeTypeType) (= (type |v'#0@@111|) DatatypeTypeType)) (= (type |lbl#0@@71|) DatatypeTypeType)) (or (|AbstractMap.__default.Put#canCall| |v#0@@202| |v'#0@@111| |lbl#0@@71|) (and (and ($Is |v#0@@202| Tclass.AbstractMap.Variables) ($Is |v'#0@@111| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@71| Tclass.AbstractMap.TransitionLabel)))) true)
 :qid |AbstractMapidfy.34:17|
 :skolemid |3384|
 :pattern ( (AbstractMap.__default.Put |v#0@@202| |v'#0@@111| |lbl#0@@71|))
))))
(assert (forall ((|v#0@@203| T@U) (|v'#0@@112| T@U) (|lbl#0@@72| T@U) ) (!  (=> (and (and (and (= (type |v#0@@203|) DatatypeTypeType) (= (type |v'#0@@112|) DatatypeTypeType)) (= (type |lbl#0@@72|) DatatypeTypeType)) (and (and ($Is |v#0@@203| Tclass.AbstractMap.Variables) ($Is |v'#0@@112| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@72| Tclass.AbstractMap.TransitionLabel))) (= (|AbstractMap.__default.Put#requires| |v#0@@203| |v'#0@@112| |lbl#0@@72|) true))
 :qid |AbstractMapidfy.34:17|
 :skolemid |3385|
 :pattern ( (|AbstractMap.__default.Put#requires| |v#0@@203| |v'#0@@112| |lbl#0@@72|))
)))
(assert  (=> true (forall ((|v#0@@204| T@U) (|v'#0@@113| T@U) (|lbl#0@@73| T@U) ) (!  (=> (and (and (and (= (type |v#0@@204|) DatatypeTypeType) (= (type |v'#0@@113|) DatatypeTypeType)) (= (type |lbl#0@@73|) DatatypeTypeType)) (or (|AbstractMap.__default.Put#canCall| |v#0@@204| |v'#0@@113| |lbl#0@@73|) (and (and ($Is |v#0@@204| Tclass.AbstractMap.Variables) ($Is |v'#0@@113| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@73| Tclass.AbstractMap.TransitionLabel)))) (and (=> (AbstractMap.TransitionLabel.PutLabel_q |lbl#0@@73|) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (AbstractMap.TransitionLabel.puts |lbl#0@@73|)) (=> (MsgHistoryMod.MsgHistory.WF (AbstractMap.TransitionLabel.puts |lbl#0@@73|)) (and (and (and (AbstractMap.Variables.Variables_q |v#0@@204|) (StampedMod.Stamped.Stamped_q (AbstractMap.Variables.stampedMap |v#0@@204|))) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (AbstractMap.TransitionLabel.puts |lbl#0@@73|) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap |v#0@@204|)))) (=> (MsgHistoryMod.MsgHistory.CanFollow (AbstractMap.TransitionLabel.puts |lbl#0@@73|) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap |v#0@@204|))) (and (and (|$IsA#StampedMod.Stamped| (AbstractMap.Variables.stampedMap |v'#0@@113|)) (|$IsA#StampedMod.Stamped| (MsgHistoryMod.__default.MapPlusHistory (AbstractMap.Variables.stampedMap |v#0@@204|) (AbstractMap.TransitionLabel.puts |lbl#0@@73|)))) (and (AbstractMap.Variables.Variables_q |v'#0@@113|) (and (AbstractMap.Variables.Variables_q |v#0@@204|) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (AbstractMap.Variables.stampedMap |v#0@@204|) (AbstractMap.TransitionLabel.puts |lbl#0@@73|)))))))))) (= (AbstractMap.__default.Put |v#0@@204| |v'#0@@113| |lbl#0@@73|)  (and (and (and (AbstractMap.TransitionLabel.PutLabel_q |lbl#0@@73|) (MsgHistoryMod.MsgHistory.WF (AbstractMap.TransitionLabel.puts |lbl#0@@73|))) (MsgHistoryMod.MsgHistory.CanFollow (AbstractMap.TransitionLabel.puts |lbl#0@@73|) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap |v#0@@204|)))) (|StampedMod.Stamped#Equal| (AbstractMap.Variables.stampedMap |v'#0@@113|) (MsgHistoryMod.__default.MapPlusHistory (AbstractMap.Variables.stampedMap |v#0@@204|) (AbstractMap.TransitionLabel.puts |lbl#0@@73|)))))))
 :qid |AbstractMapidfy.34:17|
 :skolemid |3386|
 :pattern ( (AbstractMap.__default.Put |v#0@@204| |v'#0@@113| |lbl#0@@73|))
))))
(assert  (=> true (forall ((|v#0@@205| T@U) (|v'#0@@114| T@U) (|lbl#0@@74| T@U) ) (!  (=> (and (and (and (= (type |v#0@@205|) DatatypeTypeType) (= (type |v'#0@@114|) DatatypeTypeType)) (= (type |lbl#0@@74|) DatatypeTypeType)) (or (|AbstractMap.__default.Put#canCall| (Lit |v#0@@205|) (Lit |v'#0@@114|) (Lit |lbl#0@@74|)) (and (and ($Is |v#0@@205| Tclass.AbstractMap.Variables) ($Is |v'#0@@114| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@74| Tclass.AbstractMap.TransitionLabel)))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.PutLabel_q (Lit |lbl#0@@74|))))) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|)))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|))))))) (and (and (and (AbstractMap.Variables.Variables_q (Lit |v#0@@205|)) (StampedMod.Stamped.Stamped_q (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@205|))))) (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@205|))))))) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.CanFollow (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@205|))))))))) (and (and (|$IsA#StampedMod.Stamped| (Lit (AbstractMap.Variables.stampedMap (Lit |v'#0@@114|)))) (|$IsA#StampedMod.Stamped| (Lit (MsgHistoryMod.__default.MapPlusHistory (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@205|))) (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|))))))) (and (AbstractMap.Variables.Variables_q (Lit |v'#0@@114|)) (and (AbstractMap.Variables.Variables_q (Lit |v#0@@205|)) (|MsgHistoryMod.__default.MapPlusHistory#canCall| (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@205|))) (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|)))))))))))) (= (AbstractMap.__default.Put (Lit |v#0@@205|) (Lit |v'#0@@114|) (Lit |lbl#0@@74|))  (and (and (and (AbstractMap.TransitionLabel.PutLabel_q (Lit |lbl#0@@74|)) (MsgHistoryMod.MsgHistory.WF (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|))))) (MsgHistoryMod.MsgHistory.CanFollow (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@205|))))))) (|StampedMod.Stamped#Equal| (AbstractMap.Variables.stampedMap (Lit |v'#0@@114|)) (MsgHistoryMod.__default.MapPlusHistory (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@205|))) (Lit (AbstractMap.TransitionLabel.puts (Lit |lbl#0@@74|)))))))))
 :qid |AbstractMapidfy.34:17|
 :weight 3
 :skolemid |3387|
 :pattern ( (AbstractMap.__default.Put (Lit |v#0@@205|) (Lit |v'#0@@114|) (Lit |lbl#0@@74|)))
))))
(assert  (=> true (forall ((|v#0@@206| T@U) (|v'#0@@115| T@U) (|lbl#0@@75| T@U) ) (!  (=> (and (and (and (= (type |v#0@@206|) DatatypeTypeType) (= (type |v'#0@@115|) DatatypeTypeType)) (= (type |lbl#0@@75|) DatatypeTypeType)) (or (|AbstractMap.__default.QueryEndLsn#canCall| |v#0@@206| |v'#0@@115| |lbl#0@@75|) (and (and ($Is |v#0@@206| Tclass.AbstractMap.Variables) ($Is |v'#0@@115| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@75| Tclass.AbstractMap.TransitionLabel)))) true)
 :qid |AbstractMapidfy.42:25|
 :skolemid |3388|
 :pattern ( (AbstractMap.__default.QueryEndLsn |v#0@@206| |v'#0@@115| |lbl#0@@75|))
))))
(assert (forall ((|v#0@@207| T@U) (|v'#0@@116| T@U) (|lbl#0@@76| T@U) ) (!  (=> (and (and (and (= (type |v#0@@207|) DatatypeTypeType) (= (type |v'#0@@116|) DatatypeTypeType)) (= (type |lbl#0@@76|) DatatypeTypeType)) (and (and ($Is |v#0@@207| Tclass.AbstractMap.Variables) ($Is |v'#0@@116| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@76| Tclass.AbstractMap.TransitionLabel))) (= (|AbstractMap.__default.QueryEndLsn#requires| |v#0@@207| |v'#0@@116| |lbl#0@@76|) true))
 :qid |AbstractMapidfy.42:25|
 :skolemid |3389|
 :pattern ( (|AbstractMap.__default.QueryEndLsn#requires| |v#0@@207| |v'#0@@116| |lbl#0@@76|))
)))
(assert  (=> true (forall ((|v#0@@208| T@U) (|v'#0@@117| T@U) (|lbl#0@@77| T@U) ) (!  (=> (and (and (and (= (type |v#0@@208|) DatatypeTypeType) (= (type |v'#0@@117|) DatatypeTypeType)) (= (type |lbl#0@@77|) DatatypeTypeType)) (or (|AbstractMap.__default.QueryEndLsn#canCall| |v#0@@208| |v'#0@@117| |lbl#0@@77|) (and (and ($Is |v#0@@208| Tclass.AbstractMap.Variables) ($Is |v'#0@@117| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@77| Tclass.AbstractMap.TransitionLabel)))) (and (=> (AbstractMap.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@77|) (and (and (AbstractMap.Variables.Variables_q |v#0@@208|) (StampedMod.Stamped.Stamped_q (AbstractMap.Variables.stampedMap |v#0@@208|))) (=> (= (AbstractMap.TransitionLabel.endLsn |lbl#0@@77|) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap |v#0@@208|))) (and (|$IsA#AbstractMap.Variables| |v'#0@@117|) (|$IsA#AbstractMap.Variables| |v#0@@208|))))) (= (AbstractMap.__default.QueryEndLsn |v#0@@208| |v'#0@@117| |lbl#0@@77|)  (and (and (AbstractMap.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@77|) (= (AbstractMap.TransitionLabel.endLsn |lbl#0@@77|) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap |v#0@@208|)))) (|AbstractMap.Variables#Equal| |v'#0@@117| |v#0@@208|)))))
 :qid |AbstractMapidfy.42:25|
 :skolemid |3390|
 :pattern ( (AbstractMap.__default.QueryEndLsn |v#0@@208| |v'#0@@117| |lbl#0@@77|))
))))
(assert  (=> true (forall ((|v#0@@209| T@U) (|v'#0@@118| T@U) (|lbl#0@@78| T@U) ) (!  (=> (and (and (and (= (type |v#0@@209|) DatatypeTypeType) (= (type |v'#0@@118|) DatatypeTypeType)) (= (type |lbl#0@@78|) DatatypeTypeType)) (or (|AbstractMap.__default.QueryEndLsn#canCall| (Lit |v#0@@209|) (Lit |v'#0@@118|) (Lit |lbl#0@@78|)) (and (and ($Is |v#0@@209| Tclass.AbstractMap.Variables) ($Is |v'#0@@118| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@78| Tclass.AbstractMap.TransitionLabel)))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@78|))))) (and (and (AbstractMap.Variables.Variables_q (Lit |v#0@@209|)) (StampedMod.Stamped.Stamped_q (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@209|))))) (=> (= (LitInt (AbstractMap.TransitionLabel.endLsn (Lit |lbl#0@@78|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@209|)))))) (and (|$IsA#AbstractMap.Variables| (Lit |v'#0@@118|)) (|$IsA#AbstractMap.Variables| (Lit |v#0@@209|)))))) (= (AbstractMap.__default.QueryEndLsn (Lit |v#0@@209|) (Lit |v'#0@@118|) (Lit |lbl#0@@78|))  (and (and (AbstractMap.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@78|)) (= (LitInt (AbstractMap.TransitionLabel.endLsn (Lit |lbl#0@@78|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@209|))))))) (|AbstractMap.Variables#Equal| |v'#0@@118| |v#0@@209|)))))
 :qid |AbstractMapidfy.42:25|
 :weight 3
 :skolemid |3391|
 :pattern ( (AbstractMap.__default.QueryEndLsn (Lit |v#0@@209|) (Lit |v'#0@@118|) (Lit |lbl#0@@78|)))
))))
(assert  (=> true (forall ((|v#0@@210| T@U) (|v'#0@@119| T@U) (|lbl#0@@79| T@U) ) (!  (=> (and (and (and (= (type |v#0@@210|) DatatypeTypeType) (= (type |v'#0@@119|) DatatypeTypeType)) (= (type |lbl#0@@79|) DatatypeTypeType)) (or (|AbstractMap.__default.FreezeAs#canCall| |v#0@@210| |v'#0@@119| |lbl#0@@79|) (and (and ($Is |v#0@@210| Tclass.AbstractMap.Variables) ($Is |v'#0@@119| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@79| Tclass.AbstractMap.TransitionLabel)))) true)
 :qid |AbstractMapidfy.49:22|
 :skolemid |3392|
 :pattern ( (AbstractMap.__default.FreezeAs |v#0@@210| |v'#0@@119| |lbl#0@@79|))
))))
(assert (forall ((|v#0@@211| T@U) (|v'#0@@120| T@U) (|lbl#0@@80| T@U) ) (!  (=> (and (and (and (= (type |v#0@@211|) DatatypeTypeType) (= (type |v'#0@@120|) DatatypeTypeType)) (= (type |lbl#0@@80|) DatatypeTypeType)) (and (and ($Is |v#0@@211| Tclass.AbstractMap.Variables) ($Is |v'#0@@120| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@80| Tclass.AbstractMap.TransitionLabel))) (= (|AbstractMap.__default.FreezeAs#requires| |v#0@@211| |v'#0@@120| |lbl#0@@80|) true))
 :qid |AbstractMapidfy.49:22|
 :skolemid |3393|
 :pattern ( (|AbstractMap.__default.FreezeAs#requires| |v#0@@211| |v'#0@@120| |lbl#0@@80|))
)))
(assert  (=> true (forall ((|v#0@@212| T@U) (|v'#0@@121| T@U) (|lbl#0@@81| T@U) ) (!  (=> (and (and (and (= (type |v#0@@212|) DatatypeTypeType) (= (type |v'#0@@121|) DatatypeTypeType)) (= (type |lbl#0@@81|) DatatypeTypeType)) (or (|AbstractMap.__default.FreezeAs#canCall| |v#0@@212| |v'#0@@121| |lbl#0@@81|) (and (and ($Is |v#0@@212| Tclass.AbstractMap.Variables) ($Is |v'#0@@121| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@81| Tclass.AbstractMap.TransitionLabel)))) (and (=> (AbstractMap.TransitionLabel.FreezeAsLabel_q |lbl#0@@81|) (and (and (and (|$IsA#StampedMod.Stamped| (AbstractMap.TransitionLabel.stampedMap |lbl#0@@81|)) (|$IsA#StampedMod.Stamped| (AbstractMap.Variables.stampedMap |v#0@@212|))) (AbstractMap.Variables.Variables_q |v#0@@212|)) (=> (|StampedMod.Stamped#Equal| (AbstractMap.TransitionLabel.stampedMap |lbl#0@@81|) (AbstractMap.Variables.stampedMap |v#0@@212|)) (and (|$IsA#AbstractMap.Variables| |v'#0@@121|) (|$IsA#AbstractMap.Variables| |v#0@@212|))))) (= (AbstractMap.__default.FreezeAs |v#0@@212| |v'#0@@121| |lbl#0@@81|)  (and (and (AbstractMap.TransitionLabel.FreezeAsLabel_q |lbl#0@@81|) (|StampedMod.Stamped#Equal| (AbstractMap.TransitionLabel.stampedMap |lbl#0@@81|) (AbstractMap.Variables.stampedMap |v#0@@212|))) (|AbstractMap.Variables#Equal| |v'#0@@121| |v#0@@212|)))))
 :qid |AbstractMapidfy.49:22|
 :skolemid |3394|
 :pattern ( (AbstractMap.__default.FreezeAs |v#0@@212| |v'#0@@121| |lbl#0@@81|))
))))
(assert  (=> true (forall ((|v#0@@213| T@U) (|v'#0@@122| T@U) (|lbl#0@@82| T@U) ) (!  (=> (and (and (and (= (type |v#0@@213|) DatatypeTypeType) (= (type |v'#0@@122|) DatatypeTypeType)) (= (type |lbl#0@@82|) DatatypeTypeType)) (or (|AbstractMap.__default.FreezeAs#canCall| (Lit |v#0@@213|) (Lit |v'#0@@122|) (Lit |lbl#0@@82|)) (and (and ($Is |v#0@@213| Tclass.AbstractMap.Variables) ($Is |v'#0@@122| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@82| Tclass.AbstractMap.TransitionLabel)))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.FreezeAsLabel_q (Lit |lbl#0@@82|))))) (and (and (and (|$IsA#StampedMod.Stamped| (Lit (AbstractMap.TransitionLabel.stampedMap (Lit |lbl#0@@82|)))) (|$IsA#StampedMod.Stamped| (Lit (AbstractMap.Variables.stampedMap (Lit |v#0@@213|))))) (AbstractMap.Variables.Variables_q (Lit |v#0@@213|))) (=> (|StampedMod.Stamped#Equal| (AbstractMap.TransitionLabel.stampedMap (Lit |lbl#0@@82|)) (AbstractMap.Variables.stampedMap (Lit |v#0@@213|))) (and (|$IsA#AbstractMap.Variables| (Lit |v'#0@@122|)) (|$IsA#AbstractMap.Variables| (Lit |v#0@@213|)))))) (= (AbstractMap.__default.FreezeAs (Lit |v#0@@213|) (Lit |v'#0@@122|) (Lit |lbl#0@@82|))  (and (and (AbstractMap.TransitionLabel.FreezeAsLabel_q (Lit |lbl#0@@82|)) (|StampedMod.Stamped#Equal| (AbstractMap.TransitionLabel.stampedMap (Lit |lbl#0@@82|)) (AbstractMap.Variables.stampedMap (Lit |v#0@@213|)))) (|AbstractMap.Variables#Equal| |v'#0@@122| |v#0@@213|)))))
 :qid |AbstractMapidfy.49:22|
 :weight 3
 :skolemid |3395|
 :pattern ( (AbstractMap.__default.FreezeAs (Lit |v#0@@213|) (Lit |v'#0@@122|) (Lit |lbl#0@@82|)))
))))
(assert  (=> true (forall ((|v#0@@214| T@U) (|persistentMap#0| T@U) ) (!  (=> (and (and (= (type |v#0@@214|) DatatypeTypeType) (= (type |persistentMap#0|) DatatypeTypeType)) (or (|AbstractMap.__default.Init#canCall| |v#0@@214| |persistentMap#0|) (and ($Is |v#0@@214| Tclass.AbstractMap.Variables) ($Is |persistentMap#0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) true)
 :qid |AbstractMapidfy.57:18|
 :skolemid |3396|
 :pattern ( (AbstractMap.__default.Init |v#0@@214| |persistentMap#0|))
))))
(assert (forall ((|v#0@@215| T@U) (|persistentMap#0@@0| T@U) ) (!  (=> (and (and (= (type |v#0@@215|) DatatypeTypeType) (= (type |persistentMap#0@@0|) DatatypeTypeType)) (and ($Is |v#0@@215| Tclass.AbstractMap.Variables) ($Is |persistentMap#0@@0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))) (= (|AbstractMap.__default.Init#requires| |v#0@@215| |persistentMap#0@@0|) true))
 :qid |AbstractMapidfy.57:18|
 :skolemid |3397|
 :pattern ( (|AbstractMap.__default.Init#requires| |v#0@@215| |persistentMap#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@216| T@U) (|persistentMap#0@@1| T@U) ) (!  (=> (and (and (= (type |v#0@@216|) DatatypeTypeType) (= (type |persistentMap#0@@1|) DatatypeTypeType)) (or (|AbstractMap.__default.Init#canCall| |v#0@@216| |persistentMap#0@@1|) (and ($Is |v#0@@216| Tclass.AbstractMap.Variables) ($Is |persistentMap#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) (and (|$IsA#AbstractMap.Variables| |v#0@@216|) (= (AbstractMap.__default.Init |v#0@@216| |persistentMap#0@@1|) (|AbstractMap.Variables#Equal| |v#0@@216| (|#AbstractMap.Variables.Variables| |persistentMap#0@@1|)))))
 :qid |AbstractMapidfy.57:18|
 :skolemid |3398|
 :pattern ( (AbstractMap.__default.Init |v#0@@216| |persistentMap#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@217| T@U) (|persistentMap#0@@2| T@U) ) (!  (=> (and (and (= (type |v#0@@217|) DatatypeTypeType) (= (type |persistentMap#0@@2|) DatatypeTypeType)) (or (|AbstractMap.__default.Init#canCall| (Lit |v#0@@217|) (Lit |persistentMap#0@@2|)) (and ($Is |v#0@@217| Tclass.AbstractMap.Variables) ($Is |persistentMap#0@@2| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) (and (|$IsA#AbstractMap.Variables| (Lit |v#0@@217|)) (= (AbstractMap.__default.Init (Lit |v#0@@217|) (Lit |persistentMap#0@@2|)) (|AbstractMap.Variables#Equal| |v#0@@217| (|#AbstractMap.Variables.Variables| (Lit |persistentMap#0@@2|))))))
 :qid |AbstractMapidfy.57:18|
 :weight 3
 :skolemid |3399|
 :pattern ( (AbstractMap.__default.Init (Lit |v#0@@217|) (Lit |persistentMap#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@218| T@U) (|v'#0@@123| T@U) (|lbl#0@@83| T@U) ) (!  (=> (and (and (and (= (type |v#0@@218|) DatatypeTypeType) (= (type |v'#0@@123|) DatatypeTypeType)) (= (type |lbl#0@@83|) DatatypeTypeType)) (or (|AbstractMap.__default.Next#canCall| |v#0@@218| |v'#0@@123| |lbl#0@@83|) (and (and ($Is |v#0@@218| Tclass.AbstractMap.Variables) ($Is |v'#0@@123| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@83| Tclass.AbstractMap.TransitionLabel)))) true)
 :qid |AbstractMapidfy.62:18|
 :skolemid |3400|
 :pattern ( (AbstractMap.__default.Next |v#0@@218| |v'#0@@123| |lbl#0@@83|))
))))
(assert (forall ((|v#0@@219| T@U) (|v'#0@@124| T@U) (|lbl#0@@84| T@U) ) (!  (=> (and (and (and (= (type |v#0@@219|) DatatypeTypeType) (= (type |v'#0@@124|) DatatypeTypeType)) (= (type |lbl#0@@84|) DatatypeTypeType)) (and (and ($Is |v#0@@219| Tclass.AbstractMap.Variables) ($Is |v'#0@@124| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@84| Tclass.AbstractMap.TransitionLabel))) (= (|AbstractMap.__default.Next#requires| |v#0@@219| |v'#0@@124| |lbl#0@@84|) true))
 :qid |AbstractMapidfy.62:18|
 :skolemid |3401|
 :pattern ( (|AbstractMap.__default.Next#requires| |v#0@@219| |v'#0@@124| |lbl#0@@84|))
)))
(assert  (=> true (forall ((|v#0@@220| T@U) (|v'#0@@125| T@U) (|lbl#0@@85| T@U) ) (!  (=> (and (and (and (= (type |v#0@@220|) DatatypeTypeType) (= (type |v'#0@@125|) DatatypeTypeType)) (= (type |lbl#0@@85|) DatatypeTypeType)) (or (|AbstractMap.__default.Next#canCall| |v#0@@220| |v'#0@@125| |lbl#0@@85|) (and (and ($Is |v#0@@220| Tclass.AbstractMap.Variables) ($Is |v'#0@@125| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@85| Tclass.AbstractMap.TransitionLabel)))) (and (and (=> (AbstractMap.TransitionLabel.QueryLabel_q |lbl#0@@85|) (|AbstractMap.__default.Query#canCall| |v#0@@220| |v'#0@@125| |lbl#0@@85|)) (=> (not (AbstractMap.TransitionLabel.QueryLabel_q |lbl#0@@85|)) (and (=> (AbstractMap.TransitionLabel.PutLabel_q |lbl#0@@85|) (|AbstractMap.__default.Put#canCall| |v#0@@220| |v'#0@@125| |lbl#0@@85|)) (=> (not (AbstractMap.TransitionLabel.PutLabel_q |lbl#0@@85|)) (and (=> (AbstractMap.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@85|) (|AbstractMap.__default.QueryEndLsn#canCall| |v#0@@220| |v'#0@@125| |lbl#0@@85|)) (=> (not (AbstractMap.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@85|)) (and (=> (AbstractMap.TransitionLabel.FreezeAsLabel_q |lbl#0@@85|) (|AbstractMap.__default.FreezeAs#canCall| |v#0@@220| |v'#0@@125| |lbl#0@@85|)) (=> (not (AbstractMap.TransitionLabel.FreezeAsLabel_q |lbl#0@@85|)) (and (|$IsA#AbstractMap.Variables| |v#0@@220|) (|$IsA#AbstractMap.Variables| |v'#0@@125|)))))))))) (= (AbstractMap.__default.Next |v#0@@220| |v'#0@@125| |lbl#0@@85|) (ite (AbstractMap.TransitionLabel.QueryLabel_q |lbl#0@@85|) (AbstractMap.__default.Query |v#0@@220| |v'#0@@125| |lbl#0@@85|) (ite (AbstractMap.TransitionLabel.PutLabel_q |lbl#0@@85|) (AbstractMap.__default.Put |v#0@@220| |v'#0@@125| |lbl#0@@85|) (ite (AbstractMap.TransitionLabel.QueryEndLsnLabel_q |lbl#0@@85|) (AbstractMap.__default.QueryEndLsn |v#0@@220| |v'#0@@125| |lbl#0@@85|) (ite (AbstractMap.TransitionLabel.FreezeAsLabel_q |lbl#0@@85|) (AbstractMap.__default.FreezeAs |v#0@@220| |v'#0@@125| |lbl#0@@85|) (|AbstractMap.Variables#Equal| |v#0@@220| |v'#0@@125|))))))))
 :qid |AbstractMapidfy.62:18|
 :skolemid |3402|
 :pattern ( (AbstractMap.__default.Next |v#0@@220| |v'#0@@125| |lbl#0@@85|))
))))
(assert  (=> true (forall ((|v#0@@221| T@U) (|v'#0@@126| T@U) (|lbl#0@@86| T@U) ) (!  (=> (and (and (and (= (type |v#0@@221|) DatatypeTypeType) (= (type |v'#0@@126|) DatatypeTypeType)) (= (type |lbl#0@@86|) DatatypeTypeType)) (or (|AbstractMap.__default.Next#canCall| (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|)) (and (and ($Is |v#0@@221| Tclass.AbstractMap.Variables) ($Is |v'#0@@126| Tclass.AbstractMap.Variables)) ($Is |lbl#0@@86| Tclass.AbstractMap.TransitionLabel)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.QueryLabel_q (Lit |lbl#0@@86|))))) (|AbstractMap.__default.Query#canCall| (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.QueryLabel_q (Lit |lbl#0@@86|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.PutLabel_q (Lit |lbl#0@@86|))))) (|AbstractMap.__default.Put#canCall| (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.PutLabel_q (Lit |lbl#0@@86|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@86|))))) (|AbstractMap.__default.QueryEndLsn#canCall| (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@86|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.FreezeAsLabel_q (Lit |lbl#0@@86|))))) (|AbstractMap.__default.FreezeAs#canCall| (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|))) (=> (not (U_2_bool (Lit (bool_2_U (AbstractMap.TransitionLabel.FreezeAsLabel_q (Lit |lbl#0@@86|)))))) (and (|$IsA#AbstractMap.Variables| (Lit |v#0@@221|)) (|$IsA#AbstractMap.Variables| (Lit |v'#0@@126|))))))))))) (= (AbstractMap.__default.Next (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|)) (ite (AbstractMap.TransitionLabel.QueryLabel_q (Lit |lbl#0@@86|)) (AbstractMap.__default.Query (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|)) (ite (AbstractMap.TransitionLabel.PutLabel_q (Lit |lbl#0@@86|)) (AbstractMap.__default.Put (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|)) (ite (AbstractMap.TransitionLabel.QueryEndLsnLabel_q (Lit |lbl#0@@86|)) (AbstractMap.__default.QueryEndLsn (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|)) (ite (AbstractMap.TransitionLabel.FreezeAsLabel_q (Lit |lbl#0@@86|)) (AbstractMap.__default.FreezeAs (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|)) (|AbstractMap.Variables#Equal| |v#0@@221| |v'#0@@126|))))))))
 :qid |AbstractMapidfy.62:18|
 :weight 3
 :skolemid |3403|
 :pattern ( (AbstractMap.__default.Next (Lit |v#0@@221|) (Lit |v'#0@@126|) (Lit |lbl#0@@86|)))
))))
(assert (forall ((arg0@@583 Int) ) (! (= (type (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| arg0@@583)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| arg0@@583))
)))
(assert (forall ((|a#0#0#0@@8| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#0#0#0@@8|)) |##CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel|)
 :qid |CrashTolerantMapidfy.18:40|
 :skolemid |3404|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#0#0#0@@8|))
)))
(assert (forall ((d@@187 T@U) ) (!  (=> (= (type d@@187) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@187) (= (DatatypeCtorId d@@187) |##CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel|)))
 :qid |unknown.0:0|
 :skolemid |3405|
 :pattern ( (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@187))
)))
(assert (forall ((d@@188 T@U) ) (!  (=> (and (= (type d@@188) DatatypeTypeType) (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@188)) (exists ((|a#1#0#0@@8| Int) ) (! (= d@@188 (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#1#0#0@@8|))
 :qid |CrashTolerantMapidfy.18:40|
 :skolemid |3406|
)))
 :qid |unknown.0:0|
 :skolemid |3407|
 :pattern ( (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@188))
)))
(assert (= (type Tclass.CrashTolerantMap.TransitionLabel) TyType))
(assert (= (Tag Tclass.CrashTolerantMap.TransitionLabel) Tagclass.CrashTolerantMap.TransitionLabel))
(assert (= (TagFamily Tclass.CrashTolerantMap.TransitionLabel) tytagFamily$TransitionLabel))
(assert (forall ((bx@@172 T@U) ) (!  (=> (and (= (type bx@@172) BoxType) ($IsBox bx@@172 Tclass.CrashTolerantMap.TransitionLabel)) (and (= ($Box ($Unbox DatatypeTypeType bx@@172)) bx@@172) ($Is ($Unbox DatatypeTypeType bx@@172) Tclass.CrashTolerantMap.TransitionLabel)))
 :qid |unknown.0:0|
 :skolemid |3408|
 :pattern ( ($IsBox bx@@172 Tclass.CrashTolerantMap.TransitionLabel))
)))
(assert (forall ((|a#2#0#0@@8| Int) ) (! (= ($Is (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#2#0#0@@8|) Tclass.CrashTolerantMap.TransitionLabel) ($Is (int_2_U |a#2#0#0@@8|) Tclass._System.nat))
 :qid |CrashTolerantMapidfy.18:40|
 :skolemid |3409|
 :pattern ( ($Is (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#2#0#0@@8|) Tclass.CrashTolerantMap.TransitionLabel))
)))
(assert (forall ((|a#3#0#0@@8| Int) ($h@@177 T@U) ) (!  (=> (and (= (type $h@@177) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@177)) (= ($IsAlloc (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#3#0#0@@8|) Tclass.CrashTolerantMap.TransitionLabel $h@@177) ($IsAlloc (int_2_U |a#3#0#0@@8|) Tclass._System.nat $h@@177)))
 :qid |CrashTolerantMapidfy.18:40|
 :skolemid |3410|
 :pattern ( ($IsAlloc (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#3#0#0@@8|) Tclass.CrashTolerantMap.TransitionLabel $h@@177))
)))
(assert (forall ((d@@189 T@U) ($h@@178 T@U) ) (!  (=> (and (and (= (type d@@189) DatatypeTypeType) (= (type $h@@178) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@178) (and (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@189) ($IsAlloc d@@189 Tclass.CrashTolerantMap.TransitionLabel $h@@178)))) ($IsAlloc (int_2_U (CrashTolerantMap.TransitionLabel.endLsn d@@189)) Tclass._System.nat $h@@178))
 :qid |unknown.0:0|
 :skolemid |3411|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantMap.TransitionLabel.endLsn d@@189)) Tclass._System.nat $h@@178))
)))
(assert (forall ((|a#4#0#0@@8| Int) ) (! (= (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (LitInt |a#4#0#0@@8|)) (Lit (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#4#0#0@@8|)))
 :qid |CrashTolerantMapidfy.18:40|
 :skolemid |3412|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (LitInt |a#4#0#0@@8|)))
)))
(assert (forall ((|a#5#0#0@@11| Int) ) (! (= (CrashTolerantMap.TransitionLabel.endLsn (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#5#0#0@@11|)) |a#5#0#0@@11|)
 :qid |CrashTolerantMapidfy.18:40|
 :skolemid |3413|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| |a#5#0#0@@11|))
)))
(assert (forall ((arg0@@584 T@U) ) (! (= (type (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| arg0@@584)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMap.TransitionLabel.PutRecordsLabel|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| arg0@@584))
)))
(assert (forall ((|a#6#0#0@@11| T@U) ) (!  (=> (= (type |a#6#0#0@@11|) DatatypeTypeType) (= (DatatypeCtorId (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#6#0#0@@11|)) |##CrashTolerantMap.TransitionLabel.PutRecordsLabel|))
 :qid |CrashTolerantMapidfy.19:23|
 :skolemid |3414|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#6#0#0@@11|))
)))
(assert (forall ((d@@190 T@U) ) (!  (=> (= (type d@@190) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@190) (= (DatatypeCtorId d@@190) |##CrashTolerantMap.TransitionLabel.PutRecordsLabel|)))
 :qid |unknown.0:0|
 :skolemid |3415|
 :pattern ( (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@190))
)))
(assert (forall ((d@@191 T@U) ) (!  (=> (and (= (type d@@191) DatatypeTypeType) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@191)) (exists ((|a#7#0#0@@11| T@U) ) (!  (and (= (type |a#7#0#0@@11|) DatatypeTypeType) (= d@@191 (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#7#0#0@@11|)))
 :qid |CrashTolerantMapidfy.19:23|
 :skolemid |3416|
 :no-pattern (type |a#7#0#0@@11|)
 :no-pattern (U_2_int |a#7#0#0@@11|)
 :no-pattern (U_2_bool |a#7#0#0@@11|)
)))
 :qid |unknown.0:0|
 :skolemid |3417|
 :pattern ( (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@191))
)))
(assert (forall ((|a#8#0#0@@10| T@U) ) (!  (=> (= (type |a#8#0#0@@10|) DatatypeTypeType) (= ($Is (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#8#0#0@@10|) Tclass.CrashTolerantMap.TransitionLabel) ($Is |a#8#0#0@@10| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |CrashTolerantMapidfy.19:23|
 :skolemid |3418|
 :pattern ( ($Is (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#8#0#0@@10|) Tclass.CrashTolerantMap.TransitionLabel))
)))
(assert (forall ((|a#9#0#0@@8| T@U) ($h@@179 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@8|) DatatypeTypeType) (= (type $h@@179) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@179)) (= ($IsAlloc (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#9#0#0@@8|) Tclass.CrashTolerantMap.TransitionLabel $h@@179) ($IsAlloc |a#9#0#0@@8| Tclass.MsgHistoryMod.MsgHistory $h@@179)))
 :qid |CrashTolerantMapidfy.19:23|
 :skolemid |3419|
 :pattern ( ($IsAlloc (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#9#0#0@@8|) Tclass.CrashTolerantMap.TransitionLabel $h@@179))
)))
(assert (forall ((arg0@@585 T@U) ) (! (= (type (CrashTolerantMap.TransitionLabel.records arg0@@585)) DatatypeTypeType)
 :qid |funType:CrashTolerantMap.TransitionLabel.records|
 :pattern ( (CrashTolerantMap.TransitionLabel.records arg0@@585))
)))
(assert (forall ((d@@192 T@U) ($h@@180 T@U) ) (!  (=> (and (and (= (type d@@192) DatatypeTypeType) (= (type $h@@180) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@180) (and (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@192) ($IsAlloc d@@192 Tclass.CrashTolerantMap.TransitionLabel $h@@180)))) ($IsAlloc (CrashTolerantMap.TransitionLabel.records d@@192) Tclass.MsgHistoryMod.MsgHistory $h@@180))
 :qid |unknown.0:0|
 :skolemid |3420|
 :pattern ( ($IsAlloc (CrashTolerantMap.TransitionLabel.records d@@192) Tclass.MsgHistoryMod.MsgHistory $h@@180))
)))
(assert (forall ((|a#10#0#0@@8| T@U) ) (!  (=> (= (type |a#10#0#0@@8|) DatatypeTypeType) (= (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| (Lit |a#10#0#0@@8|)) (Lit (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#10#0#0@@8|))))
 :qid |CrashTolerantMapidfy.19:23|
 :skolemid |3421|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| (Lit |a#10#0#0@@8|)))
)))
(assert (forall ((|a#11#0#0@@7| T@U) ) (!  (=> (= (type |a#11#0#0@@7|) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.records (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#11#0#0@@7|)) |a#11#0#0@@7|))
 :qid |CrashTolerantMapidfy.19:23|
 :skolemid |3422|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#11#0#0@@7|))
)))
(assert (forall ((|a#12#0#0@@6| T@U) ) (!  (=> (= (type |a#12#0#0@@6|) DatatypeTypeType) (< (DtRank |a#12#0#0@@6|) (DtRank (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#12#0#0@@6|))))
 :qid |CrashTolerantMapidfy.19:23|
 :skolemid |3423|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |a#12#0#0@@6|))
)))
(assert (forall ((arg0@@586 Int) (arg1@@280 T@U) (arg2@@166 T@U) ) (! (= (type (|#CrashTolerantMap.TransitionLabel.QueryLabel| arg0@@586 arg1@@280 arg2@@166)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMap.TransitionLabel.QueryLabel|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.QueryLabel| arg0@@586 arg1@@280 arg2@@166))
)))
(assert (forall ((|a#13#0#0@@4| Int) (|a#13#1#0@@1| T@U) (|a#13#2#0@@1| T@U) ) (!  (=> (and (= (type |a#13#1#0@@1|) (SeqType BoxType)) (= (type |a#13#2#0@@1|) (SeqType BoxType))) (= (DatatypeCtorId (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#13#0#0@@4| |a#13#1#0@@1| |a#13#2#0@@1|)) |##CrashTolerantMap.TransitionLabel.QueryLabel|))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3424|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#13#0#0@@4| |a#13#1#0@@1| |a#13#2#0@@1|))
)))
(assert (forall ((d@@193 T@U) ) (!  (=> (= (type d@@193) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@193) (= (DatatypeCtorId d@@193) |##CrashTolerantMap.TransitionLabel.QueryLabel|)))
 :qid |unknown.0:0|
 :skolemid |3425|
 :pattern ( (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@193))
)))
(assert (forall ((d@@194 T@U) ) (!  (=> (and (= (type d@@194) DatatypeTypeType) (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@194)) (exists ((|a#14#0#0@@5| Int) (|a#14#1#0@@2| T@U) (|a#14#2#0@@1| T@U) ) (!  (and (and (= (type |a#14#1#0@@2|) (SeqType BoxType)) (= (type |a#14#2#0@@1|) (SeqType BoxType))) (= d@@194 (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#14#0#0@@5| |a#14#1#0@@2| |a#14#2#0@@1|)))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3426|
 :no-pattern (type |a#14#1#0@@2|)
 :no-pattern (type |a#14#2#0@@1|)
 :no-pattern (U_2_int |a#14#1#0@@2|)
 :no-pattern (U_2_bool |a#14#1#0@@2|)
 :no-pattern (U_2_int |a#14#2#0@@1|)
 :no-pattern (U_2_bool |a#14#2#0@@1|)
)))
 :qid |unknown.0:0|
 :skolemid |3427|
 :pattern ( (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@194))
)))
(assert (forall ((|a#15#0#0@@5| Int) (|a#15#1#0@@2| T@U) (|a#15#2#0@@1| T@U) ) (!  (=> (and (= (type |a#15#1#0@@2|) (SeqType BoxType)) (= (type |a#15#2#0@@1|) (SeqType BoxType))) (= ($Is (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#15#0#0@@5| |a#15#1#0@@2| |a#15#2#0@@1|) Tclass.CrashTolerantMap.TransitionLabel)  (and (and ($Is (int_2_U |a#15#0#0@@5|) Tclass._System.nat) ($Is |a#15#1#0@@2| Tclass.KeyType.Key)) ($Is |a#15#2#0@@1| Tclass.ValueType.Value))))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3428|
 :pattern ( ($Is (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#15#0#0@@5| |a#15#1#0@@2| |a#15#2#0@@1|) Tclass.CrashTolerantMap.TransitionLabel))
)))
(assert (forall ((|a#16#0#0@@5| Int) (|a#16#1#0@@2| T@U) (|a#16#2#0@@1| T@U) ($h@@181 T@U) ) (!  (=> (and (and (and (= (type |a#16#1#0@@2|) (SeqType BoxType)) (= (type |a#16#2#0@@1|) (SeqType BoxType))) (= (type $h@@181) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@181)) (= ($IsAlloc (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#16#0#0@@5| |a#16#1#0@@2| |a#16#2#0@@1|) Tclass.CrashTolerantMap.TransitionLabel $h@@181)  (and (and ($IsAlloc (int_2_U |a#16#0#0@@5|) Tclass._System.nat $h@@181) ($IsAlloc |a#16#1#0@@2| Tclass.KeyType.Key $h@@181)) ($IsAlloc |a#16#2#0@@1| Tclass.ValueType.Value $h@@181))))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3429|
 :pattern ( ($IsAlloc (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#16#0#0@@5| |a#16#1#0@@2| |a#16#2#0@@1|) Tclass.CrashTolerantMap.TransitionLabel $h@@181))
)))
(assert (forall ((d@@195 T@U) ($h@@182 T@U) ) (!  (=> (and (and (= (type d@@195) DatatypeTypeType) (= (type $h@@182) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@182) (and (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@195) ($IsAlloc d@@195 Tclass.CrashTolerantMap.TransitionLabel $h@@182)))) ($IsAlloc (int_2_U (CrashTolerantMap.TransitionLabel.endLsn d@@195)) Tclass._System.nat $h@@182))
 :qid |unknown.0:0|
 :skolemid |3430|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantMap.TransitionLabel.endLsn d@@195)) Tclass._System.nat $h@@182))
)))
(assert (forall ((arg0@@587 T@U) ) (! (= (type (CrashTolerantMap.TransitionLabel.key arg0@@587)) (SeqType BoxType))
 :qid |funType:CrashTolerantMap.TransitionLabel.key|
 :pattern ( (CrashTolerantMap.TransitionLabel.key arg0@@587))
)))
(assert (forall ((d@@196 T@U) ($h@@183 T@U) ) (!  (=> (and (and (= (type d@@196) DatatypeTypeType) (= (type $h@@183) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@183) (and (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@196) ($IsAlloc d@@196 Tclass.CrashTolerantMap.TransitionLabel $h@@183)))) ($IsAlloc (CrashTolerantMap.TransitionLabel.key d@@196) Tclass.KeyType.Key $h@@183))
 :qid |unknown.0:0|
 :skolemid |3431|
 :pattern ( ($IsAlloc (CrashTolerantMap.TransitionLabel.key d@@196) Tclass.KeyType.Key $h@@183))
)))
(assert (forall ((arg0@@588 T@U) ) (! (= (type (CrashTolerantMap.TransitionLabel.value arg0@@588)) (SeqType BoxType))
 :qid |funType:CrashTolerantMap.TransitionLabel.value|
 :pattern ( (CrashTolerantMap.TransitionLabel.value arg0@@588))
)))
(assert (forall ((d@@197 T@U) ($h@@184 T@U) ) (!  (=> (and (and (= (type d@@197) DatatypeTypeType) (= (type $h@@184) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@184) (and (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@197) ($IsAlloc d@@197 Tclass.CrashTolerantMap.TransitionLabel $h@@184)))) ($IsAlloc (CrashTolerantMap.TransitionLabel.value d@@197) Tclass.ValueType.Value $h@@184))
 :qid |unknown.0:0|
 :skolemid |3432|
 :pattern ( ($IsAlloc (CrashTolerantMap.TransitionLabel.value d@@197) Tclass.ValueType.Value $h@@184))
)))
(assert (forall ((|a#17#0#0@@4| Int) (|a#17#1#0@@1| T@U) (|a#17#2#0@@0| T@U) ) (!  (=> (and (= (type |a#17#1#0@@1|) (SeqType BoxType)) (= (type |a#17#2#0@@0|) (SeqType BoxType))) (= (|#CrashTolerantMap.TransitionLabel.QueryLabel| (LitInt |a#17#0#0@@4|) (Lit |a#17#1#0@@1|) (Lit |a#17#2#0@@0|)) (Lit (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#17#0#0@@4| |a#17#1#0@@1| |a#17#2#0@@0|))))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3433|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.QueryLabel| (LitInt |a#17#0#0@@4|) (Lit |a#17#1#0@@1|) (Lit |a#17#2#0@@0|)))
)))
(assert (forall ((|a#18#0#0@@4| Int) (|a#18#1#0@@0| T@U) (|a#18#2#0| T@U) ) (!  (=> (and (= (type |a#18#1#0@@0|) (SeqType BoxType)) (= (type |a#18#2#0|) (SeqType BoxType))) (= (CrashTolerantMap.TransitionLabel.endLsn (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#18#0#0@@4| |a#18#1#0@@0| |a#18#2#0|)) |a#18#0#0@@4|))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3434|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#18#0#0@@4| |a#18#1#0@@0| |a#18#2#0|))
)))
(assert (forall ((|a#19#0#0@@4| Int) (|a#19#1#0@@0| T@U) (|a#19#2#0| T@U) ) (!  (=> (and (= (type |a#19#1#0@@0|) (SeqType BoxType)) (= (type |a#19#2#0|) (SeqType BoxType))) (= (CrashTolerantMap.TransitionLabel.key (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#19#0#0@@4| |a#19#1#0@@0| |a#19#2#0|)) |a#19#1#0@@0|))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3435|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#19#0#0@@4| |a#19#1#0@@0| |a#19#2#0|))
)))
(assert (forall ((|a#20#0#0@@4| Int) (|a#20#1#0@@0| T@U) (|a#20#2#0| T@U) ) (!  (=> (and (= (type |a#20#1#0@@0|) (SeqType BoxType)) (= (type |a#20#2#0|) (SeqType BoxType))) (= (CrashTolerantMap.TransitionLabel.value (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#20#0#0@@4| |a#20#1#0@@0| |a#20#2#0|)) |a#20#2#0|))
 :qid |CrashTolerantMapidfy.20:18|
 :skolemid |3436|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.QueryLabel| |a#20#0#0@@4| |a#20#1#0@@0| |a#20#2#0|))
)))
(assert (= (type |#CrashTolerantMap.TransitionLabel.InternalLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.TransitionLabel.InternalLabel|) |##CrashTolerantMap.TransitionLabel.InternalLabel|))
(assert (forall ((d@@198 T@U) ) (!  (=> (= (type d@@198) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.InternalLabel_q d@@198) (= (DatatypeCtorId d@@198) |##CrashTolerantMap.TransitionLabel.InternalLabel|)))
 :qid |unknown.0:0|
 :skolemid |3437|
 :pattern ( (CrashTolerantMap.TransitionLabel.InternalLabel_q d@@198))
)))
(assert (forall ((d@@199 T@U) ) (!  (=> (and (= (type d@@199) DatatypeTypeType) (CrashTolerantMap.TransitionLabel.InternalLabel_q d@@199)) (= d@@199 |#CrashTolerantMap.TransitionLabel.InternalLabel|))
 :qid |unknown.0:0|
 :skolemid |3438|
 :pattern ( (CrashTolerantMap.TransitionLabel.InternalLabel_q d@@199))
)))
(assert ($Is |#CrashTolerantMap.TransitionLabel.InternalLabel| Tclass.CrashTolerantMap.TransitionLabel))
(assert (forall (($h@@185 T@U) ) (!  (=> (and (= (type $h@@185) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@185)) ($IsAlloc |#CrashTolerantMap.TransitionLabel.InternalLabel| Tclass.CrashTolerantMap.TransitionLabel $h@@185))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3439|
 :pattern ( ($IsAlloc |#CrashTolerantMap.TransitionLabel.InternalLabel| Tclass.CrashTolerantMap.TransitionLabel $h@@185))
)))
(assert (= |#CrashTolerantMap.TransitionLabel.InternalLabel| (Lit |#CrashTolerantMap.TransitionLabel.InternalLabel|)))
(assert (forall ((arg0@@589 Int) ) (! (= (type (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| arg0@@589)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMap.TransitionLabel.CommitStartLabel|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| arg0@@589))
)))
(assert (forall ((|a#26#0#0@@1| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#26#0#0@@1|)) |##CrashTolerantMap.TransitionLabel.CommitStartLabel|)
 :qid |CrashTolerantMapidfy.22:24|
 :skolemid |3440|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#26#0#0@@1|))
)))
(assert (forall ((d@@200 T@U) ) (!  (=> (= (type d@@200) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@200) (= (DatatypeCtorId d@@200) |##CrashTolerantMap.TransitionLabel.CommitStartLabel|)))
 :qid |unknown.0:0|
 :skolemid |3441|
 :pattern ( (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@200))
)))
(assert (forall ((d@@201 T@U) ) (!  (=> (and (= (type d@@201) DatatypeTypeType) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@201)) (exists ((|a#27#0#0@@1| Int) ) (! (= d@@201 (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#27#0#0@@1|))
 :qid |CrashTolerantMapidfy.22:24|
 :skolemid |3442|
)))
 :qid |unknown.0:0|
 :skolemid |3443|
 :pattern ( (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@201))
)))
(assert (forall ((|a#28#0#0@@0| Int) ) (! (= ($Is (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#28#0#0@@0|) Tclass.CrashTolerantMap.TransitionLabel) ($Is (int_2_U |a#28#0#0@@0|) Tclass._System.nat))
 :qid |CrashTolerantMapidfy.22:24|
 :skolemid |3444|
 :pattern ( ($Is (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#28#0#0@@0|) Tclass.CrashTolerantMap.TransitionLabel))
)))
(assert (forall ((|a#29#0#0@@0| Int) ($h@@186 T@U) ) (!  (=> (and (= (type $h@@186) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@186)) (= ($IsAlloc (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#29#0#0@@0|) Tclass.CrashTolerantMap.TransitionLabel $h@@186) ($IsAlloc (int_2_U |a#29#0#0@@0|) Tclass._System.nat $h@@186)))
 :qid |CrashTolerantMapidfy.22:24|
 :skolemid |3445|
 :pattern ( ($IsAlloc (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#29#0#0@@0|) Tclass.CrashTolerantMap.TransitionLabel $h@@186))
)))
(assert (forall ((d@@202 T@U) ($h@@187 T@U) ) (!  (=> (and (and (= (type d@@202) DatatypeTypeType) (= (type $h@@187) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@187) (and (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@202) ($IsAlloc d@@202 Tclass.CrashTolerantMap.TransitionLabel $h@@187)))) ($IsAlloc (int_2_U (CrashTolerantMap.TransitionLabel.newBoundaryLsn d@@202)) Tclass._System.nat $h@@187))
 :qid |unknown.0:0|
 :skolemid |3446|
 :pattern ( ($IsAlloc (int_2_U (CrashTolerantMap.TransitionLabel.newBoundaryLsn d@@202)) Tclass._System.nat $h@@187))
)))
(assert (forall ((|a#30#0#0@@1| Int) ) (! (= (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| (LitInt |a#30#0#0@@1|)) (Lit (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#30#0#0@@1|)))
 :qid |CrashTolerantMapidfy.22:24|
 :skolemid |3447|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| (LitInt |a#30#0#0@@1|)))
)))
(assert (forall ((|a#31#0#0@@1| Int) ) (! (= (CrashTolerantMap.TransitionLabel.newBoundaryLsn (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#31#0#0@@1|)) |a#31#0#0@@1|)
 :qid |CrashTolerantMapidfy.22:24|
 :skolemid |3448|
 :pattern ( (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |a#31#0#0@@1|))
)))
(assert (= (type |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|) |##CrashTolerantMap.TransitionLabel.CommitCompleteLabel|))
(assert (forall ((d@@203 T@U) ) (!  (=> (= (type d@@203) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q d@@203) (= (DatatypeCtorId d@@203) |##CrashTolerantMap.TransitionLabel.CommitCompleteLabel|)))
 :qid |unknown.0:0|
 :skolemid |3449|
 :pattern ( (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q d@@203))
)))
(assert (forall ((d@@204 T@U) ) (!  (=> (and (= (type d@@204) DatatypeTypeType) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q d@@204)) (= d@@204 |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|))
 :qid |unknown.0:0|
 :skolemid |3450|
 :pattern ( (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q d@@204))
)))
(assert ($Is |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel| Tclass.CrashTolerantMap.TransitionLabel))
(assert (forall (($h@@188 T@U) ) (!  (=> (and (= (type $h@@188) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@188)) ($IsAlloc |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel| Tclass.CrashTolerantMap.TransitionLabel $h@@188))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3451|
 :pattern ( ($IsAlloc |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel| Tclass.CrashTolerantMap.TransitionLabel $h@@188))
)))
(assert (= |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel| (Lit |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|)))
(assert (= (type |#CrashTolerantMap.TransitionLabel.CrashLabel|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.TransitionLabel.CrashLabel|) |##CrashTolerantMap.TransitionLabel.CrashLabel|))
(assert (forall ((d@@205 T@U) ) (!  (=> (= (type d@@205) DatatypeTypeType) (= (CrashTolerantMap.TransitionLabel.CrashLabel_q d@@205) (= (DatatypeCtorId d@@205) |##CrashTolerantMap.TransitionLabel.CrashLabel|)))
 :qid |unknown.0:0|
 :skolemid |3452|
 :pattern ( (CrashTolerantMap.TransitionLabel.CrashLabel_q d@@205))
)))
(assert (forall ((d@@206 T@U) ) (!  (=> (and (= (type d@@206) DatatypeTypeType) (CrashTolerantMap.TransitionLabel.CrashLabel_q d@@206)) (= d@@206 |#CrashTolerantMap.TransitionLabel.CrashLabel|))
 :qid |unknown.0:0|
 :skolemid |3453|
 :pattern ( (CrashTolerantMap.TransitionLabel.CrashLabel_q d@@206))
)))
(assert ($Is |#CrashTolerantMap.TransitionLabel.CrashLabel| Tclass.CrashTolerantMap.TransitionLabel))
(assert (forall (($h@@189 T@U) ) (!  (=> (and (= (type $h@@189) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@189)) ($IsAlloc |#CrashTolerantMap.TransitionLabel.CrashLabel| Tclass.CrashTolerantMap.TransitionLabel $h@@189))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3454|
 :pattern ( ($IsAlloc |#CrashTolerantMap.TransitionLabel.CrashLabel| Tclass.CrashTolerantMap.TransitionLabel $h@@189))
)))
(assert (= |#CrashTolerantMap.TransitionLabel.CrashLabel| (Lit |#CrashTolerantMap.TransitionLabel.CrashLabel|)))
(assert (forall ((d@@207 T@U) ) (!  (=> (and (= (type d@@207) DatatypeTypeType) (|$IsA#CrashTolerantMap.TransitionLabel| d@@207)) (or (or (or (or (or (or (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@207) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@207)) (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@207)) (CrashTolerantMap.TransitionLabel.InternalLabel_q d@@207)) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@207)) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q d@@207)) (CrashTolerantMap.TransitionLabel.CrashLabel_q d@@207)))
 :qid |unknown.0:0|
 :skolemid |3455|
 :pattern ( (|$IsA#CrashTolerantMap.TransitionLabel| d@@207))
)))
(assert (forall ((d@@208 T@U) ) (!  (=> (and (= (type d@@208) DatatypeTypeType) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel)) (or (or (or (or (or (or (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@208) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@208)) (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@208)) (CrashTolerantMap.TransitionLabel.InternalLabel_q d@@208)) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@208)) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q d@@208)) (CrashTolerantMap.TransitionLabel.CrashLabel_q d@@208)))
 :qid |unknown.0:0|
 :skolemid |3456|
 :pattern ( (CrashTolerantMap.TransitionLabel.CrashLabel_q d@@208) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel))
 :pattern ( (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q d@@208) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel))
 :pattern ( (CrashTolerantMap.TransitionLabel.CommitStartLabel_q d@@208) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel))
 :pattern ( (CrashTolerantMap.TransitionLabel.InternalLabel_q d@@208) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel))
 :pattern ( (CrashTolerantMap.TransitionLabel.QueryLabel_q d@@208) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel))
 :pattern ( (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q d@@208) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel))
 :pattern ( (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q d@@208) ($Is d@@208 Tclass.CrashTolerantMap.TransitionLabel))
)))
(assert (forall ((a@@180 T@U) (b@@130 T@U) ) (!  (=> (and (and (= (type a@@180) DatatypeTypeType) (= (type b@@130) DatatypeTypeType)) (and (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q a@@180) (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q b@@130))) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@180 b@@130) (= (CrashTolerantMap.TransitionLabel.endLsn a@@180) (CrashTolerantMap.TransitionLabel.endLsn b@@130))))
 :qid |unknown.0:0|
 :skolemid |3457|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@180 b@@130) (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q a@@180))
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@180 b@@130) (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q b@@130))
)))
(assert (forall ((a@@181 T@U) (b@@131 T@U) ) (!  (=> (and (and (= (type a@@181) DatatypeTypeType) (= (type b@@131) DatatypeTypeType)) (and (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q a@@181) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q b@@131))) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@181 b@@131) (|MsgHistoryMod.MsgHistory#Equal| (CrashTolerantMap.TransitionLabel.records a@@181) (CrashTolerantMap.TransitionLabel.records b@@131))))
 :qid |unknown.0:0|
 :skolemid |3458|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@181 b@@131) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q a@@181))
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@181 b@@131) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q b@@131))
)))
(assert (forall ((a@@182 T@U) (b@@132 T@U) ) (!  (=> (and (and (= (type a@@182) DatatypeTypeType) (= (type b@@132) DatatypeTypeType)) (and (CrashTolerantMap.TransitionLabel.QueryLabel_q a@@182) (CrashTolerantMap.TransitionLabel.QueryLabel_q b@@132))) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@182 b@@132)  (and (and (= (CrashTolerantMap.TransitionLabel.endLsn a@@182) (CrashTolerantMap.TransitionLabel.endLsn b@@132)) (|Seq#Equal| (CrashTolerantMap.TransitionLabel.key a@@182) (CrashTolerantMap.TransitionLabel.key b@@132))) (|Seq#Equal| (CrashTolerantMap.TransitionLabel.value a@@182) (CrashTolerantMap.TransitionLabel.value b@@132)))))
 :qid |unknown.0:0|
 :skolemid |3459|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@182 b@@132) (CrashTolerantMap.TransitionLabel.QueryLabel_q a@@182))
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@182 b@@132) (CrashTolerantMap.TransitionLabel.QueryLabel_q b@@132))
)))
(assert (forall ((a@@183 T@U) (b@@133 T@U) ) (!  (=> (and (and (= (type a@@183) DatatypeTypeType) (= (type b@@133) DatatypeTypeType)) (and (CrashTolerantMap.TransitionLabel.InternalLabel_q a@@183) (CrashTolerantMap.TransitionLabel.InternalLabel_q b@@133))) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@183 b@@133) true))
 :qid |unknown.0:0|
 :skolemid |3460|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@183 b@@133) (CrashTolerantMap.TransitionLabel.InternalLabel_q a@@183))
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@183 b@@133) (CrashTolerantMap.TransitionLabel.InternalLabel_q b@@133))
)))
(assert (forall ((a@@184 T@U) (b@@134 T@U) ) (!  (=> (and (and (= (type a@@184) DatatypeTypeType) (= (type b@@134) DatatypeTypeType)) (and (CrashTolerantMap.TransitionLabel.CommitStartLabel_q a@@184) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q b@@134))) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@184 b@@134) (= (CrashTolerantMap.TransitionLabel.newBoundaryLsn a@@184) (CrashTolerantMap.TransitionLabel.newBoundaryLsn b@@134))))
 :qid |unknown.0:0|
 :skolemid |3461|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@184 b@@134) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q a@@184))
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@184 b@@134) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q b@@134))
)))
(assert (forall ((a@@185 T@U) (b@@135 T@U) ) (!  (=> (and (and (= (type a@@185) DatatypeTypeType) (= (type b@@135) DatatypeTypeType)) (and (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q a@@185) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q b@@135))) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@185 b@@135) true))
 :qid |unknown.0:0|
 :skolemid |3462|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@185 b@@135) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q a@@185))
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@185 b@@135) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q b@@135))
)))
(assert (forall ((a@@186 T@U) (b@@136 T@U) ) (!  (=> (and (and (= (type a@@186) DatatypeTypeType) (= (type b@@136) DatatypeTypeType)) (and (CrashTolerantMap.TransitionLabel.CrashLabel_q a@@186) (CrashTolerantMap.TransitionLabel.CrashLabel_q b@@136))) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@186 b@@136) true))
 :qid |unknown.0:0|
 :skolemid |3463|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@186 b@@136) (CrashTolerantMap.TransitionLabel.CrashLabel_q a@@186))
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@186 b@@136) (CrashTolerantMap.TransitionLabel.CrashLabel_q b@@136))
)))
(assert (forall ((a@@187 T@U) (b@@137 T@U) ) (!  (=> (and (= (type a@@187) DatatypeTypeType) (= (type b@@137) DatatypeTypeType)) (= (|CrashTolerantMap.TransitionLabel#Equal| a@@187 b@@137) (= a@@187 b@@137)))
 :qid |unknown.0:0|
 :skolemid |3464|
 :pattern ( (|CrashTolerantMap.TransitionLabel#Equal| a@@187 b@@137))
)))
(assert  (=> true (forall ((this@@124 T@U) ) (!  (=> (and (= (type this@@124) DatatypeTypeType) (or (|CrashTolerantMap.TransitionLabel.WF#canCall| this@@124) ($Is this@@124 Tclass.CrashTolerantMap.TransitionLabel))) true)
 :qid |CrashTolerantMapidfy.26:15|
 :skolemid |3465|
 :pattern ( (CrashTolerantMap.TransitionLabel.WF this@@124))
))))
(assert (forall ((this@@125 T@U) ) (!  (=> (and (= (type this@@125) DatatypeTypeType) ($Is this@@125 Tclass.CrashTolerantMap.TransitionLabel)) (= (|CrashTolerantMap.TransitionLabel.WF#requires| this@@125) true))
 :qid |CrashTolerantMapidfy.26:15|
 :skolemid |3466|
 :pattern ( (|CrashTolerantMap.TransitionLabel.WF#requires| this@@125))
)))
(assert  (=> true (forall ((this@@126 T@U) ) (!  (=> (and (= (type this@@126) DatatypeTypeType) (or (|CrashTolerantMap.TransitionLabel.WF#canCall| this@@126) ($Is this@@126 Tclass.CrashTolerantMap.TransitionLabel))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q this@@126) (|MsgHistoryMod.MsgHistory.WF#canCall| (CrashTolerantMap.TransitionLabel.records this@@126)))) (= (CrashTolerantMap.TransitionLabel.WF this@@126)  (and true (=> (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q this@@126) (MsgHistoryMod.MsgHistory.WF (CrashTolerantMap.TransitionLabel.records this@@126)))))))
 :qid |CrashTolerantMapidfy.26:15|
 :skolemid |3467|
 :pattern ( (CrashTolerantMap.TransitionLabel.WF this@@126))
))))
(assert  (=> true (forall ((this@@127 T@U) ) (!  (=> (and (= (type this@@127) DatatypeTypeType) (or (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit this@@127)) ($Is this@@127 Tclass.CrashTolerantMap.TransitionLabel))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q (Lit this@@127))))) (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit (CrashTolerantMap.TransitionLabel.records (Lit this@@127)))))) (= (CrashTolerantMap.TransitionLabel.WF (Lit this@@127)) (U_2_bool (Lit (bool_2_U  (and true (=> (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q (Lit this@@127)) (MsgHistoryMod.MsgHistory.WF (Lit (CrashTolerantMap.TransitionLabel.records (Lit this@@127))))))))))))
 :qid |CrashTolerantMapidfy.26:15|
 :weight 3
 :skolemid |3468|
 :pattern ( (CrashTolerantMap.TransitionLabel.WF (Lit this@@127)))
))))
(assert (= (type |#CrashTolerantMap.Ephemeral.Unknown|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Ephemeral.Unknown|) |##CrashTolerantMap.Ephemeral.Unknown|))
(assert (forall ((d@@209 T@U) ) (!  (=> (= (type d@@209) DatatypeTypeType) (= (CrashTolerantMap.Ephemeral.Unknown_q d@@209) (= (DatatypeCtorId d@@209) |##CrashTolerantMap.Ephemeral.Unknown|)))
 :qid |unknown.0:0|
 :skolemid |3469|
 :pattern ( (CrashTolerantMap.Ephemeral.Unknown_q d@@209))
)))
(assert (forall ((d@@210 T@U) ) (!  (=> (and (= (type d@@210) DatatypeTypeType) (CrashTolerantMap.Ephemeral.Unknown_q d@@210)) (= d@@210 |#CrashTolerantMap.Ephemeral.Unknown|))
 :qid |unknown.0:0|
 :skolemid |3470|
 :pattern ( (CrashTolerantMap.Ephemeral.Unknown_q d@@210))
)))
(assert (= (type Tclass.CrashTolerantMap.Ephemeral) TyType))
(assert (= (Tag Tclass.CrashTolerantMap.Ephemeral) Tagclass.CrashTolerantMap.Ephemeral))
(assert (= (TagFamily Tclass.CrashTolerantMap.Ephemeral) tytagFamily$Ephemeral))
(assert (forall ((bx@@173 T@U) ) (!  (=> (and (= (type bx@@173) BoxType) ($IsBox bx@@173 Tclass.CrashTolerantMap.Ephemeral)) (and (= ($Box ($Unbox DatatypeTypeType bx@@173)) bx@@173) ($Is ($Unbox DatatypeTypeType bx@@173) Tclass.CrashTolerantMap.Ephemeral)))
 :qid |unknown.0:0|
 :skolemid |3471|
 :pattern ( ($IsBox bx@@173 Tclass.CrashTolerantMap.Ephemeral))
)))
(assert ($Is |#CrashTolerantMap.Ephemeral.Unknown| Tclass.CrashTolerantMap.Ephemeral))
(assert (forall (($h@@190 T@U) ) (!  (=> (and (= (type $h@@190) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@190)) ($IsAlloc |#CrashTolerantMap.Ephemeral.Unknown| Tclass.CrashTolerantMap.Ephemeral $h@@190))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3472|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Ephemeral.Unknown| Tclass.CrashTolerantMap.Ephemeral $h@@190))
)))
(assert (= |#CrashTolerantMap.Ephemeral.Unknown| (Lit |#CrashTolerantMap.Ephemeral.Unknown|)))
(assert (forall ((arg0@@590 T@U) ) (! (= (type (|#CrashTolerantMap.Ephemeral.Known| arg0@@590)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMap.Ephemeral.Known|
 :pattern ( (|#CrashTolerantMap.Ephemeral.Known| arg0@@590))
)))
(assert (forall ((|a#5#0#0@@12| T@U) ) (!  (=> (= (type |a#5#0#0@@12|) DatatypeTypeType) (= (DatatypeCtorId (|#CrashTolerantMap.Ephemeral.Known| |a#5#0#0@@12|)) |##CrashTolerantMap.Ephemeral.Known|))
 :qid |CrashTolerantMapidfy.35:13|
 :skolemid |3473|
 :pattern ( (|#CrashTolerantMap.Ephemeral.Known| |a#5#0#0@@12|))
)))
(assert (forall ((d@@211 T@U) ) (!  (=> (= (type d@@211) DatatypeTypeType) (= (CrashTolerantMap.Ephemeral.Known_q d@@211) (= (DatatypeCtorId d@@211) |##CrashTolerantMap.Ephemeral.Known|)))
 :qid |unknown.0:0|
 :skolemid |3474|
 :pattern ( (CrashTolerantMap.Ephemeral.Known_q d@@211))
)))
(assert (forall ((d@@212 T@U) ) (!  (=> (and (= (type d@@212) DatatypeTypeType) (CrashTolerantMap.Ephemeral.Known_q d@@212)) (exists ((|a#6#0#0@@12| T@U) ) (!  (and (= (type |a#6#0#0@@12|) DatatypeTypeType) (= d@@212 (|#CrashTolerantMap.Ephemeral.Known| |a#6#0#0@@12|)))
 :qid |CrashTolerantMapidfy.35:13|
 :skolemid |3475|
 :no-pattern (type |a#6#0#0@@12|)
 :no-pattern (U_2_int |a#6#0#0@@12|)
 :no-pattern (U_2_bool |a#6#0#0@@12|)
)))
 :qid |unknown.0:0|
 :skolemid |3476|
 :pattern ( (CrashTolerantMap.Ephemeral.Known_q d@@212))
)))
(assert (forall ((|a#7#0#0@@12| T@U) ) (!  (=> (= (type |a#7#0#0@@12|) DatatypeTypeType) (= ($Is (|#CrashTolerantMap.Ephemeral.Known| |a#7#0#0@@12|) Tclass.CrashTolerantMap.Ephemeral) ($Is |a#7#0#0@@12| Tclass.AbstractMap.Variables)))
 :qid |CrashTolerantMapidfy.35:13|
 :skolemid |3477|
 :pattern ( ($Is (|#CrashTolerantMap.Ephemeral.Known| |a#7#0#0@@12|) Tclass.CrashTolerantMap.Ephemeral))
)))
(assert (forall ((|a#8#0#0@@11| T@U) ($h@@191 T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@11|) DatatypeTypeType) (= (type $h@@191) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@191)) (= ($IsAlloc (|#CrashTolerantMap.Ephemeral.Known| |a#8#0#0@@11|) Tclass.CrashTolerantMap.Ephemeral $h@@191) ($IsAlloc |a#8#0#0@@11| Tclass.AbstractMap.Variables $h@@191)))
 :qid |CrashTolerantMapidfy.35:13|
 :skolemid |3478|
 :pattern ( ($IsAlloc (|#CrashTolerantMap.Ephemeral.Known| |a#8#0#0@@11|) Tclass.CrashTolerantMap.Ephemeral $h@@191))
)))
(assert (forall ((d@@213 T@U) ($h@@192 T@U) ) (!  (=> (and (and (= (type d@@213) DatatypeTypeType) (= (type $h@@192) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@192) (and (CrashTolerantMap.Ephemeral.Known_q d@@213) ($IsAlloc d@@213 Tclass.CrashTolerantMap.Ephemeral $h@@192)))) ($IsAlloc (CrashTolerantMap.Ephemeral.v d@@213) Tclass.AbstractMap.Variables $h@@192))
 :qid |unknown.0:0|
 :skolemid |3479|
 :pattern ( ($IsAlloc (CrashTolerantMap.Ephemeral.v d@@213) Tclass.AbstractMap.Variables $h@@192))
)))
(assert (forall ((|a#9#0#0@@9| T@U) ) (!  (=> (= (type |a#9#0#0@@9|) DatatypeTypeType) (= (|#CrashTolerantMap.Ephemeral.Known| (Lit |a#9#0#0@@9|)) (Lit (|#CrashTolerantMap.Ephemeral.Known| |a#9#0#0@@9|))))
 :qid |CrashTolerantMapidfy.35:13|
 :skolemid |3480|
 :pattern ( (|#CrashTolerantMap.Ephemeral.Known| (Lit |a#9#0#0@@9|)))
)))
(assert (forall ((|a#10#0#0@@9| T@U) ) (!  (=> (= (type |a#10#0#0@@9|) DatatypeTypeType) (= (CrashTolerantMap.Ephemeral.v (|#CrashTolerantMap.Ephemeral.Known| |a#10#0#0@@9|)) |a#10#0#0@@9|))
 :qid |CrashTolerantMapidfy.35:13|
 :skolemid |3481|
 :pattern ( (|#CrashTolerantMap.Ephemeral.Known| |a#10#0#0@@9|))
)))
(assert (forall ((|a#11#0#0@@8| T@U) ) (!  (=> (= (type |a#11#0#0@@8|) DatatypeTypeType) (< (DtRank |a#11#0#0@@8|) (DtRank (|#CrashTolerantMap.Ephemeral.Known| |a#11#0#0@@8|))))
 :qid |CrashTolerantMapidfy.35:13|
 :skolemid |3482|
 :pattern ( (|#CrashTolerantMap.Ephemeral.Known| |a#11#0#0@@8|))
)))
(assert (forall ((d@@214 T@U) ) (!  (=> (and (= (type d@@214) DatatypeTypeType) (|$IsA#CrashTolerantMap.Ephemeral| d@@214)) (or (CrashTolerantMap.Ephemeral.Unknown_q d@@214) (CrashTolerantMap.Ephemeral.Known_q d@@214)))
 :qid |unknown.0:0|
 :skolemid |3483|
 :pattern ( (|$IsA#CrashTolerantMap.Ephemeral| d@@214))
)))
(assert (forall ((d@@215 T@U) ) (!  (=> (and (= (type d@@215) DatatypeTypeType) ($Is d@@215 Tclass.CrashTolerantMap.Ephemeral)) (or (CrashTolerantMap.Ephemeral.Unknown_q d@@215) (CrashTolerantMap.Ephemeral.Known_q d@@215)))
 :qid |unknown.0:0|
 :skolemid |3484|
 :pattern ( (CrashTolerantMap.Ephemeral.Known_q d@@215) ($Is d@@215 Tclass.CrashTolerantMap.Ephemeral))
 :pattern ( (CrashTolerantMap.Ephemeral.Unknown_q d@@215) ($Is d@@215 Tclass.CrashTolerantMap.Ephemeral))
)))
(assert (forall ((a@@188 T@U) (b@@138 T@U) ) (!  (=> (and (and (= (type a@@188) DatatypeTypeType) (= (type b@@138) DatatypeTypeType)) (and (CrashTolerantMap.Ephemeral.Unknown_q a@@188) (CrashTolerantMap.Ephemeral.Unknown_q b@@138))) (= (|CrashTolerantMap.Ephemeral#Equal| a@@188 b@@138) true))
 :qid |unknown.0:0|
 :skolemid |3485|
 :pattern ( (|CrashTolerantMap.Ephemeral#Equal| a@@188 b@@138) (CrashTolerantMap.Ephemeral.Unknown_q a@@188))
 :pattern ( (|CrashTolerantMap.Ephemeral#Equal| a@@188 b@@138) (CrashTolerantMap.Ephemeral.Unknown_q b@@138))
)))
(assert (forall ((a@@189 T@U) (b@@139 T@U) ) (!  (=> (and (and (= (type a@@189) DatatypeTypeType) (= (type b@@139) DatatypeTypeType)) (and (CrashTolerantMap.Ephemeral.Known_q a@@189) (CrashTolerantMap.Ephemeral.Known_q b@@139))) (= (|CrashTolerantMap.Ephemeral#Equal| a@@189 b@@139) (|AbstractMap.Variables#Equal| (CrashTolerantMap.Ephemeral.v a@@189) (CrashTolerantMap.Ephemeral.v b@@139))))
 :qid |unknown.0:0|
 :skolemid |3486|
 :pattern ( (|CrashTolerantMap.Ephemeral#Equal| a@@189 b@@139) (CrashTolerantMap.Ephemeral.Known_q a@@189))
 :pattern ( (|CrashTolerantMap.Ephemeral#Equal| a@@189 b@@139) (CrashTolerantMap.Ephemeral.Known_q b@@139))
)))
(assert (forall ((a@@190 T@U) (b@@140 T@U) ) (!  (=> (and (= (type a@@190) DatatypeTypeType) (= (type b@@140) DatatypeTypeType)) (= (|CrashTolerantMap.Ephemeral#Equal| a@@190 b@@140) (= a@@190 b@@140)))
 :qid |unknown.0:0|
 :skolemid |3487|
 :pattern ( (|CrashTolerantMap.Ephemeral#Equal| a@@190 b@@140))
)))
(assert (forall ((arg0@@591 T@U) (arg1@@281 T@U) (arg2@@167 T@U) ) (! (= (type (|#CrashTolerantMap.Variables.Variables| arg0@@591 arg1@@281 arg2@@167)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMap.Variables.Variables|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| arg0@@591 arg1@@281 arg2@@167))
)))
(assert (forall ((|a#12#0#0@@7| T@U) (|a#12#1#0@@2| T@U) (|a#12#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#12#0#0@@7|) DatatypeTypeType) (= (type |a#12#1#0@@2|) DatatypeTypeType)) (= (type |a#12#2#0@@1|) DatatypeTypeType)) (= (DatatypeCtorId (|#CrashTolerantMap.Variables.Variables| |a#12#0#0@@7| |a#12#1#0@@2| |a#12#2#0@@1|)) |##CrashTolerantMap.Variables.Variables|))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3488|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| |a#12#0#0@@7| |a#12#1#0@@2| |a#12#2#0@@1|))
)))
(assert (forall ((d@@216 T@U) ) (!  (=> (= (type d@@216) DatatypeTypeType) (= (CrashTolerantMap.Variables.Variables_q d@@216) (= (DatatypeCtorId d@@216) |##CrashTolerantMap.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |3489|
 :pattern ( (CrashTolerantMap.Variables.Variables_q d@@216))
)))
(assert (forall ((d@@217 T@U) ) (!  (=> (and (= (type d@@217) DatatypeTypeType) (CrashTolerantMap.Variables.Variables_q d@@217)) (exists ((|a#13#0#0@@5| T@U) (|a#13#1#0@@2| T@U) (|a#13#2#0@@2| T@U) ) (!  (and (and (and (= (type |a#13#0#0@@5|) DatatypeTypeType) (= (type |a#13#1#0@@2|) DatatypeTypeType)) (= (type |a#13#2#0@@2|) DatatypeTypeType)) (= d@@217 (|#CrashTolerantMap.Variables.Variables| |a#13#0#0@@5| |a#13#1#0@@2| |a#13#2#0@@2|)))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3490|
 :no-pattern (type |a#13#0#0@@5|)
 :no-pattern (type |a#13#1#0@@2|)
 :no-pattern (type |a#13#2#0@@2|)
 :no-pattern (U_2_int |a#13#0#0@@5|)
 :no-pattern (U_2_bool |a#13#0#0@@5|)
 :no-pattern (U_2_int |a#13#1#0@@2|)
 :no-pattern (U_2_bool |a#13#1#0@@2|)
 :no-pattern (U_2_int |a#13#2#0@@2|)
 :no-pattern (U_2_bool |a#13#2#0@@2|)
)))
 :qid |unknown.0:0|
 :skolemid |3491|
 :pattern ( (CrashTolerantMap.Variables.Variables_q d@@217))
)))
(assert (forall ((|a#14#0#0@@6| T@U) (|a#14#1#0@@3| T@U) (|a#14#2#0@@2| T@U) ) (!  (=> (and (and (= (type |a#14#0#0@@6|) DatatypeTypeType) (= (type |a#14#1#0@@3|) DatatypeTypeType)) (= (type |a#14#2#0@@2|) DatatypeTypeType)) (= ($Is (|#CrashTolerantMap.Variables.Variables| |a#14#0#0@@6| |a#14#1#0@@3| |a#14#2#0@@2|) Tclass.CrashTolerantMap.Variables)  (and (and ($Is |a#14#0#0@@6| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) ($Is |a#14#1#0@@3| Tclass.CrashTolerantMap.Ephemeral)) ($Is |a#14#2#0@@2| (Tclass.Options.Option (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3492|
 :pattern ( ($Is (|#CrashTolerantMap.Variables.Variables| |a#14#0#0@@6| |a#14#1#0@@3| |a#14#2#0@@2|) Tclass.CrashTolerantMap.Variables))
)))
(assert (forall ((|a#15#0#0@@6| T@U) (|a#15#1#0@@3| T@U) (|a#15#2#0@@2| T@U) ($h@@193 T@U) ) (!  (=> (and (and (and (and (= (type |a#15#0#0@@6|) DatatypeTypeType) (= (type |a#15#1#0@@3|) DatatypeTypeType)) (= (type |a#15#2#0@@2|) DatatypeTypeType)) (= (type $h@@193) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@193)) (= ($IsAlloc (|#CrashTolerantMap.Variables.Variables| |a#15#0#0@@6| |a#15#1#0@@3| |a#15#2#0@@2|) Tclass.CrashTolerantMap.Variables $h@@193)  (and (and ($IsAlloc |a#15#0#0@@6| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@193) ($IsAlloc |a#15#1#0@@3| Tclass.CrashTolerantMap.Ephemeral $h@@193)) ($IsAlloc |a#15#2#0@@2| (Tclass.Options.Option (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) $h@@193))))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3493|
 :pattern ( ($IsAlloc (|#CrashTolerantMap.Variables.Variables| |a#15#0#0@@6| |a#15#1#0@@3| |a#15#2#0@@2|) Tclass.CrashTolerantMap.Variables $h@@193))
)))
(assert (forall ((d@@218 T@U) ($h@@194 T@U) ) (!  (=> (and (and (= (type d@@218) DatatypeTypeType) (= (type $h@@194) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@194) (and (CrashTolerantMap.Variables.Variables_q d@@218) ($IsAlloc d@@218 Tclass.CrashTolerantMap.Variables $h@@194)))) ($IsAlloc (CrashTolerantMap.Variables.persistent d@@218) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@194))
 :qid |unknown.0:0|
 :skolemid |3494|
 :pattern ( ($IsAlloc (CrashTolerantMap.Variables.persistent d@@218) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@194))
)))
(assert (forall ((d@@219 T@U) ($h@@195 T@U) ) (!  (=> (and (and (= (type d@@219) DatatypeTypeType) (= (type $h@@195) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@195) (and (CrashTolerantMap.Variables.Variables_q d@@219) ($IsAlloc d@@219 Tclass.CrashTolerantMap.Variables $h@@195)))) ($IsAlloc (CrashTolerantMap.Variables.ephemeral d@@219) Tclass.CrashTolerantMap.Ephemeral $h@@195))
 :qid |unknown.0:0|
 :skolemid |3495|
 :pattern ( ($IsAlloc (CrashTolerantMap.Variables.ephemeral d@@219) Tclass.CrashTolerantMap.Ephemeral $h@@195))
)))
(assert (forall ((d@@220 T@U) ($h@@196 T@U) ) (!  (=> (and (and (= (type d@@220) DatatypeTypeType) (= (type $h@@196) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@196) (and (CrashTolerantMap.Variables.Variables_q d@@220) ($IsAlloc d@@220 Tclass.CrashTolerantMap.Variables $h@@196)))) ($IsAlloc (CrashTolerantMap.Variables.inFlight d@@220) (Tclass.Options.Option (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) $h@@196))
 :qid |unknown.0:0|
 :skolemid |3496|
 :pattern ( ($IsAlloc (CrashTolerantMap.Variables.inFlight d@@220) (Tclass.Options.Option (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)) $h@@196))
)))
(assert (forall ((|a#16#0#0@@6| T@U) (|a#16#1#0@@3| T@U) (|a#16#2#0@@2| T@U) ) (!  (=> (and (and (= (type |a#16#0#0@@6|) DatatypeTypeType) (= (type |a#16#1#0@@3|) DatatypeTypeType)) (= (type |a#16#2#0@@2|) DatatypeTypeType)) (= (|#CrashTolerantMap.Variables.Variables| (Lit |a#16#0#0@@6|) (Lit |a#16#1#0@@3|) (Lit |a#16#2#0@@2|)) (Lit (|#CrashTolerantMap.Variables.Variables| |a#16#0#0@@6| |a#16#1#0@@3| |a#16#2#0@@2|))))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3497|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| (Lit |a#16#0#0@@6|) (Lit |a#16#1#0@@3|) (Lit |a#16#2#0@@2|)))
)))
(assert (forall ((|a#17#0#0@@5| T@U) (|a#17#1#0@@2| T@U) (|a#17#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#17#0#0@@5|) DatatypeTypeType) (= (type |a#17#1#0@@2|) DatatypeTypeType)) (= (type |a#17#2#0@@1|) DatatypeTypeType)) (= (CrashTolerantMap.Variables.persistent (|#CrashTolerantMap.Variables.Variables| |a#17#0#0@@5| |a#17#1#0@@2| |a#17#2#0@@1|)) |a#17#0#0@@5|))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3498|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| |a#17#0#0@@5| |a#17#1#0@@2| |a#17#2#0@@1|))
)))
(assert (forall ((|a#18#0#0@@5| T@U) (|a#18#1#0@@1| T@U) (|a#18#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#18#0#0@@5|) DatatypeTypeType) (= (type |a#18#1#0@@1|) DatatypeTypeType)) (= (type |a#18#2#0@@0|) DatatypeTypeType)) (< (DtRank |a#18#0#0@@5|) (DtRank (|#CrashTolerantMap.Variables.Variables| |a#18#0#0@@5| |a#18#1#0@@1| |a#18#2#0@@0|))))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3499|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| |a#18#0#0@@5| |a#18#1#0@@1| |a#18#2#0@@0|))
)))
(assert (forall ((|a#19#0#0@@5| T@U) (|a#19#1#0@@1| T@U) (|a#19#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#19#0#0@@5|) DatatypeTypeType) (= (type |a#19#1#0@@1|) DatatypeTypeType)) (= (type |a#19#2#0@@0|) DatatypeTypeType)) (= (CrashTolerantMap.Variables.ephemeral (|#CrashTolerantMap.Variables.Variables| |a#19#0#0@@5| |a#19#1#0@@1| |a#19#2#0@@0|)) |a#19#1#0@@1|))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3500|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| |a#19#0#0@@5| |a#19#1#0@@1| |a#19#2#0@@0|))
)))
(assert (forall ((|a#20#0#0@@5| T@U) (|a#20#1#0@@1| T@U) (|a#20#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#20#0#0@@5|) DatatypeTypeType) (= (type |a#20#1#0@@1|) DatatypeTypeType)) (= (type |a#20#2#0@@0|) DatatypeTypeType)) (< (DtRank |a#20#1#0@@1|) (DtRank (|#CrashTolerantMap.Variables.Variables| |a#20#0#0@@5| |a#20#1#0@@1| |a#20#2#0@@0|))))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3501|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| |a#20#0#0@@5| |a#20#1#0@@1| |a#20#2#0@@0|))
)))
(assert (forall ((|a#21#0#0@@4| T@U) (|a#21#1#0@@0| T@U) (|a#21#2#0| T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@4|) DatatypeTypeType) (= (type |a#21#1#0@@0|) DatatypeTypeType)) (= (type |a#21#2#0|) DatatypeTypeType)) (= (CrashTolerantMap.Variables.inFlight (|#CrashTolerantMap.Variables.Variables| |a#21#0#0@@4| |a#21#1#0@@0| |a#21#2#0|)) |a#21#2#0|))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3502|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| |a#21#0#0@@4| |a#21#1#0@@0| |a#21#2#0|))
)))
(assert (forall ((|a#22#0#0@@4| T@U) (|a#22#1#0@@0| T@U) (|a#22#2#0| T@U) ) (!  (=> (and (and (= (type |a#22#0#0@@4|) DatatypeTypeType) (= (type |a#22#1#0@@0|) DatatypeTypeType)) (= (type |a#22#2#0|) DatatypeTypeType)) (< (DtRank |a#22#2#0|) (DtRank (|#CrashTolerantMap.Variables.Variables| |a#22#0#0@@4| |a#22#1#0@@0| |a#22#2#0|))))
 :qid |CrashTolerantMapidfy.38:5|
 :skolemid |3503|
 :pattern ( (|#CrashTolerantMap.Variables.Variables| |a#22#0#0@@4| |a#22#1#0@@0| |a#22#2#0|))
)))
(assert (forall ((d@@221 T@U) ) (!  (=> (and (= (type d@@221) DatatypeTypeType) (|$IsA#CrashTolerantMap.Variables| d@@221)) (CrashTolerantMap.Variables.Variables_q d@@221))
 :qid |unknown.0:0|
 :skolemid |3504|
 :pattern ( (|$IsA#CrashTolerantMap.Variables| d@@221))
)))
(assert (forall ((d@@222 T@U) ) (!  (=> (and (= (type d@@222) DatatypeTypeType) ($Is d@@222 Tclass.CrashTolerantMap.Variables)) (CrashTolerantMap.Variables.Variables_q d@@222))
 :qid |unknown.0:0|
 :skolemid |3505|
 :pattern ( (CrashTolerantMap.Variables.Variables_q d@@222) ($Is d@@222 Tclass.CrashTolerantMap.Variables))
)))
(assert (forall ((a@@191 T@U) (b@@141 T@U) ) (!  (=> (and (and (= (type a@@191) DatatypeTypeType) (= (type b@@141) DatatypeTypeType)) true) (= (|CrashTolerantMap.Variables#Equal| a@@191 b@@141)  (and (and (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent a@@191) (CrashTolerantMap.Variables.persistent b@@141)) (|CrashTolerantMap.Ephemeral#Equal| (CrashTolerantMap.Variables.ephemeral a@@191) (CrashTolerantMap.Variables.ephemeral b@@141))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight a@@191) (CrashTolerantMap.Variables.inFlight b@@141)))))
 :qid |unknown.0:0|
 :skolemid |3506|
 :pattern ( (|CrashTolerantMap.Variables#Equal| a@@191 b@@141))
)))
(assert (forall ((a@@192 T@U) (b@@142 T@U) ) (!  (=> (and (= (type a@@192) DatatypeTypeType) (= (type b@@142) DatatypeTypeType)) (= (|CrashTolerantMap.Variables#Equal| a@@192 b@@142) (= a@@192 b@@142)))
 :qid |unknown.0:0|
 :skolemid |3507|
 :pattern ( (|CrashTolerantMap.Variables#Equal| a@@192 b@@142))
)))
(assert  (=> true (forall ((this@@128 T@U) ) (!  (=> (and (= (type this@@128) DatatypeTypeType) (or (|CrashTolerantMap.Variables.WF#canCall| this@@128) ($Is this@@128 Tclass.CrashTolerantMap.Variables))) true)
 :qid |CrashTolerantMapidfy.43:15|
 :skolemid |3508|
 :pattern ( (CrashTolerantMap.Variables.WF this@@128))
))))
(assert (forall ((this@@129 T@U) ) (!  (=> (and (= (type this@@129) DatatypeTypeType) ($Is this@@129 Tclass.CrashTolerantMap.Variables)) (= (|CrashTolerantMap.Variables.WF#requires| this@@129) true))
 :qid |CrashTolerantMapidfy.43:15|
 :skolemid |3509|
 :pattern ( (|CrashTolerantMap.Variables.WF#requires| this@@129))
)))
(assert  (=> true (forall ((this@@130 T@U) ) (!  (=> (and (= (type this@@130) DatatypeTypeType) (or (|CrashTolerantMap.Variables.WF#canCall| this@@130) ($Is this@@130 Tclass.CrashTolerantMap.Variables))) (= (CrashTolerantMap.Variables.WF this@@130) (U_2_bool (Lit (bool_2_U true)))))
 :qid |CrashTolerantMapidfy.43:15|
 :skolemid |3510|
 :pattern ( (CrashTolerantMap.Variables.WF this@@130))
))))
(assert  (=> true (forall ((this@@131 T@U) ) (!  (=> (and (= (type this@@131) DatatypeTypeType) (or (|CrashTolerantMap.Variables.WF#canCall| (Lit this@@131)) ($Is this@@131 Tclass.CrashTolerantMap.Variables))) (= (CrashTolerantMap.Variables.WF (Lit this@@131)) (U_2_bool (Lit (bool_2_U true)))))
 :qid |CrashTolerantMapidfy.43:15|
 :weight 3
 :skolemid |3511|
 :pattern ( (CrashTolerantMap.Variables.WF (Lit this@@131)))
))))
(assert (= (type |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep|) |##CrashTolerantMap.Step.LoadEphemeralFromPersistentStep|))
(assert (forall ((d@@223 T@U) ) (!  (=> (= (type d@@223) DatatypeTypeType) (= (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q d@@223) (= (DatatypeCtorId d@@223) |##CrashTolerantMap.Step.LoadEphemeralFromPersistentStep|)))
 :qid |unknown.0:0|
 :skolemid |3512|
 :pattern ( (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q d@@223))
)))
(assert (forall ((d@@224 T@U) ) (!  (=> (and (= (type d@@224) DatatypeTypeType) (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q d@@224)) (= d@@224 |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep|))
 :qid |unknown.0:0|
 :skolemid |3513|
 :pattern ( (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q d@@224))
)))
(assert (= (type Tclass.CrashTolerantMap.Step) TyType))
(assert (= (Tag Tclass.CrashTolerantMap.Step) Tagclass.CrashTolerantMap.Step))
(assert (= (TagFamily Tclass.CrashTolerantMap.Step) tytagFamily$Step))
(assert (forall ((bx@@174 T@U) ) (!  (=> (and (= (type bx@@174) BoxType) ($IsBox bx@@174 Tclass.CrashTolerantMap.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@174)) bx@@174) ($Is ($Unbox DatatypeTypeType bx@@174) Tclass.CrashTolerantMap.Step)))
 :qid |unknown.0:0|
 :skolemid |3514|
 :pattern ( ($IsBox bx@@174 Tclass.CrashTolerantMap.Step))
)))
(assert ($Is |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep| Tclass.CrashTolerantMap.Step))
(assert (forall (($h@@197 T@U) ) (!  (=> (and (= (type $h@@197) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@197)) ($IsAlloc |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep| Tclass.CrashTolerantMap.Step $h@@197))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3515|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep| Tclass.CrashTolerantMap.Step $h@@197))
)))
(assert (= |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep| (Lit |#CrashTolerantMap.Step.LoadEphemeralFromPersistentStep|)))
(assert (= (type |#CrashTolerantMap.Step.PutRecordsStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Step.PutRecordsStep|) |##CrashTolerantMap.Step.PutRecordsStep|))
(assert (forall ((d@@225 T@U) ) (!  (=> (= (type d@@225) DatatypeTypeType) (= (CrashTolerantMap.Step.PutRecordsStep_q d@@225) (= (DatatypeCtorId d@@225) |##CrashTolerantMap.Step.PutRecordsStep|)))
 :qid |unknown.0:0|
 :skolemid |3516|
 :pattern ( (CrashTolerantMap.Step.PutRecordsStep_q d@@225))
)))
(assert (forall ((d@@226 T@U) ) (!  (=> (and (= (type d@@226) DatatypeTypeType) (CrashTolerantMap.Step.PutRecordsStep_q d@@226)) (= d@@226 |#CrashTolerantMap.Step.PutRecordsStep|))
 :qid |unknown.0:0|
 :skolemid |3517|
 :pattern ( (CrashTolerantMap.Step.PutRecordsStep_q d@@226))
)))
(assert ($Is |#CrashTolerantMap.Step.PutRecordsStep| Tclass.CrashTolerantMap.Step))
(assert (forall (($h@@198 T@U) ) (!  (=> (and (= (type $h@@198) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@198)) ($IsAlloc |#CrashTolerantMap.Step.PutRecordsStep| Tclass.CrashTolerantMap.Step $h@@198))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3518|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Step.PutRecordsStep| Tclass.CrashTolerantMap.Step $h@@198))
)))
(assert (= |#CrashTolerantMap.Step.PutRecordsStep| (Lit |#CrashTolerantMap.Step.PutRecordsStep|)))
(assert (= (type |#CrashTolerantMap.Step.QueryStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Step.QueryStep|) |##CrashTolerantMap.Step.QueryStep|))
(assert (forall ((d@@227 T@U) ) (!  (=> (= (type d@@227) DatatypeTypeType) (= (CrashTolerantMap.Step.QueryStep_q d@@227) (= (DatatypeCtorId d@@227) |##CrashTolerantMap.Step.QueryStep|)))
 :qid |unknown.0:0|
 :skolemid |3519|
 :pattern ( (CrashTolerantMap.Step.QueryStep_q d@@227))
)))
(assert (forall ((d@@228 T@U) ) (!  (=> (and (= (type d@@228) DatatypeTypeType) (CrashTolerantMap.Step.QueryStep_q d@@228)) (= d@@228 |#CrashTolerantMap.Step.QueryStep|))
 :qid |unknown.0:0|
 :skolemid |3520|
 :pattern ( (CrashTolerantMap.Step.QueryStep_q d@@228))
)))
(assert ($Is |#CrashTolerantMap.Step.QueryStep| Tclass.CrashTolerantMap.Step))
(assert (forall (($h@@199 T@U) ) (!  (=> (and (= (type $h@@199) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@199)) ($IsAlloc |#CrashTolerantMap.Step.QueryStep| Tclass.CrashTolerantMap.Step $h@@199))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3521|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Step.QueryStep| Tclass.CrashTolerantMap.Step $h@@199))
)))
(assert (= |#CrashTolerantMap.Step.QueryStep| (Lit |#CrashTolerantMap.Step.QueryStep|)))
(assert (forall ((arg0@@592 T@U) ) (! (= (type (|#CrashTolerantMap.Step.FreezeMapInternalStep| arg0@@592)) DatatypeTypeType)
 :qid |funType:#CrashTolerantMap.Step.FreezeMapInternalStep|
 :pattern ( (|#CrashTolerantMap.Step.FreezeMapInternalStep| arg0@@592))
)))
(assert (forall ((|a#15#0#0@@7| T@U) ) (!  (=> (= (type |a#15#0#0@@7|) DatatypeTypeType) (= (DatatypeCtorId (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#15#0#0@@7|)) |##CrashTolerantMap.Step.FreezeMapInternalStep|))
 :qid |CrashTolerantMapidfy.160:29|
 :skolemid |3522|
 :pattern ( (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#15#0#0@@7|))
)))
(assert (forall ((d@@229 T@U) ) (!  (=> (= (type d@@229) DatatypeTypeType) (= (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@229) (= (DatatypeCtorId d@@229) |##CrashTolerantMap.Step.FreezeMapInternalStep|)))
 :qid |unknown.0:0|
 :skolemid |3523|
 :pattern ( (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@229))
)))
(assert (forall ((d@@230 T@U) ) (!  (=> (and (= (type d@@230) DatatypeTypeType) (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@230)) (exists ((|a#16#0#0@@7| T@U) ) (!  (and (= (type |a#16#0#0@@7|) DatatypeTypeType) (= d@@230 (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#16#0#0@@7|)))
 :qid |CrashTolerantMapidfy.160:29|
 :skolemid |3524|
 :no-pattern (type |a#16#0#0@@7|)
 :no-pattern (U_2_int |a#16#0#0@@7|)
 :no-pattern (U_2_bool |a#16#0#0@@7|)
)))
 :qid |unknown.0:0|
 :skolemid |3525|
 :pattern ( (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@230))
)))
(assert (forall ((|a#17#0#0@@6| T@U) ) (!  (=> (= (type |a#17#0#0@@6|) DatatypeTypeType) (= ($Is (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#17#0#0@@6|) Tclass.CrashTolerantMap.Step) ($Is |a#17#0#0@@6| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))
 :qid |CrashTolerantMapidfy.160:29|
 :skolemid |3526|
 :pattern ( ($Is (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#17#0#0@@6|) Tclass.CrashTolerantMap.Step))
)))
(assert (forall ((|a#18#0#0@@6| T@U) ($h@@200 T@U) ) (!  (=> (and (and (= (type |a#18#0#0@@6|) DatatypeTypeType) (= (type $h@@200) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@200)) (= ($IsAlloc (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#18#0#0@@6|) Tclass.CrashTolerantMap.Step $h@@200) ($IsAlloc |a#18#0#0@@6| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@200)))
 :qid |CrashTolerantMapidfy.160:29|
 :skolemid |3527|
 :pattern ( ($IsAlloc (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#18#0#0@@6|) Tclass.CrashTolerantMap.Step $h@@200))
)))
(assert (forall ((arg0@@593 T@U) ) (! (= (type (CrashTolerantMap.Step.frozenMap arg0@@593)) DatatypeTypeType)
 :qid |funType:CrashTolerantMap.Step.frozenMap|
 :pattern ( (CrashTolerantMap.Step.frozenMap arg0@@593))
)))
(assert (forall ((d@@231 T@U) ($h@@201 T@U) ) (!  (=> (and (and (= (type d@@231) DatatypeTypeType) (= (type $h@@201) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@201) (and (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@231) ($IsAlloc d@@231 Tclass.CrashTolerantMap.Step $h@@201)))) ($IsAlloc (CrashTolerantMap.Step.frozenMap d@@231) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@201))
 :qid |unknown.0:0|
 :skolemid |3528|
 :pattern ( ($IsAlloc (CrashTolerantMap.Step.frozenMap d@@231) (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap) $h@@201))
)))
(assert (forall ((|a#19#0#0@@6| T@U) ) (!  (=> (= (type |a#19#0#0@@6|) DatatypeTypeType) (= (|#CrashTolerantMap.Step.FreezeMapInternalStep| (Lit |a#19#0#0@@6|)) (Lit (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#19#0#0@@6|))))
 :qid |CrashTolerantMapidfy.160:29|
 :skolemid |3529|
 :pattern ( (|#CrashTolerantMap.Step.FreezeMapInternalStep| (Lit |a#19#0#0@@6|)))
)))
(assert (forall ((|a#20#0#0@@6| T@U) ) (!  (=> (= (type |a#20#0#0@@6|) DatatypeTypeType) (= (CrashTolerantMap.Step.frozenMap (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#20#0#0@@6|)) |a#20#0#0@@6|))
 :qid |CrashTolerantMapidfy.160:29|
 :skolemid |3530|
 :pattern ( (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#20#0#0@@6|))
)))
(assert (forall ((|a#21#0#0@@5| T@U) ) (!  (=> (= (type |a#21#0#0@@5|) DatatypeTypeType) (< (DtRank |a#21#0#0@@5|) (DtRank (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#21#0#0@@5|))))
 :qid |CrashTolerantMapidfy.160:29|
 :skolemid |3531|
 :pattern ( (|#CrashTolerantMap.Step.FreezeMapInternalStep| |a#21#0#0@@5|))
)))
(assert (= (type |#CrashTolerantMap.Step.EphemeralInternalStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Step.EphemeralInternalStep|) |##CrashTolerantMap.Step.EphemeralInternalStep|))
(assert (forall ((d@@232 T@U) ) (!  (=> (= (type d@@232) DatatypeTypeType) (= (CrashTolerantMap.Step.EphemeralInternalStep_q d@@232) (= (DatatypeCtorId d@@232) |##CrashTolerantMap.Step.EphemeralInternalStep|)))
 :qid |unknown.0:0|
 :skolemid |3532|
 :pattern ( (CrashTolerantMap.Step.EphemeralInternalStep_q d@@232))
)))
(assert (forall ((d@@233 T@U) ) (!  (=> (and (= (type d@@233) DatatypeTypeType) (CrashTolerantMap.Step.EphemeralInternalStep_q d@@233)) (= d@@233 |#CrashTolerantMap.Step.EphemeralInternalStep|))
 :qid |unknown.0:0|
 :skolemid |3533|
 :pattern ( (CrashTolerantMap.Step.EphemeralInternalStep_q d@@233))
)))
(assert ($Is |#CrashTolerantMap.Step.EphemeralInternalStep| Tclass.CrashTolerantMap.Step))
(assert (forall (($h@@202 T@U) ) (!  (=> (and (= (type $h@@202) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@202)) ($IsAlloc |#CrashTolerantMap.Step.EphemeralInternalStep| Tclass.CrashTolerantMap.Step $h@@202))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3534|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Step.EphemeralInternalStep| Tclass.CrashTolerantMap.Step $h@@202))
)))
(assert (= |#CrashTolerantMap.Step.EphemeralInternalStep| (Lit |#CrashTolerantMap.Step.EphemeralInternalStep|)))
(assert (= (type |#CrashTolerantMap.Step.CommitStartStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Step.CommitStartStep|) |##CrashTolerantMap.Step.CommitStartStep|))
(assert (forall ((d@@234 T@U) ) (!  (=> (= (type d@@234) DatatypeTypeType) (= (CrashTolerantMap.Step.CommitStartStep_q d@@234) (= (DatatypeCtorId d@@234) |##CrashTolerantMap.Step.CommitStartStep|)))
 :qid |unknown.0:0|
 :skolemid |3535|
 :pattern ( (CrashTolerantMap.Step.CommitStartStep_q d@@234))
)))
(assert (forall ((d@@235 T@U) ) (!  (=> (and (= (type d@@235) DatatypeTypeType) (CrashTolerantMap.Step.CommitStartStep_q d@@235)) (= d@@235 |#CrashTolerantMap.Step.CommitStartStep|))
 :qid |unknown.0:0|
 :skolemid |3536|
 :pattern ( (CrashTolerantMap.Step.CommitStartStep_q d@@235))
)))
(assert ($Is |#CrashTolerantMap.Step.CommitStartStep| Tclass.CrashTolerantMap.Step))
(assert (forall (($h@@203 T@U) ) (!  (=> (and (= (type $h@@203) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@203)) ($IsAlloc |#CrashTolerantMap.Step.CommitStartStep| Tclass.CrashTolerantMap.Step $h@@203))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3537|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Step.CommitStartStep| Tclass.CrashTolerantMap.Step $h@@203))
)))
(assert (= |#CrashTolerantMap.Step.CommitStartStep| (Lit |#CrashTolerantMap.Step.CommitStartStep|)))
(assert (= (type |#CrashTolerantMap.Step.CommitCompleteStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Step.CommitCompleteStep|) |##CrashTolerantMap.Step.CommitCompleteStep|))
(assert (forall ((d@@236 T@U) ) (!  (=> (= (type d@@236) DatatypeTypeType) (= (CrashTolerantMap.Step.CommitCompleteStep_q d@@236) (= (DatatypeCtorId d@@236) |##CrashTolerantMap.Step.CommitCompleteStep|)))
 :qid |unknown.0:0|
 :skolemid |3538|
 :pattern ( (CrashTolerantMap.Step.CommitCompleteStep_q d@@236))
)))
(assert (forall ((d@@237 T@U) ) (!  (=> (and (= (type d@@237) DatatypeTypeType) (CrashTolerantMap.Step.CommitCompleteStep_q d@@237)) (= d@@237 |#CrashTolerantMap.Step.CommitCompleteStep|))
 :qid |unknown.0:0|
 :skolemid |3539|
 :pattern ( (CrashTolerantMap.Step.CommitCompleteStep_q d@@237))
)))
(assert ($Is |#CrashTolerantMap.Step.CommitCompleteStep| Tclass.CrashTolerantMap.Step))
(assert (forall (($h@@204 T@U) ) (!  (=> (and (= (type $h@@204) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@204)) ($IsAlloc |#CrashTolerantMap.Step.CommitCompleteStep| Tclass.CrashTolerantMap.Step $h@@204))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3540|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Step.CommitCompleteStep| Tclass.CrashTolerantMap.Step $h@@204))
)))
(assert (= |#CrashTolerantMap.Step.CommitCompleteStep| (Lit |#CrashTolerantMap.Step.CommitCompleteStep|)))
(assert (= (type |#CrashTolerantMap.Step.CrashStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantMap.Step.CrashStep|) |##CrashTolerantMap.Step.CrashStep|))
(assert (forall ((d@@238 T@U) ) (!  (=> (= (type d@@238) DatatypeTypeType) (= (CrashTolerantMap.Step.CrashStep_q d@@238) (= (DatatypeCtorId d@@238) |##CrashTolerantMap.Step.CrashStep|)))
 :qid |unknown.0:0|
 :skolemid |3541|
 :pattern ( (CrashTolerantMap.Step.CrashStep_q d@@238))
)))
(assert (forall ((d@@239 T@U) ) (!  (=> (and (= (type d@@239) DatatypeTypeType) (CrashTolerantMap.Step.CrashStep_q d@@239)) (= d@@239 |#CrashTolerantMap.Step.CrashStep|))
 :qid |unknown.0:0|
 :skolemid |3542|
 :pattern ( (CrashTolerantMap.Step.CrashStep_q d@@239))
)))
(assert ($Is |#CrashTolerantMap.Step.CrashStep| Tclass.CrashTolerantMap.Step))
(assert (forall (($h@@205 T@U) ) (!  (=> (and (= (type $h@@205) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@205)) ($IsAlloc |#CrashTolerantMap.Step.CrashStep| Tclass.CrashTolerantMap.Step $h@@205))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3543|
 :pattern ( ($IsAlloc |#CrashTolerantMap.Step.CrashStep| Tclass.CrashTolerantMap.Step $h@@205))
)))
(assert (= |#CrashTolerantMap.Step.CrashStep| (Lit |#CrashTolerantMap.Step.CrashStep|)))
(assert (forall ((d@@240 T@U) ) (!  (=> (and (= (type d@@240) DatatypeTypeType) (|$IsA#CrashTolerantMap.Step| d@@240)) (or (or (or (or (or (or (or (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q d@@240) (CrashTolerantMap.Step.PutRecordsStep_q d@@240)) (CrashTolerantMap.Step.QueryStep_q d@@240)) (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@240)) (CrashTolerantMap.Step.EphemeralInternalStep_q d@@240)) (CrashTolerantMap.Step.CommitStartStep_q d@@240)) (CrashTolerantMap.Step.CommitCompleteStep_q d@@240)) (CrashTolerantMap.Step.CrashStep_q d@@240)))
 :qid |unknown.0:0|
 :skolemid |3544|
 :pattern ( (|$IsA#CrashTolerantMap.Step| d@@240))
)))
(assert (forall ((d@@241 T@U) ) (!  (=> (and (= (type d@@241) DatatypeTypeType) ($Is d@@241 Tclass.CrashTolerantMap.Step)) (or (or (or (or (or (or (or (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q d@@241) (CrashTolerantMap.Step.PutRecordsStep_q d@@241)) (CrashTolerantMap.Step.QueryStep_q d@@241)) (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@241)) (CrashTolerantMap.Step.EphemeralInternalStep_q d@@241)) (CrashTolerantMap.Step.CommitStartStep_q d@@241)) (CrashTolerantMap.Step.CommitCompleteStep_q d@@241)) (CrashTolerantMap.Step.CrashStep_q d@@241)))
 :qid |unknown.0:0|
 :skolemid |3545|
 :pattern ( (CrashTolerantMap.Step.CrashStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
 :pattern ( (CrashTolerantMap.Step.CommitCompleteStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
 :pattern ( (CrashTolerantMap.Step.CommitStartStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
 :pattern ( (CrashTolerantMap.Step.EphemeralInternalStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
 :pattern ( (CrashTolerantMap.Step.FreezeMapInternalStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
 :pattern ( (CrashTolerantMap.Step.QueryStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
 :pattern ( (CrashTolerantMap.Step.PutRecordsStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
 :pattern ( (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q d@@241) ($Is d@@241 Tclass.CrashTolerantMap.Step))
)))
(assert (forall ((a@@193 T@U) (b@@143 T@U) ) (!  (=> (and (and (= (type a@@193) DatatypeTypeType) (= (type b@@143) DatatypeTypeType)) (and (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q a@@193) (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q b@@143))) (= (|CrashTolerantMap.Step#Equal| a@@193 b@@143) true))
 :qid |unknown.0:0|
 :skolemid |3546|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@193 b@@143) (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q a@@193))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@193 b@@143) (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q b@@143))
)))
(assert (forall ((a@@194 T@U) (b@@144 T@U) ) (!  (=> (and (and (= (type a@@194) DatatypeTypeType) (= (type b@@144) DatatypeTypeType)) (and (CrashTolerantMap.Step.PutRecordsStep_q a@@194) (CrashTolerantMap.Step.PutRecordsStep_q b@@144))) (= (|CrashTolerantMap.Step#Equal| a@@194 b@@144) true))
 :qid |unknown.0:0|
 :skolemid |3547|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@194 b@@144) (CrashTolerantMap.Step.PutRecordsStep_q a@@194))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@194 b@@144) (CrashTolerantMap.Step.PutRecordsStep_q b@@144))
)))
(assert (forall ((a@@195 T@U) (b@@145 T@U) ) (!  (=> (and (and (= (type a@@195) DatatypeTypeType) (= (type b@@145) DatatypeTypeType)) (and (CrashTolerantMap.Step.QueryStep_q a@@195) (CrashTolerantMap.Step.QueryStep_q b@@145))) (= (|CrashTolerantMap.Step#Equal| a@@195 b@@145) true))
 :qid |unknown.0:0|
 :skolemid |3548|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@195 b@@145) (CrashTolerantMap.Step.QueryStep_q a@@195))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@195 b@@145) (CrashTolerantMap.Step.QueryStep_q b@@145))
)))
(assert (forall ((a@@196 T@U) (b@@146 T@U) ) (!  (=> (and (and (= (type a@@196) DatatypeTypeType) (= (type b@@146) DatatypeTypeType)) (and (CrashTolerantMap.Step.FreezeMapInternalStep_q a@@196) (CrashTolerantMap.Step.FreezeMapInternalStep_q b@@146))) (= (|CrashTolerantMap.Step#Equal| a@@196 b@@146) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Step.frozenMap a@@196) (CrashTolerantMap.Step.frozenMap b@@146))))
 :qid |unknown.0:0|
 :skolemid |3549|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@196 b@@146) (CrashTolerantMap.Step.FreezeMapInternalStep_q a@@196))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@196 b@@146) (CrashTolerantMap.Step.FreezeMapInternalStep_q b@@146))
)))
(assert (forall ((a@@197 T@U) (b@@147 T@U) ) (!  (=> (and (and (= (type a@@197) DatatypeTypeType) (= (type b@@147) DatatypeTypeType)) (and (CrashTolerantMap.Step.EphemeralInternalStep_q a@@197) (CrashTolerantMap.Step.EphemeralInternalStep_q b@@147))) (= (|CrashTolerantMap.Step#Equal| a@@197 b@@147) true))
 :qid |unknown.0:0|
 :skolemid |3550|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@197 b@@147) (CrashTolerantMap.Step.EphemeralInternalStep_q a@@197))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@197 b@@147) (CrashTolerantMap.Step.EphemeralInternalStep_q b@@147))
)))
(assert (forall ((a@@198 T@U) (b@@148 T@U) ) (!  (=> (and (and (= (type a@@198) DatatypeTypeType) (= (type b@@148) DatatypeTypeType)) (and (CrashTolerantMap.Step.CommitStartStep_q a@@198) (CrashTolerantMap.Step.CommitStartStep_q b@@148))) (= (|CrashTolerantMap.Step#Equal| a@@198 b@@148) true))
 :qid |unknown.0:0|
 :skolemid |3551|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@198 b@@148) (CrashTolerantMap.Step.CommitStartStep_q a@@198))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@198 b@@148) (CrashTolerantMap.Step.CommitStartStep_q b@@148))
)))
(assert (forall ((a@@199 T@U) (b@@149 T@U) ) (!  (=> (and (and (= (type a@@199) DatatypeTypeType) (= (type b@@149) DatatypeTypeType)) (and (CrashTolerantMap.Step.CommitCompleteStep_q a@@199) (CrashTolerantMap.Step.CommitCompleteStep_q b@@149))) (= (|CrashTolerantMap.Step#Equal| a@@199 b@@149) true))
 :qid |unknown.0:0|
 :skolemid |3552|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@199 b@@149) (CrashTolerantMap.Step.CommitCompleteStep_q a@@199))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@199 b@@149) (CrashTolerantMap.Step.CommitCompleteStep_q b@@149))
)))
(assert (forall ((a@@200 T@U) (b@@150 T@U) ) (!  (=> (and (and (= (type a@@200) DatatypeTypeType) (= (type b@@150) DatatypeTypeType)) (and (CrashTolerantMap.Step.CrashStep_q a@@200) (CrashTolerantMap.Step.CrashStep_q b@@150))) (= (|CrashTolerantMap.Step#Equal| a@@200 b@@150) true))
 :qid |unknown.0:0|
 :skolemid |3553|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@200 b@@150) (CrashTolerantMap.Step.CrashStep_q a@@200))
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@200 b@@150) (CrashTolerantMap.Step.CrashStep_q b@@150))
)))
(assert (forall ((a@@201 T@U) (b@@151 T@U) ) (!  (=> (and (= (type a@@201) DatatypeTypeType) (= (type b@@151) DatatypeTypeType)) (= (|CrashTolerantMap.Step#Equal| a@@201 b@@151) (= a@@201 b@@151)))
 :qid |unknown.0:0|
 :skolemid |3554|
 :pattern ( (|CrashTolerantMap.Step#Equal| a@@201 b@@151))
)))
(assert (= (type Tclass.CrashTolerantMap.__default) TyType))
(assert (= (Tag Tclass.CrashTolerantMap.__default) Tagclass.CrashTolerantMap.__default))
(assert (= (TagFamily Tclass.CrashTolerantMap.__default) tytagFamily$_default))
(assert (forall ((bx@@175 T@U) ) (!  (=> (and (= (type bx@@175) BoxType) ($IsBox bx@@175 Tclass.CrashTolerantMap.__default)) (and (= ($Box ($Unbox refType bx@@175)) bx@@175) ($Is ($Unbox refType bx@@175) Tclass.CrashTolerantMap.__default)))
 :qid |unknown.0:0|
 :skolemid |3555|
 :pattern ( ($IsBox bx@@175 Tclass.CrashTolerantMap.__default))
)))
(assert (forall (($o@@59 T@U) ) (!  (=> (= (type $o@@59) refType) (= ($Is $o@@59 Tclass.CrashTolerantMap.__default)  (or (= $o@@59 null) (= (dtype $o@@59) Tclass.CrashTolerantMap.__default))))
 :qid |unknown.0:0|
 :skolemid |3556|
 :pattern ( ($Is $o@@59 Tclass.CrashTolerantMap.__default))
)))
(assert (forall (($o@@60 T@U) ($h@@206 T@U) ) (!  (=> (and (= (type $o@@60) refType) (= (type $h@@206) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@60 Tclass.CrashTolerantMap.__default $h@@206)  (or (= $o@@60 null) (U_2_bool (MapType1Select (MapType0Select $h@@206 $o@@60) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3557|
 :pattern ( ($IsAlloc $o@@60 Tclass.CrashTolerantMap.__default $h@@206))
)))
(assert  (=> true (forall ((|v#0@@222| T@U) (|v'#0@@127| T@U) (|lbl#0@@87| T@U) ) (!  (=> (and (and (and (= (type |v#0@@222|) DatatypeTypeType) (= (type |v'#0@@127|) DatatypeTypeType)) (= (type |lbl#0@@87|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.LoadEphemeralFromPersistent#canCall| |v#0@@222| |v'#0@@127| |lbl#0@@87|) (and (and ($Is |v#0@@222| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@127| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@87| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.48:41|
 :skolemid |3558|
 :pattern ( (CrashTolerantMap.__default.LoadEphemeralFromPersistent |v#0@@222| |v'#0@@127| |lbl#0@@87|))
))))
(assert (forall ((|v#0@@223| T@U) (|v'#0@@128| T@U) (|lbl#0@@88| T@U) ) (!  (=> (and (and (and (= (type |v#0@@223|) DatatypeTypeType) (= (type |v'#0@@128|) DatatypeTypeType)) (= (type |lbl#0@@88|) DatatypeTypeType)) (and (and ($Is |v#0@@223| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@128| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@88| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.LoadEphemeralFromPersistent#requires| |v#0@@223| |v'#0@@128| |lbl#0@@88|) true))
 :qid |CrashTolerantMapidfy.48:41|
 :skolemid |3559|
 :pattern ( (|CrashTolerantMap.__default.LoadEphemeralFromPersistent#requires| |v#0@@223| |v'#0@@128| |lbl#0@@88|))
)))
(assert  (=> true (forall ((|v#0@@224| T@U) (|v'#0@@129| T@U) (|lbl#0@@89| T@U) ) (!  (=> (and (and (and (= (type |v#0@@224|) DatatypeTypeType) (= (type |v'#0@@129|) DatatypeTypeType)) (= (type |lbl#0@@89|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.LoadEphemeralFromPersistent#canCall| |v#0@@224| |v'#0@@129| |lbl#0@@89|) (and (and ($Is |v#0@@224| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@129| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@89| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@224|) (=> (CrashTolerantMap.Variables.WF |v#0@@224|) (=> (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q |lbl#0@@89|) (and (CrashTolerantMap.Variables.Variables_q |v#0@@224|) (=> (CrashTolerantMap.Ephemeral.Unknown_q (CrashTolerantMap.Variables.ephemeral |v#0@@224|)) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@129|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@129|)) (and (and (CrashTolerantMap.Variables.Variables_q |v#0@@224|) (StampedMod.Stamped.Stamped_q (CrashTolerantMap.Variables.persistent |v#0@@224|))) (=> (= (CrashTolerantMap.TransitionLabel.endLsn |lbl#0@@89|) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent |v#0@@224|))) (and (and (and (CrashTolerantMap.Variables.Variables_q |v'#0@@129|) (CrashTolerantMap.Variables.Variables_q |v#0@@224|)) (|AbstractMap.__default.Init#canCall| (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@129|)) (CrashTolerantMap.Variables.persistent |v#0@@224|))) (=> (AbstractMap.__default.Init (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@129|)) (CrashTolerantMap.Variables.persistent |v#0@@224|)) (and (and (and (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v'#0@@129|)) (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v#0@@224|))) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@129|) (CrashTolerantMap.Variables.Variables_q |v#0@@224|))) (=> (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent |v'#0@@129|) (CrashTolerantMap.Variables.persistent |v#0@@224|)) (and (and (|$IsA#Options.Option| (CrashTolerantMap.Variables.inFlight |v'#0@@129|)) (|$IsA#Options.Option| (CrashTolerantMap.Variables.inFlight |v#0@@224|))) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@129|) (CrashTolerantMap.Variables.Variables_q |v#0@@224|)))))))))))))))) (= (CrashTolerantMap.__default.LoadEphemeralFromPersistent |v#0@@224| |v'#0@@129| |lbl#0@@89|)  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF |v#0@@224|) (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q |lbl#0@@89|)) (CrashTolerantMap.Ephemeral.Unknown_q (CrashTolerantMap.Variables.ephemeral |v#0@@224|))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@129|))) (= (CrashTolerantMap.TransitionLabel.endLsn |lbl#0@@89|) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent |v#0@@224|)))) (AbstractMap.__default.Init (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@129|)) (CrashTolerantMap.Variables.persistent |v#0@@224|))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent |v'#0@@129|) (CrashTolerantMap.Variables.persistent |v#0@@224|))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight |v'#0@@129|) (CrashTolerantMap.Variables.inFlight |v#0@@224|))))))
 :qid |CrashTolerantMapidfy.48:41|
 :skolemid |3560|
 :pattern ( (CrashTolerantMap.__default.LoadEphemeralFromPersistent |v#0@@224| |v'#0@@129| |lbl#0@@89|))
))))
(assert  (=> true (forall ((|v#0@@225| T@U) (|v'#0@@130| T@U) (|lbl#0@@90| T@U) ) (!  (=> (and (and (and (= (type |v#0@@225|) DatatypeTypeType) (= (type |v'#0@@130|) DatatypeTypeType)) (= (type |lbl#0@@90|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.LoadEphemeralFromPersistent#canCall| (Lit |v#0@@225|) (Lit |v'#0@@130|) (Lit |lbl#0@@90|)) (and (and ($Is |v#0@@225| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@130| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@90| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@225|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@225|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q (Lit |lbl#0@@90|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@225|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Unknown_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@225|))))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@130|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@130|))))))) (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@225|)) (StampedMod.Stamped.Stamped_q (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|))))) (=> (= (LitInt (CrashTolerantMap.TransitionLabel.endLsn (Lit |lbl#0@@90|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|)))))) (and (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@130|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@225|))) (|AbstractMap.__default.Init#canCall| (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@130|))))) (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractMap.__default.Init (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@130|))))) (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|))))))) (and (and (and (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v'#0@@130|)))) (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@130|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@225|)))) (=> (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent (Lit |v'#0@@130|)) (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|))) (and (and (|$IsA#Options.Option| (Lit (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@130|)))) (|$IsA#Options.Option| (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@225|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@130|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@225|))))))))))))))))) (= (CrashTolerantMap.__default.LoadEphemeralFromPersistent (Lit |v#0@@225|) (Lit |v'#0@@130|) (Lit |lbl#0@@90|))  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@225|)) (CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel_q (Lit |lbl#0@@90|))) (CrashTolerantMap.Ephemeral.Unknown_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@225|))))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@130|))))) (= (LitInt (CrashTolerantMap.TransitionLabel.endLsn (Lit |lbl#0@@90|))) (LitInt (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|))))))) (AbstractMap.__default.Init (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@130|))))) (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|))))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent (Lit |v'#0@@130|)) (CrashTolerantMap.Variables.persistent (Lit |v#0@@225|)))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@130|)) (CrashTolerantMap.Variables.inFlight (Lit |v#0@@225|)))))))
 :qid |CrashTolerantMapidfy.48:41|
 :weight 3
 :skolemid |3561|
 :pattern ( (CrashTolerantMap.__default.LoadEphemeralFromPersistent (Lit |v#0@@225|) (Lit |v'#0@@130|) (Lit |lbl#0@@90|)))
))))
(assert  (=> true (forall ((|v#0@@226| T@U) (|v'#0@@131| T@U) (|lbl#0@@91| T@U) ) (!  (=> (and (and (and (= (type |v#0@@226|) DatatypeTypeType) (= (type |v'#0@@131|) DatatypeTypeType)) (= (type |lbl#0@@91|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.PutRecords#canCall| |v#0@@226| |v'#0@@131| |lbl#0@@91|) (and (and ($Is |v#0@@226| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@131| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@91| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.61:24|
 :skolemid |3562|
 :pattern ( (CrashTolerantMap.__default.PutRecords |v#0@@226| |v'#0@@131| |lbl#0@@91|))
))))
(assert (forall ((|v#0@@227| T@U) (|v'#0@@132| T@U) (|lbl#0@@92| T@U) ) (!  (=> (and (and (and (= (type |v#0@@227|) DatatypeTypeType) (= (type |v'#0@@132|) DatatypeTypeType)) (= (type |lbl#0@@92|) DatatypeTypeType)) (and (and ($Is |v#0@@227| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@132| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@92| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.PutRecords#requires| |v#0@@227| |v'#0@@132| |lbl#0@@92|) true))
 :qid |CrashTolerantMapidfy.61:24|
 :skolemid |3563|
 :pattern ( (|CrashTolerantMap.__default.PutRecords#requires| |v#0@@227| |v'#0@@132| |lbl#0@@92|))
)))
(assert  (=> true (forall ((|v#0@@228| T@U) (|v'#0@@133| T@U) (|lbl#0@@93| T@U) ) (!  (=> (and (and (and (= (type |v#0@@228|) DatatypeTypeType) (= (type |v'#0@@133|) DatatypeTypeType)) (= (type |lbl#0@@93|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.PutRecords#canCall| |v#0@@228| |v'#0@@133| |lbl#0@@93|) (and (and ($Is |v#0@@228| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@133| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@93| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@228|) (=> (CrashTolerantMap.Variables.WF |v#0@@228|) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| |lbl#0@@93|) (=> (CrashTolerantMap.TransitionLabel.WF |lbl#0@@93|) (=> (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q |lbl#0@@93|) (and (CrashTolerantMap.Variables.Variables_q |v#0@@228|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@228|)) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@133|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@133|)) (and (and (and (CrashTolerantMap.Variables.Variables_q |v#0@@228|) (CrashTolerantMap.Variables.Variables_q |v'#0@@133|)) (|AbstractMap.__default.Next#canCall| (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@228|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@133|)) (|#AbstractMap.TransitionLabel.PutLabel| (CrashTolerantMap.TransitionLabel.records |lbl#0@@93|)))) (=> (AbstractMap.__default.Next (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@228|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@133|)) (|#AbstractMap.TransitionLabel.PutLabel| (CrashTolerantMap.TransitionLabel.records |lbl#0@@93|))) (and (and (and (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v'#0@@133|)) (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v#0@@228|))) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@133|) (CrashTolerantMap.Variables.Variables_q |v#0@@228|))) (=> (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent |v'#0@@133|) (CrashTolerantMap.Variables.persistent |v#0@@228|)) (and (and (|$IsA#Options.Option| (CrashTolerantMap.Variables.inFlight |v'#0@@133|)) (|$IsA#Options.Option| (CrashTolerantMap.Variables.inFlight |v#0@@228|))) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@133|) (CrashTolerantMap.Variables.Variables_q |v#0@@228|)))))))))))))))) (= (CrashTolerantMap.__default.PutRecords |v#0@@228| |v'#0@@133| |lbl#0@@93|)  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF |v#0@@228|) (CrashTolerantMap.TransitionLabel.WF |lbl#0@@93|)) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q |lbl#0@@93|)) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@228|))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@133|))) (AbstractMap.__default.Next (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@228|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@133|)) (|#AbstractMap.TransitionLabel.PutLabel| (CrashTolerantMap.TransitionLabel.records |lbl#0@@93|)))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent |v'#0@@133|) (CrashTolerantMap.Variables.persistent |v#0@@228|))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight |v'#0@@133|) (CrashTolerantMap.Variables.inFlight |v#0@@228|))))))
 :qid |CrashTolerantMapidfy.61:24|
 :skolemid |3564|
 :pattern ( (CrashTolerantMap.__default.PutRecords |v#0@@228| |v'#0@@133| |lbl#0@@93|))
))))
(assert  (=> true (forall ((|v#0@@229| T@U) (|v'#0@@134| T@U) (|lbl#0@@94| T@U) ) (!  (=> (and (and (and (= (type |v#0@@229|) DatatypeTypeType) (= (type |v'#0@@134|) DatatypeTypeType)) (= (type |lbl#0@@94|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.PutRecords#canCall| (Lit |v#0@@229|) (Lit |v'#0@@134|) (Lit |lbl#0@@94|)) (and (and ($Is |v#0@@229| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@134| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@94| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@229|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@229|))))) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit |lbl#0@@94|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@94|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q (Lit |lbl#0@@94|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@229|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@229|))))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@134|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@134|))))))) (and (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@229|)) (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@134|))) (|AbstractMap.__default.Next#canCall| (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@229|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@134|))))) (Lit (|#AbstractMap.TransitionLabel.PutLabel| (Lit (CrashTolerantMap.TransitionLabel.records (Lit |lbl#0@@94|))))))) (=> (U_2_bool (Lit (bool_2_U (AbstractMap.__default.Next (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@229|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@134|))))) (Lit (|#AbstractMap.TransitionLabel.PutLabel| (Lit (CrashTolerantMap.TransitionLabel.records (Lit |lbl#0@@94|))))))))) (and (and (and (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v'#0@@134|)))) (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@229|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@134|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@229|)))) (=> (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent (Lit |v'#0@@134|)) (CrashTolerantMap.Variables.persistent (Lit |v#0@@229|))) (and (and (|$IsA#Options.Option| (Lit (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@134|)))) (|$IsA#Options.Option| (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@229|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@134|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@229|))))))))))))))))) (= (CrashTolerantMap.__default.PutRecords (Lit |v#0@@229|) (Lit |v'#0@@134|) (Lit |lbl#0@@94|))  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@229|)) (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@94|))) (CrashTolerantMap.TransitionLabel.PutRecordsLabel_q (Lit |lbl#0@@94|))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@229|))))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@134|))))) (AbstractMap.__default.Next (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@229|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@134|))))) (Lit (|#AbstractMap.TransitionLabel.PutLabel| (Lit (CrashTolerantMap.TransitionLabel.records (Lit |lbl#0@@94|))))))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent (Lit |v'#0@@134|)) (CrashTolerantMap.Variables.persistent (Lit |v#0@@229|)))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@134|)) (CrashTolerantMap.Variables.inFlight (Lit |v#0@@229|)))))))
 :qid |CrashTolerantMapidfy.61:24|
 :weight 3
 :skolemid |3565|
 :pattern ( (CrashTolerantMap.__default.PutRecords (Lit |v#0@@229|) (Lit |v'#0@@134|) (Lit |lbl#0@@94|)))
))))
(assert  (=> true (forall ((|v#0@@230| T@U) (|v'#0@@135| T@U) (|lbl#0@@95| T@U) ) (!  (=> (and (and (and (= (type |v#0@@230|) DatatypeTypeType) (= (type |v'#0@@135|) DatatypeTypeType)) (= (type |lbl#0@@95|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Query#canCall| |v#0@@230| |v'#0@@135| |lbl#0@@95|) (and (and ($Is |v#0@@230| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@135| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@95| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.74:19|
 :skolemid |3566|
 :pattern ( (CrashTolerantMap.__default.Query |v#0@@230| |v'#0@@135| |lbl#0@@95|))
))))
(assert (forall ((|v#0@@231| T@U) (|v'#0@@136| T@U) (|lbl#0@@96| T@U) ) (!  (=> (and (and (and (= (type |v#0@@231|) DatatypeTypeType) (= (type |v'#0@@136|) DatatypeTypeType)) (= (type |lbl#0@@96|) DatatypeTypeType)) (and (and ($Is |v#0@@231| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@136| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@96| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.Query#requires| |v#0@@231| |v'#0@@136| |lbl#0@@96|) true))
 :qid |CrashTolerantMapidfy.74:19|
 :skolemid |3567|
 :pattern ( (|CrashTolerantMap.__default.Query#requires| |v#0@@231| |v'#0@@136| |lbl#0@@96|))
)))
(assert  (=> true (forall ((|v#0@@232| T@U) (|v'#0@@137| T@U) (|lbl#0@@97| T@U) ) (!  (=> (and (and (and (= (type |v#0@@232|) DatatypeTypeType) (= (type |v'#0@@137|) DatatypeTypeType)) (= (type |lbl#0@@97|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Query#canCall| |v#0@@232| |v'#0@@137| |lbl#0@@97|) (and (and ($Is |v#0@@232| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@137| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@97| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@232|) (=> (CrashTolerantMap.Variables.WF |v#0@@232|) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| |lbl#0@@97|) (=> (CrashTolerantMap.TransitionLabel.WF |lbl#0@@97|) (=> (CrashTolerantMap.TransitionLabel.QueryLabel_q |lbl#0@@97|) (and (CrashTolerantMap.Variables.Variables_q |v#0@@232|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@232|)) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@137|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@137|)) (and (and (and (CrashTolerantMap.Variables.Variables_q |v#0@@232|) (CrashTolerantMap.Variables.Variables_q |v'#0@@137|)) (|AbstractMap.__default.Next#canCall| (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@232|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@137|)) (|#AbstractMap.TransitionLabel.QueryLabel| (CrashTolerantMap.TransitionLabel.endLsn |lbl#0@@97|) (CrashTolerantMap.TransitionLabel.key |lbl#0@@97|) (CrashTolerantMap.TransitionLabel.value |lbl#0@@97|)))) (=> (AbstractMap.__default.Next (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@232|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@137|)) (|#AbstractMap.TransitionLabel.QueryLabel| (CrashTolerantMap.TransitionLabel.endLsn |lbl#0@@97|) (CrashTolerantMap.TransitionLabel.key |lbl#0@@97|) (CrashTolerantMap.TransitionLabel.value |lbl#0@@97|))) (and (|$IsA#CrashTolerantMap.Variables| |v'#0@@137|) (|$IsA#CrashTolerantMap.Variables| |v#0@@232|))))))))))))) (= (CrashTolerantMap.__default.Query |v#0@@232| |v'#0@@137| |lbl#0@@97|)  (and (and (and (and (and (and (CrashTolerantMap.Variables.WF |v#0@@232|) (CrashTolerantMap.TransitionLabel.WF |lbl#0@@97|)) (CrashTolerantMap.TransitionLabel.QueryLabel_q |lbl#0@@97|)) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@232|))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@137|))) (AbstractMap.__default.Next (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@232|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@137|)) (|#AbstractMap.TransitionLabel.QueryLabel| (CrashTolerantMap.TransitionLabel.endLsn |lbl#0@@97|) (CrashTolerantMap.TransitionLabel.key |lbl#0@@97|) (CrashTolerantMap.TransitionLabel.value |lbl#0@@97|)))) (|CrashTolerantMap.Variables#Equal| |v'#0@@137| |v#0@@232|)))))
 :qid |CrashTolerantMapidfy.74:19|
 :skolemid |3568|
 :pattern ( (CrashTolerantMap.__default.Query |v#0@@232| |v'#0@@137| |lbl#0@@97|))
))))
(assert  (=> true (forall ((|v#0@@233| T@U) (|v'#0@@138| T@U) (|lbl#0@@98| T@U) ) (!  (=> (and (and (and (= (type |v#0@@233|) DatatypeTypeType) (= (type |v'#0@@138|) DatatypeTypeType)) (= (type |lbl#0@@98|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Query#canCall| (Lit |v#0@@233|) (Lit |v'#0@@138|) (Lit |lbl#0@@98|)) (and (and ($Is |v#0@@233| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@138| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@98| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@233|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@233|))))) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit |lbl#0@@98|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@98|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.QueryLabel_q (Lit |lbl#0@@98|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@233|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@233|))))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@138|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@138|))))))) (and (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@233|)) (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@138|))) (|AbstractMap.__default.Next#canCall| (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@233|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@138|))))) (Lit (|#AbstractMap.TransitionLabel.QueryLabel| (LitInt (CrashTolerantMap.TransitionLabel.endLsn (Lit |lbl#0@@98|))) (Lit (CrashTolerantMap.TransitionLabel.key (Lit |lbl#0@@98|))) (Lit (CrashTolerantMap.TransitionLabel.value (Lit |lbl#0@@98|))))))) (=> (U_2_bool (Lit (bool_2_U (AbstractMap.__default.Next (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@233|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@138|))))) (Lit (|#AbstractMap.TransitionLabel.QueryLabel| (LitInt (CrashTolerantMap.TransitionLabel.endLsn (Lit |lbl#0@@98|))) (Lit (CrashTolerantMap.TransitionLabel.key (Lit |lbl#0@@98|))) (Lit (CrashTolerantMap.TransitionLabel.value (Lit |lbl#0@@98|))))))))) (and (|$IsA#CrashTolerantMap.Variables| (Lit |v'#0@@138|)) (|$IsA#CrashTolerantMap.Variables| (Lit |v#0@@233|)))))))))))))) (= (CrashTolerantMap.__default.Query (Lit |v#0@@233|) (Lit |v'#0@@138|) (Lit |lbl#0@@98|))  (and (and (and (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@233|)) (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@98|))) (CrashTolerantMap.TransitionLabel.QueryLabel_q (Lit |lbl#0@@98|))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@233|))))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@138|))))) (AbstractMap.__default.Next (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@233|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@138|))))) (Lit (|#AbstractMap.TransitionLabel.QueryLabel| (LitInt (CrashTolerantMap.TransitionLabel.endLsn (Lit |lbl#0@@98|))) (Lit (CrashTolerantMap.TransitionLabel.key (Lit |lbl#0@@98|))) (Lit (CrashTolerantMap.TransitionLabel.value (Lit |lbl#0@@98|))))))) (|CrashTolerantMap.Variables#Equal| |v'#0@@138| |v#0@@233|)))))
 :qid |CrashTolerantMapidfy.74:19|
 :weight 3
 :skolemid |3569|
 :pattern ( (CrashTolerantMap.__default.Query (Lit |v#0@@233|) (Lit |v'#0@@138|) (Lit |lbl#0@@98|)))
))))
(assert  (=> true (forall ((|v#0@@234| T@U) (|v'#0@@139| T@U) (|lbl#0@@99| T@U) (|frozenMap#0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@234|) DatatypeTypeType) (= (type |v'#0@@139|) DatatypeTypeType)) (= (type |lbl#0@@99|) DatatypeTypeType)) (= (type |frozenMap#0|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.FreezeMapInternal#canCall| |v#0@@234| |v'#0@@139| |lbl#0@@99| |frozenMap#0|) (and (and (and ($Is |v#0@@234| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@139| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@99| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |frozenMap#0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) true)
 :qid |CrashTolerantMapidfy.86:31|
 :skolemid |3570|
 :pattern ( (CrashTolerantMap.__default.FreezeMapInternal |v#0@@234| |v'#0@@139| |lbl#0@@99| |frozenMap#0|))
))))
(assert (forall ((|v#0@@235| T@U) (|v'#0@@140| T@U) (|lbl#0@@100| T@U) (|frozenMap#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@235|) DatatypeTypeType) (= (type |v'#0@@140|) DatatypeTypeType)) (= (type |lbl#0@@100|) DatatypeTypeType)) (= (type |frozenMap#0@@0|) DatatypeTypeType)) (and (and (and ($Is |v#0@@235| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@140| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@100| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |frozenMap#0@@0| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))) (= (|CrashTolerantMap.__default.FreezeMapInternal#requires| |v#0@@235| |v'#0@@140| |lbl#0@@100| |frozenMap#0@@0|) true))
 :qid |CrashTolerantMapidfy.86:31|
 :skolemid |3571|
 :pattern ( (|CrashTolerantMap.__default.FreezeMapInternal#requires| |v#0@@235| |v'#0@@140| |lbl#0@@100| |frozenMap#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@236| T@U) (|v'#0@@141| T@U) (|lbl#0@@101| T@U) (|frozenMap#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@236|) DatatypeTypeType) (= (type |v'#0@@141|) DatatypeTypeType)) (= (type |lbl#0@@101|) DatatypeTypeType)) (= (type |frozenMap#0@@1|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.FreezeMapInternal#canCall| |v#0@@236| |v'#0@@141| |lbl#0@@101| |frozenMap#0@@1|) (and (and (and ($Is |v#0@@236| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@141| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@101| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |frozenMap#0@@1| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@236|) (=> (CrashTolerantMap.Variables.WF |v#0@@236|) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| |lbl#0@@101|) (=> (CrashTolerantMap.TransitionLabel.WF |lbl#0@@101|) (=> (CrashTolerantMap.TransitionLabel.InternalLabel_q |lbl#0@@101|) (and (CrashTolerantMap.Variables.Variables_q |v#0@@236|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@236|)) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@141|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@141|)) (and (CrashTolerantMap.Variables.Variables_q |v#0@@236|) (=> (Options.Option.None_q (CrashTolerantMap.Variables.inFlight |v#0@@236|)) (and (and (and (CrashTolerantMap.Variables.Variables_q |v#0@@236|) (CrashTolerantMap.Variables.Variables_q |v'#0@@141|)) (|AbstractMap.__default.FreezeAs#canCall| (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@236|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@141|)) (|#AbstractMap.TransitionLabel.FreezeAsLabel| |frozenMap#0@@1|))) (=> (AbstractMap.__default.FreezeAs (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@236|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@141|)) (|#AbstractMap.TransitionLabel.FreezeAsLabel| |frozenMap#0@@1|)) (and (and (|$IsA#Options.Option| (CrashTolerantMap.Variables.inFlight |v'#0@@141|)) (CrashTolerantMap.Variables.Variables_q |v'#0@@141|)) (=> (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight |v'#0@@141|) (|#Options.Option.Some| ($Box |frozenMap#0@@1|))) (and (and (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v'#0@@141|)) (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v#0@@236|))) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@141|) (CrashTolerantMap.Variables.Variables_q |v#0@@236|)))))))))))))))))) (= (CrashTolerantMap.__default.FreezeMapInternal |v#0@@236| |v'#0@@141| |lbl#0@@101| |frozenMap#0@@1|)  (and (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF |v#0@@236|) (CrashTolerantMap.TransitionLabel.WF |lbl#0@@101|)) (CrashTolerantMap.TransitionLabel.InternalLabel_q |lbl#0@@101|)) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@236|))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@141|))) (Options.Option.None_q (CrashTolerantMap.Variables.inFlight |v#0@@236|))) (AbstractMap.__default.FreezeAs (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@236|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@141|)) (|#AbstractMap.TransitionLabel.FreezeAsLabel| |frozenMap#0@@1|))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight |v'#0@@141|) (|#Options.Option.Some| ($Box |frozenMap#0@@1|)))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent |v'#0@@141|) (CrashTolerantMap.Variables.persistent |v#0@@236|))))))
 :qid |CrashTolerantMapidfy.86:31|
 :skolemid |3572|
 :pattern ( (CrashTolerantMap.__default.FreezeMapInternal |v#0@@236| |v'#0@@141| |lbl#0@@101| |frozenMap#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@237| T@U) (|v'#0@@142| T@U) (|lbl#0@@102| T@U) (|frozenMap#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@237|) DatatypeTypeType) (= (type |v'#0@@142|) DatatypeTypeType)) (= (type |lbl#0@@102|) DatatypeTypeType)) (= (type |frozenMap#0@@2|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.FreezeMapInternal#canCall| (Lit |v#0@@237|) (Lit |v'#0@@142|) (Lit |lbl#0@@102|) (Lit |frozenMap#0@@2|)) (and (and (and ($Is |v#0@@237| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@142| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@102| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |frozenMap#0@@2| (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap))))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@237|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@237|))))) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit |lbl#0@@102|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@102|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.InternalLabel_q (Lit |lbl#0@@102|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@237|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@237|))))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@142|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@142|))))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@237|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@237|))))))) (and (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@237|)) (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@142|))) (|AbstractMap.__default.FreezeAs#canCall| (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@237|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@142|))))) (Lit (|#AbstractMap.TransitionLabel.FreezeAsLabel| (Lit |frozenMap#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (AbstractMap.__default.FreezeAs (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@237|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@142|))))) (Lit (|#AbstractMap.TransitionLabel.FreezeAsLabel| (Lit |frozenMap#0@@2|))))))) (and (and (|$IsA#Options.Option| (Lit (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@142|)))) (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@142|))) (=> (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@142|)) (|#Options.Option.Some| ($Box (Lit |frozenMap#0@@2|)))) (and (and (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v'#0@@142|)))) (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@237|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@142|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@237|))))))))))))))))))) (= (CrashTolerantMap.__default.FreezeMapInternal (Lit |v#0@@237|) (Lit |v'#0@@142|) (Lit |lbl#0@@102|) (Lit |frozenMap#0@@2|))  (and (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@237|)) (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@102|))) (CrashTolerantMap.TransitionLabel.InternalLabel_q (Lit |lbl#0@@102|))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@237|))))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@142|))))) (Options.Option.None_q (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@237|))))) (AbstractMap.__default.FreezeAs (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@237|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@142|))))) (Lit (|#AbstractMap.TransitionLabel.FreezeAsLabel| (Lit |frozenMap#0@@2|))))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@142|)) (|#Options.Option.Some| ($Box (Lit |frozenMap#0@@2|))))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent (Lit |v'#0@@142|)) (CrashTolerantMap.Variables.persistent (Lit |v#0@@237|)))))))
 :qid |CrashTolerantMapidfy.86:31|
 :weight 3
 :skolemid |3573|
 :pattern ( (CrashTolerantMap.__default.FreezeMapInternal (Lit |v#0@@237|) (Lit |v'#0@@142|) (Lit |lbl#0@@102|) (Lit |frozenMap#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@238| T@U) (|v'#0@@143| T@U) (|lbl#0@@103| T@U) ) (!  (=> (and (and (and (= (type |v#0@@238|) DatatypeTypeType) (= (type |v'#0@@143|) DatatypeTypeType)) (= (type |lbl#0@@103|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.EphemeralInternal#canCall| |v#0@@238| |v'#0@@143| |lbl#0@@103|) (and (and ($Is |v#0@@238| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@143| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@103| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.103:31|
 :skolemid |3574|
 :pattern ( (CrashTolerantMap.__default.EphemeralInternal |v#0@@238| |v'#0@@143| |lbl#0@@103|))
))))
(assert (forall ((|v#0@@239| T@U) (|v'#0@@144| T@U) (|lbl#0@@104| T@U) ) (!  (=> (and (and (and (= (type |v#0@@239|) DatatypeTypeType) (= (type |v'#0@@144|) DatatypeTypeType)) (= (type |lbl#0@@104|) DatatypeTypeType)) (and (and ($Is |v#0@@239| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@144| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@104| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.EphemeralInternal#requires| |v#0@@239| |v'#0@@144| |lbl#0@@104|) true))
 :qid |CrashTolerantMapidfy.103:31|
 :skolemid |3575|
 :pattern ( (|CrashTolerantMap.__default.EphemeralInternal#requires| |v#0@@239| |v'#0@@144| |lbl#0@@104|))
)))
(assert  (=> true (forall ((|v#0@@240| T@U) (|v'#0@@145| T@U) (|lbl#0@@105| T@U) ) (!  (=> (and (and (and (= (type |v#0@@240|) DatatypeTypeType) (= (type |v'#0@@145|) DatatypeTypeType)) (= (type |lbl#0@@105|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.EphemeralInternal#canCall| |v#0@@240| |v'#0@@145| |lbl#0@@105|) (and (and ($Is |v#0@@240| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@145| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@105| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@240|) (=> (CrashTolerantMap.Variables.WF |v#0@@240|) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| |lbl#0@@105|) (=> (CrashTolerantMap.TransitionLabel.WF |lbl#0@@105|) (=> (CrashTolerantMap.TransitionLabel.InternalLabel_q |lbl#0@@105|) (and (CrashTolerantMap.Variables.Variables_q |v#0@@240|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@240|)) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@145|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@145|)) (and (and (and (CrashTolerantMap.Variables.Variables_q |v#0@@240|) (CrashTolerantMap.Variables.Variables_q |v'#0@@145|)) (|AbstractMap.__default.Next#canCall| (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@240|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@145|)) (Lit |#AbstractMap.TransitionLabel.InternalLabel|))) (=> (AbstractMap.__default.Next (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@240|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@145|)) (Lit |#AbstractMap.TransitionLabel.InternalLabel|)) (and (and (and (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v'#0@@145|)) (|$IsA#StampedMod.Stamped| (CrashTolerantMap.Variables.persistent |v#0@@240|))) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@145|) (CrashTolerantMap.Variables.Variables_q |v#0@@240|))) (=> (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent |v'#0@@145|) (CrashTolerantMap.Variables.persistent |v#0@@240|)) (and (and (|$IsA#Options.Option| (CrashTolerantMap.Variables.inFlight |v'#0@@145|)) (|$IsA#Options.Option| (CrashTolerantMap.Variables.inFlight |v#0@@240|))) (and (CrashTolerantMap.Variables.Variables_q |v'#0@@145|) (CrashTolerantMap.Variables.Variables_q |v#0@@240|)))))))))))))))) (= (CrashTolerantMap.__default.EphemeralInternal |v#0@@240| |v'#0@@145| |lbl#0@@105|)  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF |v#0@@240|) (CrashTolerantMap.TransitionLabel.WF |lbl#0@@105|)) (CrashTolerantMap.TransitionLabel.InternalLabel_q |lbl#0@@105|)) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@240|))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v'#0@@145|))) (AbstractMap.__default.Next (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v#0@@240|)) (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral |v'#0@@145|)) (Lit |#AbstractMap.TransitionLabel.InternalLabel|))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent |v'#0@@145|) (CrashTolerantMap.Variables.persistent |v#0@@240|))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight |v'#0@@145|) (CrashTolerantMap.Variables.inFlight |v#0@@240|))))))
 :qid |CrashTolerantMapidfy.103:31|
 :skolemid |3576|
 :pattern ( (CrashTolerantMap.__default.EphemeralInternal |v#0@@240| |v'#0@@145| |lbl#0@@105|))
))))
(assert  (=> true (forall ((|v#0@@241| T@U) (|v'#0@@146| T@U) (|lbl#0@@106| T@U) ) (!  (=> (and (and (and (= (type |v#0@@241|) DatatypeTypeType) (= (type |v'#0@@146|) DatatypeTypeType)) (= (type |lbl#0@@106|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.EphemeralInternal#canCall| (Lit |v#0@@241|) (Lit |v'#0@@146|) (Lit |lbl#0@@106|)) (and (and ($Is |v#0@@241| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@146| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@106| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@241|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@241|))))) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit |lbl#0@@106|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@106|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.InternalLabel_q (Lit |lbl#0@@106|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@241|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@241|))))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@146|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@146|))))))) (and (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@241|)) (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@146|))) (|AbstractMap.__default.Next#canCall| (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@241|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@146|))))) (Lit |#AbstractMap.TransitionLabel.InternalLabel|))) (=> (U_2_bool (Lit (bool_2_U (AbstractMap.__default.Next (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@241|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@146|))))) (Lit |#AbstractMap.TransitionLabel.InternalLabel|))))) (and (and (and (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v'#0@@146|)))) (|$IsA#StampedMod.Stamped| (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@241|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@146|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@241|)))) (=> (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent (Lit |v'#0@@146|)) (CrashTolerantMap.Variables.persistent (Lit |v#0@@241|))) (and (and (|$IsA#Options.Option| (Lit (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@146|)))) (|$IsA#Options.Option| (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@241|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v'#0@@146|)) (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@241|))))))))))))))))) (= (CrashTolerantMap.__default.EphemeralInternal (Lit |v#0@@241|) (Lit |v'#0@@146|) (Lit |lbl#0@@106|))  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@241|)) (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@106|))) (CrashTolerantMap.TransitionLabel.InternalLabel_q (Lit |lbl#0@@106|))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@241|))))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@146|))))) (AbstractMap.__default.Next (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@241|))))) (Lit (CrashTolerantMap.Ephemeral.v (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v'#0@@146|))))) (Lit |#AbstractMap.TransitionLabel.InternalLabel|))) (|StampedMod.Stamped#Equal| (CrashTolerantMap.Variables.persistent (Lit |v'#0@@146|)) (CrashTolerantMap.Variables.persistent (Lit |v#0@@241|)))) (|Options.Option#Equal| (CrashTolerantMap.Variables.inFlight (Lit |v'#0@@146|)) (CrashTolerantMap.Variables.inFlight (Lit |v#0@@241|)))))))
 :qid |CrashTolerantMapidfy.103:31|
 :weight 3
 :skolemid |3577|
 :pattern ( (CrashTolerantMap.__default.EphemeralInternal (Lit |v#0@@241|) (Lit |v'#0@@146|) (Lit |lbl#0@@106|)))
))))
(assert  (=> true (forall ((|v#0@@242| T@U) (|v'#0@@147| T@U) (|lbl#0@@107| T@U) ) (!  (=> (and (and (and (= (type |v#0@@242|) DatatypeTypeType) (= (type |v'#0@@147|) DatatypeTypeType)) (= (type |lbl#0@@107|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.CommitStart#canCall| |v#0@@242| |v'#0@@147| |lbl#0@@107|) (and (and ($Is |v#0@@242| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@147| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@107| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.116:25|
 :skolemid |3578|
 :pattern ( (CrashTolerantMap.__default.CommitStart |v#0@@242| |v'#0@@147| |lbl#0@@107|))
))))
(assert (forall ((|v#0@@243| T@U) (|v'#0@@148| T@U) (|lbl#0@@108| T@U) ) (!  (=> (and (and (and (= (type |v#0@@243|) DatatypeTypeType) (= (type |v'#0@@148|) DatatypeTypeType)) (= (type |lbl#0@@108|) DatatypeTypeType)) (and (and ($Is |v#0@@243| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@148| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@108| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.CommitStart#requires| |v#0@@243| |v'#0@@148| |lbl#0@@108|) true))
 :qid |CrashTolerantMapidfy.116:25|
 :skolemid |3579|
 :pattern ( (|CrashTolerantMap.__default.CommitStart#requires| |v#0@@243| |v'#0@@148| |lbl#0@@108|))
)))
(assert  (=> true (forall ((|v#0@@244| T@U) (|v'#0@@149| T@U) (|lbl#0@@109| T@U) ) (!  (=> (and (and (and (= (type |v#0@@244|) DatatypeTypeType) (= (type |v'#0@@149|) DatatypeTypeType)) (= (type |lbl#0@@109|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.CommitStart#canCall| |v#0@@244| |v'#0@@149| |lbl#0@@109|) (and (and ($Is |v#0@@244| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@149| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@109| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@244|) (=> (CrashTolerantMap.Variables.WF |v#0@@244|) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| |lbl#0@@109|) (=> (CrashTolerantMap.TransitionLabel.WF |lbl#0@@109|) (=> (CrashTolerantMap.TransitionLabel.CommitStartLabel_q |lbl#0@@109|) (and (CrashTolerantMap.Variables.Variables_q |v#0@@244|) (=> (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@244|)) (and (CrashTolerantMap.Variables.Variables_q |v#0@@244|) (=> (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight |v#0@@244|)) (and (and (CrashTolerantMap.Variables.Variables_q |v#0@@244|) (StampedMod.Stamped.Stamped_q (CrashTolerantMap.Variables.persistent |v#0@@244|))) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent |v#0@@244|)) (CrashTolerantMap.TransitionLabel.newBoundaryLsn |lbl#0@@109|)) (and (and (CrashTolerantMap.Variables.Variables_q |v#0@@244|) (StampedMod.Stamped.Stamped_q ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight |v#0@@244|))))) (=> (= (CrashTolerantMap.TransitionLabel.newBoundaryLsn |lbl#0@@109|) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight |v#0@@244|))))) (and (|$IsA#CrashTolerantMap.Variables| |v'#0@@149|) (|$IsA#CrashTolerantMap.Variables| |v#0@@244|))))))))))))))) (= (CrashTolerantMap.__default.CommitStart |v#0@@244| |v'#0@@149| |lbl#0@@109|)  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF |v#0@@244|) (CrashTolerantMap.TransitionLabel.WF |lbl#0@@109|)) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q |lbl#0@@109|)) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral |v#0@@244|))) (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight |v#0@@244|))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent |v#0@@244|)) (CrashTolerantMap.TransitionLabel.newBoundaryLsn |lbl#0@@109|))) (= (CrashTolerantMap.TransitionLabel.newBoundaryLsn |lbl#0@@109|) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight |v#0@@244|)))))) (|CrashTolerantMap.Variables#Equal| |v'#0@@149| |v#0@@244|)))))
 :qid |CrashTolerantMapidfy.116:25|
 :skolemid |3580|
 :pattern ( (CrashTolerantMap.__default.CommitStart |v#0@@244| |v'#0@@149| |lbl#0@@109|))
))))
(assert  (=> true (forall ((|v#0@@245| T@U) (|v'#0@@150| T@U) (|lbl#0@@110| T@U) ) (!  (=> (and (and (and (= (type |v#0@@245|) DatatypeTypeType) (= (type |v'#0@@150|) DatatypeTypeType)) (= (type |lbl#0@@110|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.CommitStart#canCall| (Lit |v#0@@245|) (Lit |v'#0@@150|) (Lit |lbl#0@@110|)) (and (and ($Is |v#0@@245| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@150| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@110| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@245|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@245|))))) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit |lbl#0@@110|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@110|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.CommitStartLabel_q (Lit |lbl#0@@110|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@245|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@245|))))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@245|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@245|))))))) (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@245|)) (StampedMod.Stamped.Stamped_q (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@245|))))) (=> (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@245|)))) (CrashTolerantMap.TransitionLabel.newBoundaryLsn (Lit |lbl#0@@110|))) (and (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@245|)) (StampedMod.Stamped.Stamped_q (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@245|)))))))) (=> (= (LitInt (CrashTolerantMap.TransitionLabel.newBoundaryLsn (Lit |lbl#0@@110|))) (LitInt (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@245|))))))))) (and (|$IsA#CrashTolerantMap.Variables| (Lit |v'#0@@150|)) (|$IsA#CrashTolerantMap.Variables| (Lit |v#0@@245|)))))))))))))))) (= (CrashTolerantMap.__default.CommitStart (Lit |v#0@@245|) (Lit |v'#0@@150|) (Lit |lbl#0@@110|))  (and (and (and (and (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@245|)) (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@110|))) (CrashTolerantMap.TransitionLabel.CommitStartLabel_q (Lit |lbl#0@@110|))) (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit |v#0@@245|))))) (Options.Option.Some_q (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@245|))))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (Lit (CrashTolerantMap.Variables.persistent (Lit |v#0@@245|)))) (CrashTolerantMap.TransitionLabel.newBoundaryLsn (Lit |lbl#0@@110|)))) (= (LitInt (CrashTolerantMap.TransitionLabel.newBoundaryLsn (Lit |lbl#0@@110|))) (LitInt (StampedMod.Stamped.seqEnd (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@245|)))))))))) (|CrashTolerantMap.Variables#Equal| |v'#0@@150| |v#0@@245|)))))
 :qid |CrashTolerantMapidfy.116:25|
 :weight 3
 :skolemid |3581|
 :pattern ( (CrashTolerantMap.__default.CommitStart (Lit |v#0@@245|) (Lit |v'#0@@150|) (Lit |lbl#0@@110|)))
))))
(assert  (=> true (forall ((|v#0@@246| T@U) (|v'#0@@151| T@U) (|lbl#0@@111| T@U) ) (!  (=> (and (and (and (= (type |v#0@@246|) DatatypeTypeType) (= (type |v'#0@@151|) DatatypeTypeType)) (= (type |lbl#0@@111|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.CommitComplete#canCall| |v#0@@246| |v'#0@@151| |lbl#0@@111|) (and (and ($Is |v#0@@246| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@151| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@111| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.133:28|
 :skolemid |3582|
 :pattern ( (CrashTolerantMap.__default.CommitComplete |v#0@@246| |v'#0@@151| |lbl#0@@111|))
))))
(assert (forall ((|v#0@@247| T@U) (|v'#0@@152| T@U) (|lbl#0@@112| T@U) ) (!  (=> (and (and (and (= (type |v#0@@247|) DatatypeTypeType) (= (type |v'#0@@152|) DatatypeTypeType)) (= (type |lbl#0@@112|) DatatypeTypeType)) (and (and ($Is |v#0@@247| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@152| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@112| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.CommitComplete#requires| |v#0@@247| |v'#0@@152| |lbl#0@@112|) true))
 :qid |CrashTolerantMapidfy.133:28|
 :skolemid |3583|
 :pattern ( (|CrashTolerantMap.__default.CommitComplete#requires| |v#0@@247| |v'#0@@152| |lbl#0@@112|))
)))
(assert  (=> true (forall ((|v#0@@248| T@U) (|v'#0@@153| T@U) (|lbl#0@@113| T@U) ) (!  (=> (and (and (and (= (type |v#0@@248|) DatatypeTypeType) (= (type |v'#0@@153|) DatatypeTypeType)) (= (type |lbl#0@@113|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.CommitComplete#canCall| |v#0@@248| |v'#0@@153| |lbl#0@@113|) (and (and ($Is |v#0@@248| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@153| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@113| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@248|) (=> (CrashTolerantMap.Variables.WF |v#0@@248|) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| |lbl#0@@113|) (=> (CrashTolerantMap.TransitionLabel.WF |lbl#0@@113|) (=> (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q |lbl#0@@113|) (and (CrashTolerantMap.Variables.Variables_q |v#0@@248|) (=> (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight |v#0@@248|)) (and (and (|$IsA#CrashTolerantMap.Variables| |v'#0@@153|) (|$IsA#CrashTolerantMap.Variables| (let ((|dt_update_tmp#0#0@@17| |v#0@@248|))
(let ((|dt_update#inFlight#0#0@@5| (Lit |#Options.Option.None|)))
(let ((|dt_update#persistent#0#0@@1| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight |v#0@@248|)))))
(|#CrashTolerantMap.Variables.Variables| |dt_update#persistent#0#0@@1| (CrashTolerantMap.Variables.ephemeral |dt_update_tmp#0#0@@17|) |dt_update#inFlight#0#0@@5|)))))) (let ((|dt_update_tmp#0#0@@18| |v#0@@248|))
 (and (CrashTolerantMap.Variables.Variables_q |v#0@@248|) (CrashTolerantMap.Variables.Variables_q |dt_update_tmp#0#0@@18|))))))))))) (= (CrashTolerantMap.__default.CommitComplete |v#0@@248| |v'#0@@153| |lbl#0@@113|)  (and (and (and (and (CrashTolerantMap.Variables.WF |v#0@@248|) (CrashTolerantMap.TransitionLabel.WF |lbl#0@@113|)) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q |lbl#0@@113|)) (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight |v#0@@248|))) (|CrashTolerantMap.Variables#Equal| |v'#0@@153| (let ((|dt_update_tmp#0#0@@19| |v#0@@248|))
(let ((|dt_update#inFlight#0#0@@6| (Lit |#Options.Option.None|)))
(let ((|dt_update#persistent#0#0@@2| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight |v#0@@248|)))))
(|#CrashTolerantMap.Variables.Variables| |dt_update#persistent#0#0@@2| (CrashTolerantMap.Variables.ephemeral |dt_update_tmp#0#0@@19|) |dt_update#inFlight#0#0@@6|)))))))))
 :qid |CrashTolerantMapidfy.133:28|
 :skolemid |3584|
 :pattern ( (CrashTolerantMap.__default.CommitComplete |v#0@@248| |v'#0@@153| |lbl#0@@113|))
))))
(assert  (=> true (forall ((|v#0@@249| T@U) (|v'#0@@154| T@U) (|lbl#0@@114| T@U) ) (!  (=> (and (and (and (= (type |v#0@@249|) DatatypeTypeType) (= (type |v'#0@@154|) DatatypeTypeType)) (= (type |lbl#0@@114|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.CommitComplete#canCall| (Lit |v#0@@249|) (Lit |v'#0@@154|) (Lit |lbl#0@@114|)) (and (and ($Is |v#0@@249| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@154| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@114| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@249|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@249|))))) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit |lbl#0@@114|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@114|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q (Lit |lbl#0@@114|))))) (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@249|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@249|))))))) (and (and (|$IsA#CrashTolerantMap.Variables| (Lit |v'#0@@154|)) (|$IsA#CrashTolerantMap.Variables| (let ((|dt_update_tmp#0#1@@17| (Lit |v#0@@249|)))
(let ((|dt_update#inFlight#0#1@@5| (Lit |#Options.Option.None|)))
(let ((|dt_update#persistent#0#1@@1| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@249|))))))))
(Lit (|#CrashTolerantMap.Variables.Variables| |dt_update#persistent#0#1@@1| (Lit (CrashTolerantMap.Variables.ephemeral |dt_update_tmp#0#1@@17|)) |dt_update#inFlight#0#1@@5|))))))) (let ((|dt_update_tmp#0#1@@18| (Lit |v#0@@249|)))
 (and (CrashTolerantMap.Variables.Variables_q (Lit |v#0@@249|)) (CrashTolerantMap.Variables.Variables_q |dt_update_tmp#0#1@@18|))))))))))) (= (CrashTolerantMap.__default.CommitComplete (Lit |v#0@@249|) (Lit |v'#0@@154|) (Lit |lbl#0@@114|))  (and (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@249|)) (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@114|))) (CrashTolerantMap.TransitionLabel.CommitCompleteLabel_q (Lit |lbl#0@@114|))) (Options.Option.Some_q (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@249|))))) (|CrashTolerantMap.Variables#Equal| |v'#0@@154| (let ((|dt_update_tmp#0#1@@19| (Lit |v#0@@249|)))
(let ((|dt_update#inFlight#0#1@@6| (Lit |#Options.Option.None|)))
(let ((|dt_update#persistent#0#1@@2| (Lit ($Unbox DatatypeTypeType (Options.Option.value (Lit (CrashTolerantMap.Variables.inFlight (Lit |v#0@@249|))))))))
(Lit (|#CrashTolerantMap.Variables.Variables| |dt_update#persistent#0#1@@2| (Lit (CrashTolerantMap.Variables.ephemeral |dt_update_tmp#0#1@@19|)) |dt_update#inFlight#0#1@@6|))))))))))
 :qid |CrashTolerantMapidfy.133:28|
 :weight 3
 :skolemid |3585|
 :pattern ( (CrashTolerantMap.__default.CommitComplete (Lit |v#0@@249|) (Lit |v'#0@@154|) (Lit |lbl#0@@114|)))
))))
(assert  (=> true (forall ((|v#0@@250| T@U) (|v'#0@@155| T@U) (|lbl#0@@115| T@U) ) (!  (=> (and (and (and (= (type |v#0@@250|) DatatypeTypeType) (= (type |v'#0@@155|) DatatypeTypeType)) (= (type |lbl#0@@115|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Crash#canCall| |v#0@@250| |v'#0@@155| |lbl#0@@115|) (and (and ($Is |v#0@@250| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@155| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@115| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.146:19|
 :skolemid |3586|
 :pattern ( (CrashTolerantMap.__default.Crash |v#0@@250| |v'#0@@155| |lbl#0@@115|))
))))
(assert (forall ((|v#0@@251| T@U) (|v'#0@@156| T@U) (|lbl#0@@116| T@U) ) (!  (=> (and (and (and (= (type |v#0@@251|) DatatypeTypeType) (= (type |v'#0@@156|) DatatypeTypeType)) (= (type |lbl#0@@116|) DatatypeTypeType)) (and (and ($Is |v#0@@251| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@156| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@116| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.Crash#requires| |v#0@@251| |v'#0@@156| |lbl#0@@116|) true))
 :qid |CrashTolerantMapidfy.146:19|
 :skolemid |3587|
 :pattern ( (|CrashTolerantMap.__default.Crash#requires| |v#0@@251| |v'#0@@156| |lbl#0@@116|))
)))
(assert  (=> true (forall ((|v#0@@252| T@U) (|v'#0@@157| T@U) (|lbl#0@@117| T@U) ) (!  (=> (and (and (and (= (type |v#0@@252|) DatatypeTypeType) (= (type |v'#0@@157|) DatatypeTypeType)) (= (type |lbl#0@@117|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Crash#canCall| |v#0@@252| |v'#0@@157| |lbl#0@@117|) (and (and ($Is |v#0@@252| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@157| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@117| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| |v#0@@252|) (=> (CrashTolerantMap.Variables.WF |v#0@@252|) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| |lbl#0@@117|) (=> (CrashTolerantMap.TransitionLabel.WF |lbl#0@@117|) (=> (CrashTolerantMap.TransitionLabel.CrashLabel_q |lbl#0@@117|) (and (and (|$IsA#CrashTolerantMap.Variables| |v'#0@@157|) (|$IsA#CrashTolerantMap.Variables| (let ((|dt_update_tmp#0#0@@20| |v#0@@252|))
(let ((|dt_update#inFlight#0#0@@7| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#0@@5| (Lit |#CrashTolerantMap.Ephemeral.Unknown|)))
(|#CrashTolerantMap.Variables.Variables| (CrashTolerantMap.Variables.persistent |dt_update_tmp#0#0@@20|) |dt_update#ephemeral#0#0@@5| |dt_update#inFlight#0#0@@7|)))))) (let ((|dt_update_tmp#0#0@@21| |v#0@@252|))
(CrashTolerantMap.Variables.Variables_q |dt_update_tmp#0#0@@21|)))))))) (= (CrashTolerantMap.__default.Crash |v#0@@252| |v'#0@@157| |lbl#0@@117|)  (and (and (and (CrashTolerantMap.Variables.WF |v#0@@252|) (CrashTolerantMap.TransitionLabel.WF |lbl#0@@117|)) (CrashTolerantMap.TransitionLabel.CrashLabel_q |lbl#0@@117|)) (|CrashTolerantMap.Variables#Equal| |v'#0@@157| (let ((|dt_update_tmp#0#0@@22| |v#0@@252|))
(let ((|dt_update#inFlight#0#0@@8| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#0@@6| (Lit |#CrashTolerantMap.Ephemeral.Unknown|)))
(|#CrashTolerantMap.Variables.Variables| (CrashTolerantMap.Variables.persistent |dt_update_tmp#0#0@@22|) |dt_update#ephemeral#0#0@@6| |dt_update#inFlight#0#0@@8|)))))))))
 :qid |CrashTolerantMapidfy.146:19|
 :skolemid |3588|
 :pattern ( (CrashTolerantMap.__default.Crash |v#0@@252| |v'#0@@157| |lbl#0@@117|))
))))
(assert  (=> true (forall ((|v#0@@253| T@U) (|v'#0@@158| T@U) (|lbl#0@@118| T@U) ) (!  (=> (and (and (and (= (type |v#0@@253|) DatatypeTypeType) (= (type |v'#0@@158|) DatatypeTypeType)) (= (type |lbl#0@@118|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Crash#canCall| (Lit |v#0@@253|) (Lit |v'#0@@158|) (Lit |lbl#0@@118|)) (and (and ($Is |v#0@@253| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@158| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@118| Tclass.CrashTolerantMap.TransitionLabel)))) (and (and (|CrashTolerantMap.Variables.WF#canCall| (Lit |v#0@@253|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit |v#0@@253|))))) (and (|CrashTolerantMap.TransitionLabel.WF#canCall| (Lit |lbl#0@@118|)) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@118|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.TransitionLabel.CrashLabel_q (Lit |lbl#0@@118|))))) (and (and (|$IsA#CrashTolerantMap.Variables| (Lit |v'#0@@158|)) (|$IsA#CrashTolerantMap.Variables| (let ((|dt_update_tmp#0#1@@20| (Lit |v#0@@253|)))
(let ((|dt_update#inFlight#0#1@@7| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#1@@5| (Lit |#CrashTolerantMap.Ephemeral.Unknown|)))
(Lit (|#CrashTolerantMap.Variables.Variables| (Lit (CrashTolerantMap.Variables.persistent |dt_update_tmp#0#1@@20|)) |dt_update#ephemeral#0#1@@5| |dt_update#inFlight#0#1@@7|))))))) (let ((|dt_update_tmp#0#1@@21| (Lit |v#0@@253|)))
(CrashTolerantMap.Variables.Variables_q |dt_update_tmp#0#1@@21|)))))))) (= (CrashTolerantMap.__default.Crash (Lit |v#0@@253|) (Lit |v'#0@@158|) (Lit |lbl#0@@118|))  (and (and (and (CrashTolerantMap.Variables.WF (Lit |v#0@@253|)) (CrashTolerantMap.TransitionLabel.WF (Lit |lbl#0@@118|))) (CrashTolerantMap.TransitionLabel.CrashLabel_q (Lit |lbl#0@@118|))) (|CrashTolerantMap.Variables#Equal| |v'#0@@158| (let ((|dt_update_tmp#0#1@@22| (Lit |v#0@@253|)))
(let ((|dt_update#inFlight#0#1@@8| (Lit |#Options.Option.None|)))
(let ((|dt_update#ephemeral#0#1@@6| (Lit |#CrashTolerantMap.Ephemeral.Unknown|)))
(Lit (|#CrashTolerantMap.Variables.Variables| (Lit (CrashTolerantMap.Variables.persistent |dt_update_tmp#0#1@@22|)) |dt_update#ephemeral#0#1@@6| |dt_update#inFlight#0#1@@8|))))))))))
 :qid |CrashTolerantMapidfy.146:19|
 :weight 3
 :skolemid |3589|
 :pattern ( (CrashTolerantMap.__default.Crash (Lit |v#0@@253|) (Lit |v'#0@@158|) (Lit |lbl#0@@118|)))
))))
(assert  (=> true (forall ((|v#0@@254| T@U) ) (!  (=> (and (= (type |v#0@@254|) DatatypeTypeType) (or (|CrashTolerantMap.__default.Init#canCall| |v#0@@254|) ($Is |v#0@@254| Tclass.CrashTolerantMap.Variables))) true)
 :qid |CrashTolerantMapidfy.168:18|
 :skolemid |3590|
 :pattern ( (CrashTolerantMap.__default.Init |v#0@@254|))
))))
(assert (forall ((|v#0@@255| T@U) ) (!  (=> (and (= (type |v#0@@255|) DatatypeTypeType) ($Is |v#0@@255| Tclass.CrashTolerantMap.Variables)) (= (|CrashTolerantMap.__default.Init#requires| |v#0@@255|) true))
 :qid |CrashTolerantMapidfy.168:18|
 :skolemid |3591|
 :pattern ( (|CrashTolerantMap.__default.Init#requires| |v#0@@255|))
)))
(assert  (=> true (forall ((|v#0@@256| T@U) ) (!  (=> (and (= (type |v#0@@256|) DatatypeTypeType) (or (|CrashTolerantMap.__default.Init#canCall| |v#0@@256|) ($Is |v#0@@256| Tclass.CrashTolerantMap.Variables))) (and (and (|$IsA#CrashTolerantMap.Variables| |v#0@@256|) |StampedMod.__default.Empty#canCall|) (= (CrashTolerantMap.__default.Init |v#0@@256|) (|CrashTolerantMap.Variables#Equal| |v#0@@256| (|#CrashTolerantMap.Variables.Variables| (Lit StampedMod.__default.Empty) (Lit |#CrashTolerantMap.Ephemeral.Unknown|) (Lit |#Options.Option.None|))))))
 :qid |CrashTolerantMapidfy.168:18|
 :skolemid |3592|
 :pattern ( (CrashTolerantMap.__default.Init |v#0@@256|))
))))
(assert  (=> true (forall ((|v#0@@257| T@U) ) (!  (=> (and (= (type |v#0@@257|) DatatypeTypeType) (or (|CrashTolerantMap.__default.Init#canCall| (Lit |v#0@@257|)) ($Is |v#0@@257| Tclass.CrashTolerantMap.Variables))) (and (and (|$IsA#CrashTolerantMap.Variables| (Lit |v#0@@257|)) |StampedMod.__default.Empty#canCall|) (= (CrashTolerantMap.__default.Init (Lit |v#0@@257|)) (|CrashTolerantMap.Variables#Equal| |v#0@@257| (|#CrashTolerantMap.Variables.Variables| (Lit StampedMod.__default.Empty) (Lit |#CrashTolerantMap.Ephemeral.Unknown|) (Lit |#Options.Option.None|))))))
 :qid |CrashTolerantMapidfy.168:18|
 :weight 3
 :skolemid |3593|
 :pattern ( (CrashTolerantMap.__default.Init (Lit |v#0@@257|)))
))))
(assert  (=> true (forall ((|v#0@@258| T@U) (|v'#0@@159| T@U) (|lbl#0@@119| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@258|) DatatypeTypeType) (= (type |v'#0@@159|) DatatypeTypeType)) (= (type |lbl#0@@119|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.NextStep#canCall| |v#0@@258| |v'#0@@159| |lbl#0@@119| |step#0|) (and (and (and ($Is |v#0@@258| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@159| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@119| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |step#0| Tclass.CrashTolerantMap.Step)))) true)
 :qid |CrashTolerantMapidfy.173:22|
 :skolemid |3594|
 :pattern ( (CrashTolerantMap.__default.NextStep |v#0@@258| |v'#0@@159| |lbl#0@@119| |step#0|))
))))
(assert (forall ((|v#0@@259| T@U) (|v'#0@@160| T@U) (|lbl#0@@120| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@259|) DatatypeTypeType) (= (type |v'#0@@160|) DatatypeTypeType)) (= (type |lbl#0@@120|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and ($Is |v#0@@259| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@160| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@120| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |step#0@@0| Tclass.CrashTolerantMap.Step))) (= (|CrashTolerantMap.__default.NextStep#requires| |v#0@@259| |v'#0@@160| |lbl#0@@120| |step#0@@0|) true))
 :qid |CrashTolerantMapidfy.173:22|
 :skolemid |3595|
 :pattern ( (|CrashTolerantMap.__default.NextStep#requires| |v#0@@259| |v'#0@@160| |lbl#0@@120| |step#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@260| T@U) (|v'#0@@161| T@U) (|lbl#0@@121| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@260|) DatatypeTypeType) (= (type |v'#0@@161|) DatatypeTypeType)) (= (type |lbl#0@@121|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.NextStep#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121| |step#0@@1|) (and (and (and ($Is |v#0@@260| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@161| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@121| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |step#0@@1| Tclass.CrashTolerantMap.Step)))) (and (and (=> (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q |step#0@@1|) (|CrashTolerantMap.__default.LoadEphemeralFromPersistent#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121|)) (=> (not (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q |step#0@@1|)) (and (=> (CrashTolerantMap.Step.PutRecordsStep_q |step#0@@1|) (|CrashTolerantMap.__default.PutRecords#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121|)) (=> (not (CrashTolerantMap.Step.PutRecordsStep_q |step#0@@1|)) (and (=> (CrashTolerantMap.Step.QueryStep_q |step#0@@1|) (|CrashTolerantMap.__default.Query#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121|)) (=> (not (CrashTolerantMap.Step.QueryStep_q |step#0@@1|)) (and (=> (CrashTolerantMap.Step.FreezeMapInternalStep_q |step#0@@1|) (let ((|frozenMap#1| (CrashTolerantMap.Step.frozenMap |step#0@@1|)))
(|CrashTolerantMap.__default.FreezeMapInternal#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121| |frozenMap#1|))) (=> (not (CrashTolerantMap.Step.FreezeMapInternalStep_q |step#0@@1|)) (and (=> (CrashTolerantMap.Step.EphemeralInternalStep_q |step#0@@1|) (|CrashTolerantMap.__default.EphemeralInternal#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121|)) (=> (not (CrashTolerantMap.Step.EphemeralInternalStep_q |step#0@@1|)) (and (=> (CrashTolerantMap.Step.CommitStartStep_q |step#0@@1|) (|CrashTolerantMap.__default.CommitStart#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121|)) (=> (not (CrashTolerantMap.Step.CommitStartStep_q |step#0@@1|)) (and (=> (CrashTolerantMap.Step.CommitCompleteStep_q |step#0@@1|) (|CrashTolerantMap.__default.CommitComplete#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121|)) (=> (not (CrashTolerantMap.Step.CommitCompleteStep_q |step#0@@1|)) (|CrashTolerantMap.__default.Crash#canCall| |v#0@@260| |v'#0@@161| |lbl#0@@121|))))))))))))))) (= (CrashTolerantMap.__default.NextStep |v#0@@260| |v'#0@@161| |lbl#0@@121| |step#0@@1|) (ite (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q |step#0@@1|) (CrashTolerantMap.__default.LoadEphemeralFromPersistent |v#0@@260| |v'#0@@161| |lbl#0@@121|) (ite (CrashTolerantMap.Step.PutRecordsStep_q |step#0@@1|) (CrashTolerantMap.__default.PutRecords |v#0@@260| |v'#0@@161| |lbl#0@@121|) (ite (CrashTolerantMap.Step.QueryStep_q |step#0@@1|) (CrashTolerantMap.__default.Query |v#0@@260| |v'#0@@161| |lbl#0@@121|) (ite (CrashTolerantMap.Step.FreezeMapInternalStep_q |step#0@@1|) (let ((|frozenMap#0@@3| (CrashTolerantMap.Step.frozenMap |step#0@@1|)))
(CrashTolerantMap.__default.FreezeMapInternal |v#0@@260| |v'#0@@161| |lbl#0@@121| |frozenMap#0@@3|)) (ite (CrashTolerantMap.Step.EphemeralInternalStep_q |step#0@@1|) (CrashTolerantMap.__default.EphemeralInternal |v#0@@260| |v'#0@@161| |lbl#0@@121|) (ite (CrashTolerantMap.Step.CommitStartStep_q |step#0@@1|) (CrashTolerantMap.__default.CommitStart |v#0@@260| |v'#0@@161| |lbl#0@@121|) (ite (CrashTolerantMap.Step.CommitCompleteStep_q |step#0@@1|) (CrashTolerantMap.__default.CommitComplete |v#0@@260| |v'#0@@161| |lbl#0@@121|) (CrashTolerantMap.__default.Crash |v#0@@260| |v'#0@@161| |lbl#0@@121|)))))))))))
 :qid |CrashTolerantMapidfy.173:22|
 :skolemid |3596|
 :pattern ( (CrashTolerantMap.__default.NextStep |v#0@@260| |v'#0@@161| |lbl#0@@121| |step#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@261| T@U) (|v'#0@@162| T@U) (|lbl#0@@122| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@261|) DatatypeTypeType) (= (type |v'#0@@162|) DatatypeTypeType)) (= (type |lbl#0@@122|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.NextStep#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|) (Lit |step#0@@2|)) (and (and (and ($Is |v#0@@261| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@162| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@122| Tclass.CrashTolerantMap.TransitionLabel)) ($Is |step#0@@2| Tclass.CrashTolerantMap.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q (Lit |step#0@@2|))))) (|CrashTolerantMap.__default.LoadEphemeralFromPersistent#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.PutRecordsStep_q (Lit |step#0@@2|))))) (|CrashTolerantMap.__default.PutRecords#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.PutRecordsStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.QueryStep_q (Lit |step#0@@2|))))) (|CrashTolerantMap.__default.Query#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.QueryStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.FreezeMapInternalStep_q (Lit |step#0@@2|))))) (let ((|frozenMap#3| (Lit (CrashTolerantMap.Step.frozenMap (Lit |step#0@@2|)))))
(|CrashTolerantMap.__default.FreezeMapInternal#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|) |frozenMap#3|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.FreezeMapInternalStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.EphemeralInternalStep_q (Lit |step#0@@2|))))) (|CrashTolerantMap.__default.EphemeralInternal#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.EphemeralInternalStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.CommitStartStep_q (Lit |step#0@@2|))))) (|CrashTolerantMap.__default.CommitStart#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.CommitStartStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.CommitCompleteStep_q (Lit |step#0@@2|))))) (|CrashTolerantMap.__default.CommitComplete#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|))) (=> (not (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Step.CommitCompleteStep_q (Lit |step#0@@2|)))))) (|CrashTolerantMap.__default.Crash#canCall| (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|)))))))))))))))) (= (CrashTolerantMap.__default.NextStep (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|) (Lit |step#0@@2|)) (ite (CrashTolerantMap.Step.LoadEphemeralFromPersistentStep_q (Lit |step#0@@2|)) (CrashTolerantMap.__default.LoadEphemeralFromPersistent (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|)) (ite (CrashTolerantMap.Step.PutRecordsStep_q (Lit |step#0@@2|)) (CrashTolerantMap.__default.PutRecords (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|)) (ite (CrashTolerantMap.Step.QueryStep_q (Lit |step#0@@2|)) (CrashTolerantMap.__default.Query (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|)) (ite (CrashTolerantMap.Step.FreezeMapInternalStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|frozenMap#2| (Lit (CrashTolerantMap.Step.frozenMap (Lit |step#0@@2|)))))
(Lit (bool_2_U (CrashTolerantMap.__default.FreezeMapInternal (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|) |frozenMap#2|))))) (ite (CrashTolerantMap.Step.EphemeralInternalStep_q (Lit |step#0@@2|)) (CrashTolerantMap.__default.EphemeralInternal (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|)) (ite (CrashTolerantMap.Step.CommitStartStep_q (Lit |step#0@@2|)) (CrashTolerantMap.__default.CommitStart (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|)) (ite (CrashTolerantMap.Step.CommitCompleteStep_q (Lit |step#0@@2|)) (CrashTolerantMap.__default.CommitComplete (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|)) (CrashTolerantMap.__default.Crash (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|))))))))))))
 :qid |CrashTolerantMapidfy.173:22|
 :weight 3
 :skolemid |3597|
 :pattern ( (CrashTolerantMap.__default.NextStep (Lit |v#0@@261|) (Lit |v'#0@@162|) (Lit |lbl#0@@122|) (Lit |step#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@262| T@U) (|v'#0@@163| T@U) (|lbl#0@@123| T@U) ) (!  (=> (and (and (and (= (type |v#0@@262|) DatatypeTypeType) (= (type |v'#0@@163|) DatatypeTypeType)) (= (type |lbl#0@@123|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Next#canCall| |v#0@@262| |v'#0@@163| |lbl#0@@123|) (and (and ($Is |v#0@@262| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@163| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@123| Tclass.CrashTolerantMap.TransitionLabel)))) true)
 :qid |CrashTolerantMapidfy.187:18|
 :skolemid |3598|
 :pattern ( (CrashTolerantMap.__default.Next |v#0@@262| |v'#0@@163| |lbl#0@@123|))
))))
(assert (forall ((|v#0@@263| T@U) (|v'#0@@164| T@U) (|lbl#0@@124| T@U) ) (!  (=> (and (and (and (= (type |v#0@@263|) DatatypeTypeType) (= (type |v'#0@@164|) DatatypeTypeType)) (= (type |lbl#0@@124|) DatatypeTypeType)) (and (and ($Is |v#0@@263| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@164| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@124| Tclass.CrashTolerantMap.TransitionLabel))) (= (|CrashTolerantMap.__default.Next#requires| |v#0@@263| |v'#0@@164| |lbl#0@@124|) true))
 :qid |CrashTolerantMapidfy.187:18|
 :skolemid |3599|
 :pattern ( (|CrashTolerantMap.__default.Next#requires| |v#0@@263| |v'#0@@164| |lbl#0@@124|))
)))
(assert  (=> true (forall ((|v#0@@264| T@U) (|v'#0@@165| T@U) (|lbl#0@@125| T@U) ) (!  (=> (and (and (and (= (type |v#0@@264|) DatatypeTypeType) (= (type |v'#0@@165|) DatatypeTypeType)) (= (type |lbl#0@@125|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Next#canCall| |v#0@@264| |v'#0@@165| |lbl#0@@125|) (and (and ($Is |v#0@@264| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@165| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@125| Tclass.CrashTolerantMap.TransitionLabel)))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.CrashTolerantMap.Step)) (|CrashTolerantMap.__default.NextStep#canCall| |v#0@@264| |v'#0@@165| |lbl#0@@125| |step#0@@3|))
 :qid |CrashTolerantMapidfy.189:12|
 :skolemid |3601|
 :pattern ( (CrashTolerantMap.__default.NextStep |v#0@@264| |v'#0@@165| |lbl#0@@125| |step#0@@3|))
)) (= (CrashTolerantMap.__default.Next |v#0@@264| |v'#0@@165| |lbl#0@@125|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.CrashTolerantMap.Step) (CrashTolerantMap.__default.NextStep |v#0@@264| |v'#0@@165| |lbl#0@@125| |step#0@@4|)))
 :qid |CrashTolerantMapidfy.189:12|
 :skolemid |3600|
 :pattern ( (CrashTolerantMap.__default.NextStep |v#0@@264| |v'#0@@165| |lbl#0@@125| |step#0@@4|))
)))))
 :qid |CrashTolerantMapidfy.187:18|
 :skolemid |3602|
 :pattern ( (CrashTolerantMap.__default.Next |v#0@@264| |v'#0@@165| |lbl#0@@125|))
))))
(assert  (=> true (forall ((|v#0@@265| T@U) (|v'#0@@166| T@U) (|lbl#0@@126| T@U) ) (!  (=> (and (and (and (= (type |v#0@@265|) DatatypeTypeType) (= (type |v'#0@@166|) DatatypeTypeType)) (= (type |lbl#0@@126|) DatatypeTypeType)) (or (|CrashTolerantMap.__default.Next#canCall| (Lit |v#0@@265|) (Lit |v'#0@@166|) (Lit |lbl#0@@126|)) (and (and ($Is |v#0@@265| Tclass.CrashTolerantMap.Variables) ($Is |v'#0@@166| Tclass.CrashTolerantMap.Variables)) ($Is |lbl#0@@126| Tclass.CrashTolerantMap.TransitionLabel)))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.CrashTolerantMap.Step)) (|CrashTolerantMap.__default.NextStep#canCall| (Lit |v#0@@265|) (Lit |v'#0@@166|) (Lit |lbl#0@@126|) |step#1|))
 :qid |CrashTolerantMapidfy.189:12|
 :skolemid |3604|
 :pattern ( (CrashTolerantMap.__default.NextStep |v#0@@265| |v'#0@@166| |lbl#0@@126| |step#1|))
)) (= (CrashTolerantMap.__default.Next (Lit |v#0@@265|) (Lit |v'#0@@166|) (Lit |lbl#0@@126|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.CrashTolerantMap.Step) (CrashTolerantMap.__default.NextStep (Lit |v#0@@265|) (Lit |v'#0@@166|) (Lit |lbl#0@@126|) |step#1@@0|)))
 :qid |CrashTolerantMapidfy.189:12|
 :skolemid |3603|
 :pattern ( (CrashTolerantMap.__default.NextStep |v#0@@265| |v'#0@@166| |lbl#0@@126| |step#1@@0|))
)))))
 :qid |CrashTolerantMapidfy.187:18|
 :weight 3
 :skolemid |3605|
 :pattern ( (CrashTolerantMap.__default.Next (Lit |v#0@@265|) (Lit |v'#0@@166|) (Lit |lbl#0@@126|)))
))))
(assert (= (type |#CoordinationSystem.Ephemeral.Unknown|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Ephemeral.Unknown|) |##CoordinationSystem.Ephemeral.Unknown|))
(assert (forall ((d@@242 T@U) ) (!  (=> (= (type d@@242) DatatypeTypeType) (= (CoordinationSystem.Ephemeral.Unknown_q d@@242) (= (DatatypeCtorId d@@242) |##CoordinationSystem.Ephemeral.Unknown|)))
 :qid |unknown.0:0|
 :skolemid |3606|
 :pattern ( (CoordinationSystem.Ephemeral.Unknown_q d@@242))
)))
(assert (forall ((d@@243 T@U) ) (!  (=> (and (= (type d@@243) DatatypeTypeType) (CoordinationSystem.Ephemeral.Unknown_q d@@243)) (= d@@243 |#CoordinationSystem.Ephemeral.Unknown|))
 :qid |unknown.0:0|
 :skolemid |3607|
 :pattern ( (CoordinationSystem.Ephemeral.Unknown_q d@@243))
)))
(assert (= (type Tclass.CoordinationSystem.Ephemeral) TyType))
(assert (= (Tag Tclass.CoordinationSystem.Ephemeral) Tagclass.CoordinationSystem.Ephemeral))
(assert (= (TagFamily Tclass.CoordinationSystem.Ephemeral) tytagFamily$Ephemeral))
(assert (forall ((bx@@176 T@U) ) (!  (=> (and (= (type bx@@176) BoxType) ($IsBox bx@@176 Tclass.CoordinationSystem.Ephemeral)) (and (= ($Box ($Unbox DatatypeTypeType bx@@176)) bx@@176) ($Is ($Unbox DatatypeTypeType bx@@176) Tclass.CoordinationSystem.Ephemeral)))
 :qid |unknown.0:0|
 :skolemid |3608|
 :pattern ( ($IsBox bx@@176 Tclass.CoordinationSystem.Ephemeral))
)))
(assert ($Is |#CoordinationSystem.Ephemeral.Unknown| Tclass.CoordinationSystem.Ephemeral))
(assert (forall (($h@@207 T@U) ) (!  (=> (and (= (type $h@@207) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@207)) ($IsAlloc |#CoordinationSystem.Ephemeral.Unknown| Tclass.CoordinationSystem.Ephemeral $h@@207))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3609|
 :pattern ( ($IsAlloc |#CoordinationSystem.Ephemeral.Unknown| Tclass.CoordinationSystem.Ephemeral $h@@207))
)))
(assert (= |#CoordinationSystem.Ephemeral.Unknown| (Lit |#CoordinationSystem.Ephemeral.Unknown|)))
(assert (forall ((arg0@@594 T@U) (arg1@@282 T@U) (arg2@@168 Int) ) (! (= (type (|#CoordinationSystem.Ephemeral.Known| arg0@@594 arg1@@282 arg2@@168)) DatatypeTypeType)
 :qid |funType:#CoordinationSystem.Ephemeral.Known|
 :pattern ( (|#CoordinationSystem.Ephemeral.Known| arg0@@594 arg1@@282 arg2@@168))
)))
(assert (forall ((|a#5#0#0@@13| T@U) (|a#5#1#0@@6| T@U) (|a#5#2#0@@2| Int) ) (!  (=> (and (= (type |a#5#0#0@@13|) DatatypeTypeType) (= (type |a#5#1#0@@6|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#CoordinationSystem.Ephemeral.Known| |a#5#0#0@@13| |a#5#1#0@@6| |a#5#2#0@@2|)) |##CoordinationSystem.Ephemeral.Known|))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3610|
 :pattern ( (|#CoordinationSystem.Ephemeral.Known| |a#5#0#0@@13| |a#5#1#0@@6| |a#5#2#0@@2|))
)))
(assert (forall ((d@@244 T@U) ) (!  (=> (= (type d@@244) DatatypeTypeType) (= (CoordinationSystem.Ephemeral.Known_q d@@244) (= (DatatypeCtorId d@@244) |##CoordinationSystem.Ephemeral.Known|)))
 :qid |unknown.0:0|
 :skolemid |3611|
 :pattern ( (CoordinationSystem.Ephemeral.Known_q d@@244))
)))
(assert (forall ((d@@245 T@U) ) (!  (=> (and (= (type d@@245) DatatypeTypeType) (CoordinationSystem.Ephemeral.Known_q d@@245)) (exists ((|a#6#0#0@@13| T@U) (|a#6#1#0@@7| T@U) (|a#6#2#0@@2| Int) ) (!  (and (and (= (type |a#6#0#0@@13|) DatatypeTypeType) (= (type |a#6#1#0@@7|) (MapType BoxType BoxType))) (= d@@245 (|#CoordinationSystem.Ephemeral.Known| |a#6#0#0@@13| |a#6#1#0@@7| |a#6#2#0@@2|)))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3612|
 :no-pattern (type |a#6#0#0@@13|)
 :no-pattern (type |a#6#1#0@@7|)
 :no-pattern (U_2_int |a#6#0#0@@13|)
 :no-pattern (U_2_bool |a#6#0#0@@13|)
 :no-pattern (U_2_int |a#6#1#0@@7|)
 :no-pattern (U_2_bool |a#6#1#0@@7|)
)))
 :qid |unknown.0:0|
 :skolemid |3613|
 :pattern ( (CoordinationSystem.Ephemeral.Known_q d@@245))
)))
(assert (forall ((|a#7#0#0@@13| T@U) (|a#7#1#0@@7| T@U) (|a#7#2#0@@2| Int) ) (!  (=> (and (= (type |a#7#0#0@@13|) DatatypeTypeType) (= (type |a#7#1#0@@7|) (MapType BoxType BoxType))) (= ($Is (|#CoordinationSystem.Ephemeral.Known| |a#7#0#0@@13| |a#7#1#0@@7| |a#7#2#0@@2|) Tclass.CoordinationSystem.Ephemeral)  (and (and ($Is |a#7#0#0@@13| |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|) ($Is |a#7#1#0@@7| (TMap Tclass._System.nat Tclass._System.nat))) ($Is (int_2_U |a#7#2#0@@2|) Tclass._System.nat))))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3614|
 :pattern ( ($Is (|#CoordinationSystem.Ephemeral.Known| |a#7#0#0@@13| |a#7#1#0@@7| |a#7#2#0@@2|) Tclass.CoordinationSystem.Ephemeral))
)))
(assert (forall ((|a#8#0#0@@12| T@U) (|a#8#1#0@@5| T@U) (|a#8#2#0@@2| Int) ($h@@208 T@U) ) (!  (=> (and (and (and (= (type |a#8#0#0@@12|) DatatypeTypeType) (= (type |a#8#1#0@@5|) (MapType BoxType BoxType))) (= (type $h@@208) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@208)) (= ($IsAlloc (|#CoordinationSystem.Ephemeral.Known| |a#8#0#0@@12| |a#8#1#0@@5| |a#8#2#0@@2|) Tclass.CoordinationSystem.Ephemeral $h@@208)  (and (and ($IsAlloc |a#8#0#0@@12| |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@208) ($IsAlloc |a#8#1#0@@5| (TMap Tclass._System.nat Tclass._System.nat) $h@@208)) ($IsAlloc (int_2_U |a#8#2#0@@2|) Tclass._System.nat $h@@208))))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3615|
 :pattern ( ($IsAlloc (|#CoordinationSystem.Ephemeral.Known| |a#8#0#0@@12| |a#8#1#0@@5| |a#8#2#0@@2|) Tclass.CoordinationSystem.Ephemeral $h@@208))
)))
(assert (forall ((d@@246 T@U) ($h@@209 T@U) ) (!  (=> (and (and (= (type d@@246) DatatypeTypeType) (= (type $h@@209) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@209) (and (CoordinationSystem.Ephemeral.Known_q d@@246) ($IsAlloc d@@246 Tclass.CoordinationSystem.Ephemeral $h@@209)))) ($IsAlloc (CoordinationSystem.Ephemeral.progress d@@246) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@209))
 :qid |unknown.0:0|
 :skolemid |3616|
 :pattern ( ($IsAlloc (CoordinationSystem.Ephemeral.progress d@@246) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@209))
)))
(assert (forall ((d@@247 T@U) ($h@@210 T@U) ) (!  (=> (and (and (= (type d@@247) DatatypeTypeType) (= (type $h@@210) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@210) (and (CoordinationSystem.Ephemeral.Known_q d@@247) ($IsAlloc d@@247 Tclass.CoordinationSystem.Ephemeral $h@@210)))) ($IsAlloc (CoordinationSystem.Ephemeral.syncReqs d@@247) (TMap Tclass._System.nat Tclass._System.nat) $h@@210))
 :qid |unknown.0:0|
 :skolemid |3617|
 :pattern ( ($IsAlloc (CoordinationSystem.Ephemeral.syncReqs d@@247) (TMap Tclass._System.nat Tclass._System.nat) $h@@210))
)))
(assert (forall ((d@@248 T@U) ($h@@211 T@U) ) (!  (=> (and (and (= (type d@@248) DatatypeTypeType) (= (type $h@@211) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@211) (and (CoordinationSystem.Ephemeral.Known_q d@@248) ($IsAlloc d@@248 Tclass.CoordinationSystem.Ephemeral $h@@211)))) ($IsAlloc (int_2_U (CoordinationSystem.Ephemeral.mapLsn d@@248)) Tclass._System.nat $h@@211))
 :qid |unknown.0:0|
 :skolemid |3618|
 :pattern ( ($IsAlloc (int_2_U (CoordinationSystem.Ephemeral.mapLsn d@@248)) Tclass._System.nat $h@@211))
)))
(assert (forall ((|a#9#0#0@@10| T@U) (|a#9#1#0@@3| T@U) (|a#9#2#0@@2| Int) ) (!  (=> (and (= (type |a#9#0#0@@10|) DatatypeTypeType) (= (type |a#9#1#0@@3|) (MapType BoxType BoxType))) (= (|#CoordinationSystem.Ephemeral.Known| (Lit |a#9#0#0@@10|) (Lit |a#9#1#0@@3|) (LitInt |a#9#2#0@@2|)) (Lit (|#CoordinationSystem.Ephemeral.Known| |a#9#0#0@@10| |a#9#1#0@@3| |a#9#2#0@@2|))))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3619|
 :pattern ( (|#CoordinationSystem.Ephemeral.Known| (Lit |a#9#0#0@@10|) (Lit |a#9#1#0@@3|) (LitInt |a#9#2#0@@2|)))
)))
(assert (forall ((|a#10#0#0@@10| T@U) (|a#10#1#0@@3| T@U) (|a#10#2#0@@2| Int) ) (!  (=> (and (= (type |a#10#0#0@@10|) DatatypeTypeType) (= (type |a#10#1#0@@3|) (MapType BoxType BoxType))) (= (CoordinationSystem.Ephemeral.progress (|#CoordinationSystem.Ephemeral.Known| |a#10#0#0@@10| |a#10#1#0@@3| |a#10#2#0@@2|)) |a#10#0#0@@10|))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3620|
 :pattern ( (|#CoordinationSystem.Ephemeral.Known| |a#10#0#0@@10| |a#10#1#0@@3| |a#10#2#0@@2|))
)))
(assert (forall ((|a#11#0#0@@9| T@U) (|a#11#1#0@@2| T@U) (|a#11#2#0@@1| Int) ) (!  (=> (and (= (type |a#11#0#0@@9|) DatatypeTypeType) (= (type |a#11#1#0@@2|) (MapType BoxType BoxType))) (< (DtRank |a#11#0#0@@9|) (DtRank (|#CoordinationSystem.Ephemeral.Known| |a#11#0#0@@9| |a#11#1#0@@2| |a#11#2#0@@1|))))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3621|
 :pattern ( (|#CoordinationSystem.Ephemeral.Known| |a#11#0#0@@9| |a#11#1#0@@2| |a#11#2#0@@1|))
)))
(assert (forall ((|a#12#0#0@@8| T@U) (|a#12#1#0@@3| T@U) (|a#12#2#0@@2| Int) ) (!  (=> (and (= (type |a#12#0#0@@8|) DatatypeTypeType) (= (type |a#12#1#0@@3|) (MapType BoxType BoxType))) (= (CoordinationSystem.Ephemeral.syncReqs (|#CoordinationSystem.Ephemeral.Known| |a#12#0#0@@8| |a#12#1#0@@3| |a#12#2#0@@2|)) |a#12#1#0@@3|))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3622|
 :pattern ( (|#CoordinationSystem.Ephemeral.Known| |a#12#0#0@@8| |a#12#1#0@@3| |a#12#2#0@@2|))
)))
(assert (forall ((|a#13#0#0@@6| T@U) (|a#13#1#0@@3| T@U) (|a#13#2#0@@3| Int) (d@@249 T@U) ) (!  (=> (and (and (and (= (type |a#13#0#0@@6|) DatatypeTypeType) (= (type |a#13#1#0@@3|) (MapType BoxType BoxType))) (= (type d@@249) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#13#1#0@@3|) ($Box d@@249)))) (< (DtRank d@@249) (DtRank (|#CoordinationSystem.Ephemeral.Known| |a#13#0#0@@6| |a#13#1#0@@3| |a#13#2#0@@3|))))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3623|
 :pattern ( (MapType0Select (|Map#Domain| |a#13#1#0@@3|) ($Box d@@249)) (|#CoordinationSystem.Ephemeral.Known| |a#13#0#0@@6| |a#13#1#0@@3| |a#13#2#0@@3|))
)))
(assert (forall ((|a#14#0#0@@7| T@U) (|a#14#1#0@@4| T@U) (|a#14#2#0@@3| Int) (bx@@177 T@U) ) (!  (=> (and (and (and (= (type |a#14#0#0@@7|) DatatypeTypeType) (= (type |a#14#1#0@@4|) (MapType BoxType BoxType))) (= (type bx@@177) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#14#1#0@@4|) bx@@177))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#14#1#0@@4|) bx@@177))) (DtRank (|#CoordinationSystem.Ephemeral.Known| |a#14#0#0@@7| |a#14#1#0@@4| |a#14#2#0@@3|))))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3624|
 :pattern ( (MapType0Select (|Map#Domain| |a#14#1#0@@4|) bx@@177) (|#CoordinationSystem.Ephemeral.Known| |a#14#0#0@@7| |a#14#1#0@@4| |a#14#2#0@@3|))
)))
(assert (forall ((|a#15#0#0@@8| T@U) (|a#15#1#0@@4| T@U) (|a#15#2#0@@3| Int) ) (!  (=> (and (= (type |a#15#0#0@@8|) DatatypeTypeType) (= (type |a#15#1#0@@4|) (MapType BoxType BoxType))) (= (CoordinationSystem.Ephemeral.mapLsn (|#CoordinationSystem.Ephemeral.Known| |a#15#0#0@@8| |a#15#1#0@@4| |a#15#2#0@@3|)) |a#15#2#0@@3|))
 :qid |CoordinationSystemidfy.31:7|
 :skolemid |3625|
 :pattern ( (|#CoordinationSystem.Ephemeral.Known| |a#15#0#0@@8| |a#15#1#0@@4| |a#15#2#0@@3|))
)))
(assert (forall ((d@@250 T@U) ) (!  (=> (and (= (type d@@250) DatatypeTypeType) (|$IsA#CoordinationSystem.Ephemeral| d@@250)) (or (CoordinationSystem.Ephemeral.Unknown_q d@@250) (CoordinationSystem.Ephemeral.Known_q d@@250)))
 :qid |unknown.0:0|
 :skolemid |3626|
 :pattern ( (|$IsA#CoordinationSystem.Ephemeral| d@@250))
)))
(assert (forall ((d@@251 T@U) ) (!  (=> (and (= (type d@@251) DatatypeTypeType) ($Is d@@251 Tclass.CoordinationSystem.Ephemeral)) (or (CoordinationSystem.Ephemeral.Unknown_q d@@251) (CoordinationSystem.Ephemeral.Known_q d@@251)))
 :qid |unknown.0:0|
 :skolemid |3627|
 :pattern ( (CoordinationSystem.Ephemeral.Known_q d@@251) ($Is d@@251 Tclass.CoordinationSystem.Ephemeral))
 :pattern ( (CoordinationSystem.Ephemeral.Unknown_q d@@251) ($Is d@@251 Tclass.CoordinationSystem.Ephemeral))
)))
(assert (forall ((a@@202 T@U) (b@@152 T@U) ) (!  (=> (and (and (= (type a@@202) DatatypeTypeType) (= (type b@@152) DatatypeTypeType)) (and (CoordinationSystem.Ephemeral.Unknown_q a@@202) (CoordinationSystem.Ephemeral.Unknown_q b@@152))) (= (|CoordinationSystem.Ephemeral#Equal| a@@202 b@@152) true))
 :qid |unknown.0:0|
 :skolemid |3628|
 :pattern ( (|CoordinationSystem.Ephemeral#Equal| a@@202 b@@152) (CoordinationSystem.Ephemeral.Unknown_q a@@202))
 :pattern ( (|CoordinationSystem.Ephemeral#Equal| a@@202 b@@152) (CoordinationSystem.Ephemeral.Unknown_q b@@152))
)))
(assert (forall ((a@@203 T@U) (b@@153 T@U) ) (!  (=> (and (and (= (type a@@203) DatatypeTypeType) (= (type b@@153) DatatypeTypeType)) (and (CoordinationSystem.Ephemeral.Known_q a@@203) (CoordinationSystem.Ephemeral.Known_q b@@153))) (= (|CoordinationSystem.Ephemeral#Equal| a@@203 b@@153)  (and (and (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (CoordinationSystem.Ephemeral.progress a@@203) (CoordinationSystem.Ephemeral.progress b@@153)) (|Map#Equal| (CoordinationSystem.Ephemeral.syncReqs a@@203) (CoordinationSystem.Ephemeral.syncReqs b@@153))) (= (CoordinationSystem.Ephemeral.mapLsn a@@203) (CoordinationSystem.Ephemeral.mapLsn b@@153)))))
 :qid |unknown.0:0|
 :skolemid |3629|
 :pattern ( (|CoordinationSystem.Ephemeral#Equal| a@@203 b@@153) (CoordinationSystem.Ephemeral.Known_q a@@203))
 :pattern ( (|CoordinationSystem.Ephemeral#Equal| a@@203 b@@153) (CoordinationSystem.Ephemeral.Known_q b@@153))
)))
(assert (forall ((a@@204 T@U) (b@@154 T@U) ) (!  (=> (and (= (type a@@204) DatatypeTypeType) (= (type b@@154) DatatypeTypeType)) (= (|CoordinationSystem.Ephemeral#Equal| a@@204 b@@154) (= a@@204 b@@154)))
 :qid |unknown.0:0|
 :skolemid |3630|
 :pattern ( (|CoordinationSystem.Ephemeral#Equal| a@@204 b@@154))
)))
(assert (forall ((arg0@@595 T@U) (arg1@@283 T@U) (arg2@@169 T@U) ) (! (= (type (|#CoordinationSystem.Variables.Variables| arg0@@595 arg1@@283 arg2@@169)) DatatypeTypeType)
 :qid |funType:#CoordinationSystem.Variables.Variables|
 :pattern ( (|#CoordinationSystem.Variables.Variables| arg0@@595 arg1@@283 arg2@@169))
)))
(assert (forall ((|a#16#0#0@@8| T@U) (|a#16#1#0@@4| T@U) (|a#16#2#0@@3| T@U) ) (!  (=> (and (and (= (type |a#16#0#0@@8|) DatatypeTypeType) (= (type |a#16#1#0@@4|) DatatypeTypeType)) (= (type |a#16#2#0@@3|) DatatypeTypeType)) (= (DatatypeCtorId (|#CoordinationSystem.Variables.Variables| |a#16#0#0@@8| |a#16#1#0@@4| |a#16#2#0@@3|)) |##CoordinationSystem.Variables.Variables|))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3631|
 :pattern ( (|#CoordinationSystem.Variables.Variables| |a#16#0#0@@8| |a#16#1#0@@4| |a#16#2#0@@3|))
)))
(assert (forall ((d@@252 T@U) ) (!  (=> (= (type d@@252) DatatypeTypeType) (= (CoordinationSystem.Variables.Variables_q d@@252) (= (DatatypeCtorId d@@252) |##CoordinationSystem.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |3632|
 :pattern ( (CoordinationSystem.Variables.Variables_q d@@252))
)))
(assert (forall ((d@@253 T@U) ) (!  (=> (and (= (type d@@253) DatatypeTypeType) (CoordinationSystem.Variables.Variables_q d@@253)) (exists ((|a#17#0#0@@7| T@U) (|a#17#1#0@@3| T@U) (|a#17#2#0@@2| T@U) ) (!  (and (and (and (= (type |a#17#0#0@@7|) DatatypeTypeType) (= (type |a#17#1#0@@3|) DatatypeTypeType)) (= (type |a#17#2#0@@2|) DatatypeTypeType)) (= d@@253 (|#CoordinationSystem.Variables.Variables| |a#17#0#0@@7| |a#17#1#0@@3| |a#17#2#0@@2|)))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3633|
 :no-pattern (type |a#17#0#0@@7|)
 :no-pattern (type |a#17#1#0@@3|)
 :no-pattern (type |a#17#2#0@@2|)
 :no-pattern (U_2_int |a#17#0#0@@7|)
 :no-pattern (U_2_bool |a#17#0#0@@7|)
 :no-pattern (U_2_int |a#17#1#0@@3|)
 :no-pattern (U_2_bool |a#17#1#0@@3|)
 :no-pattern (U_2_int |a#17#2#0@@2|)
 :no-pattern (U_2_bool |a#17#2#0@@2|)
)))
 :qid |unknown.0:0|
 :skolemid |3634|
 :pattern ( (CoordinationSystem.Variables.Variables_q d@@253))
)))
(assert (forall ((|a#18#0#0@@7| T@U) (|a#18#1#0@@2| T@U) (|a#18#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#18#0#0@@7|) DatatypeTypeType) (= (type |a#18#1#0@@2|) DatatypeTypeType)) (= (type |a#18#2#0@@1|) DatatypeTypeType)) (= ($Is (|#CoordinationSystem.Variables.Variables| |a#18#0#0@@7| |a#18#1#0@@2| |a#18#2#0@@1|) Tclass.CoordinationSystem.Variables)  (and (and ($Is |a#18#0#0@@7| Tclass.CrashTolerantJournal.Variables) ($Is |a#18#1#0@@2| Tclass.CrashTolerantMap.Variables)) ($Is |a#18#2#0@@1| Tclass.CoordinationSystem.Ephemeral))))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3635|
 :pattern ( ($Is (|#CoordinationSystem.Variables.Variables| |a#18#0#0@@7| |a#18#1#0@@2| |a#18#2#0@@1|) Tclass.CoordinationSystem.Variables))
)))
(assert (forall ((|a#19#0#0@@7| T@U) (|a#19#1#0@@2| T@U) (|a#19#2#0@@1| T@U) ($h@@212 T@U) ) (!  (=> (and (and (and (and (= (type |a#19#0#0@@7|) DatatypeTypeType) (= (type |a#19#1#0@@2|) DatatypeTypeType)) (= (type |a#19#2#0@@1|) DatatypeTypeType)) (= (type $h@@212) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@212)) (= ($IsAlloc (|#CoordinationSystem.Variables.Variables| |a#19#0#0@@7| |a#19#1#0@@2| |a#19#2#0@@1|) Tclass.CoordinationSystem.Variables $h@@212)  (and (and ($IsAlloc |a#19#0#0@@7| Tclass.CrashTolerantJournal.Variables $h@@212) ($IsAlloc |a#19#1#0@@2| Tclass.CrashTolerantMap.Variables $h@@212)) ($IsAlloc |a#19#2#0@@1| Tclass.CoordinationSystem.Ephemeral $h@@212))))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3636|
 :pattern ( ($IsAlloc (|#CoordinationSystem.Variables.Variables| |a#19#0#0@@7| |a#19#1#0@@2| |a#19#2#0@@1|) Tclass.CoordinationSystem.Variables $h@@212))
)))
(assert (forall ((d@@254 T@U) ($h@@213 T@U) ) (!  (=> (and (and (= (type d@@254) DatatypeTypeType) (= (type $h@@213) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@213) (and (CoordinationSystem.Variables.Variables_q d@@254) ($IsAlloc d@@254 Tclass.CoordinationSystem.Variables $h@@213)))) ($IsAlloc (CoordinationSystem.Variables.journal d@@254) Tclass.CrashTolerantJournal.Variables $h@@213))
 :qid |unknown.0:0|
 :skolemid |3637|
 :pattern ( ($IsAlloc (CoordinationSystem.Variables.journal d@@254) Tclass.CrashTolerantJournal.Variables $h@@213))
)))
(assert (forall ((d@@255 T@U) ($h@@214 T@U) ) (!  (=> (and (and (= (type d@@255) DatatypeTypeType) (= (type $h@@214) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@214) (and (CoordinationSystem.Variables.Variables_q d@@255) ($IsAlloc d@@255 Tclass.CoordinationSystem.Variables $h@@214)))) ($IsAlloc (CoordinationSystem.Variables.mapadt d@@255) Tclass.CrashTolerantMap.Variables $h@@214))
 :qid |unknown.0:0|
 :skolemid |3638|
 :pattern ( ($IsAlloc (CoordinationSystem.Variables.mapadt d@@255) Tclass.CrashTolerantMap.Variables $h@@214))
)))
(assert (forall ((d@@256 T@U) ($h@@215 T@U) ) (!  (=> (and (and (= (type d@@256) DatatypeTypeType) (= (type $h@@215) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@215) (and (CoordinationSystem.Variables.Variables_q d@@256) ($IsAlloc d@@256 Tclass.CoordinationSystem.Variables $h@@215)))) ($IsAlloc (CoordinationSystem.Variables.ephemeral d@@256) Tclass.CoordinationSystem.Ephemeral $h@@215))
 :qid |unknown.0:0|
 :skolemid |3639|
 :pattern ( ($IsAlloc (CoordinationSystem.Variables.ephemeral d@@256) Tclass.CoordinationSystem.Ephemeral $h@@215))
)))
(assert (forall ((|a#20#0#0@@7| T@U) (|a#20#1#0@@2| T@U) (|a#20#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#20#0#0@@7|) DatatypeTypeType) (= (type |a#20#1#0@@2|) DatatypeTypeType)) (= (type |a#20#2#0@@1|) DatatypeTypeType)) (= (|#CoordinationSystem.Variables.Variables| (Lit |a#20#0#0@@7|) (Lit |a#20#1#0@@2|) (Lit |a#20#2#0@@1|)) (Lit (|#CoordinationSystem.Variables.Variables| |a#20#0#0@@7| |a#20#1#0@@2| |a#20#2#0@@1|))))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3640|
 :pattern ( (|#CoordinationSystem.Variables.Variables| (Lit |a#20#0#0@@7|) (Lit |a#20#1#0@@2|) (Lit |a#20#2#0@@1|)))
)))
(assert (forall ((|a#21#0#0@@6| T@U) (|a#21#1#0@@1| T@U) (|a#21#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@6|) DatatypeTypeType) (= (type |a#21#1#0@@1|) DatatypeTypeType)) (= (type |a#21#2#0@@0|) DatatypeTypeType)) (= (CoordinationSystem.Variables.journal (|#CoordinationSystem.Variables.Variables| |a#21#0#0@@6| |a#21#1#0@@1| |a#21#2#0@@0|)) |a#21#0#0@@6|))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3641|
 :pattern ( (|#CoordinationSystem.Variables.Variables| |a#21#0#0@@6| |a#21#1#0@@1| |a#21#2#0@@0|))
)))
(assert (forall ((|a#22#0#0@@5| T@U) (|a#22#1#0@@1| T@U) (|a#22#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#22#0#0@@5|) DatatypeTypeType) (= (type |a#22#1#0@@1|) DatatypeTypeType)) (= (type |a#22#2#0@@0|) DatatypeTypeType)) (< (DtRank |a#22#0#0@@5|) (DtRank (|#CoordinationSystem.Variables.Variables| |a#22#0#0@@5| |a#22#1#0@@1| |a#22#2#0@@0|))))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3642|
 :pattern ( (|#CoordinationSystem.Variables.Variables| |a#22#0#0@@5| |a#22#1#0@@1| |a#22#2#0@@0|))
)))
(assert (forall ((|a#23#0#0@@3| T@U) (|a#23#1#0| T@U) (|a#23#2#0| T@U) ) (!  (=> (and (and (= (type |a#23#0#0@@3|) DatatypeTypeType) (= (type |a#23#1#0|) DatatypeTypeType)) (= (type |a#23#2#0|) DatatypeTypeType)) (= (CoordinationSystem.Variables.mapadt (|#CoordinationSystem.Variables.Variables| |a#23#0#0@@3| |a#23#1#0| |a#23#2#0|)) |a#23#1#0|))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3643|
 :pattern ( (|#CoordinationSystem.Variables.Variables| |a#23#0#0@@3| |a#23#1#0| |a#23#2#0|))
)))
(assert (forall ((|a#24#0#0@@2| T@U) (|a#24#1#0| T@U) (|a#24#2#0| T@U) ) (!  (=> (and (and (= (type |a#24#0#0@@2|) DatatypeTypeType) (= (type |a#24#1#0|) DatatypeTypeType)) (= (type |a#24#2#0|) DatatypeTypeType)) (< (DtRank |a#24#1#0|) (DtRank (|#CoordinationSystem.Variables.Variables| |a#24#0#0@@2| |a#24#1#0| |a#24#2#0|))))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3644|
 :pattern ( (|#CoordinationSystem.Variables.Variables| |a#24#0#0@@2| |a#24#1#0| |a#24#2#0|))
)))
(assert (forall ((|a#25#0#0@@1| T@U) (|a#25#1#0| T@U) (|a#25#2#0| T@U) ) (!  (=> (and (and (= (type |a#25#0#0@@1|) DatatypeTypeType) (= (type |a#25#1#0|) DatatypeTypeType)) (= (type |a#25#2#0|) DatatypeTypeType)) (= (CoordinationSystem.Variables.ephemeral (|#CoordinationSystem.Variables.Variables| |a#25#0#0@@1| |a#25#1#0| |a#25#2#0|)) |a#25#2#0|))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3645|
 :pattern ( (|#CoordinationSystem.Variables.Variables| |a#25#0#0@@1| |a#25#1#0| |a#25#2#0|))
)))
(assert (forall ((|a#26#0#0@@2| T@U) (|a#26#1#0| T@U) (|a#26#2#0| T@U) ) (!  (=> (and (and (= (type |a#26#0#0@@2|) DatatypeTypeType) (= (type |a#26#1#0|) DatatypeTypeType)) (= (type |a#26#2#0|) DatatypeTypeType)) (< (DtRank |a#26#2#0|) (DtRank (|#CoordinationSystem.Variables.Variables| |a#26#0#0@@2| |a#26#1#0| |a#26#2#0|))))
 :qid |CoordinationSystemidfy.39:5|
 :skolemid |3646|
 :pattern ( (|#CoordinationSystem.Variables.Variables| |a#26#0#0@@2| |a#26#1#0| |a#26#2#0|))
)))
(assert (forall ((d@@257 T@U) ) (!  (=> (and (= (type d@@257) DatatypeTypeType) (|$IsA#CoordinationSystem.Variables| d@@257)) (CoordinationSystem.Variables.Variables_q d@@257))
 :qid |unknown.0:0|
 :skolemid |3647|
 :pattern ( (|$IsA#CoordinationSystem.Variables| d@@257))
)))
(assert (forall ((d@@258 T@U) ) (!  (=> (and (= (type d@@258) DatatypeTypeType) ($Is d@@258 Tclass.CoordinationSystem.Variables)) (CoordinationSystem.Variables.Variables_q d@@258))
 :qid |unknown.0:0|
 :skolemid |3648|
 :pattern ( (CoordinationSystem.Variables.Variables_q d@@258) ($Is d@@258 Tclass.CoordinationSystem.Variables))
)))
(assert (forall ((a@@205 T@U) (b@@155 T@U) ) (!  (=> (and (and (= (type a@@205) DatatypeTypeType) (= (type b@@155) DatatypeTypeType)) true) (= (|CoordinationSystem.Variables#Equal| a@@205 b@@155)  (and (and (|CrashTolerantJournal.Variables#Equal| (CoordinationSystem.Variables.journal a@@205) (CoordinationSystem.Variables.journal b@@155)) (|CrashTolerantMap.Variables#Equal| (CoordinationSystem.Variables.mapadt a@@205) (CoordinationSystem.Variables.mapadt b@@155))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral a@@205) (CoordinationSystem.Variables.ephemeral b@@155)))))
 :qid |unknown.0:0|
 :skolemid |3649|
 :pattern ( (|CoordinationSystem.Variables#Equal| a@@205 b@@155))
)))
(assert (forall ((a@@206 T@U) (b@@156 T@U) ) (!  (=> (and (= (type a@@206) DatatypeTypeType) (= (type b@@156) DatatypeTypeType)) (= (|CoordinationSystem.Variables#Equal| a@@206 b@@156) (= a@@206 b@@156)))
 :qid |unknown.0:0|
 :skolemid |3650|
 :pattern ( (|CoordinationSystem.Variables#Equal| a@@206 b@@156))
)))
(assert  (=> true (forall ((this@@132 T@U) ) (!  (=> (and (= (type this@@132) DatatypeTypeType) (or (|CoordinationSystem.Variables.WF#canCall| this@@132) ($Is this@@132 Tclass.CoordinationSystem.Variables))) true)
 :qid |CoordinationSystemidfy.44:15|
 :skolemid |3651|
 :pattern ( (CoordinationSystem.Variables.WF this@@132))
))))
(assert (forall ((this@@133 T@U) ) (!  (=> (and (= (type this@@133) DatatypeTypeType) ($Is this@@133 Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystem.Variables.WF#requires| this@@133) true))
 :qid |CoordinationSystemidfy.44:15|
 :skolemid |3652|
 :pattern ( (|CoordinationSystem.Variables.WF#requires| this@@133))
)))
(assert  (=> true (forall ((this@@134 T@U) ) (!  (=> (and (= (type this@@134) DatatypeTypeType) (or (|CoordinationSystem.Variables.WF#canCall| this@@134) ($Is this@@134 Tclass.CoordinationSystem.Variables))) (and (and (and (CoordinationSystem.Variables.Variables_q this@@134) (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal this@@134))) (=> (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal this@@134)) (and (and (CoordinationSystem.Variables.Variables_q this@@134) (|CrashTolerantMap.Variables.WF#canCall| (CoordinationSystem.Variables.mapadt this@@134))) (=> (CrashTolerantMap.Variables.WF (CoordinationSystem.Variables.mapadt this@@134)) (and (and (CoordinationSystem.Variables.Variables_q this@@134) (and (CoordinationSystem.Variables.Variables_q this@@134) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal this@@134)))) (=> (= (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral this@@134)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal this@@134)))) (and (and (and (CoordinationSystem.Variables.Variables_q this@@134) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal this@@134))) (and (CoordinationSystem.Variables.Variables_q this@@134) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt this@@134)))) (=> (= (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal this@@134))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt this@@134)))) (and (and (CoordinationSystem.Variables.Variables_q this@@134) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal this@@134))) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal this@@134))) (and (CoordinationSystem.Variables.Variables_q this@@134) (CrashTolerantMap.Variables.Variables_q (CoordinationSystem.Variables.mapadt this@@134))))))))))))) (= (CoordinationSystem.Variables.WF this@@134)  (and (and (and (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal this@@134)) (CrashTolerantMap.Variables.WF (CoordinationSystem.Variables.mapadt this@@134))) (and (= (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral this@@134)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal this@@134)))) (= (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal this@@134))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt this@@134)))))) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal this@@134))) (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt this@@134))))))))
 :qid |CoordinationSystemidfy.44:15|
 :skolemid |3653|
 :pattern ( (CoordinationSystem.Variables.WF this@@134))
))))
(assert  (=> true (forall ((this@@135 T@U) ) (!  (=> (and (= (type this@@135) DatatypeTypeType) (or (|CoordinationSystem.Variables.WF#canCall| (Lit this@@135)) ($Is this@@135 Tclass.CoordinationSystem.Variables))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (|CrashTolerantJournal.Variables.WF#canCall| (Lit (CoordinationSystem.Variables.journal (Lit this@@135))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Variables.WF (Lit (CoordinationSystem.Variables.journal (Lit this@@135))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (|CrashTolerantMap.Variables.WF#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Variables.WF (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit this@@135)))))) (=> (= (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit this@@135))))))) (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit (CoordinationSystem.Variables.journal (Lit this@@135)))))))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit this@@135))))) (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135)))))) (=> (= (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit (CoordinationSystem.Variables.journal (Lit this@@135))))))))) (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135)))))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (CrashTolerantJournal.Variables.Variables_q (Lit (CoordinationSystem.Variables.journal (Lit this@@135))))) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit (CoordinationSystem.Variables.journal (Lit this@@135))))))))) (and (CoordinationSystem.Variables.Variables_q (Lit this@@135)) (CrashTolerantMap.Variables.Variables_q (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135))))))))))))))) (= (CoordinationSystem.Variables.WF (Lit this@@135))  (and (and (and (CrashTolerantJournal.Variables.WF (Lit (CoordinationSystem.Variables.journal (Lit this@@135)))) (CrashTolerantMap.Variables.WF (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135))))) (and (= (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit this@@135))))))) (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit (CoordinationSystem.Variables.journal (Lit this@@135)))))))))) (= (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.Ephemeral.Known_q (Lit (CrashTolerantJournal.Variables.ephemeral (Lit (CoordinationSystem.Variables.journal (Lit this@@135))))))))) (U_2_bool (Lit (bool_2_U (CrashTolerantMap.Ephemeral.Known_q (Lit (CrashTolerantMap.Variables.ephemeral (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135)))))))))))) (=> (Options.Option.Some_q (Lit (CrashTolerantJournal.Variables.inFlight (Lit (CoordinationSystem.Variables.journal (Lit this@@135)))))) (Options.Option.Some_q (Lit (CrashTolerantMap.Variables.inFlight (Lit (CoordinationSystem.Variables.mapadt (Lit this@@135)))))))))))
 :qid |CoordinationSystemidfy.44:15|
 :weight 3
 :skolemid |3654|
 :pattern ( (CoordinationSystem.Variables.WF (Lit this@@135)))
))))
(assert  (=> true (forall ((this@@136 T@U) ) (!  (=> (and (= (type this@@136) DatatypeTypeType) (or (|CoordinationSystem.Variables.Init#canCall| this@@136) ($Is this@@136 Tclass.CoordinationSystem.Variables))) true)
 :qid |CoordinationSystemidfy.53:15|
 :skolemid |3655|
 :pattern ( (CoordinationSystem.Variables.Init this@@136))
))))
(assert (forall ((this@@137 T@U) ) (!  (=> (and (= (type this@@137) DatatypeTypeType) ($Is this@@137 Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystem.Variables.Init#requires| this@@137) true))
 :qid |CoordinationSystemidfy.53:15|
 :skolemid |3656|
 :pattern ( (|CoordinationSystem.Variables.Init#requires| this@@137))
)))
(assert  (=> true (forall ((this@@138 T@U) ) (!  (=> (and (= (type this@@138) DatatypeTypeType) (or (|CoordinationSystem.Variables.Init#canCall| this@@138) ($Is this@@138 Tclass.CoordinationSystem.Variables))) (and (and (and (CoordinationSystem.Variables.Variables_q this@@138) (|CrashTolerantJournal.__default.Init#canCall| (CoordinationSystem.Variables.journal this@@138))) (=> (CrashTolerantJournal.__default.Init (CoordinationSystem.Variables.journal this@@138)) (and (and (CoordinationSystem.Variables.Variables_q this@@138) (|CrashTolerantMap.__default.Init#canCall| (CoordinationSystem.Variables.mapadt this@@138))) (=> (CrashTolerantMap.__default.Init (CoordinationSystem.Variables.mapadt this@@138)) (CoordinationSystem.Variables.Variables_q this@@138))))) (= (CoordinationSystem.Variables.Init this@@138)  (and (and (CrashTolerantJournal.__default.Init (CoordinationSystem.Variables.journal this@@138)) (CrashTolerantMap.__default.Init (CoordinationSystem.Variables.mapadt this@@138))) (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral this@@138))))))
 :qid |CoordinationSystemidfy.53:15|
 :skolemid |3657|
 :pattern ( (CoordinationSystem.Variables.Init this@@138))
))))
(assert  (=> true (forall ((this@@139 T@U) ) (!  (=> (and (= (type this@@139) DatatypeTypeType) (or (|CoordinationSystem.Variables.Init#canCall| (Lit this@@139)) ($Is this@@139 Tclass.CoordinationSystem.Variables))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit this@@139)) (|CrashTolerantJournal.__default.Init#canCall| (Lit (CoordinationSystem.Variables.journal (Lit this@@139))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Init (Lit (CoordinationSystem.Variables.journal (Lit this@@139))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit this@@139)) (|CrashTolerantMap.__default.Init#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit this@@139))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.__default.Init (Lit (CoordinationSystem.Variables.mapadt (Lit this@@139))))))) (CoordinationSystem.Variables.Variables_q (Lit this@@139)))))) (= (CoordinationSystem.Variables.Init (Lit this@@139)) (U_2_bool (Lit (bool_2_U  (and (and (CrashTolerantJournal.__default.Init (Lit (CoordinationSystem.Variables.journal (Lit this@@139)))) (CrashTolerantMap.__default.Init (Lit (CoordinationSystem.Variables.mapadt (Lit this@@139))))) (CoordinationSystem.Ephemeral.Unknown_q (Lit (CoordinationSystem.Variables.ephemeral (Lit this@@139)))))))))))
 :qid |CoordinationSystemidfy.53:15|
 :weight 3
 :skolemid |3658|
 :pattern ( (CoordinationSystem.Variables.Init (Lit this@@139)))
))))
(assert (= (type |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep|) |##CoordinationSystem.Step.LoadEphemeralFromPersistentStep|))
(assert (forall ((d@@259 T@U) ) (!  (=> (= (type d@@259) DatatypeTypeType) (= (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q d@@259) (= (DatatypeCtorId d@@259) |##CoordinationSystem.Step.LoadEphemeralFromPersistentStep|)))
 :qid |unknown.0:0|
 :skolemid |3659|
 :pattern ( (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q d@@259))
)))
(assert (forall ((d@@260 T@U) ) (!  (=> (and (= (type d@@260) DatatypeTypeType) (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q d@@260)) (= d@@260 |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep|))
 :qid |unknown.0:0|
 :skolemid |3660|
 :pattern ( (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q d@@260))
)))
(assert ($Is |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@216 T@U) ) (!  (=> (and (= (type $h@@216) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@216)) ($IsAlloc |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep| Tclass.CoordinationSystem.Step $h@@216))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3661|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep| Tclass.CoordinationSystem.Step $h@@216))
)))
(assert (= |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep| (Lit |#CoordinationSystem.Step.LoadEphemeralFromPersistentStep|)))
(assert (forall ((arg0@@596 T@U) ) (! (= (type (|#CoordinationSystem.Step.RecoverStep| arg0@@596)) DatatypeTypeType)
 :qid |funType:#CoordinationSystem.Step.RecoverStep|
 :pattern ( (|#CoordinationSystem.Step.RecoverStep| arg0@@596))
)))
(assert (forall ((|a#5#0#0@@14| T@U) ) (!  (=> (= (type |a#5#0#0@@14|) DatatypeTypeType) (= (DatatypeCtorId (|#CoordinationSystem.Step.RecoverStep| |a#5#0#0@@14|)) |##CoordinationSystem.Step.RecoverStep|))
 :qid |CoordinationSystemidfy.280:19|
 :skolemid |3662|
 :pattern ( (|#CoordinationSystem.Step.RecoverStep| |a#5#0#0@@14|))
)))
(assert (forall ((d@@261 T@U) ) (!  (=> (= (type d@@261) DatatypeTypeType) (= (CoordinationSystem.Step.RecoverStep_q d@@261) (= (DatatypeCtorId d@@261) |##CoordinationSystem.Step.RecoverStep|)))
 :qid |unknown.0:0|
 :skolemid |3663|
 :pattern ( (CoordinationSystem.Step.RecoverStep_q d@@261))
)))
(assert (forall ((d@@262 T@U) ) (!  (=> (and (= (type d@@262) DatatypeTypeType) (CoordinationSystem.Step.RecoverStep_q d@@262)) (exists ((|a#6#0#0@@14| T@U) ) (!  (and (= (type |a#6#0#0@@14|) DatatypeTypeType) (= d@@262 (|#CoordinationSystem.Step.RecoverStep| |a#6#0#0@@14|)))
 :qid |CoordinationSystemidfy.280:19|
 :skolemid |3664|
 :no-pattern (type |a#6#0#0@@14|)
 :no-pattern (U_2_int |a#6#0#0@@14|)
 :no-pattern (U_2_bool |a#6#0#0@@14|)
)))
 :qid |unknown.0:0|
 :skolemid |3665|
 :pattern ( (CoordinationSystem.Step.RecoverStep_q d@@262))
)))
(assert (forall ((|a#7#0#0@@14| T@U) ) (!  (=> (= (type |a#7#0#0@@14|) DatatypeTypeType) (= ($Is (|#CoordinationSystem.Step.RecoverStep| |a#7#0#0@@14|) Tclass.CoordinationSystem.Step) ($Is |a#7#0#0@@14| Tclass.MsgHistoryMod.MsgHistory)))
 :qid |CoordinationSystemidfy.280:19|
 :skolemid |3666|
 :pattern ( ($Is (|#CoordinationSystem.Step.RecoverStep| |a#7#0#0@@14|) Tclass.CoordinationSystem.Step))
)))
(assert (forall ((|a#8#0#0@@13| T@U) ($h@@217 T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@13|) DatatypeTypeType) (= (type $h@@217) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@217)) (= ($IsAlloc (|#CoordinationSystem.Step.RecoverStep| |a#8#0#0@@13|) Tclass.CoordinationSystem.Step $h@@217) ($IsAlloc |a#8#0#0@@13| Tclass.MsgHistoryMod.MsgHistory $h@@217)))
 :qid |CoordinationSystemidfy.280:19|
 :skolemid |3667|
 :pattern ( ($IsAlloc (|#CoordinationSystem.Step.RecoverStep| |a#8#0#0@@13|) Tclass.CoordinationSystem.Step $h@@217))
)))
(assert (forall ((arg0@@597 T@U) ) (! (= (type (CoordinationSystem.Step.records arg0@@597)) DatatypeTypeType)
 :qid |funType:CoordinationSystem.Step.records|
 :pattern ( (CoordinationSystem.Step.records arg0@@597))
)))
(assert (forall ((d@@263 T@U) ($h@@218 T@U) ) (!  (=> (and (and (= (type d@@263) DatatypeTypeType) (= (type $h@@218) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@218) (and (CoordinationSystem.Step.RecoverStep_q d@@263) ($IsAlloc d@@263 Tclass.CoordinationSystem.Step $h@@218)))) ($IsAlloc (CoordinationSystem.Step.records d@@263) Tclass.MsgHistoryMod.MsgHistory $h@@218))
 :qid |unknown.0:0|
 :skolemid |3668|
 :pattern ( ($IsAlloc (CoordinationSystem.Step.records d@@263) Tclass.MsgHistoryMod.MsgHistory $h@@218))
)))
(assert (forall ((|a#9#0#0@@11| T@U) ) (!  (=> (= (type |a#9#0#0@@11|) DatatypeTypeType) (= (|#CoordinationSystem.Step.RecoverStep| (Lit |a#9#0#0@@11|)) (Lit (|#CoordinationSystem.Step.RecoverStep| |a#9#0#0@@11|))))
 :qid |CoordinationSystemidfy.280:19|
 :skolemid |3669|
 :pattern ( (|#CoordinationSystem.Step.RecoverStep| (Lit |a#9#0#0@@11|)))
)))
(assert (forall ((|a#10#0#0@@11| T@U) ) (!  (=> (= (type |a#10#0#0@@11|) DatatypeTypeType) (= (CoordinationSystem.Step.records (|#CoordinationSystem.Step.RecoverStep| |a#10#0#0@@11|)) |a#10#0#0@@11|))
 :qid |CoordinationSystemidfy.280:19|
 :skolemid |3670|
 :pattern ( (|#CoordinationSystem.Step.RecoverStep| |a#10#0#0@@11|))
)))
(assert (forall ((|a#11#0#0@@10| T@U) ) (!  (=> (= (type |a#11#0#0@@10|) DatatypeTypeType) (< (DtRank |a#11#0#0@@10|) (DtRank (|#CoordinationSystem.Step.RecoverStep| |a#11#0#0@@10|))))
 :qid |CoordinationSystemidfy.280:19|
 :skolemid |3671|
 :pattern ( (|#CoordinationSystem.Step.RecoverStep| |a#11#0#0@@10|))
)))
(assert (= (type |#CoordinationSystem.Step.AcceptRequestStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.AcceptRequestStep|) |##CoordinationSystem.Step.AcceptRequestStep|))
(assert (forall ((d@@264 T@U) ) (!  (=> (= (type d@@264) DatatypeTypeType) (= (CoordinationSystem.Step.AcceptRequestStep_q d@@264) (= (DatatypeCtorId d@@264) |##CoordinationSystem.Step.AcceptRequestStep|)))
 :qid |unknown.0:0|
 :skolemid |3672|
 :pattern ( (CoordinationSystem.Step.AcceptRequestStep_q d@@264))
)))
(assert (forall ((d@@265 T@U) ) (!  (=> (and (= (type d@@265) DatatypeTypeType) (CoordinationSystem.Step.AcceptRequestStep_q d@@265)) (= d@@265 |#CoordinationSystem.Step.AcceptRequestStep|))
 :qid |unknown.0:0|
 :skolemid |3673|
 :pattern ( (CoordinationSystem.Step.AcceptRequestStep_q d@@265))
)))
(assert ($Is |#CoordinationSystem.Step.AcceptRequestStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@219 T@U) ) (!  (=> (and (= (type $h@@219) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@219)) ($IsAlloc |#CoordinationSystem.Step.AcceptRequestStep| Tclass.CoordinationSystem.Step $h@@219))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3674|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.AcceptRequestStep| Tclass.CoordinationSystem.Step $h@@219))
)))
(assert (= |#CoordinationSystem.Step.AcceptRequestStep| (Lit |#CoordinationSystem.Step.AcceptRequestStep|)))
(assert (= (type |#CoordinationSystem.Step.QueryStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.QueryStep|) |##CoordinationSystem.Step.QueryStep|))
(assert (forall ((d@@266 T@U) ) (!  (=> (= (type d@@266) DatatypeTypeType) (= (CoordinationSystem.Step.QueryStep_q d@@266) (= (DatatypeCtorId d@@266) |##CoordinationSystem.Step.QueryStep|)))
 :qid |unknown.0:0|
 :skolemid |3675|
 :pattern ( (CoordinationSystem.Step.QueryStep_q d@@266))
)))
(assert (forall ((d@@267 T@U) ) (!  (=> (and (= (type d@@267) DatatypeTypeType) (CoordinationSystem.Step.QueryStep_q d@@267)) (= d@@267 |#CoordinationSystem.Step.QueryStep|))
 :qid |unknown.0:0|
 :skolemid |3676|
 :pattern ( (CoordinationSystem.Step.QueryStep_q d@@267))
)))
(assert ($Is |#CoordinationSystem.Step.QueryStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@220 T@U) ) (!  (=> (and (= (type $h@@220) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@220)) ($IsAlloc |#CoordinationSystem.Step.QueryStep| Tclass.CoordinationSystem.Step $h@@220))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3677|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.QueryStep| Tclass.CoordinationSystem.Step $h@@220))
)))
(assert (= |#CoordinationSystem.Step.QueryStep| (Lit |#CoordinationSystem.Step.QueryStep|)))
(assert (= (type |#CoordinationSystem.Step.PutStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.PutStep|) |##CoordinationSystem.Step.PutStep|))
(assert (forall ((d@@268 T@U) ) (!  (=> (= (type d@@268) DatatypeTypeType) (= (CoordinationSystem.Step.PutStep_q d@@268) (= (DatatypeCtorId d@@268) |##CoordinationSystem.Step.PutStep|)))
 :qid |unknown.0:0|
 :skolemid |3678|
 :pattern ( (CoordinationSystem.Step.PutStep_q d@@268))
)))
(assert (forall ((d@@269 T@U) ) (!  (=> (and (= (type d@@269) DatatypeTypeType) (CoordinationSystem.Step.PutStep_q d@@269)) (= d@@269 |#CoordinationSystem.Step.PutStep|))
 :qid |unknown.0:0|
 :skolemid |3679|
 :pattern ( (CoordinationSystem.Step.PutStep_q d@@269))
)))
(assert ($Is |#CoordinationSystem.Step.PutStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@221 T@U) ) (!  (=> (and (= (type $h@@221) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@221)) ($IsAlloc |#CoordinationSystem.Step.PutStep| Tclass.CoordinationSystem.Step $h@@221))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3680|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.PutStep| Tclass.CoordinationSystem.Step $h@@221))
)))
(assert (= |#CoordinationSystem.Step.PutStep| (Lit |#CoordinationSystem.Step.PutStep|)))
(assert (= (type |#CoordinationSystem.Step.DeliverReplyStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.DeliverReplyStep|) |##CoordinationSystem.Step.DeliverReplyStep|))
(assert (forall ((d@@270 T@U) ) (!  (=> (= (type d@@270) DatatypeTypeType) (= (CoordinationSystem.Step.DeliverReplyStep_q d@@270) (= (DatatypeCtorId d@@270) |##CoordinationSystem.Step.DeliverReplyStep|)))
 :qid |unknown.0:0|
 :skolemid |3681|
 :pattern ( (CoordinationSystem.Step.DeliverReplyStep_q d@@270))
)))
(assert (forall ((d@@271 T@U) ) (!  (=> (and (= (type d@@271) DatatypeTypeType) (CoordinationSystem.Step.DeliverReplyStep_q d@@271)) (= d@@271 |#CoordinationSystem.Step.DeliverReplyStep|))
 :qid |unknown.0:0|
 :skolemid |3682|
 :pattern ( (CoordinationSystem.Step.DeliverReplyStep_q d@@271))
)))
(assert ($Is |#CoordinationSystem.Step.DeliverReplyStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@222 T@U) ) (!  (=> (and (= (type $h@@222) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@222)) ($IsAlloc |#CoordinationSystem.Step.DeliverReplyStep| Tclass.CoordinationSystem.Step $h@@222))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3683|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.DeliverReplyStep| Tclass.CoordinationSystem.Step $h@@222))
)))
(assert (= |#CoordinationSystem.Step.DeliverReplyStep| (Lit |#CoordinationSystem.Step.DeliverReplyStep|)))
(assert (= (type |#CoordinationSystem.Step.JournalInternalStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.JournalInternalStep|) |##CoordinationSystem.Step.JournalInternalStep|))
(assert (forall ((d@@272 T@U) ) (!  (=> (= (type d@@272) DatatypeTypeType) (= (CoordinationSystem.Step.JournalInternalStep_q d@@272) (= (DatatypeCtorId d@@272) |##CoordinationSystem.Step.JournalInternalStep|)))
 :qid |unknown.0:0|
 :skolemid |3684|
 :pattern ( (CoordinationSystem.Step.JournalInternalStep_q d@@272))
)))
(assert (forall ((d@@273 T@U) ) (!  (=> (and (= (type d@@273) DatatypeTypeType) (CoordinationSystem.Step.JournalInternalStep_q d@@273)) (= d@@273 |#CoordinationSystem.Step.JournalInternalStep|))
 :qid |unknown.0:0|
 :skolemid |3685|
 :pattern ( (CoordinationSystem.Step.JournalInternalStep_q d@@273))
)))
(assert ($Is |#CoordinationSystem.Step.JournalInternalStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@223 T@U) ) (!  (=> (and (= (type $h@@223) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@223)) ($IsAlloc |#CoordinationSystem.Step.JournalInternalStep| Tclass.CoordinationSystem.Step $h@@223))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3686|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.JournalInternalStep| Tclass.CoordinationSystem.Step $h@@223))
)))
(assert (= |#CoordinationSystem.Step.JournalInternalStep| (Lit |#CoordinationSystem.Step.JournalInternalStep|)))
(assert (= (type |#CoordinationSystem.Step.MapInternalStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.MapInternalStep|) |##CoordinationSystem.Step.MapInternalStep|))
(assert (forall ((d@@274 T@U) ) (!  (=> (= (type d@@274) DatatypeTypeType) (= (CoordinationSystem.Step.MapInternalStep_q d@@274) (= (DatatypeCtorId d@@274) |##CoordinationSystem.Step.MapInternalStep|)))
 :qid |unknown.0:0|
 :skolemid |3687|
 :pattern ( (CoordinationSystem.Step.MapInternalStep_q d@@274))
)))
(assert (forall ((d@@275 T@U) ) (!  (=> (and (= (type d@@275) DatatypeTypeType) (CoordinationSystem.Step.MapInternalStep_q d@@275)) (= d@@275 |#CoordinationSystem.Step.MapInternalStep|))
 :qid |unknown.0:0|
 :skolemid |3688|
 :pattern ( (CoordinationSystem.Step.MapInternalStep_q d@@275))
)))
(assert ($Is |#CoordinationSystem.Step.MapInternalStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@224 T@U) ) (!  (=> (and (= (type $h@@224) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@224)) ($IsAlloc |#CoordinationSystem.Step.MapInternalStep| Tclass.CoordinationSystem.Step $h@@224))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3689|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.MapInternalStep| Tclass.CoordinationSystem.Step $h@@224))
)))
(assert (= |#CoordinationSystem.Step.MapInternalStep| (Lit |#CoordinationSystem.Step.MapInternalStep|)))
(assert (= (type |#CoordinationSystem.Step.ReqSyncStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.ReqSyncStep|) |##CoordinationSystem.Step.ReqSyncStep|))
(assert (forall ((d@@276 T@U) ) (!  (=> (= (type d@@276) DatatypeTypeType) (= (CoordinationSystem.Step.ReqSyncStep_q d@@276) (= (DatatypeCtorId d@@276) |##CoordinationSystem.Step.ReqSyncStep|)))
 :qid |unknown.0:0|
 :skolemid |3690|
 :pattern ( (CoordinationSystem.Step.ReqSyncStep_q d@@276))
)))
(assert (forall ((d@@277 T@U) ) (!  (=> (and (= (type d@@277) DatatypeTypeType) (CoordinationSystem.Step.ReqSyncStep_q d@@277)) (= d@@277 |#CoordinationSystem.Step.ReqSyncStep|))
 :qid |unknown.0:0|
 :skolemid |3691|
 :pattern ( (CoordinationSystem.Step.ReqSyncStep_q d@@277))
)))
(assert ($Is |#CoordinationSystem.Step.ReqSyncStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@225 T@U) ) (!  (=> (and (= (type $h@@225) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@225)) ($IsAlloc |#CoordinationSystem.Step.ReqSyncStep| Tclass.CoordinationSystem.Step $h@@225))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3692|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.ReqSyncStep| Tclass.CoordinationSystem.Step $h@@225))
)))
(assert (= |#CoordinationSystem.Step.ReqSyncStep| (Lit |#CoordinationSystem.Step.ReqSyncStep|)))
(assert (= (type |#CoordinationSystem.Step.ReplySyncStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.ReplySyncStep|) |##CoordinationSystem.Step.ReplySyncStep|))
(assert (forall ((d@@278 T@U) ) (!  (=> (= (type d@@278) DatatypeTypeType) (= (CoordinationSystem.Step.ReplySyncStep_q d@@278) (= (DatatypeCtorId d@@278) |##CoordinationSystem.Step.ReplySyncStep|)))
 :qid |unknown.0:0|
 :skolemid |3693|
 :pattern ( (CoordinationSystem.Step.ReplySyncStep_q d@@278))
)))
(assert (forall ((d@@279 T@U) ) (!  (=> (and (= (type d@@279) DatatypeTypeType) (CoordinationSystem.Step.ReplySyncStep_q d@@279)) (= d@@279 |#CoordinationSystem.Step.ReplySyncStep|))
 :qid |unknown.0:0|
 :skolemid |3694|
 :pattern ( (CoordinationSystem.Step.ReplySyncStep_q d@@279))
)))
(assert ($Is |#CoordinationSystem.Step.ReplySyncStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@226 T@U) ) (!  (=> (and (= (type $h@@226) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@226)) ($IsAlloc |#CoordinationSystem.Step.ReplySyncStep| Tclass.CoordinationSystem.Step $h@@226))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3695|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.ReplySyncStep| Tclass.CoordinationSystem.Step $h@@226))
)))
(assert (= |#CoordinationSystem.Step.ReplySyncStep| (Lit |#CoordinationSystem.Step.ReplySyncStep|)))
(assert (forall ((arg0@@598 Int) ) (! (= (type (|#CoordinationSystem.Step.CommitStartStep| arg0@@598)) DatatypeTypeType)
 :qid |funType:#CoordinationSystem.Step.CommitStartStep|
 :pattern ( (|#CoordinationSystem.Step.CommitStartStep| arg0@@598))
)))
(assert (forall ((|a#52#0#0| Int) ) (! (= (DatatypeCtorId (|#CoordinationSystem.Step.CommitStartStep| |a#52#0#0|)) |##CoordinationSystem.Step.CommitStartStep|)
 :qid |CoordinationSystemidfy.289:23|
 :skolemid |3696|
 :pattern ( (|#CoordinationSystem.Step.CommitStartStep| |a#52#0#0|))
)))
(assert (forall ((d@@280 T@U) ) (!  (=> (= (type d@@280) DatatypeTypeType) (= (CoordinationSystem.Step.CommitStartStep_q d@@280) (= (DatatypeCtorId d@@280) |##CoordinationSystem.Step.CommitStartStep|)))
 :qid |unknown.0:0|
 :skolemid |3697|
 :pattern ( (CoordinationSystem.Step.CommitStartStep_q d@@280))
)))
(assert (forall ((d@@281 T@U) ) (!  (=> (and (= (type d@@281) DatatypeTypeType) (CoordinationSystem.Step.CommitStartStep_q d@@281)) (exists ((|a#53#0#0| Int) ) (! (= d@@281 (|#CoordinationSystem.Step.CommitStartStep| |a#53#0#0|))
 :qid |CoordinationSystemidfy.289:23|
 :skolemid |3698|
)))
 :qid |unknown.0:0|
 :skolemid |3699|
 :pattern ( (CoordinationSystem.Step.CommitStartStep_q d@@281))
)))
(assert (forall ((|a#54#0#0| Int) ) (! (= ($Is (|#CoordinationSystem.Step.CommitStartStep| |a#54#0#0|) Tclass.CoordinationSystem.Step) ($Is (int_2_U |a#54#0#0|) Tclass._System.nat))
 :qid |CoordinationSystemidfy.289:23|
 :skolemid |3700|
 :pattern ( ($Is (|#CoordinationSystem.Step.CommitStartStep| |a#54#0#0|) Tclass.CoordinationSystem.Step))
)))
(assert (forall ((|a#55#0#0| Int) ($h@@227 T@U) ) (!  (=> (and (= (type $h@@227) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@227)) (= ($IsAlloc (|#CoordinationSystem.Step.CommitStartStep| |a#55#0#0|) Tclass.CoordinationSystem.Step $h@@227) ($IsAlloc (int_2_U |a#55#0#0|) Tclass._System.nat $h@@227)))
 :qid |CoordinationSystemidfy.289:23|
 :skolemid |3701|
 :pattern ( ($IsAlloc (|#CoordinationSystem.Step.CommitStartStep| |a#55#0#0|) Tclass.CoordinationSystem.Step $h@@227))
)))
(assert (forall ((d@@282 T@U) ($h@@228 T@U) ) (!  (=> (and (and (= (type d@@282) DatatypeTypeType) (= (type $h@@228) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@228) (and (CoordinationSystem.Step.CommitStartStep_q d@@282) ($IsAlloc d@@282 Tclass.CoordinationSystem.Step $h@@228)))) ($IsAlloc (int_2_U (CoordinationSystem.Step.newBoundaryLsn d@@282)) Tclass._System.nat $h@@228))
 :qid |unknown.0:0|
 :skolemid |3702|
 :pattern ( ($IsAlloc (int_2_U (CoordinationSystem.Step.newBoundaryLsn d@@282)) Tclass._System.nat $h@@228))
)))
(assert (forall ((|a#56#0#0| Int) ) (! (= (|#CoordinationSystem.Step.CommitStartStep| (LitInt |a#56#0#0|)) (Lit (|#CoordinationSystem.Step.CommitStartStep| |a#56#0#0|)))
 :qid |CoordinationSystemidfy.289:23|
 :skolemid |3703|
 :pattern ( (|#CoordinationSystem.Step.CommitStartStep| (LitInt |a#56#0#0|)))
)))
(assert (forall ((|a#57#0#0| Int) ) (! (= (CoordinationSystem.Step.newBoundaryLsn (|#CoordinationSystem.Step.CommitStartStep| |a#57#0#0|)) |a#57#0#0|)
 :qid |CoordinationSystemidfy.289:23|
 :skolemid |3704|
 :pattern ( (|#CoordinationSystem.Step.CommitStartStep| |a#57#0#0|))
)))
(assert (= (type |#CoordinationSystem.Step.CommitCompleteStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.CommitCompleteStep|) |##CoordinationSystem.Step.CommitCompleteStep|))
(assert (forall ((d@@283 T@U) ) (!  (=> (= (type d@@283) DatatypeTypeType) (= (CoordinationSystem.Step.CommitCompleteStep_q d@@283) (= (DatatypeCtorId d@@283) |##CoordinationSystem.Step.CommitCompleteStep|)))
 :qid |unknown.0:0|
 :skolemid |3705|
 :pattern ( (CoordinationSystem.Step.CommitCompleteStep_q d@@283))
)))
(assert (forall ((d@@284 T@U) ) (!  (=> (and (= (type d@@284) DatatypeTypeType) (CoordinationSystem.Step.CommitCompleteStep_q d@@284)) (= d@@284 |#CoordinationSystem.Step.CommitCompleteStep|))
 :qid |unknown.0:0|
 :skolemid |3706|
 :pattern ( (CoordinationSystem.Step.CommitCompleteStep_q d@@284))
)))
(assert ($Is |#CoordinationSystem.Step.CommitCompleteStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@229 T@U) ) (!  (=> (and (= (type $h@@229) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@229)) ($IsAlloc |#CoordinationSystem.Step.CommitCompleteStep| Tclass.CoordinationSystem.Step $h@@229))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3707|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.CommitCompleteStep| Tclass.CoordinationSystem.Step $h@@229))
)))
(assert (= |#CoordinationSystem.Step.CommitCompleteStep| (Lit |#CoordinationSystem.Step.CommitCompleteStep|)))
(assert (= (type |#CoordinationSystem.Step.CrashStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CoordinationSystem.Step.CrashStep|) |##CoordinationSystem.Step.CrashStep|))
(assert (forall ((d@@285 T@U) ) (!  (=> (= (type d@@285) DatatypeTypeType) (= (CoordinationSystem.Step.CrashStep_q d@@285) (= (DatatypeCtorId d@@285) |##CoordinationSystem.Step.CrashStep|)))
 :qid |unknown.0:0|
 :skolemid |3708|
 :pattern ( (CoordinationSystem.Step.CrashStep_q d@@285))
)))
(assert (forall ((d@@286 T@U) ) (!  (=> (and (= (type d@@286) DatatypeTypeType) (CoordinationSystem.Step.CrashStep_q d@@286)) (= d@@286 |#CoordinationSystem.Step.CrashStep|))
 :qid |unknown.0:0|
 :skolemid |3709|
 :pattern ( (CoordinationSystem.Step.CrashStep_q d@@286))
)))
(assert ($Is |#CoordinationSystem.Step.CrashStep| Tclass.CoordinationSystem.Step))
(assert (forall (($h@@230 T@U) ) (!  (=> (and (= (type $h@@230) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@230)) ($IsAlloc |#CoordinationSystem.Step.CrashStep| Tclass.CoordinationSystem.Step $h@@230))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3710|
 :pattern ( ($IsAlloc |#CoordinationSystem.Step.CrashStep| Tclass.CoordinationSystem.Step $h@@230))
)))
(assert (= |#CoordinationSystem.Step.CrashStep| (Lit |#CoordinationSystem.Step.CrashStep|)))
(assert (forall ((d@@287 T@U) ) (!  (=> (and (= (type d@@287) DatatypeTypeType) (|$IsA#CoordinationSystem.Step| d@@287)) (or (or (or (or (or (or (or (or (or (or (or (or (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q d@@287) (CoordinationSystem.Step.RecoverStep_q d@@287)) (CoordinationSystem.Step.AcceptRequestStep_q d@@287)) (CoordinationSystem.Step.QueryStep_q d@@287)) (CoordinationSystem.Step.PutStep_q d@@287)) (CoordinationSystem.Step.DeliverReplyStep_q d@@287)) (CoordinationSystem.Step.JournalInternalStep_q d@@287)) (CoordinationSystem.Step.MapInternalStep_q d@@287)) (CoordinationSystem.Step.ReqSyncStep_q d@@287)) (CoordinationSystem.Step.ReplySyncStep_q d@@287)) (CoordinationSystem.Step.CommitStartStep_q d@@287)) (CoordinationSystem.Step.CommitCompleteStep_q d@@287)) (CoordinationSystem.Step.CrashStep_q d@@287)))
 :qid |unknown.0:0|
 :skolemid |3711|
 :pattern ( (|$IsA#CoordinationSystem.Step| d@@287))
)))
(assert (forall ((d@@288 T@U) ) (!  (=> (and (= (type d@@288) DatatypeTypeType) ($Is d@@288 Tclass.CoordinationSystem.Step)) (or (or (or (or (or (or (or (or (or (or (or (or (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q d@@288) (CoordinationSystem.Step.RecoverStep_q d@@288)) (CoordinationSystem.Step.AcceptRequestStep_q d@@288)) (CoordinationSystem.Step.QueryStep_q d@@288)) (CoordinationSystem.Step.PutStep_q d@@288)) (CoordinationSystem.Step.DeliverReplyStep_q d@@288)) (CoordinationSystem.Step.JournalInternalStep_q d@@288)) (CoordinationSystem.Step.MapInternalStep_q d@@288)) (CoordinationSystem.Step.ReqSyncStep_q d@@288)) (CoordinationSystem.Step.ReplySyncStep_q d@@288)) (CoordinationSystem.Step.CommitStartStep_q d@@288)) (CoordinationSystem.Step.CommitCompleteStep_q d@@288)) (CoordinationSystem.Step.CrashStep_q d@@288)))
 :qid |unknown.0:0|
 :skolemid |3712|
 :pattern ( (CoordinationSystem.Step.CrashStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.CommitCompleteStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.CommitStartStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.ReplySyncStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.ReqSyncStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.MapInternalStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.JournalInternalStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.DeliverReplyStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.PutStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.QueryStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.AcceptRequestStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.RecoverStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
 :pattern ( (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q d@@288) ($Is d@@288 Tclass.CoordinationSystem.Step))
)))
(assert (forall ((a@@207 T@U) (b@@157 T@U) ) (!  (=> (and (and (= (type a@@207) DatatypeTypeType) (= (type b@@157) DatatypeTypeType)) (and (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q a@@207) (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q b@@157))) (= (|CoordinationSystem.Step#Equal| a@@207 b@@157) true))
 :qid |unknown.0:0|
 :skolemid |3713|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@207 b@@157) (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q a@@207))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@207 b@@157) (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q b@@157))
)))
(assert (forall ((a@@208 T@U) (b@@158 T@U) ) (!  (=> (and (and (= (type a@@208) DatatypeTypeType) (= (type b@@158) DatatypeTypeType)) (and (CoordinationSystem.Step.RecoverStep_q a@@208) (CoordinationSystem.Step.RecoverStep_q b@@158))) (= (|CoordinationSystem.Step#Equal| a@@208 b@@158) (|MsgHistoryMod.MsgHistory#Equal| (CoordinationSystem.Step.records a@@208) (CoordinationSystem.Step.records b@@158))))
 :qid |unknown.0:0|
 :skolemid |3714|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@208 b@@158) (CoordinationSystem.Step.RecoverStep_q a@@208))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@208 b@@158) (CoordinationSystem.Step.RecoverStep_q b@@158))
)))
(assert (forall ((a@@209 T@U) (b@@159 T@U) ) (!  (=> (and (and (= (type a@@209) DatatypeTypeType) (= (type b@@159) DatatypeTypeType)) (and (CoordinationSystem.Step.AcceptRequestStep_q a@@209) (CoordinationSystem.Step.AcceptRequestStep_q b@@159))) (= (|CoordinationSystem.Step#Equal| a@@209 b@@159) true))
 :qid |unknown.0:0|
 :skolemid |3715|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@209 b@@159) (CoordinationSystem.Step.AcceptRequestStep_q a@@209))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@209 b@@159) (CoordinationSystem.Step.AcceptRequestStep_q b@@159))
)))
(assert (forall ((a@@210 T@U) (b@@160 T@U) ) (!  (=> (and (and (= (type a@@210) DatatypeTypeType) (= (type b@@160) DatatypeTypeType)) (and (CoordinationSystem.Step.QueryStep_q a@@210) (CoordinationSystem.Step.QueryStep_q b@@160))) (= (|CoordinationSystem.Step#Equal| a@@210 b@@160) true))
 :qid |unknown.0:0|
 :skolemid |3716|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@210 b@@160) (CoordinationSystem.Step.QueryStep_q a@@210))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@210 b@@160) (CoordinationSystem.Step.QueryStep_q b@@160))
)))
(assert (forall ((a@@211 T@U) (b@@161 T@U) ) (!  (=> (and (and (= (type a@@211) DatatypeTypeType) (= (type b@@161) DatatypeTypeType)) (and (CoordinationSystem.Step.PutStep_q a@@211) (CoordinationSystem.Step.PutStep_q b@@161))) (= (|CoordinationSystem.Step#Equal| a@@211 b@@161) true))
 :qid |unknown.0:0|
 :skolemid |3717|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@211 b@@161) (CoordinationSystem.Step.PutStep_q a@@211))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@211 b@@161) (CoordinationSystem.Step.PutStep_q b@@161))
)))
(assert (forall ((a@@212 T@U) (b@@162 T@U) ) (!  (=> (and (and (= (type a@@212) DatatypeTypeType) (= (type b@@162) DatatypeTypeType)) (and (CoordinationSystem.Step.DeliverReplyStep_q a@@212) (CoordinationSystem.Step.DeliverReplyStep_q b@@162))) (= (|CoordinationSystem.Step#Equal| a@@212 b@@162) true))
 :qid |unknown.0:0|
 :skolemid |3718|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@212 b@@162) (CoordinationSystem.Step.DeliverReplyStep_q a@@212))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@212 b@@162) (CoordinationSystem.Step.DeliverReplyStep_q b@@162))
)))
(assert (forall ((a@@213 T@U) (b@@163 T@U) ) (!  (=> (and (and (= (type a@@213) DatatypeTypeType) (= (type b@@163) DatatypeTypeType)) (and (CoordinationSystem.Step.JournalInternalStep_q a@@213) (CoordinationSystem.Step.JournalInternalStep_q b@@163))) (= (|CoordinationSystem.Step#Equal| a@@213 b@@163) true))
 :qid |unknown.0:0|
 :skolemid |3719|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@213 b@@163) (CoordinationSystem.Step.JournalInternalStep_q a@@213))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@213 b@@163) (CoordinationSystem.Step.JournalInternalStep_q b@@163))
)))
(assert (forall ((a@@214 T@U) (b@@164 T@U) ) (!  (=> (and (and (= (type a@@214) DatatypeTypeType) (= (type b@@164) DatatypeTypeType)) (and (CoordinationSystem.Step.MapInternalStep_q a@@214) (CoordinationSystem.Step.MapInternalStep_q b@@164))) (= (|CoordinationSystem.Step#Equal| a@@214 b@@164) true))
 :qid |unknown.0:0|
 :skolemid |3720|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@214 b@@164) (CoordinationSystem.Step.MapInternalStep_q a@@214))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@214 b@@164) (CoordinationSystem.Step.MapInternalStep_q b@@164))
)))
(assert (forall ((a@@215 T@U) (b@@165 T@U) ) (!  (=> (and (and (= (type a@@215) DatatypeTypeType) (= (type b@@165) DatatypeTypeType)) (and (CoordinationSystem.Step.ReqSyncStep_q a@@215) (CoordinationSystem.Step.ReqSyncStep_q b@@165))) (= (|CoordinationSystem.Step#Equal| a@@215 b@@165) true))
 :qid |unknown.0:0|
 :skolemid |3721|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@215 b@@165) (CoordinationSystem.Step.ReqSyncStep_q a@@215))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@215 b@@165) (CoordinationSystem.Step.ReqSyncStep_q b@@165))
)))
(assert (forall ((a@@216 T@U) (b@@166 T@U) ) (!  (=> (and (and (= (type a@@216) DatatypeTypeType) (= (type b@@166) DatatypeTypeType)) (and (CoordinationSystem.Step.ReplySyncStep_q a@@216) (CoordinationSystem.Step.ReplySyncStep_q b@@166))) (= (|CoordinationSystem.Step#Equal| a@@216 b@@166) true))
 :qid |unknown.0:0|
 :skolemid |3722|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@216 b@@166) (CoordinationSystem.Step.ReplySyncStep_q a@@216))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@216 b@@166) (CoordinationSystem.Step.ReplySyncStep_q b@@166))
)))
(assert (forall ((a@@217 T@U) (b@@167 T@U) ) (!  (=> (and (and (= (type a@@217) DatatypeTypeType) (= (type b@@167) DatatypeTypeType)) (and (CoordinationSystem.Step.CommitStartStep_q a@@217) (CoordinationSystem.Step.CommitStartStep_q b@@167))) (= (|CoordinationSystem.Step#Equal| a@@217 b@@167) (= (CoordinationSystem.Step.newBoundaryLsn a@@217) (CoordinationSystem.Step.newBoundaryLsn b@@167))))
 :qid |unknown.0:0|
 :skolemid |3723|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@217 b@@167) (CoordinationSystem.Step.CommitStartStep_q a@@217))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@217 b@@167) (CoordinationSystem.Step.CommitStartStep_q b@@167))
)))
(assert (forall ((a@@218 T@U) (b@@168 T@U) ) (!  (=> (and (and (= (type a@@218) DatatypeTypeType) (= (type b@@168) DatatypeTypeType)) (and (CoordinationSystem.Step.CommitCompleteStep_q a@@218) (CoordinationSystem.Step.CommitCompleteStep_q b@@168))) (= (|CoordinationSystem.Step#Equal| a@@218 b@@168) true))
 :qid |unknown.0:0|
 :skolemid |3724|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@218 b@@168) (CoordinationSystem.Step.CommitCompleteStep_q a@@218))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@218 b@@168) (CoordinationSystem.Step.CommitCompleteStep_q b@@168))
)))
(assert (forall ((a@@219 T@U) (b@@169 T@U) ) (!  (=> (and (and (= (type a@@219) DatatypeTypeType) (= (type b@@169) DatatypeTypeType)) (and (CoordinationSystem.Step.CrashStep_q a@@219) (CoordinationSystem.Step.CrashStep_q b@@169))) (= (|CoordinationSystem.Step#Equal| a@@219 b@@169) true))
 :qid |unknown.0:0|
 :skolemid |3725|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@219 b@@169) (CoordinationSystem.Step.CrashStep_q a@@219))
 :pattern ( (|CoordinationSystem.Step#Equal| a@@219 b@@169) (CoordinationSystem.Step.CrashStep_q b@@169))
)))
(assert (forall ((a@@220 T@U) (b@@170 T@U) ) (!  (=> (and (= (type a@@220) DatatypeTypeType) (= (type b@@170) DatatypeTypeType)) (= (|CoordinationSystem.Step#Equal| a@@220 b@@170) (= a@@220 b@@170)))
 :qid |unknown.0:0|
 :skolemid |3726|
 :pattern ( (|CoordinationSystem.Step#Equal| a@@220 b@@170))
)))
(assert (= (type Tclass.CoordinationSystem.__default) TyType))
(assert (= (Tag Tclass.CoordinationSystem.__default) Tagclass.CoordinationSystem.__default))
(assert (= (TagFamily Tclass.CoordinationSystem.__default) tytagFamily$_default))
(assert (forall ((bx@@178 T@U) ) (!  (=> (and (= (type bx@@178) BoxType) ($IsBox bx@@178 Tclass.CoordinationSystem.__default)) (and (= ($Box ($Unbox refType bx@@178)) bx@@178) ($Is ($Unbox refType bx@@178) Tclass.CoordinationSystem.__default)))
 :qid |unknown.0:0|
 :skolemid |3727|
 :pattern ( ($IsBox bx@@178 Tclass.CoordinationSystem.__default))
)))
(assert (forall (($o@@61 T@U) ) (!  (=> (= (type $o@@61) refType) (= ($Is $o@@61 Tclass.CoordinationSystem.__default)  (or (= $o@@61 null) (= (dtype $o@@61) Tclass.CoordinationSystem.__default))))
 :qid |unknown.0:0|
 :skolemid |3728|
 :pattern ( ($Is $o@@61 Tclass.CoordinationSystem.__default))
)))
(assert (forall (($o@@62 T@U) ($h@@231 T@U) ) (!  (=> (and (= (type $o@@62) refType) (= (type $h@@231) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@62 Tclass.CoordinationSystem.__default $h@@231)  (or (= $o@@62 null) (U_2_bool (MapType1Select (MapType0Select $h@@231 $o@@62) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3729|
 :pattern ( ($IsAlloc $o@@62 Tclass.CoordinationSystem.__default $h@@231))
)))
(assert  (=> true (forall ((|v#0@@266| T@U) (|v'#0@@167| T@U) (|uiop#0@@7| T@U) ) (!  (=> (and (and (and (= (type |v#0@@266|) DatatypeTypeType) (= (type |v'#0@@167|) DatatypeTypeType)) (= (type |uiop#0@@7|) DatatypeTypeType)) (or (|CoordinationSystem.__default.LoadEphemeralFromPersistent#canCall| |v#0@@266| |v'#0@@167| |uiop#0@@7|) (and (and ($Is |v#0@@266| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@167| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@7| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.61:41|
 :skolemid |3730|
 :pattern ( (CoordinationSystem.__default.LoadEphemeralFromPersistent |v#0@@266| |v'#0@@167| |uiop#0@@7|))
))))
(assert (forall ((|v#0@@267| T@U) (|v'#0@@168| T@U) (|uiop#0@@8| T@U) ) (!  (=> (and (and (and (= (type |v#0@@267|) DatatypeTypeType) (= (type |v'#0@@168|) DatatypeTypeType)) (= (type |uiop#0@@8|) DatatypeTypeType)) (and (and ($Is |v#0@@267| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@168| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@8| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.LoadEphemeralFromPersistent#requires| |v#0@@267| |v'#0@@168| |uiop#0@@8|) true))
 :qid |CoordinationSystemidfy.61:41|
 :skolemid |3731|
 :pattern ( (|CoordinationSystem.__default.LoadEphemeralFromPersistent#requires| |v#0@@267| |v'#0@@168| |uiop#0@@8|))
)))
(assert  (=> true (forall ((|v#0@@268| T@U) (|v'#0@@169| T@U) (|uiop#0@@9| T@U) ) (!  (=> (and (and (and (= (type |v#0@@268|) DatatypeTypeType) (= (type |v'#0@@169|) DatatypeTypeType)) (= (type |uiop#0@@9|) DatatypeTypeType)) (or (|CoordinationSystem.__default.LoadEphemeralFromPersistent#canCall| |v#0@@268| |v'#0@@169| |uiop#0@@9|) (and (and ($Is |v#0@@268| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@169| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@9| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@268|) (=> (CoordinationSystem.Variables.WF |v#0@@268|) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@9|) (and (CoordinationSystem.Variables.Variables_q |v'#0@@169|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@169|)) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@268|) (CoordinationSystem.Variables.Variables_q |v'#0@@169|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@268|) (CoordinationSystem.Variables.journal |v'#0@@169|) (Lit |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@268|) (CoordinationSystem.Variables.journal |v'#0@@169|) (Lit |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|)) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@268|) (CoordinationSystem.Variables.Variables_q |v'#0@@169|)) (CoordinationSystem.Variables.Variables_q |v'#0@@169|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@268|) (CoordinationSystem.Variables.mapadt |v'#0@@169|) (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v'#0@@169|))))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@268|) (CoordinationSystem.Variables.mapadt |v'#0@@169|) (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v'#0@@169|)))) (and (and (and (|$IsA#AsyncMod_6#MapSpecMod#.EphemeralState| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v'#0@@169|))) (|$IsA#AsyncMod_6#MapSpecMod#.EphemeralState| (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@169|) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall|)) (=> (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v'#0@@169|)) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|) (CoordinationSystem.Variables.Variables_q |v'#0@@169|)))))))))))) (= (CoordinationSystem.__default.LoadEphemeralFromPersistent |v#0@@268| |v'#0@@169| |uiop#0@@9|)  (and (and (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@268|) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@9|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@169|))) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@268|) (CoordinationSystem.Variables.journal |v'#0@@169|) (Lit |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|))) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@268|) (CoordinationSystem.Variables.mapadt |v'#0@@169|) (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v'#0@@169|))))) (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v'#0@@169|)) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|)) (|Map#Equal| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v'#0@@169|)) (|Map#Empty| BoxType BoxType))))))
 :qid |CoordinationSystemidfy.61:41|
 :skolemid |3732|
 :pattern ( (CoordinationSystem.__default.LoadEphemeralFromPersistent |v#0@@268| |v'#0@@169| |uiop#0@@9|))
))))
(assert  (=> true (forall ((|v#0@@269| T@U) (|v'#0@@170| T@U) (|uiop#0@@10| T@U) ) (!  (=> (and (and (and (= (type |v#0@@269|) DatatypeTypeType) (= (type |v'#0@@170|) DatatypeTypeType)) (= (type |uiop#0@@10|) DatatypeTypeType)) (or (|CoordinationSystem.__default.LoadEphemeralFromPersistent#canCall| (Lit |v#0@@269|) (Lit |v'#0@@170|) (Lit |uiop#0@@10|)) (and (and ($Is |v#0@@269| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@170| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@10| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@269|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@269|))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@10|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@170|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|))))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@269|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@170|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@269|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@170|))) (Lit |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@269|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@170|))) (Lit |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@269|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@170|))) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@170|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@269|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@170|))) (Lit (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|))))))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@269|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@170|))) (Lit (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|))))))))))) (and (and (and (|$IsA#AsyncMod_6#MapSpecMod#.EphemeralState| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|)))))) (|$IsA#AsyncMod_6#MapSpecMod#.EphemeralState| (Lit |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@170|)) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#canCall|)) (=> (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|)))) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@170|))))))))))))) (= (CoordinationSystem.__default.LoadEphemeralFromPersistent (Lit |v#0@@269|) (Lit |v'#0@@170|) (Lit |uiop#0@@10|))  (and (and (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@269|)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@10|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|))))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@269|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@170|))) (Lit |#CrashTolerantJournal.TransitionLabel.LoadEphemeralFromPersistentLabel|))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@269|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@170|))) (Lit (|#CrashTolerantMap.TransitionLabel.LoadEphemeralFromPersistentLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|))))))))) (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|)))) |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState|)) (|Map#Equal| (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@170|)))) (|Map#Empty| BoxType BoxType))))))
 :qid |CoordinationSystemidfy.61:41|
 :weight 3
 :skolemid |3733|
 :pattern ( (CoordinationSystem.__default.LoadEphemeralFromPersistent (Lit |v#0@@269|) (Lit |v'#0@@170|) (Lit |uiop#0@@10|)))
))))
(assert  (=> true (forall ((|v#0@@270| T@U) (|v'#0@@171| T@U) (|uiop#0@@11| T@U) (|records#0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@270|) DatatypeTypeType) (= (type |v'#0@@171|) DatatypeTypeType)) (= (type |uiop#0@@11|) DatatypeTypeType)) (= (type |records#0|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Recover#canCall| |v#0@@270| |v'#0@@171| |uiop#0@@11| |records#0|) (and (and (and ($Is |v#0@@270| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@171| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@11| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |records#0| Tclass.MsgHistoryMod.MsgHistory)))) true)
 :qid |CoordinationSystemidfy.74:21|
 :skolemid |3734|
 :pattern ( (CoordinationSystem.__default.Recover |v#0@@270| |v'#0@@171| |uiop#0@@11| |records#0|))
))))
(assert (forall ((|v#0@@271| T@U) (|v'#0@@172| T@U) (|uiop#0@@12| T@U) (|records#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@271|) DatatypeTypeType) (= (type |v'#0@@172|) DatatypeTypeType)) (= (type |uiop#0@@12|) DatatypeTypeType)) (= (type |records#0@@0|) DatatypeTypeType)) (and (and (and ($Is |v#0@@271| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@172| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@12| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |records#0@@0| Tclass.MsgHistoryMod.MsgHistory))) (= (|CoordinationSystem.__default.Recover#requires| |v#0@@271| |v'#0@@172| |uiop#0@@12| |records#0@@0|) true))
 :qid |CoordinationSystemidfy.74:21|
 :skolemid |3735|
 :pattern ( (|CoordinationSystem.__default.Recover#requires| |v#0@@271| |v'#0@@172| |uiop#0@@12| |records#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@272| T@U) (|v'#0@@173| T@U) (|uiop#0@@13| T@U) (|records#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@272|) DatatypeTypeType) (= (type |v'#0@@173|) DatatypeTypeType)) (= (type |uiop#0@@13|) DatatypeTypeType)) (= (type |records#0@@1|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Recover#canCall| |v#0@@272| |v'#0@@173| |uiop#0@@13| |records#0@@1|) (and (and (and ($Is |v#0@@272| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@173| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@13| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |records#0@@1| Tclass.MsgHistoryMod.MsgHistory)))) (and (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@13|) (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@272|) (=> (CoordinationSystem.Variables.WF |v#0@@272|) (and (CoordinationSystem.Variables.Variables_q |v#0@@272|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@272|)) (and (|CoordinationSystem.Variables.WF#canCall| |v'#0@@173|) (=> (CoordinationSystem.Variables.WF |v'#0@@173|) (and (CoordinationSystem.Variables.Variables_q |v'#0@@173|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@173|)) (and (|MsgHistoryMod.MsgHistory.WF#canCall| |records#0@@1|) (=> (MsgHistoryMod.MsgHistory.WF |records#0@@1|) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@272|) (CoordinationSystem.Variables.Variables_q |v'#0@@173|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@272|) (CoordinationSystem.Variables.journal |v'#0@@173|) (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |records#0@@1|))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@272|) (CoordinationSystem.Variables.journal |v'#0@@173|) (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |records#0@@1|)) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@272|) (CoordinationSystem.Variables.Variables_q |v'#0@@173|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@272|) (CoordinationSystem.Variables.mapadt |v'#0@@173|) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |records#0@@1|))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@272|) (CoordinationSystem.Variables.mapadt |v'#0@@173|) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |records#0@@1|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v'#0@@173|)) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#0@@23| (CoordinationSystem.Variables.ephemeral |v#0@@272|)))
(let ((|dt_update#mapLsn#0#0| (MsgHistoryMod.MsgHistory.seqEnd |records#0@@1|)))
(|#CoordinationSystem.Ephemeral.Known| (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#0@@23|) (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#0@@23|) |dt_update#mapLsn#0#0|))))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@173|) (and (CoordinationSystem.Variables.Variables_q |v#0@@272|) (MsgHistoryMod.MsgHistory.MsgHistory_q |records#0@@1|))))))))))))))))))) (= (CoordinationSystem.__default.Recover |v#0@@272| |v'#0@@173| |uiop#0@@13| |records#0@@1|)  (and (and (and (and (and (and (and (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@13|) (CoordinationSystem.Variables.WF |v#0@@272|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@272|))) (CoordinationSystem.Variables.WF |v'#0@@173|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@173|))) (MsgHistoryMod.MsgHistory.WF |records#0@@1|)) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@272|) (CoordinationSystem.Variables.journal |v'#0@@173|) (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| |records#0@@1|))) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@272|) (CoordinationSystem.Variables.mapadt |v'#0@@173|) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |records#0@@1|))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral |v'#0@@173|) (let ((|dt_update_tmp#0#0@@24| (CoordinationSystem.Variables.ephemeral |v#0@@272|)))
(let ((|dt_update#mapLsn#0#0@@0| (MsgHistoryMod.MsgHistory.seqEnd |records#0@@1|)))
(|#CoordinationSystem.Ephemeral.Known| (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#0@@24|) (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#0@@24|) |dt_update#mapLsn#0#0@@0|))))))))
 :qid |CoordinationSystemidfy.74:21|
 :skolemid |3736|
 :pattern ( (CoordinationSystem.__default.Recover |v#0@@272| |v'#0@@173| |uiop#0@@13| |records#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@273| T@U) (|v'#0@@174| T@U) (|uiop#0@@14| T@U) (|records#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@273|) DatatypeTypeType) (= (type |v'#0@@174|) DatatypeTypeType)) (= (type |uiop#0@@14|) DatatypeTypeType)) (= (type |records#0@@2|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Recover#canCall| (Lit |v#0@@273|) (Lit |v'#0@@174|) (Lit |uiop#0@@14|) (Lit |records#0@@2|)) (and (and (and ($Is |v#0@@273| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@174| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@14| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |records#0@@2| Tclass.MsgHistoryMod.MsgHistory)))) (and (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@14|))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@273|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@273|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@273|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@273|))))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v'#0@@174|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v'#0@@174|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@174|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@174|))))))) (and (|MsgHistoryMod.MsgHistory.WF#canCall| (Lit |records#0@@2|)) (=> (U_2_bool (Lit (bool_2_U (MsgHistoryMod.MsgHistory.WF (Lit |records#0@@2|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@273|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@174|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@273|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@174|))) (Lit (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| (Lit |records#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@273|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@174|))) (Lit (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| (Lit |records#0@@2|))))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@273|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@174|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@273|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@174|))) (Lit (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| (Lit |records#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@273|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@174|))) (Lit (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| (Lit |records#0@@2|))))))) (and (and (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@174|)))) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#1@@23| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@273|)))))
(let ((|dt_update#mapLsn#0#1| (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |records#0@@2|)))))
(Lit (|#CoordinationSystem.Ephemeral.Known| (Lit (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#1@@23|)) (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#1@@23|)) |dt_update#mapLsn#0#1|)))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@174|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@273|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (Lit |records#0@@2|)))))))))))))))))))) (= (CoordinationSystem.__default.Recover (Lit |v#0@@273|) (Lit |v'#0@@174|) (Lit |uiop#0@@14|) (Lit |records#0@@2|))  (and (and (and (and (and (and (and (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@14|)) (CoordinationSystem.Variables.WF (Lit |v#0@@273|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@273|))))) (CoordinationSystem.Variables.WF (Lit |v'#0@@174|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@174|))))) (MsgHistoryMod.MsgHistory.WF (Lit |records#0@@2|))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@273|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@174|))) (Lit (|#CrashTolerantJournal.TransitionLabel.ReadForRecoveryLabel| (Lit |records#0@@2|))))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@273|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@174|))) (Lit (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| (Lit |records#0@@2|))))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@174|)) (let ((|dt_update_tmp#0#1@@24| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@273|)))))
(let ((|dt_update#mapLsn#0#1@@0| (LitInt (MsgHistoryMod.MsgHistory.seqEnd (Lit |records#0@@2|)))))
(Lit (|#CoordinationSystem.Ephemeral.Known| (Lit (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#1@@24|)) (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#1@@24|)) |dt_update#mapLsn#0#1@@0|)))))))))
 :qid |CoordinationSystemidfy.74:21|
 :weight 3
 :skolemid |3737|
 :pattern ( (CoordinationSystem.__default.Recover (Lit |v#0@@273|) (Lit |v'#0@@174|) (Lit |uiop#0@@14|) (Lit |records#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@274| T@U) (|v'#0@@175| T@U) (|uiop#0@@15| T@U) ) (!  (=> (and (and (and (= (type |v#0@@274|) DatatypeTypeType) (= (type |v'#0@@175|) DatatypeTypeType)) (= (type |uiop#0@@15|) DatatypeTypeType)) (or (|CoordinationSystem.__default.AcceptRequest#canCall| |v#0@@274| |v'#0@@175| |uiop#0@@15|) (and (and ($Is |v#0@@274| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@175| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@15| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.92:27|
 :skolemid |3738|
 :pattern ( (CoordinationSystem.__default.AcceptRequest |v#0@@274| |v'#0@@175| |uiop#0@@15|))
))))
(assert (forall ((|v#0@@275| T@U) (|v'#0@@176| T@U) (|uiop#0@@16| T@U) ) (!  (=> (and (and (and (= (type |v#0@@275|) DatatypeTypeType) (= (type |v'#0@@176|) DatatypeTypeType)) (= (type |uiop#0@@16|) DatatypeTypeType)) (and (and ($Is |v#0@@275| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@176| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@16| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.AcceptRequest#requires| |v#0@@275| |v'#0@@176| |uiop#0@@16|) true))
 :qid |CoordinationSystemidfy.92:27|
 :skolemid |3739|
 :pattern ( (|CoordinationSystem.__default.AcceptRequest#requires| |v#0@@275| |v'#0@@176| |uiop#0@@16|))
)))
(assert  (and (and (and (forall ((arg0@@599 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| arg0@@599)) (MapType0Type BoxType boolType))
 :qid |funType:AsyncMod_6#MapSpecMod#.EphemeralState.requests|
 :pattern ( (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| arg0@@599))
)) (forall ((arg0@@600 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.UIOp.req| arg0@@600)) DatatypeTypeType)
 :qid |funType:AsyncMod_6#MapSpecMod#.UIOp.req|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.req| arg0@@600))
))) (forall ((arg0@@601 T@U) (arg1@@284 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| arg0@@601 arg1@@284)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| arg0@@601 arg1@@284))
))) (forall ((arg0@@602 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| arg0@@602)) (MapType0Type BoxType boolType))
 :qid |funType:AsyncMod_6#MapSpecMod#.EphemeralState.replies|
 :pattern ( (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| arg0@@602))
))))
(assert  (=> true (forall ((|v#0@@276| T@U) (|v'#0@@177| T@U) (|uiop#0@@17| T@U) ) (!  (=> (and (and (and (= (type |v#0@@276|) DatatypeTypeType) (= (type |v'#0@@177|) DatatypeTypeType)) (= (type |uiop#0@@17|) DatatypeTypeType)) (or (|CoordinationSystem.__default.AcceptRequest#canCall| |v#0@@276| |v'#0@@177| |uiop#0@@17|) (and (and ($Is |v#0@@276| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@177| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@17| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@276|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@276|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@17|) (=> (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@17|)) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@276|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|)))) (=> (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@17|)))))) (and (and (|$IsA#CoordinationSystem.Variables| |v'#0@@177|) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#0@@25| |v#0@@276|))
(let ((|dt_update#ephemeral#0#0@@7| (let ((|dt_update_tmp#1#0| (CoordinationSystem.Variables.ephemeral |v#0@@276|)))
(let ((|dt_update#progress#0#0| (let ((|dt_update_tmp#2#0| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|))))
(let ((|dt_update#requests#0#0| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@17|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#2#0|))))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#0|) (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#0|))))))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@25|) (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@25|) |dt_update#ephemeral#0#0@@7|))))) (let ((|dt_update_tmp#0#0@@26| |v#0@@276|))
 (and (and (CoordinationSystem.Variables.Variables_q |v#0@@276|) (and (CoordinationSystem.Variables.Variables_q |v#0@@276|) (let ((|dt_update_tmp#2#0@@0| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|))))
 (and (and (CoordinationSystem.Variables.Variables_q |v#0@@276|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|)))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#2#0@@0|))))) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@26|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@26|))))))))))) (= (CoordinationSystem.__default.AcceptRequest |v#0@@276| |v'#0@@177| |uiop#0@@17|)  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@276|)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@17|)) (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@17|))) (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@17|))))))) (|CoordinationSystem.Variables#Equal| |v'#0@@177| (let ((|dt_update_tmp#0#0@@27| |v#0@@276|))
(let ((|dt_update#ephemeral#0#0@@8| (let ((|dt_update_tmp#1#0@@0| (CoordinationSystem.Variables.ephemeral |v#0@@276|)))
(let ((|dt_update#progress#0#0@@0| (let ((|dt_update_tmp#2#0@@1| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|))))
(let ((|dt_update#requests#0#0@@0| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@276|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@17|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0@@0| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#2#0@@1|))))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0@@0| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#0@@0|) (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#0@@0|))))))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@27|) (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@27|) |dt_update#ephemeral#0#0@@8|))))))))
 :qid |CoordinationSystemidfy.92:27|
 :skolemid |3740|
 :pattern ( (CoordinationSystem.__default.AcceptRequest |v#0@@276| |v'#0@@177| |uiop#0@@17|))
))))
(assert  (=> true (forall ((|v#0@@277| T@U) (|v'#0@@178| T@U) (|uiop#0@@18| T@U) ) (!  (=> (and (and (and (= (type |v#0@@277|) DatatypeTypeType) (= (type |v'#0@@178|) DatatypeTypeType)) (= (type |uiop#0@@18|) DatatypeTypeType)) (or (|CoordinationSystem.__default.AcceptRequest#canCall| (Lit |v#0@@277|) (Lit |v'#0@@178|) (Lit |uiop#0@@18|)) (and (and ($Is |v#0@@277| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@178| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@18| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@277|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@18|))))) (=> (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@18|))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@277|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|))))))) (=> (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@18|))))))))) (and (and (|$IsA#CoordinationSystem.Variables| (Lit |v'#0@@178|)) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#1@@25| (Lit |v#0@@277|)))
(let ((|dt_update#ephemeral#0#1@@7| (let ((|dt_update_tmp#1#1| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))))
(let ((|dt_update#progress#0#1| (let ((|dt_update_tmp#2#1| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))))))
(let ((|dt_update#requests#0#1| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@18|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#2#1|)))))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#1|)) (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#1|)))))))
(|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@25|)) (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@25|)) |dt_update#ephemeral#0#1@@7|))))) (let ((|dt_update_tmp#0#1@@26| (Lit |v#0@@277|)))
 (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@277|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@277|)) (let ((|dt_update_tmp#2#1@@0| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))))))
 (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@277|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|))))))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#2#1@@0|))))) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@26|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@26|))))))))))) (= (CoordinationSystem.__default.AcceptRequest (Lit |v#0@@277|) (Lit |v'#0@@178|) (Lit |uiop#0@@18|))  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@18|))) (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@18|))))) (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@18|)))))))))) (|CoordinationSystem.Variables#Equal| |v'#0@@178| (let ((|dt_update_tmp#0#1@@27| (Lit |v#0@@277|)))
(let ((|dt_update#ephemeral#0#1@@8| (let ((|dt_update_tmp#1#1@@0| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))))
(let ((|dt_update#progress#0#1@@0| (let ((|dt_update_tmp#2#1@@1| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))))))
(let ((|dt_update#requests#0#1@@0| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@277|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@18|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1@@0| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#2#1@@1|)))))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1@@0| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#1@@0|)) (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#1@@0|)))))))
(|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@27|)) (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@27|)) |dt_update#ephemeral#0#1@@8|))))))))
 :qid |CoordinationSystemidfy.92:27|
 :weight 3
 :skolemid |3741|
 :pattern ( (CoordinationSystem.__default.AcceptRequest (Lit |v#0@@277|) (Lit |v'#0@@178|) (Lit |uiop#0@@18|)))
))))
(assert  (=> true (forall ((|v#0@@278| T@U) (|v'#0@@179| T@U) (|uiop#0@@19| T@U) ) (!  (=> (and (and (and (= (type |v#0@@278|) DatatypeTypeType) (= (type |v'#0@@179|) DatatypeTypeType)) (= (type |uiop#0@@19|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Query#canCall| |v#0@@278| |v'#0@@179| |uiop#0@@19|) (and (and ($Is |v#0@@278| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@179| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@19| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.102:19|
 :skolemid |3742|
 :pattern ( (CoordinationSystem.__default.Query |v#0@@278| |v'#0@@179| |uiop#0@@19|))
))))
(assert (forall ((|v#0@@279| T@U) (|v'#0@@180| T@U) (|uiop#0@@20| T@U) ) (!  (=> (and (and (and (= (type |v#0@@279|) DatatypeTypeType) (= (type |v'#0@@180|) DatatypeTypeType)) (= (type |uiop#0@@20|) DatatypeTypeType)) (and (and ($Is |v#0@@279| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@180| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@20| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.Query#requires| |v#0@@279| |v'#0@@180| |uiop#0@@20|) true))
 :qid |CoordinationSystemidfy.102:19|
 :skolemid |3743|
 :pattern ( (|CoordinationSystem.__default.Query#requires| |v#0@@279| |v'#0@@180| |uiop#0@@20|))
)))
(assert  (and (and (and (and (forall ((arg0@@603 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.Request.input| arg0@@603)) DatatypeTypeType)
 :qid |funType:AsyncMod_6#MapSpecMod#.Request.input|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Request.input| arg0@@603))
)) (forall ((arg0@@604 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.UIOp.reply| arg0@@604)) DatatypeTypeType)
 :qid |funType:AsyncMod_6#MapSpecMod#.UIOp.reply|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.reply| arg0@@604))
))) (forall ((arg0@@605 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.Reply.output| arg0@@605)) DatatypeTypeType)
 :qid |funType:AsyncMod_6#MapSpecMod#.Reply.output|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Reply.output| arg0@@605))
))) (forall ((arg0@@606 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.Reply.id| arg0@@606)) BoxType)
 :qid |funType:AsyncMod_6#MapSpecMod#.Reply.id|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Reply.id| arg0@@606))
))) (forall ((arg0@@607 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.Request.id| arg0@@607)) BoxType)
 :qid |funType:AsyncMod_6#MapSpecMod#.Request.id|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Request.id| arg0@@607))
))))
(assert  (=> true (forall ((|v#0@@280| T@U) (|v'#0@@181| T@U) (|uiop#0@@21| T@U) ) (!  (=> (and (and (and (= (type |v#0@@280|) DatatypeTypeType) (= (type |v'#0@@181|) DatatypeTypeType)) (= (type |uiop#0@@21|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Query#canCall| |v#0@@280| |v'#0@@181| |uiop#0@@21|) (and (and ($Is |v#0@@280| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@181| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@21| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@280|) (=> (CoordinationSystem.Variables.WF |v#0@@280|) (and (|CoordinationSystem.Variables.WF#canCall| |v'#0@@181|) (=> (CoordinationSystem.Variables.WF |v'#0@@181|) (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@280|)) (and (CoordinationSystem.Variables.Variables_q |v'#0@@181|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@181|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@21|) (=> (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (=> (MapSpecMod.Input.GetInput_q (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (=> (MapSpecMod.Output.GetOutput_q (|AsyncMod_6#MapSpecMod#.Reply.output| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|)))) (=> (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))) (and (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (|AsyncMod_6#MapSpecMod#.Request.Request_q| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))) (=> (= (|AsyncMod_6#MapSpecMod#.Reply.id| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (|AsyncMod_6#MapSpecMod#.Request.id| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|)))) (=> (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|)))) (=> (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (let ((|key#0@@25| (MapSpecMod.Input.key (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (let ((|value#0@@15| (MapSpecMod.Output.value (|AsyncMod_6#MapSpecMod#.Reply.output| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (CoordinationSystem.Variables.Variables_q |v'#0@@181|)) (CoordinationSystem.Variables.Variables_q |v#0@@280|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@280|) (CoordinationSystem.Variables.journal |v'#0@@181|) (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@280|))))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@280|) (CoordinationSystem.Variables.journal |v'#0@@181|) (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@280|)))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (CoordinationSystem.Variables.Variables_q |v'#0@@181|)) (CoordinationSystem.Variables.Variables_q |v#0@@280|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@280|) (CoordinationSystem.Variables.mapadt |v'#0@@181|) (|#CrashTolerantMap.TransitionLabel.QueryLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@280|)) |key#0@@25| |value#0@@15|))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@280|) (CoordinationSystem.Variables.mapadt |v'#0@@181|) (|#CrashTolerantMap.TransitionLabel.QueryLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@280|)) |key#0@@25| |value#0@@15|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v'#0@@181|)) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#0@@28| (CoordinationSystem.Variables.ephemeral |v#0@@280|)))
(let ((|dt_update#progress#0#0@@1| (let ((|dt_update#replies#0#0| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))))))
(let ((|dt_update#requests#0#0@@1| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0@@1| |dt_update#replies#0#0|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0@@1| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#0@@28|) (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#0@@28|)))))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@181|) (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|)))) (and (CoordinationSystem.Variables.Variables_q |v#0@@280|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))))))))))))))))))))))))))))))))))))))))) (= (CoordinationSystem.__default.Query |v#0@@280| |v'#0@@181| |uiop#0@@21|)  (and (and (and (and (and (and (and (and (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@280|) (CoordinationSystem.Variables.WF |v'#0@@181|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@280|))) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@181|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@21|)) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (MapSpecMod.Input.GetInput_q (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))) (MapSpecMod.Output.GetOutput_q (|AsyncMod_6#MapSpecMod#.Reply.output| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))) (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))))) (= (|AsyncMod_6#MapSpecMod#.Reply.id| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))) (|AsyncMod_6#MapSpecMod#.Request.id| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))) (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))))) (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))))) (let ((|key#0@@26| (MapSpecMod.Input.key (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))))
 (and true (let ((|value#0@@16| (MapSpecMod.Output.value (|AsyncMod_6#MapSpecMod#.Reply.output| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|))))))
 (and true (and (and (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@280|) (CoordinationSystem.Variables.journal |v'#0@@181|) (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@280|)))) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@280|) (CoordinationSystem.Variables.mapadt |v'#0@@181|) (|#CrashTolerantMap.TransitionLabel.QueryLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@280|)) |key#0@@26| |value#0@@16|))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral |v'#0@@181|) (let ((|dt_update_tmp#0#0@@29| (CoordinationSystem.Variables.ephemeral |v#0@@280|)))
(let ((|dt_update#progress#0#0@@2| (let ((|dt_update#replies#0#0@@0| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))))))
(let ((|dt_update#requests#0#0@@2| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@280|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@21|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0@@2| |dt_update#replies#0#0@@0|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0@@2| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#0@@29|) (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#0@@29|))))))))))))))
 :qid |CoordinationSystemidfy.102:19|
 :skolemid |3744|
 :pattern ( (CoordinationSystem.__default.Query |v#0@@280| |v'#0@@181| |uiop#0@@21|))
))))
(assert  (=> true (forall ((|v#0@@281| T@U) (|v'#0@@182| T@U) (|uiop#0@@22| T@U) ) (!  (=> (and (and (and (= (type |v#0@@281|) DatatypeTypeType) (= (type |v'#0@@182|) DatatypeTypeType)) (= (type |uiop#0@@22|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Query#canCall| (Lit |v#0@@281|) (Lit |v'#0@@182|) (Lit |uiop#0@@22|)) (and (and ($Is |v#0@@281| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@182| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@22| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@281|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@281|))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v'#0@@182|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v'#0@@182|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@182|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@182|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@22|))))) (=> (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))) (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Input.GetInput_q (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))))) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))) (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Output.GetOutput_q (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) (=> (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))) (and (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))) (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))) (=> (= (Lit (|AsyncMod_6#MapSpecMod#.Reply.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))) (Lit (|AsyncMod_6#MapSpecMod#.Request.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) (=> (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) (=> (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))) (let ((|key#1@@8| (Lit (MapSpecMod.Input.key (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))) (let ((|value#1@@1| (Lit (MapSpecMod.Output.value (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@182|))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@281|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@182|))) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@281|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@182|))) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@182|))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@281|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@182|))) (|#CrashTolerantMap.TransitionLabel.QueryLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))) |key#1@@8| |value#1@@1|))) (=> (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@281|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@182|))) (|#CrashTolerantMap.TransitionLabel.QueryLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))) |key#1@@8| |value#1@@1|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@182|)))) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#1@@28| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))
(let ((|dt_update#progress#0#1@@1| (let ((|dt_update#replies#0#1| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))))
(let ((|dt_update#requests#0#1@@1| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1@@1| |dt_update#replies#0#1|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1@@1| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#1@@28|)) (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#1@@28|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@182|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@281|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))))))))))))))))))))))))))))))))))))))))) (= (CoordinationSystem.__default.Query (Lit |v#0@@281|) (Lit |v'#0@@182|) (Lit |uiop#0@@22|))  (and (and (and (and (and (and (and (and (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@281|)) (CoordinationSystem.Variables.WF (Lit |v'#0@@182|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@182|))))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@22|))) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))) (MapSpecMod.Input.GetInput_q (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))) (MapSpecMod.Output.GetOutput_q (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))) (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))) (= (Lit (|AsyncMod_6#MapSpecMod#.Reply.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))) (Lit (|AsyncMod_6#MapSpecMod#.Request.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))) (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))) (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))))) (let ((|key#1@@9| (Lit (MapSpecMod.Input.key (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))))))
 (and true (let ((|value#1@@2| (Lit (MapSpecMod.Output.value (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|)))))))))))
 (and true (and (and (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@281|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@182|))) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@281|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@182|))) (Lit (|#CrashTolerantMap.TransitionLabel.QueryLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|))))) |key#1@@9| |value#1@@2|)))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@182|)) (let ((|dt_update_tmp#0#1@@29| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))
(let ((|dt_update#progress#0#1@@2| (let ((|dt_update#replies#0#1@@0| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))))
(let ((|dt_update#requests#0#1@@2| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@281|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@22|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1@@2| |dt_update#replies#0#1@@0|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1@@2| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#1@@29|)) (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#1@@29|)))))))))))))))
 :qid |CoordinationSystemidfy.102:19|
 :weight 3
 :skolemid |3745|
 :pattern ( (CoordinationSystem.__default.Query (Lit |v#0@@281|) (Lit |v'#0@@182|) (Lit |uiop#0@@22|)))
))))
(assert  (=> true (forall ((|v#0@@282| T@U) (|v'#0@@183| T@U) (|uiop#0@@23| T@U) ) (!  (=> (and (and (and (= (type |v#0@@282|) DatatypeTypeType) (= (type |v'#0@@183|) DatatypeTypeType)) (= (type |uiop#0@@23|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Put#canCall| |v#0@@282| |v'#0@@183| |uiop#0@@23|) (and (and ($Is |v#0@@282| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@183| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@23| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.132:17|
 :skolemid |3746|
 :pattern ( (CoordinationSystem.__default.Put |v#0@@282| |v'#0@@183| |uiop#0@@23|))
))))
(assert (forall ((|v#0@@283| T@U) (|v'#0@@184| T@U) (|uiop#0@@24| T@U) ) (!  (=> (and (and (and (= (type |v#0@@283|) DatatypeTypeType) (= (type |v'#0@@184|) DatatypeTypeType)) (= (type |uiop#0@@24|) DatatypeTypeType)) (and (and ($Is |v#0@@283| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@184| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@24| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.Put#requires| |v#0@@283| |v'#0@@184| |uiop#0@@24|) true))
 :qid |CoordinationSystemidfy.132:17|
 :skolemid |3747|
 :pattern ( (|CoordinationSystem.__default.Put#requires| |v#0@@283| |v'#0@@184| |uiop#0@@24|))
)))
(assert  (=> true (forall ((|v#0@@284| T@U) (|v'#0@@185| T@U) (|uiop#0@@25| T@U) ) (!  (=> (and (and (and (= (type |v#0@@284|) DatatypeTypeType) (= (type |v'#0@@185|) DatatypeTypeType)) (= (type |uiop#0@@25|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Put#canCall| |v#0@@284| |v'#0@@185| |uiop#0@@25|) (and (and ($Is |v#0@@284| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@185| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@25| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@284|) (=> (CoordinationSystem.Variables.WF |v#0@@284|) (and (|CoordinationSystem.Variables.WF#canCall| |v'#0@@185|) (=> (CoordinationSystem.Variables.WF |v'#0@@185|) (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@284|)) (and (CoordinationSystem.Variables.Variables_q |v'#0@@185|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@185|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@25|) (=> (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (=> (MapSpecMod.Input.PutInput_q (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (=> (MapSpecMod.Output.PutOutput_q (|AsyncMod_6#MapSpecMod#.Reply.output| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|)))) (=> (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))) (and (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (|AsyncMod_6#MapSpecMod#.Request.Request_q| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))) (=> (= (|AsyncMod_6#MapSpecMod#.Reply.id| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (|AsyncMod_6#MapSpecMod#.Request.id| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|)))) (=> (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (let ((|key#0@@27| (MapSpecMod.Input.key (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (let ((|val#0| (MapSpecMod.Input.value (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (|MsgHistoryMod.__default.SingletonAt#canCall| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@284|)) (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |key#0@@27| (|#ValueMessage.Message.Define| |val#0|)))) (let ((|singleton#0| (MsgHistoryMod.__default.SingletonAt (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@284|)) (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |key#0@@27| (|#ValueMessage.Message.Define| |val#0|)))))
 (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@284|) (=> (CoordinationSystem.Variables.WF |v#0@@284|) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (CoordinationSystem.Variables.Variables_q |v'#0@@185|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@284|) (CoordinationSystem.Variables.journal |v'#0@@185|) (|#CrashTolerantJournal.TransitionLabel.PutLabel| |singleton#0|))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@284|) (CoordinationSystem.Variables.journal |v'#0@@185|) (|#CrashTolerantJournal.TransitionLabel.PutLabel| |singleton#0|)) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (CoordinationSystem.Variables.Variables_q |v'#0@@185|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@284|) (CoordinationSystem.Variables.mapadt |v'#0@@185|) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |singleton#0|))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@284|) (CoordinationSystem.Variables.mapadt |v'#0@@185|) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |singleton#0|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v'#0@@185|)) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#0@@30| (CoordinationSystem.Variables.ephemeral |v#0@@284|)))
(let ((|dt_update#progress#0#0@@3| (let ((|dt_update#replies#0#0@@1| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))))))
(let ((|dt_update#requests#0#0@@3| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0@@3| |dt_update#replies#0#0@@1|)))))
(let ((|dt_update#mapLsn#0#0@@1| (INTERNAL_add_boogie (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@284|)) 1)))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0@@3| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#0@@30|) |dt_update#mapLsn#0#0@@1|)))))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@185|) (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|)))) (and (CoordinationSystem.Variables.Variables_q |v#0@@284|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|)))))) (CoordinationSystem.Variables.Variables_q |v#0@@284|))))))))))))))))))))))))))))))))))))))) (= (CoordinationSystem.__default.Put |v#0@@284| |v'#0@@185| |uiop#0@@25|)  (and (and (and (and (and (and (and (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@284|) (CoordinationSystem.Variables.WF |v'#0@@185|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@284|))) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@185|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@25|)) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (MapSpecMod.Input.PutInput_q (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))) (MapSpecMod.Output.PutOutput_q (|AsyncMod_6#MapSpecMod#.Reply.output| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))) (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))))) (= (|AsyncMod_6#MapSpecMod#.Reply.id| (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))) (|AsyncMod_6#MapSpecMod#.Request.id| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))) (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))))) (let ((|key#0@@28| (MapSpecMod.Input.key (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))))
 (and true (let ((|val#0@@0| (MapSpecMod.Input.value (|AsyncMod_6#MapSpecMod#.Request.input| (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|))))))
 (and true (let ((|singleton#0@@0| (MsgHistoryMod.__default.SingletonAt (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@284|)) (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |key#0@@28| (|#ValueMessage.Message.Define| |val#0@@0|)))))
 (and (and (and (CoordinationSystem.Variables.WF |v#0@@284|) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@284|) (CoordinationSystem.Variables.journal |v'#0@@185|) (|#CrashTolerantJournal.TransitionLabel.PutLabel| |singleton#0@@0|))) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@284|) (CoordinationSystem.Variables.mapadt |v'#0@@185|) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |singleton#0@@0|))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral |v'#0@@185|) (let ((|dt_update_tmp#0#0@@31| (CoordinationSystem.Variables.ephemeral |v#0@@284|)))
(let ((|dt_update#progress#0#0@@4| (let ((|dt_update#replies#0#0@@2| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))))))
(let ((|dt_update#requests#0#0@@4| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@284|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.req| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@25|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0@@4| |dt_update#replies#0#0@@2|)))))
(let ((|dt_update#mapLsn#0#0@@2| (INTERNAL_add_boogie (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@284|)) 1)))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0@@4| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#0@@31|) |dt_update#mapLsn#0#0@@2|)))))))))))))))
 :qid |CoordinationSystemidfy.132:17|
 :skolemid |3748|
 :pattern ( (CoordinationSystem.__default.Put |v#0@@284| |v'#0@@185| |uiop#0@@25|))
))))
(assert  (=> true (forall ((|v#0@@285| T@U) (|v'#0@@186| T@U) (|uiop#0@@26| T@U) ) (!  (=> (and (and (and (= (type |v#0@@285|) DatatypeTypeType) (= (type |v'#0@@186|) DatatypeTypeType)) (= (type |uiop#0@@26|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Put#canCall| (Lit |v#0@@285|) (Lit |v'#0@@186|) (Lit |uiop#0@@26|)) (and (and ($Is |v#0@@285| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@186| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@26| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@285|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@285|))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v'#0@@186|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v'#0@@186|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@186|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@186|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@26|))))) (=> (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))) (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Input.PutInput_q (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))))) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))) (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.Output.PutOutput_q (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) (=> (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))))) (and (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))) (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))) (=> (= (Lit (|AsyncMod_6#MapSpecMod#.Reply.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))) (Lit (|AsyncMod_6#MapSpecMod#.Request.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) (=> (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))) (let ((|key#1@@10| (Lit (MapSpecMod.Input.key (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))) (let ((|val#1| (Lit (MapSpecMod.Input.value (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))))))))
 (=> (U_2_bool (Lit (bool_2_U true))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (|MsgHistoryMod.__default.SingletonAt#canCall| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))) (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |key#1@@10| (|#ValueMessage.Message.Define| |val#1|)))) (let ((|singleton#1| (MsgHistoryMod.__default.SingletonAt (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))) (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |key#1@@10| (|#ValueMessage.Message.Define| |val#1|)))))
 (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@285|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@285|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@186|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@285|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@186|))) (|#CrashTolerantJournal.TransitionLabel.PutLabel| |singleton#1|))) (=> (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@285|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@186|))) (|#CrashTolerantJournal.TransitionLabel.PutLabel| |singleton#1|)) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@186|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@285|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@186|))) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |singleton#1|))) (=> (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@285|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@186|))) (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |singleton#1|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@186|)))) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#1@@30| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))))
(let ((|dt_update#progress#0#1@@3| (let ((|dt_update#replies#0#1@@1| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))))
(let ((|dt_update#requests#0#1@@3| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1@@3| |dt_update#replies#0#1@@1|)))))
(let ((|dt_update#mapLsn#0#1@@1| (LitInt (INTERNAL_add_boogie (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))) 1))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1@@3| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#1@@30|)) |dt_update#mapLsn#0#1@@1|)))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@186|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@285|)))))))))))))))))))))))))))))))))))))))) (= (CoordinationSystem.__default.Put (Lit |v#0@@285|) (Lit |v'#0@@186|) (Lit |uiop#0@@26|))  (and (and (and (and (and (and (and (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@285|)) (CoordinationSystem.Variables.WF (Lit |v'#0@@186|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@186|))))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@26|))) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))) (MapSpecMod.Input.PutInput_q (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))) (MapSpecMod.Output.PutOutput_q (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))) (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))) (= (Lit (|AsyncMod_6#MapSpecMod#.Reply.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))) (Lit (|AsyncMod_6#MapSpecMod#.Request.id| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))) (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))))))) (let ((|key#1@@11| (Lit (MapSpecMod.Input.key (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))))))))
 (and true (let ((|val#1@@0| (Lit (MapSpecMod.Input.value (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|)))))))))))
 (and true (let ((|singleton#1@@0| (Lit (MsgHistoryMod.__default.SingletonAt (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|))))) (Lit (|#MsgHistoryMod.KeyedMessage.KeyedMessage| |key#1@@11| (Lit (|#ValueMessage.Message.Define| |val#1@@0|))))))))
 (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@285|)) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@285|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@186|))) (Lit (|#CrashTolerantJournal.TransitionLabel.PutLabel| |singleton#1@@0|)))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@285|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@186|))) (Lit (|#CrashTolerantMap.TransitionLabel.PutRecordsLabel| |singleton#1@@0|)))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@186|)) (let ((|dt_update_tmp#0#1@@31| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))))
(let ((|dt_update#progress#0#1@@4| (let ((|dt_update#replies#0#1@@2| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))))
(let ((|dt_update#requests#0#1@@4| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@26|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1@@4| |dt_update#replies#0#1@@2|)))))
(let ((|dt_update#mapLsn#0#1@@2| (LitInt (INTERNAL_add_boogie (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@285|)))) 1))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1@@4| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#0#1@@31|)) |dt_update#mapLsn#0#1@@2|)))))))))))))))
 :qid |CoordinationSystemidfy.132:17|
 :weight 3
 :skolemid |3749|
 :pattern ( (CoordinationSystem.__default.Put (Lit |v#0@@285|) (Lit |v'#0@@186|) (Lit |uiop#0@@26|)))
))))
(assert  (=> true (forall ((|v#0@@286| T@U) (|v'#0@@187| T@U) (|uiop#0@@27| T@U) ) (!  (=> (and (and (and (= (type |v#0@@286|) DatatypeTypeType) (= (type |v'#0@@187|) DatatypeTypeType)) (= (type |uiop#0@@27|) DatatypeTypeType)) (or (|CoordinationSystem.__default.DeliverReply#canCall| |v#0@@286| |v'#0@@187| |uiop#0@@27|) (and (and ($Is |v#0@@286| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@187| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@27| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.166:26|
 :skolemid |3750|
 :pattern ( (CoordinationSystem.__default.DeliverReply |v#0@@286| |v'#0@@187| |uiop#0@@27|))
))))
(assert (forall ((|v#0@@287| T@U) (|v'#0@@188| T@U) (|uiop#0@@28| T@U) ) (!  (=> (and (and (and (= (type |v#0@@287|) DatatypeTypeType) (= (type |v'#0@@188|) DatatypeTypeType)) (= (type |uiop#0@@28|) DatatypeTypeType)) (and (and ($Is |v#0@@287| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@188| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@28| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.DeliverReply#requires| |v#0@@287| |v'#0@@188| |uiop#0@@28|) true))
 :qid |CoordinationSystemidfy.166:26|
 :skolemid |3751|
 :pattern ( (|CoordinationSystem.__default.DeliverReply#requires| |v#0@@287| |v'#0@@188| |uiop#0@@28|))
)))
(assert  (=> true (forall ((|v#0@@288| T@U) (|v'#0@@189| T@U) (|uiop#0@@29| T@U) ) (!  (=> (and (and (and (= (type |v#0@@288|) DatatypeTypeType) (= (type |v'#0@@189|) DatatypeTypeType)) (= (type |uiop#0@@29|) DatatypeTypeType)) (or (|CoordinationSystem.__default.DeliverReply#canCall| |v#0@@288| |v'#0@@189| |uiop#0@@29|) (and (and ($Is |v#0@@288| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@189| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@29| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@288|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@288|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@29|) (=> (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@29|)) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@288|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|)))) (=> (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@29|))))) (and (and (|$IsA#CoordinationSystem.Variables| |v'#0@@189|) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#0@@32| |v#0@@288|))
(let ((|dt_update#ephemeral#0#0@@9| (let ((|dt_update_tmp#1#0@@1| (CoordinationSystem.Variables.ephemeral |v#0@@288|)))
(let ((|dt_update#progress#0#0@@5| (let ((|dt_update_tmp#2#0@@2| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|))))
(let ((|dt_update#replies#0#0@@3| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@29|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#2#0@@2|) |dt_update#replies#0#0@@3|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0@@5| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#0@@1|) (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#0@@1|))))))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@32|) (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@32|) |dt_update#ephemeral#0#0@@9|))))) (let ((|dt_update_tmp#0#0@@33| |v#0@@288|))
 (and (and (CoordinationSystem.Variables.Variables_q |v#0@@288|) (and (CoordinationSystem.Variables.Variables_q |v#0@@288|) (let ((|dt_update_tmp#2#0@@3| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|))))
 (and (and (CoordinationSystem.Variables.Variables_q |v#0@@288|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|)))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#2#0@@3|))))) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@33|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@33|))))))))))) (= (CoordinationSystem.__default.DeliverReply |v#0@@288| |v'#0@@189| |uiop#0@@29|)  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@288|)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| |uiop#0@@29|)) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@29|))) (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|))) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@29|)))))) (|CoordinationSystem.Variables#Equal| |v'#0@@189| (let ((|dt_update_tmp#0#0@@34| |v#0@@288|))
(let ((|dt_update#ephemeral#0#0@@10| (let ((|dt_update_tmp#1#0@@2| (CoordinationSystem.Variables.ephemeral |v#0@@288|)))
(let ((|dt_update#progress#0#0@@6| (let ((|dt_update_tmp#2#0@@4| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|))))
(let ((|dt_update#replies#0#0@@4| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (CoordinationSystem.Ephemeral.progress (CoordinationSystem.Variables.ephemeral |v#0@@288|))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| |uiop#0@@29|)))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#2#0@@4|) |dt_update#replies#0#0@@4|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#0@@6| (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#0@@2|) (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#0@@2|))))))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@34|) (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@34|) |dt_update#ephemeral#0#0@@10|))))))))
 :qid |CoordinationSystemidfy.166:26|
 :skolemid |3752|
 :pattern ( (CoordinationSystem.__default.DeliverReply |v#0@@288| |v'#0@@189| |uiop#0@@29|))
))))
(assert  (=> true (forall ((|v#0@@289| T@U) (|v'#0@@190| T@U) (|uiop#0@@30| T@U) ) (!  (=> (and (and (and (= (type |v#0@@289|) DatatypeTypeType) (= (type |v'#0@@190|) DatatypeTypeType)) (= (type |uiop#0@@30|) DatatypeTypeType)) (or (|CoordinationSystem.__default.DeliverReply#canCall| (Lit |v#0@@289|) (Lit |v'#0@@190|) (Lit |uiop#0@@30|)) (and (and ($Is |v#0@@289| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@190| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@30| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@289|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@30|))))) (=> (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@30|))))))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@289|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|))))))) (=> (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@30|)))))))) (and (and (|$IsA#CoordinationSystem.Variables| (Lit |v'#0@@190|)) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#1@@32| (Lit |v#0@@289|)))
(let ((|dt_update#ephemeral#0#1@@9| (let ((|dt_update_tmp#1#1@@1| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))))
(let ((|dt_update#progress#0#1@@5| (let ((|dt_update_tmp#2#1@@2| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))))))
(let ((|dt_update#replies#0#1@@3| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@30|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#2#1@@2|)) |dt_update#replies#0#1@@3|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1@@5| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#1@@1|)) (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#1@@1|)))))))
(|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@32|)) (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@32|)) |dt_update#ephemeral#0#1@@9|))))) (let ((|dt_update_tmp#0#1@@33| (Lit |v#0@@289|)))
 (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@289|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@289|)) (let ((|dt_update_tmp#2#1@@3| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))))))
 (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@289|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|))))))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#2#1@@3|))))) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@33|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@33|))))))))))) (= (CoordinationSystem.__default.DeliverReply (Lit |v#0@@289|) (Lit |v'#0@@190|) (Lit |uiop#0@@30|))  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| (Lit |uiop#0@@30|))) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@30|))))) (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|))))))) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@30|))))))))) (|CoordinationSystem.Variables#Equal| |v'#0@@190| (let ((|dt_update_tmp#0#1@@34| (Lit |v#0@@289|)))
(let ((|dt_update#ephemeral#0#1@@10| (let ((|dt_update_tmp#1#1@@2| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))))
(let ((|dt_update#progress#0#1@@6| (let ((|dt_update_tmp#2#1@@4| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))))))
(let ((|dt_update#replies#0#1@@4| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (CoordinationSystem.Ephemeral.progress (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@289|)))))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (Lit |uiop#0@@30|))))))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#2#1@@4|)) |dt_update#replies#0#1@@4|)))))
(|#CoordinationSystem.Ephemeral.Known| |dt_update#progress#0#1@@6| (Lit (CoordinationSystem.Ephemeral.syncReqs |dt_update_tmp#1#1@@2|)) (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#1@@2|)))))))
(|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@34|)) (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@34|)) |dt_update#ephemeral#0#1@@10|))))))))
 :qid |CoordinationSystemidfy.166:26|
 :weight 3
 :skolemid |3753|
 :pattern ( (CoordinationSystem.__default.DeliverReply (Lit |v#0@@289|) (Lit |v'#0@@190|) (Lit |uiop#0@@30|)))
))))
(assert  (=> true (forall ((|v#0@@290| T@U) (|v'#0@@191| T@U) (|uiop#0@@31| T@U) ) (!  (=> (and (and (and (= (type |v#0@@290|) DatatypeTypeType) (= (type |v'#0@@191|) DatatypeTypeType)) (= (type |uiop#0@@31|) DatatypeTypeType)) (or (|CoordinationSystem.__default.JournalInternal#canCall| |v#0@@290| |v'#0@@191| |uiop#0@@31|) (and (and ($Is |v#0@@290| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@191| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@31| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.181:29|
 :skolemid |3754|
 :pattern ( (CoordinationSystem.__default.JournalInternal |v#0@@290| |v'#0@@191| |uiop#0@@31|))
))))
(assert (forall ((|v#0@@291| T@U) (|v'#0@@192| T@U) (|uiop#0@@32| T@U) ) (!  (=> (and (and (and (= (type |v#0@@291|) DatatypeTypeType) (= (type |v'#0@@192|) DatatypeTypeType)) (= (type |uiop#0@@32|) DatatypeTypeType)) (and (and ($Is |v#0@@291| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@192| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@32| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.JournalInternal#requires| |v#0@@291| |v'#0@@192| |uiop#0@@32|) true))
 :qid |CoordinationSystemidfy.181:29|
 :skolemid |3755|
 :pattern ( (|CoordinationSystem.__default.JournalInternal#requires| |v#0@@291| |v'#0@@192| |uiop#0@@32|))
)))
(assert  (=> true (forall ((|v#0@@292| T@U) (|v'#0@@193| T@U) (|uiop#0@@33| T@U) ) (!  (=> (and (and (and (= (type |v#0@@292|) DatatypeTypeType) (= (type |v'#0@@193|) DatatypeTypeType)) (= (type |uiop#0@@33|) DatatypeTypeType)) (or (|CoordinationSystem.__default.JournalInternal#canCall| |v#0@@292| |v'#0@@193| |uiop#0@@33|) (and (and ($Is |v#0@@292| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@193| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@33| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@292|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@292|)) (and (CoordinationSystem.Variables.Variables_q |v'#0@@193|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@193|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@33|) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@292|) (CoordinationSystem.Variables.Variables_q |v'#0@@193|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@292|) (CoordinationSystem.Variables.journal |v'#0@@193|) (Lit |#CrashTolerantJournal.TransitionLabel.InternalLabel|))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@292|) (CoordinationSystem.Variables.journal |v'#0@@193|) (Lit |#CrashTolerantJournal.TransitionLabel.InternalLabel|)) (and (and (|$IsA#CoordinationSystem.Variables| |v'#0@@193|) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#0@@35| |v#0@@292|))
(let ((|dt_update#journal#0#0@@1| (CoordinationSystem.Variables.journal |v'#0@@193|)))
(|#CoordinationSystem.Variables.Variables| |dt_update#journal#0#0@@1| (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@35|) (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#0@@35|)))))) (let ((|dt_update_tmp#0#0@@36| |v#0@@292|))
 (and (CoordinationSystem.Variables.Variables_q |v'#0@@193|) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@36|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@36|)))))))))))) (= (CoordinationSystem.__default.JournalInternal |v#0@@292| |v'#0@@193| |uiop#0@@33|)  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@292|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@193|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@33|)) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@292|) (CoordinationSystem.Variables.journal |v'#0@@193|) (Lit |#CrashTolerantJournal.TransitionLabel.InternalLabel|))) (|CoordinationSystem.Variables#Equal| |v'#0@@193| (let ((|dt_update_tmp#0#0@@37| |v#0@@292|))
(let ((|dt_update#journal#0#0@@2| (CoordinationSystem.Variables.journal |v'#0@@193|)))
(|#CoordinationSystem.Variables.Variables| |dt_update#journal#0#0@@2| (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@37|) (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#0@@37|)))))))))
 :qid |CoordinationSystemidfy.181:29|
 :skolemid |3756|
 :pattern ( (CoordinationSystem.__default.JournalInternal |v#0@@292| |v'#0@@193| |uiop#0@@33|))
))))
(assert  (=> true (forall ((|v#0@@293| T@U) (|v'#0@@194| T@U) (|uiop#0@@34| T@U) ) (!  (=> (and (and (and (= (type |v#0@@293|) DatatypeTypeType) (= (type |v'#0@@194|) DatatypeTypeType)) (= (type |uiop#0@@34|) DatatypeTypeType)) (or (|CoordinationSystem.__default.JournalInternal#canCall| (Lit |v#0@@293|) (Lit |v'#0@@194|) (Lit |uiop#0@@34|)) (and (and ($Is |v#0@@293| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@194| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@34| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@293|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@293|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@194|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@194|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@34|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@293|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@194|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@293|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@194|))) (Lit |#CrashTolerantJournal.TransitionLabel.InternalLabel|))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@293|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@194|))) (Lit |#CrashTolerantJournal.TransitionLabel.InternalLabel|))))) (and (and (|$IsA#CoordinationSystem.Variables| (Lit |v'#0@@194|)) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#1@@35| (Lit |v#0@@293|)))
(let ((|dt_update#journal#0#1@@1| (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@194|)))))
(Lit (|#CoordinationSystem.Variables.Variables| |dt_update#journal#0#1@@1| (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@35|)) (Lit (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#1@@35|)))))))) (let ((|dt_update_tmp#0#1@@36| (Lit |v#0@@293|)))
 (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@194|)) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@36|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@36|)))))))))))) (= (CoordinationSystem.__default.JournalInternal (Lit |v#0@@293|) (Lit |v'#0@@194|) (Lit |uiop#0@@34|))  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@293|)))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@194|))))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@34|))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@293|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@194|))) (Lit |#CrashTolerantJournal.TransitionLabel.InternalLabel|))) (|CoordinationSystem.Variables#Equal| |v'#0@@194| (let ((|dt_update_tmp#0#1@@37| (Lit |v#0@@293|)))
(let ((|dt_update#journal#0#1@@2| (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@194|)))))
(Lit (|#CoordinationSystem.Variables.Variables| |dt_update#journal#0#1@@2| (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@37|)) (Lit (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#1@@37|)))))))))))
 :qid |CoordinationSystemidfy.181:29|
 :weight 3
 :skolemid |3757|
 :pattern ( (CoordinationSystem.__default.JournalInternal (Lit |v#0@@293|) (Lit |v'#0@@194|) (Lit |uiop#0@@34|)))
))))
(assert  (=> true (forall ((|v#0@@294| T@U) (|v'#0@@195| T@U) (|uiop#0@@35| T@U) ) (!  (=> (and (and (and (= (type |v#0@@294|) DatatypeTypeType) (= (type |v'#0@@195|) DatatypeTypeType)) (= (type |uiop#0@@35|) DatatypeTypeType)) (or (|CoordinationSystem.__default.MapInternal#canCall| |v#0@@294| |v'#0@@195| |uiop#0@@35|) (and (and ($Is |v#0@@294| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@195| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@35| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.190:25|
 :skolemid |3758|
 :pattern ( (CoordinationSystem.__default.MapInternal |v#0@@294| |v'#0@@195| |uiop#0@@35|))
))))
(assert (forall ((|v#0@@295| T@U) (|v'#0@@196| T@U) (|uiop#0@@36| T@U) ) (!  (=> (and (and (and (= (type |v#0@@295|) DatatypeTypeType) (= (type |v'#0@@196|) DatatypeTypeType)) (= (type |uiop#0@@36|) DatatypeTypeType)) (and (and ($Is |v#0@@295| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@196| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@36| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.MapInternal#requires| |v#0@@295| |v'#0@@196| |uiop#0@@36|) true))
 :qid |CoordinationSystemidfy.190:25|
 :skolemid |3759|
 :pattern ( (|CoordinationSystem.__default.MapInternal#requires| |v#0@@295| |v'#0@@196| |uiop#0@@36|))
)))
(assert  (=> true (forall ((|v#0@@296| T@U) (|v'#0@@197| T@U) (|uiop#0@@37| T@U) ) (!  (=> (and (and (and (= (type |v#0@@296|) DatatypeTypeType) (= (type |v'#0@@197|) DatatypeTypeType)) (= (type |uiop#0@@37|) DatatypeTypeType)) (or (|CoordinationSystem.__default.MapInternal#canCall| |v#0@@296| |v'#0@@197| |uiop#0@@37|) (and (and ($Is |v#0@@296| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@197| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@37| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@296|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@296|)) (and (CoordinationSystem.Variables.Variables_q |v'#0@@197|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@197|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@37|) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@296|) (CoordinationSystem.Variables.Variables_q |v'#0@@197|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@296|) (CoordinationSystem.Variables.mapadt |v'#0@@197|) (Lit |#CrashTolerantMap.TransitionLabel.InternalLabel|))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@296|) (CoordinationSystem.Variables.mapadt |v'#0@@197|) (Lit |#CrashTolerantMap.TransitionLabel.InternalLabel|)) (and (and (|$IsA#CoordinationSystem.Variables| |v'#0@@197|) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#0@@38| |v#0@@296|))
(let ((|dt_update#mapadt#0#0| (CoordinationSystem.Variables.mapadt |v'#0@@197|)))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@38|) |dt_update#mapadt#0#0| (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#0@@38|)))))) (let ((|dt_update_tmp#0#0@@39| |v#0@@296|))
 (and (CoordinationSystem.Variables.Variables_q |v'#0@@197|) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@39|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@39|)))))))))))) (= (CoordinationSystem.__default.MapInternal |v#0@@296| |v'#0@@197| |uiop#0@@37|)  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@296|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@197|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@37|)) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@296|) (CoordinationSystem.Variables.mapadt |v'#0@@197|) (Lit |#CrashTolerantMap.TransitionLabel.InternalLabel|))) (|CoordinationSystem.Variables#Equal| |v'#0@@197| (let ((|dt_update_tmp#0#0@@40| |v#0@@296|))
(let ((|dt_update#mapadt#0#0@@0| (CoordinationSystem.Variables.mapadt |v'#0@@197|)))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@40|) |dt_update#mapadt#0#0@@0| (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#0@@40|)))))))))
 :qid |CoordinationSystemidfy.190:25|
 :skolemid |3760|
 :pattern ( (CoordinationSystem.__default.MapInternal |v#0@@296| |v'#0@@197| |uiop#0@@37|))
))))
(assert  (=> true (forall ((|v#0@@297| T@U) (|v'#0@@198| T@U) (|uiop#0@@38| T@U) ) (!  (=> (and (and (and (= (type |v#0@@297|) DatatypeTypeType) (= (type |v'#0@@198|) DatatypeTypeType)) (= (type |uiop#0@@38|) DatatypeTypeType)) (or (|CoordinationSystem.__default.MapInternal#canCall| (Lit |v#0@@297|) (Lit |v'#0@@198|) (Lit |uiop#0@@38|)) (and (and ($Is |v#0@@297| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@198| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@38| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@297|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@297|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@198|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@198|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@38|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@297|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@198|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@297|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@198|))) (Lit |#CrashTolerantMap.TransitionLabel.InternalLabel|))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@297|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@198|))) (Lit |#CrashTolerantMap.TransitionLabel.InternalLabel|))))) (and (and (|$IsA#CoordinationSystem.Variables| (Lit |v'#0@@198|)) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#1@@38| (Lit |v#0@@297|)))
(let ((|dt_update#mapadt#0#1| (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@198|)))))
(Lit (|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@38|)) |dt_update#mapadt#0#1| (Lit (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#1@@38|)))))))) (let ((|dt_update_tmp#0#1@@39| (Lit |v#0@@297|)))
 (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@198|)) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@39|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@39|)))))))))))) (= (CoordinationSystem.__default.MapInternal (Lit |v#0@@297|) (Lit |v'#0@@198|) (Lit |uiop#0@@38|))  (and (and (and (and (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@297|)))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@198|))))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@38|))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@297|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@198|))) (Lit |#CrashTolerantMap.TransitionLabel.InternalLabel|))) (|CoordinationSystem.Variables#Equal| |v'#0@@198| (let ((|dt_update_tmp#0#1@@40| (Lit |v#0@@297|)))
(let ((|dt_update#mapadt#0#1@@0| (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@198|)))))
(Lit (|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@40|)) |dt_update#mapadt#0#1@@0| (Lit (CoordinationSystem.Variables.ephemeral |dt_update_tmp#0#1@@40|)))))))))))
 :qid |CoordinationSystemidfy.190:25|
 :weight 3
 :skolemid |3761|
 :pattern ( (CoordinationSystem.__default.MapInternal (Lit |v#0@@297|) (Lit |v'#0@@198|) (Lit |uiop#0@@38|)))
))))
(assert  (=> true (forall ((|v#0@@298| T@U) (|v'#0@@199| T@U) (|uiop#0@@39| T@U) ) (!  (=> (and (and (and (= (type |v#0@@298|) DatatypeTypeType) (= (type |v'#0@@199|) DatatypeTypeType)) (= (type |uiop#0@@39|) DatatypeTypeType)) (or (|CoordinationSystem.__default.ReqSync#canCall| |v#0@@298| |v'#0@@199| |uiop#0@@39|) (and (and ($Is |v#0@@298| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@199| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@39| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.199:21|
 :skolemid |3762|
 :pattern ( (CoordinationSystem.__default.ReqSync |v#0@@298| |v'#0@@199| |uiop#0@@39|))
))))
(assert (forall ((|v#0@@299| T@U) (|v'#0@@200| T@U) (|uiop#0@@40| T@U) ) (!  (=> (and (and (and (= (type |v#0@@299|) DatatypeTypeType) (= (type |v'#0@@200|) DatatypeTypeType)) (= (type |uiop#0@@40|) DatatypeTypeType)) (and (and ($Is |v#0@@299| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@200| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@40| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.ReqSync#requires| |v#0@@299| |v'#0@@200| |uiop#0@@40|) true))
 :qid |CoordinationSystemidfy.199:21|
 :skolemid |3763|
 :pattern ( (|CoordinationSystem.__default.ReqSync#requires| |v#0@@299| |v'#0@@200| |uiop#0@@40|))
)))
(assert  (=> true (forall ((|v#0@@300| T@U) (|v'#0@@201| T@U) (|uiop#0@@41| T@U) ) (!  (=> (and (and (and (= (type |v#0@@300|) DatatypeTypeType) (= (type |v'#0@@201|) DatatypeTypeType)) (= (type |uiop#0@@41|) DatatypeTypeType)) (or (|CoordinationSystem.__default.ReqSync#canCall| |v#0@@300| |v'#0@@201| |uiop#0@@41|) (and (and ($Is |v#0@@300| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@201| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@41| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@300|) (=> (CoordinationSystem.Variables.WF |v#0@@300|) (and (|CoordinationSystem.Variables.WF#canCall| |v'#0@@201|) (=> (CoordinationSystem.Variables.WF |v'#0@@201|) (and (CoordinationSystem.Variables.Variables_q |v#0@@300|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@300|)) (and (CoordinationSystem.Variables.Variables_q |v'#0@@201|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@201|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| |uiop#0@@41|) (and (CoordinationSystem.Variables.Variables_q |v#0@@300|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@300|))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@41|)))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@300|) (CoordinationSystem.Variables.Variables_q |v'#0@@201|)) (CoordinationSystem.Variables.Variables_q |v#0@@300|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@300|) (CoordinationSystem.Variables.journal |v'#0@@201|) (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@300|))))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@300|) (CoordinationSystem.Variables.journal |v'#0@@201|) (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@300|)))) (and (and (and (|$IsA#CrashTolerantMap.Variables| (CoordinationSystem.Variables.mapadt |v'#0@@201|)) (|$IsA#CrashTolerantMap.Variables| (CoordinationSystem.Variables.mapadt |v#0@@300|))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@201|) (CoordinationSystem.Variables.Variables_q |v#0@@300|))) (=> (|CrashTolerantMap.Variables#Equal| (CoordinationSystem.Variables.mapadt |v'#0@@201|) (CoordinationSystem.Variables.mapadt |v#0@@300|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v'#0@@201|)) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#0@@41| (CoordinationSystem.Variables.ephemeral |v#0@@300|)))
(let ((|dt_update#syncReqs#0#0| (|Map#Build| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@300|)) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@41|))) ($Box (int_2_U (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@300|)))))))
(|#CoordinationSystem.Ephemeral.Known| (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#0@@41|) |dt_update#syncReqs#0#0| (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#0@@41|)))))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@201|) (and (CoordinationSystem.Variables.Variables_q |v#0@@300|) (and (CoordinationSystem.Variables.Variables_q |v#0@@300|) (CoordinationSystem.Variables.Variables_q |v#0@@300|)))))))))))))))))))) (= (CoordinationSystem.__default.ReqSync |v#0@@300| |v'#0@@201| |uiop#0@@41|)  (and (and (and (and (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@300|) (CoordinationSystem.Variables.WF |v'#0@@201|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@300|))) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@201|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| |uiop#0@@41|)) (not (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@300|))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@41|))))))) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@300|) (CoordinationSystem.Variables.journal |v'#0@@201|) (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@300|))))) (|CrashTolerantMap.Variables#Equal| (CoordinationSystem.Variables.mapadt |v'#0@@201|) (CoordinationSystem.Variables.mapadt |v#0@@300|))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral |v'#0@@201|) (let ((|dt_update_tmp#0#0@@42| (CoordinationSystem.Variables.ephemeral |v#0@@300|)))
(let ((|dt_update#syncReqs#0#0@@0| (|Map#Build| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@300|)) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@41|))) ($Box (int_2_U (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@300|)))))))
(|#CoordinationSystem.Ephemeral.Known| (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#0@@42|) |dt_update#syncReqs#0#0@@0| (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#0@@42|)))))))))
 :qid |CoordinationSystemidfy.199:21|
 :skolemid |3764|
 :pattern ( (CoordinationSystem.__default.ReqSync |v#0@@300| |v'#0@@201| |uiop#0@@41|))
))))
(assert  (=> true (forall ((|v#0@@301| T@U) (|v'#0@@202| T@U) (|uiop#0@@42| T@U) ) (!  (=> (and (and (and (= (type |v#0@@301|) DatatypeTypeType) (= (type |v'#0@@202|) DatatypeTypeType)) (= (type |uiop#0@@42|) DatatypeTypeType)) (or (|CoordinationSystem.__default.ReqSync#canCall| (Lit |v#0@@301|) (Lit |v'#0@@202|) (Lit |uiop#0@@42|)) (and (and ($Is |v#0@@301| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@202| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@42| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@301|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@301|))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v'#0@@202|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v'#0@@202|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@202|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@202|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| (Lit |uiop#0@@42|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@42|))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@202|))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@301|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@202|))) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@301|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@202|))) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))))))))) (and (and (and (|$IsA#CrashTolerantMap.Variables| (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@202|)))) (|$IsA#CrashTolerantMap.Variables| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@301|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@202|)) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|)))) (=> (|CrashTolerantMap.Variables#Equal| (CoordinationSystem.Variables.mapadt (Lit |v'#0@@202|)) (CoordinationSystem.Variables.mapadt (Lit |v#0@@301|))) (and (and (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@202|)))) (|$IsA#CoordinationSystem.Ephemeral| (let ((|dt_update_tmp#0#1@@41| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|)))))
(let ((|dt_update#syncReqs#0#1| (|Map#Build| (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@42|))))) ($Box (int_2_U (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))))))))
(|#CoordinationSystem.Ephemeral.Known| (Lit (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#1@@41|)) |dt_update#syncReqs#0#1| (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#1@@41|))))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@202|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|)) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@301|))))))))))))))))))))) (= (CoordinationSystem.__default.ReqSync (Lit |v#0@@301|) (Lit |v'#0@@202|) (Lit |uiop#0@@42|))  (and (and (and (and (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@301|)) (CoordinationSystem.Variables.WF (Lit |v'#0@@202|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@202|))))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| (Lit |uiop#0@@42|))) (not (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@42|)))))))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@301|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@202|))) (Lit (|#CrashTolerantJournal.TransitionLabel.QueryEndLsnLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))))))) (|CrashTolerantMap.Variables#Equal| (CoordinationSystem.Variables.mapadt (Lit |v'#0@@202|)) (CoordinationSystem.Variables.mapadt (Lit |v#0@@301|)))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@202|)) (let ((|dt_update_tmp#0#1@@42| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|)))))
(let ((|dt_update#syncReqs#0#1@@0| (|Map#Build| (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@42|))))) ($Box (int_2_U (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@301|))))))))))
(|#CoordinationSystem.Ephemeral.Known| (Lit (CoordinationSystem.Ephemeral.progress |dt_update_tmp#0#1@@42|)) |dt_update#syncReqs#0#1@@0| (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#0#1@@42|))))))))))
 :qid |CoordinationSystemidfy.199:21|
 :weight 3
 :skolemid |3765|
 :pattern ( (CoordinationSystem.__default.ReqSync (Lit |v#0@@301|) (Lit |v'#0@@202|) (Lit |uiop#0@@42|)))
))))
(assert  (=> true (forall ((|v#0@@302| T@U) (|v'#0@@203| T@U) (|uiop#0@@43| T@U) ) (!  (=> (and (and (and (= (type |v#0@@302|) DatatypeTypeType) (= (type |v'#0@@203|) DatatypeTypeType)) (= (type |uiop#0@@43|) DatatypeTypeType)) (or (|CoordinationSystem.__default.ReplySync#canCall| |v#0@@302| |v'#0@@203| |uiop#0@@43|) (and (and ($Is |v#0@@302| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@203| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@43| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.222:23|
 :skolemid |3766|
 :pattern ( (CoordinationSystem.__default.ReplySync |v#0@@302| |v'#0@@203| |uiop#0@@43|))
))))
(assert (forall ((|v#0@@303| T@U) (|v'#0@@204| T@U) (|uiop#0@@44| T@U) ) (!  (=> (and (and (and (= (type |v#0@@303|) DatatypeTypeType) (= (type |v'#0@@204|) DatatypeTypeType)) (= (type |uiop#0@@44|) DatatypeTypeType)) (and (and ($Is |v#0@@303| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@204| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@44| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.ReplySync#requires| |v#0@@303| |v'#0@@204| |uiop#0@@44|) true))
 :qid |CoordinationSystemidfy.222:23|
 :skolemid |3767|
 :pattern ( (|CoordinationSystem.__default.ReplySync#requires| |v#0@@303| |v'#0@@204| |uiop#0@@44|))
)))
(assert  (=> true (forall ((|v#0@@304| T@U) (|v'#0@@205| T@U) (|uiop#0@@45| T@U) ) (!  (=> (and (and (and (= (type |v#0@@304|) DatatypeTypeType) (= (type |v'#0@@205|) DatatypeTypeType)) (= (type |uiop#0@@45|) DatatypeTypeType)) (or (|CoordinationSystem.__default.ReplySync#canCall| |v#0@@304| |v'#0@@205| |uiop#0@@45|) (and (and ($Is |v#0@@304| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@205| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@45| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@304|) (=> (CoordinationSystem.Variables.WF |v#0@@304|) (and (CoordinationSystem.Variables.Variables_q |v#0@@304|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@304|)) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| |uiop#0@@45|) (and (CoordinationSystem.Variables.Variables_q |v#0@@304|) (=> (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@304|) (CoordinationSystem.Variables.Variables_q |v'#0@@205|)) (CoordinationSystem.Variables.Variables_q |v#0@@304|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@304|) (CoordinationSystem.Variables.journal |v'#0@@205|) (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|))))))))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@304|) (CoordinationSystem.Variables.journal |v'#0@@205|) (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|)))))))) (and (and (|$IsA#CoordinationSystem.Variables| |v'#0@@205|) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#0@@43| |v#0@@304|))
(let ((|dt_update#ephemeral#0#0@@11| (let ((|dt_update_tmp#1#0@@3| (CoordinationSystem.Variables.ephemeral |v#0@@304|)))
(let ((|dt_update#syncReqs#0#0@@1| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|)) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|))))))
(|#CoordinationSystem.Ephemeral.Known| (CoordinationSystem.Ephemeral.progress |dt_update_tmp#1#0@@3|) |dt_update#syncReqs#0#0@@1| (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#0@@3|))))))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@43|) (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@43|) |dt_update#ephemeral#0#0@@11|))))) (let ((|dt_update_tmp#0#0@@44| |v#0@@304|))
 (and (and (CoordinationSystem.Variables.Variables_q |v#0@@304|) (and (CoordinationSystem.Variables.Variables_q |v#0@@304|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass._System.nat Tclass._System.nat (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|)) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|)))))) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@44|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#0@@44|)))))))))))))) (= (CoordinationSystem.__default.ReplySync |v#0@@304| |v'#0@@205| |uiop#0@@45|)  (and (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@304|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@304|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| |uiop#0@@45|)) (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|)))))) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@304|) (CoordinationSystem.Variables.journal |v'#0@@205|) (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|))))))))) (|CoordinationSystem.Variables#Equal| |v'#0@@205| (let ((|dt_update_tmp#0#0@@45| |v#0@@304|))
(let ((|dt_update#ephemeral#0#0@@12| (let ((|dt_update_tmp#1#0@@4| (CoordinationSystem.Variables.ephemeral |v#0@@304|)))
(let ((|dt_update#syncReqs#0#0@@2| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (CoordinationSystem.Ephemeral.syncReqs (CoordinationSystem.Variables.ephemeral |v#0@@304|)) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| |uiop#0@@45|))))))
(|#CoordinationSystem.Ephemeral.Known| (CoordinationSystem.Ephemeral.progress |dt_update_tmp#1#0@@4|) |dt_update#syncReqs#0#0@@2| (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#0@@4|))))))
(|#CoordinationSystem.Variables.Variables| (CoordinationSystem.Variables.journal |dt_update_tmp#0#0@@45|) (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#0@@45|) |dt_update#ephemeral#0#0@@12|))))))))
 :qid |CoordinationSystemidfy.222:23|
 :skolemid |3768|
 :pattern ( (CoordinationSystem.__default.ReplySync |v#0@@304| |v'#0@@205| |uiop#0@@45|))
))))
(assert  (=> true (forall ((|v#0@@305| T@U) (|v'#0@@206| T@U) (|uiop#0@@46| T@U) ) (!  (=> (and (and (and (= (type |v#0@@305|) DatatypeTypeType) (= (type |v'#0@@206|) DatatypeTypeType)) (= (type |uiop#0@@46|) DatatypeTypeType)) (or (|CoordinationSystem.__default.ReplySync#canCall| (Lit |v#0@@305|) (Lit |v'#0@@206|) (Lit |uiop#0@@46|)) (and (and ($Is |v#0@@305| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@206| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@46| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@305|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@305|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@305|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|))))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| (Lit |uiop#0@@46|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@305|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|))))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|)))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@305|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@206|))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@305|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@305|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@206|))) (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|)))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|))))))))))) (=> (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@305|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@206|))) (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|)))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|)))))))))) (and (and (|$IsA#CoordinationSystem.Variables| (Lit |v'#0@@206|)) (|$IsA#CoordinationSystem.Variables| (let ((|dt_update_tmp#0#1@@43| (Lit |v#0@@305|)))
(let ((|dt_update#ephemeral#0#1@@11| (let ((|dt_update_tmp#1#1@@3| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|)))))
(let ((|dt_update#syncReqs#0#1@@1| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|))))))))
(|#CoordinationSystem.Ephemeral.Known| (Lit (CoordinationSystem.Ephemeral.progress |dt_update_tmp#1#1@@3|)) |dt_update#syncReqs#0#1@@1| (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#1@@3|)))))))
(|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@43|)) (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@43|)) |dt_update#ephemeral#0#1@@11|))))) (let ((|dt_update_tmp#0#1@@44| (Lit |v#0@@305|)))
 (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@305|)) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@305|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass._System.nat Tclass._System.nat (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|)))))))) (and (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@44|) (CoordinationSystem.Variables.Variables_q |dt_update_tmp#0#1@@44|)))))))))))))) (= (CoordinationSystem.__default.ReplySync (Lit |v#0@@305|) (Lit |v'#0@@206|) (Lit |uiop#0@@46|))  (and (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@305|)) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|))))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| (Lit |uiop#0@@46|))) (U_2_bool (MapType0Select (|Map#Domain| (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|))))) ($Box (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|))))))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@305|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@206|))) (|#CrashTolerantJournal.TransitionLabel.QueryLsnPersistenceLabel| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|)))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|))))))))))) (|CoordinationSystem.Variables#Equal| |v'#0@@206| (let ((|dt_update_tmp#0#1@@45| (Lit |v#0@@305|)))
(let ((|dt_update#ephemeral#0#1@@12| (let ((|dt_update_tmp#1#1@@4| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|)))))
(let ((|dt_update#syncReqs#0#1@@2| (MapRemove_s.__default.MapRemove1 Tclass._System.nat Tclass._System.nat StartFuel_MapRemove_s._default.MapRemove1 (Lit (CoordinationSystem.Ephemeral.syncReqs (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@305|))))) ($Box (int_2_U (LitInt (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (Lit |uiop#0@@46|))))))))
(|#CoordinationSystem.Ephemeral.Known| (Lit (CoordinationSystem.Ephemeral.progress |dt_update_tmp#1#1@@4|)) |dt_update#syncReqs#0#1@@2| (LitInt (CoordinationSystem.Ephemeral.mapLsn |dt_update_tmp#1#1@@4|)))))))
(|#CoordinationSystem.Variables.Variables| (Lit (CoordinationSystem.Variables.journal |dt_update_tmp#0#1@@45|)) (Lit (CoordinationSystem.Variables.mapadt |dt_update_tmp#0#1@@45|)) |dt_update#ephemeral#0#1@@12|))))))))
 :qid |CoordinationSystemidfy.222:23|
 :weight 3
 :skolemid |3769|
 :pattern ( (CoordinationSystem.__default.ReplySync (Lit |v#0@@305|) (Lit |v'#0@@206|) (Lit |uiop#0@@46|)))
))))
(assert  (=> true (forall ((|v#0@@306| T@U) (|v'#0@@207| T@U) (|uiop#0@@47| T@U) (|newBoundaryLsn#0| Int) ) (!  (=> (and (and (and (= (type |v#0@@306|) DatatypeTypeType) (= (type |v'#0@@207|) DatatypeTypeType)) (= (type |uiop#0@@47|) DatatypeTypeType)) (or (|CoordinationSystem.__default.CommitStart#canCall| |v#0@@306| |v'#0@@207| |uiop#0@@47| |newBoundaryLsn#0|) (and (and (and ($Is |v#0@@306| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@207| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@47| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (INTERNAL_le_boogie 0 |newBoundaryLsn#0|)))) true)
 :qid |CoordinationSystemidfy.236:25|
 :skolemid |3770|
 :pattern ( (CoordinationSystem.__default.CommitStart |v#0@@306| |v'#0@@207| |uiop#0@@47| |newBoundaryLsn#0|))
))))
(assert (forall ((|v#0@@307| T@U) (|v'#0@@208| T@U) (|uiop#0@@48| T@U) (|newBoundaryLsn#0@@0| Int) ) (!  (=> (and (and (= (type |v#0@@307|) DatatypeTypeType) (= (type |v'#0@@208|) DatatypeTypeType)) (= (type |uiop#0@@48|) DatatypeTypeType)) (=> (and (and (and ($Is |v#0@@307| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@208| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@48| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (INTERNAL_le_boogie 0 |newBoundaryLsn#0@@0|)) (= (|CoordinationSystem.__default.CommitStart#requires| |v#0@@307| |v'#0@@208| |uiop#0@@48| |newBoundaryLsn#0@@0|) true)))
 :qid |CoordinationSystemidfy.236:25|
 :skolemid |3771|
 :pattern ( (|CoordinationSystem.__default.CommitStart#requires| |v#0@@307| |v'#0@@208| |uiop#0@@48| |newBoundaryLsn#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@308| T@U) (|v'#0@@209| T@U) (|uiop#0@@49| T@U) (|newBoundaryLsn#0@@1| Int) ) (!  (=> (and (and (and (= (type |v#0@@308|) DatatypeTypeType) (= (type |v'#0@@209|) DatatypeTypeType)) (= (type |uiop#0@@49|) DatatypeTypeType)) (or (|CoordinationSystem.__default.CommitStart#canCall| |v#0@@308| |v'#0@@209| |uiop#0@@49| |newBoundaryLsn#0@@1|) (and (and (and ($Is |v#0@@308| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@209| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@49| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (INTERNAL_le_boogie 0 |newBoundaryLsn#0@@1|)))) (and (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@49|) (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@308|) (=> (CoordinationSystem.Variables.WF |v#0@@308|) (and (CoordinationSystem.Variables.Variables_q |v#0@@308|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@308|)) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@308|) (CoordinationSystem.Variables.Variables_q |v'#0@@209|)) (CoordinationSystem.Variables.Variables_q |v#0@@308|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@308|) (CoordinationSystem.Variables.journal |v'#0@@209|) (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |newBoundaryLsn#0@@1| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@308|))))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@308|) (CoordinationSystem.Variables.journal |v'#0@@209|) (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |newBoundaryLsn#0@@1| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@308|)))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@308|) (CoordinationSystem.Variables.Variables_q |v'#0@@209|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@308|) (CoordinationSystem.Variables.mapadt |v'#0@@209|) (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |newBoundaryLsn#0@@1|))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@308|) (CoordinationSystem.Variables.mapadt |v'#0@@209|) (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |newBoundaryLsn#0@@1|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v'#0@@209|)) (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v#0@@308|))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@209|) (CoordinationSystem.Variables.Variables_q |v#0@@308|)))))))))))) (= (CoordinationSystem.__default.CommitStart |v#0@@308| |v'#0@@209| |uiop#0@@49| |newBoundaryLsn#0@@1|)  (and (and (and (and (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| |uiop#0@@49|) (CoordinationSystem.Variables.WF |v#0@@308|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@308|))) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@308|) (CoordinationSystem.Variables.journal |v'#0@@209|) (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| |newBoundaryLsn#0@@1| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@308|))))) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@308|) (CoordinationSystem.Variables.mapadt |v'#0@@209|) (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| |newBoundaryLsn#0@@1|))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral |v'#0@@209|) (CoordinationSystem.Variables.ephemeral |v#0@@308|))))))
 :qid |CoordinationSystemidfy.236:25|
 :skolemid |3772|
 :pattern ( (CoordinationSystem.__default.CommitStart |v#0@@308| |v'#0@@209| |uiop#0@@49| |newBoundaryLsn#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@309| T@U) (|v'#0@@210| T@U) (|uiop#0@@50| T@U) (|newBoundaryLsn#0@@2| Int) ) (!  (=> (and (and (and (= (type |v#0@@309|) DatatypeTypeType) (= (type |v'#0@@210|) DatatypeTypeType)) (= (type |uiop#0@@50|) DatatypeTypeType)) (or (|CoordinationSystem.__default.CommitStart#canCall| (Lit |v#0@@309|) (Lit |v'#0@@210|) (Lit |uiop#0@@50|) (LitInt |newBoundaryLsn#0@@2|)) (and (and (and ($Is |v#0@@309| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@210| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@50| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (INTERNAL_le_boogie 0 |newBoundaryLsn#0@@2|)))) (and (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@50|))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@309|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@309|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@309|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@309|))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@309|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@210|))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@309|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@309|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@210|))) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| (LitInt |newBoundaryLsn#0@@2|) (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@309|))))))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@309|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@210|))) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| (LitInt |newBoundaryLsn#0@@2|) (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@309|))))))))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@309|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@210|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@309|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@210|))) (Lit (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| (LitInt |newBoundaryLsn#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@309|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@210|))) (Lit (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| (LitInt |newBoundaryLsn#0@@2|))))))) (and (and (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@210|)))) (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@309|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@210|)) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@309|))))))))))))) (= (CoordinationSystem.__default.CommitStart (Lit |v#0@@309|) (Lit |v'#0@@210|) (Lit |uiop#0@@50|) (LitInt |newBoundaryLsn#0@@2|))  (and (and (and (and (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| (Lit |uiop#0@@50|)) (CoordinationSystem.Variables.WF (Lit |v#0@@309|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@309|))))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@309|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@210|))) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitStartLabel| (LitInt |newBoundaryLsn#0@@2|) (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@309|))))))))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@309|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@210|))) (Lit (|#CrashTolerantMap.TransitionLabel.CommitStartLabel| (LitInt |newBoundaryLsn#0@@2|))))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@210|)) (CoordinationSystem.Variables.ephemeral (Lit |v#0@@309|)))))))
 :qid |CoordinationSystemidfy.236:25|
 :weight 3
 :skolemid |3773|
 :pattern ( (CoordinationSystem.__default.CommitStart (Lit |v#0@@309|) (Lit |v'#0@@210|) (Lit |uiop#0@@50|) (LitInt |newBoundaryLsn#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@310| T@U) (|v'#0@@211| T@U) (|uiop#0@@51| T@U) ) (!  (=> (and (and (and (= (type |v#0@@310|) DatatypeTypeType) (= (type |v'#0@@211|) DatatypeTypeType)) (= (type |uiop#0@@51|) DatatypeTypeType)) (or (|CoordinationSystem.__default.CommitComplete#canCall| |v#0@@310| |v'#0@@211| |uiop#0@@51|) (and (and ($Is |v#0@@310| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@211| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@51| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.249:28|
 :skolemid |3774|
 :pattern ( (CoordinationSystem.__default.CommitComplete |v#0@@310| |v'#0@@211| |uiop#0@@51|))
))))
(assert (forall ((|v#0@@311| T@U) (|v'#0@@212| T@U) (|uiop#0@@52| T@U) ) (!  (=> (and (and (and (= (type |v#0@@311|) DatatypeTypeType) (= (type |v'#0@@212|) DatatypeTypeType)) (= (type |uiop#0@@52|) DatatypeTypeType)) (and (and ($Is |v#0@@311| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@212| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@52| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.CommitComplete#requires| |v#0@@311| |v'#0@@212| |uiop#0@@52|) true))
 :qid |CoordinationSystemidfy.249:28|
 :skolemid |3775|
 :pattern ( (|CoordinationSystem.__default.CommitComplete#requires| |v#0@@311| |v'#0@@212| |uiop#0@@52|))
)))
(assert  (=> true (forall ((|v#0@@312| T@U) (|v'#0@@213| T@U) (|uiop#0@@53| T@U) ) (!  (=> (and (and (and (= (type |v#0@@312|) DatatypeTypeType) (= (type |v'#0@@213|) DatatypeTypeType)) (= (type |uiop#0@@53|) DatatypeTypeType)) (or (|CoordinationSystem.__default.CommitComplete#canCall| |v#0@@312| |v'#0@@213| |uiop#0@@53|) (and (and ($Is |v#0@@312| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@213| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@53| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@312|) (=> (CoordinationSystem.Variables.WF |v#0@@312|) (and (|CoordinationSystem.Variables.WF#canCall| |v'#0@@213|) (=> (CoordinationSystem.Variables.WF |v'#0@@213|) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| |uiop#0@@53|) (and (CoordinationSystem.Variables.Variables_q |v#0@@312|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@312|)) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@312|) (CoordinationSystem.Variables.Variables_q |v'#0@@213|)) (CoordinationSystem.Variables.Variables_q |v#0@@312|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@312|) (CoordinationSystem.Variables.journal |v'#0@@213|) (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@312|))))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@312|) (CoordinationSystem.Variables.journal |v'#0@@213|) (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@312|)))) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@312|) (CoordinationSystem.Variables.Variables_q |v'#0@@213|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@312|) (CoordinationSystem.Variables.mapadt |v'#0@@213|) (Lit |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@312|) (CoordinationSystem.Variables.mapadt |v'#0@@213|) (Lit |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|)) (and (and (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v'#0@@213|)) (|$IsA#CoordinationSystem.Ephemeral| (CoordinationSystem.Variables.ephemeral |v#0@@312|))) (and (CoordinationSystem.Variables.Variables_q |v'#0@@213|) (CoordinationSystem.Variables.Variables_q |v#0@@312|)))))))))))))) (= (CoordinationSystem.__default.CommitComplete |v#0@@312| |v'#0@@213| |uiop#0@@53|)  (and (and (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@312|) (CoordinationSystem.Variables.WF |v'#0@@213|)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| |uiop#0@@53|)) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@312|))) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@312|) (CoordinationSystem.Variables.journal |v'#0@@213|) (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v#0@@312|))))) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@312|) (CoordinationSystem.Variables.mapadt |v'#0@@213|) (Lit |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral |v'#0@@213|) (CoordinationSystem.Variables.ephemeral |v#0@@312|))))))
 :qid |CoordinationSystemidfy.249:28|
 :skolemid |3776|
 :pattern ( (CoordinationSystem.__default.CommitComplete |v#0@@312| |v'#0@@213| |uiop#0@@53|))
))))
(assert  (=> true (forall ((|v#0@@313| T@U) (|v'#0@@214| T@U) (|uiop#0@@54| T@U) ) (!  (=> (and (and (and (= (type |v#0@@313|) DatatypeTypeType) (= (type |v'#0@@214|) DatatypeTypeType)) (= (type |uiop#0@@54|) DatatypeTypeType)) (or (|CoordinationSystem.__default.CommitComplete#canCall| (Lit |v#0@@313|) (Lit |v'#0@@214|) (Lit |uiop#0@@54|)) (and (and ($Is |v#0@@313| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@214| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@54| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@313|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@313|))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v'#0@@214|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v'#0@@214|))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| (Lit |uiop#0@@54|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@313|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@313|))))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@313|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@214|))) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@313|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@313|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@214|))) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@313|))))))))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@313|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@214|))) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@313|))))))))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@313|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@214|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@313|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@214|))) (Lit |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@313|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@214|))) (Lit |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|))))) (and (and (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@214|)))) (|$IsA#CoordinationSystem.Ephemeral| (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@313|))))) (and (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@214|)) (CoordinationSystem.Variables.Variables_q (Lit |v#0@@313|))))))))))))))) (= (CoordinationSystem.__default.CommitComplete (Lit |v#0@@313|) (Lit |v'#0@@214|) (Lit |uiop#0@@54|))  (and (and (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@313|)) (CoordinationSystem.Variables.WF (Lit |v'#0@@214|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| (Lit |uiop#0@@54|))) (CoordinationSystem.Ephemeral.Known_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@313|))))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@313|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@214|))) (Lit (|#CrashTolerantJournal.TransitionLabel.CommitCompleteLabel| (LitInt (CoordinationSystem.Ephemeral.mapLsn (Lit (CoordinationSystem.Variables.ephemeral (Lit |v#0@@313|))))))))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@313|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@214|))) (Lit |#CrashTolerantMap.TransitionLabel.CommitCompleteLabel|))) (|CoordinationSystem.Ephemeral#Equal| (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@214|)) (CoordinationSystem.Variables.ephemeral (Lit |v#0@@313|)))))))
 :qid |CoordinationSystemidfy.249:28|
 :weight 3
 :skolemid |3777|
 :pattern ( (CoordinationSystem.__default.CommitComplete (Lit |v#0@@313|) (Lit |v'#0@@214|) (Lit |uiop#0@@54|)))
))))
(assert  (=> true (forall ((|v#0@@314| T@U) (|v'#0@@215| T@U) (|uiop#0@@55| T@U) ) (!  (=> (and (and (and (= (type |v#0@@314|) DatatypeTypeType) (= (type |v'#0@@215|) DatatypeTypeType)) (= (type |uiop#0@@55|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Crash#canCall| |v#0@@314| |v'#0@@215| |uiop#0@@55|) (and (and ($Is |v#0@@314| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@215| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@55| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.262:19|
 :skolemid |3778|
 :pattern ( (CoordinationSystem.__default.Crash |v#0@@314| |v'#0@@215| |uiop#0@@55|))
))))
(assert (forall ((|v#0@@315| T@U) (|v'#0@@216| T@U) (|uiop#0@@56| T@U) ) (!  (=> (and (and (and (= (type |v#0@@315|) DatatypeTypeType) (= (type |v'#0@@216|) DatatypeTypeType)) (= (type |uiop#0@@56|) DatatypeTypeType)) (and (and ($Is |v#0@@315| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@216| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@56| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.Crash#requires| |v#0@@315| |v'#0@@216| |uiop#0@@56|) true))
 :qid |CoordinationSystemidfy.262:19|
 :skolemid |3779|
 :pattern ( (|CoordinationSystem.__default.Crash#requires| |v#0@@315| |v'#0@@216| |uiop#0@@56|))
)))
(assert  (=> true (forall ((|v#0@@316| T@U) (|v'#0@@217| T@U) (|uiop#0@@57| T@U) ) (!  (=> (and (and (and (= (type |v#0@@316|) DatatypeTypeType) (= (type |v'#0@@217|) DatatypeTypeType)) (= (type |uiop#0@@57|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Crash#canCall| |v#0@@316| |v'#0@@217| |uiop#0@@57|) (and (and ($Is |v#0@@316| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@217| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@57| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| |v#0@@316|) (=> (CoordinationSystem.Variables.WF |v#0@@316|) (and (|CoordinationSystem.Variables.WF#canCall| |v'#0@@217|) (=> (CoordinationSystem.Variables.WF |v'#0@@217|) (=> (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| |uiop#0@@57|) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@316|) (CoordinationSystem.Variables.Variables_q |v'#0@@217|)) (|CrashTolerantJournal.__default.Next#canCall| (CoordinationSystem.Variables.journal |v#0@@316|) (CoordinationSystem.Variables.journal |v'#0@@217|) (Lit |#CrashTolerantJournal.TransitionLabel.CrashLabel|))) (=> (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@316|) (CoordinationSystem.Variables.journal |v'#0@@217|) (Lit |#CrashTolerantJournal.TransitionLabel.CrashLabel|)) (and (and (and (CoordinationSystem.Variables.Variables_q |v#0@@316|) (CoordinationSystem.Variables.Variables_q |v'#0@@217|)) (|CrashTolerantMap.__default.Next#canCall| (CoordinationSystem.Variables.mapadt |v#0@@316|) (CoordinationSystem.Variables.mapadt |v'#0@@217|) (Lit |#CrashTolerantMap.TransitionLabel.CrashLabel|))) (=> (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@316|) (CoordinationSystem.Variables.mapadt |v'#0@@217|) (Lit |#CrashTolerantMap.TransitionLabel.CrashLabel|)) (CoordinationSystem.Variables.Variables_q |v'#0@@217|)))))))))) (= (CoordinationSystem.__default.Crash |v#0@@316| |v'#0@@217| |uiop#0@@57|)  (and (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@316|) (CoordinationSystem.Variables.WF |v'#0@@217|)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| |uiop#0@@57|)) (CrashTolerantJournal.__default.Next (CoordinationSystem.Variables.journal |v#0@@316|) (CoordinationSystem.Variables.journal |v'#0@@217|) (Lit |#CrashTolerantJournal.TransitionLabel.CrashLabel|))) (CrashTolerantMap.__default.Next (CoordinationSystem.Variables.mapadt |v#0@@316|) (CoordinationSystem.Variables.mapadt |v'#0@@217|) (Lit |#CrashTolerantMap.TransitionLabel.CrashLabel|))) (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v'#0@@217|))))))
 :qid |CoordinationSystemidfy.262:19|
 :skolemid |3780|
 :pattern ( (CoordinationSystem.__default.Crash |v#0@@316| |v'#0@@217| |uiop#0@@57|))
))))
(assert  (=> true (forall ((|v#0@@317| T@U) (|v'#0@@218| T@U) (|uiop#0@@58| T@U) ) (!  (=> (and (and (and (= (type |v#0@@317|) DatatypeTypeType) (= (type |v'#0@@218|) DatatypeTypeType)) (= (type |uiop#0@@58|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Crash#canCall| (Lit |v#0@@317|) (Lit |v'#0@@218|) (Lit |uiop#0@@58|)) (and (and ($Is |v#0@@317| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@218| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@58| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v#0@@317|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v#0@@317|))))) (and (|CoordinationSystem.Variables.WF#canCall| (Lit |v'#0@@218|)) (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.WF (Lit |v'#0@@218|))))) (=> (U_2_bool (Lit (bool_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| (Lit |uiop#0@@58|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@317|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@218|))) (|CrashTolerantJournal.__default.Next#canCall| (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@317|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@218|))) (Lit |#CrashTolerantJournal.TransitionLabel.CrashLabel|))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@317|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@218|))) (Lit |#CrashTolerantJournal.TransitionLabel.CrashLabel|))))) (and (and (and (CoordinationSystem.Variables.Variables_q (Lit |v#0@@317|)) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@218|))) (|CrashTolerantMap.__default.Next#canCall| (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@317|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@218|))) (Lit |#CrashTolerantMap.TransitionLabel.CrashLabel|))) (=> (U_2_bool (Lit (bool_2_U (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@317|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@218|))) (Lit |#CrashTolerantMap.TransitionLabel.CrashLabel|))))) (CoordinationSystem.Variables.Variables_q (Lit |v'#0@@218|))))))))))) (= (CoordinationSystem.__default.Crash (Lit |v#0@@317|) (Lit |v'#0@@218|) (Lit |uiop#0@@58|)) (U_2_bool (Lit (bool_2_U  (and (and (and (and (and (CoordinationSystem.Variables.WF (Lit |v#0@@317|)) (CoordinationSystem.Variables.WF (Lit |v'#0@@218|))) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| (Lit |uiop#0@@58|))) (CrashTolerantJournal.__default.Next (Lit (CoordinationSystem.Variables.journal (Lit |v#0@@317|))) (Lit (CoordinationSystem.Variables.journal (Lit |v'#0@@218|))) (Lit |#CrashTolerantJournal.TransitionLabel.CrashLabel|))) (CrashTolerantMap.__default.Next (Lit (CoordinationSystem.Variables.mapadt (Lit |v#0@@317|))) (Lit (CoordinationSystem.Variables.mapadt (Lit |v'#0@@218|))) (Lit |#CrashTolerantMap.TransitionLabel.CrashLabel|))) (CoordinationSystem.Ephemeral.Unknown_q (Lit (CoordinationSystem.Variables.ephemeral (Lit |v'#0@@218|)))))))))))
 :qid |CoordinationSystemidfy.262:19|
 :weight 3
 :skolemid |3781|
 :pattern ( (CoordinationSystem.__default.Crash (Lit |v#0@@317|) (Lit |v'#0@@218|) (Lit |uiop#0@@58|)))
))))
(assert  (=> true (forall ((|v#0@@318| T@U) ) (!  (=> (and (= (type |v#0@@318|) DatatypeTypeType) (or (|CoordinationSystem.__default.Init#canCall| |v#0@@318|) ($Is |v#0@@318| Tclass.CoordinationSystem.Variables))) true)
 :qid |CoordinationSystemidfy.274:18|
 :skolemid |3782|
 :pattern ( (CoordinationSystem.__default.Init |v#0@@318|))
))))
(assert (forall ((|v#0@@319| T@U) ) (!  (=> (and (= (type |v#0@@319|) DatatypeTypeType) ($Is |v#0@@319| Tclass.CoordinationSystem.Variables)) (= (|CoordinationSystem.__default.Init#requires| |v#0@@319|) true))
 :qid |CoordinationSystemidfy.274:18|
 :skolemid |3783|
 :pattern ( (|CoordinationSystem.__default.Init#requires| |v#0@@319|))
)))
(assert  (=> true (forall ((|v#0@@320| T@U) ) (!  (=> (and (= (type |v#0@@320|) DatatypeTypeType) (or (|CoordinationSystem.__default.Init#canCall| |v#0@@320|) ($Is |v#0@@320| Tclass.CoordinationSystem.Variables))) (and (|CoordinationSystem.Variables.Init#canCall| |v#0@@320|) (= (CoordinationSystem.__default.Init |v#0@@320|) (CoordinationSystem.Variables.Init |v#0@@320|))))
 :qid |CoordinationSystemidfy.274:18|
 :skolemid |3784|
 :pattern ( (CoordinationSystem.__default.Init |v#0@@320|))
))))
(assert  (=> true (forall ((|v#0@@321| T@U) ) (!  (=> (and (= (type |v#0@@321|) DatatypeTypeType) (or (|CoordinationSystem.__default.Init#canCall| (Lit |v#0@@321|)) ($Is |v#0@@321| Tclass.CoordinationSystem.Variables))) (and (|CoordinationSystem.Variables.Init#canCall| (Lit |v#0@@321|)) (= (CoordinationSystem.__default.Init (Lit |v#0@@321|)) (U_2_bool (Lit (bool_2_U (CoordinationSystem.Variables.Init (Lit |v#0@@321|))))))))
 :qid |CoordinationSystemidfy.274:18|
 :weight 3
 :skolemid |3785|
 :pattern ( (CoordinationSystem.__default.Init (Lit |v#0@@321|)))
))))
(assert  (=> true (forall ((|v#0@@322| T@U) (|v'#0@@219| T@U) (|uiop#0@@59| T@U) (|step#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@322|) DatatypeTypeType) (= (type |v'#0@@219|) DatatypeTypeType)) (= (type |uiop#0@@59|) DatatypeTypeType)) (= (type |step#0@@5|) DatatypeTypeType)) (or (|CoordinationSystem.__default.NextStep#canCall| |v#0@@322| |v'#0@@219| |uiop#0@@59| |step#0@@5|) (and (and (and ($Is |v#0@@322| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@219| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@59| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |step#0@@5| Tclass.CoordinationSystem.Step)))) true)
 :qid |CoordinationSystemidfy.293:22|
 :skolemid |3786|
 :pattern ( (CoordinationSystem.__default.NextStep |v#0@@322| |v'#0@@219| |uiop#0@@59| |step#0@@5|))
))))
(assert (forall ((|v#0@@323| T@U) (|v'#0@@220| T@U) (|uiop#0@@60| T@U) (|step#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@323|) DatatypeTypeType) (= (type |v'#0@@220|) DatatypeTypeType)) (= (type |uiop#0@@60|) DatatypeTypeType)) (= (type |step#0@@6|) DatatypeTypeType)) (and (and (and ($Is |v#0@@323| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@220| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@60| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |step#0@@6| Tclass.CoordinationSystem.Step))) (= (|CoordinationSystem.__default.NextStep#requires| |v#0@@323| |v'#0@@220| |uiop#0@@60| |step#0@@6|) true))
 :qid |CoordinationSystemidfy.293:22|
 :skolemid |3787|
 :pattern ( (|CoordinationSystem.__default.NextStep#requires| |v#0@@323| |v'#0@@220| |uiop#0@@60| |step#0@@6|))
)))
(assert  (=> true (forall ((|v#0@@324| T@U) (|v'#0@@221| T@U) (|uiop#0@@61| T@U) (|step#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@324|) DatatypeTypeType) (= (type |v'#0@@221|) DatatypeTypeType)) (= (type |uiop#0@@61|) DatatypeTypeType)) (= (type |step#0@@7|) DatatypeTypeType)) (or (|CoordinationSystem.__default.NextStep#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61| |step#0@@7|) (and (and (and ($Is |v#0@@324| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@221| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@61| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |step#0@@7| Tclass.CoordinationSystem.Step)))) (and (and (=> (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q |step#0@@7|) (|CoordinationSystem.__default.LoadEphemeralFromPersistent#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.RecoverStep_q |step#0@@7|) (let ((|records#1| (CoordinationSystem.Step.records |step#0@@7|)))
(|CoordinationSystem.__default.Recover#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61| |records#1|))) (=> (not (CoordinationSystem.Step.RecoverStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.AcceptRequestStep_q |step#0@@7|) (|CoordinationSystem.__default.AcceptRequest#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.AcceptRequestStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.QueryStep_q |step#0@@7|) (|CoordinationSystem.__default.Query#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.QueryStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.PutStep_q |step#0@@7|) (|CoordinationSystem.__default.Put#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.PutStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.DeliverReplyStep_q |step#0@@7|) (|CoordinationSystem.__default.DeliverReply#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.DeliverReplyStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.JournalInternalStep_q |step#0@@7|) (|CoordinationSystem.__default.JournalInternal#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.JournalInternalStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.MapInternalStep_q |step#0@@7|) (|CoordinationSystem.__default.MapInternal#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.MapInternalStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.ReqSyncStep_q |step#0@@7|) (|CoordinationSystem.__default.ReqSync#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.ReqSyncStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.ReplySyncStep_q |step#0@@7|) (|CoordinationSystem.__default.ReplySync#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.ReplySyncStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.CommitStartStep_q |step#0@@7|) (let ((|newBoundaryLsn#1| (CoordinationSystem.Step.newBoundaryLsn |step#0@@7|)))
(|CoordinationSystem.__default.CommitStart#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61| |newBoundaryLsn#1|))) (=> (not (CoordinationSystem.Step.CommitStartStep_q |step#0@@7|)) (and (=> (CoordinationSystem.Step.CommitCompleteStep_q |step#0@@7|) (|CoordinationSystem.__default.CommitComplete#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|)) (=> (not (CoordinationSystem.Step.CommitCompleteStep_q |step#0@@7|)) (|CoordinationSystem.__default.Crash#canCall| |v#0@@324| |v'#0@@221| |uiop#0@@61|))))))))))))))))))))))))) (= (CoordinationSystem.__default.NextStep |v#0@@324| |v'#0@@221| |uiop#0@@61| |step#0@@7|) (ite (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q |step#0@@7|) (CoordinationSystem.__default.LoadEphemeralFromPersistent |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.RecoverStep_q |step#0@@7|) (let ((|records#0@@3| (CoordinationSystem.Step.records |step#0@@7|)))
(CoordinationSystem.__default.Recover |v#0@@324| |v'#0@@221| |uiop#0@@61| |records#0@@3|)) (ite (CoordinationSystem.Step.AcceptRequestStep_q |step#0@@7|) (CoordinationSystem.__default.AcceptRequest |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.QueryStep_q |step#0@@7|) (CoordinationSystem.__default.Query |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.PutStep_q |step#0@@7|) (CoordinationSystem.__default.Put |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.DeliverReplyStep_q |step#0@@7|) (CoordinationSystem.__default.DeliverReply |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.JournalInternalStep_q |step#0@@7|) (CoordinationSystem.__default.JournalInternal |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.MapInternalStep_q |step#0@@7|) (CoordinationSystem.__default.MapInternal |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.ReqSyncStep_q |step#0@@7|) (CoordinationSystem.__default.ReqSync |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.ReplySyncStep_q |step#0@@7|) (CoordinationSystem.__default.ReplySync |v#0@@324| |v'#0@@221| |uiop#0@@61|) (ite (CoordinationSystem.Step.CommitStartStep_q |step#0@@7|) (let ((|newBoundaryLsn#0@@3| (CoordinationSystem.Step.newBoundaryLsn |step#0@@7|)))
(CoordinationSystem.__default.CommitStart |v#0@@324| |v'#0@@221| |uiop#0@@61| |newBoundaryLsn#0@@3|)) (ite (CoordinationSystem.Step.CommitCompleteStep_q |step#0@@7|) (CoordinationSystem.__default.CommitComplete |v#0@@324| |v'#0@@221| |uiop#0@@61|) (CoordinationSystem.__default.Crash |v#0@@324| |v'#0@@221| |uiop#0@@61|))))))))))))))))
 :qid |CoordinationSystemidfy.293:22|
 :skolemid |3788|
 :pattern ( (CoordinationSystem.__default.NextStep |v#0@@324| |v'#0@@221| |uiop#0@@61| |step#0@@7|))
))))
(assert  (=> true (forall ((|v#0@@325| T@U) (|v'#0@@222| T@U) (|uiop#0@@62| T@U) (|step#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@325|) DatatypeTypeType) (= (type |v'#0@@222|) DatatypeTypeType)) (= (type |uiop#0@@62|) DatatypeTypeType)) (= (type |step#0@@8|) DatatypeTypeType)) (or (|CoordinationSystem.__default.NextStep#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|) (Lit |step#0@@8|)) (and (and (and ($Is |v#0@@325| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@222| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@62| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) ($Is |step#0@@8| Tclass.CoordinationSystem.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.LoadEphemeralFromPersistent#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.RecoverStep_q (Lit |step#0@@8|))))) (let ((|records#3| (Lit (CoordinationSystem.Step.records (Lit |step#0@@8|)))))
(|CoordinationSystem.__default.Recover#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|) |records#3|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.RecoverStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.AcceptRequestStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.AcceptRequest#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.AcceptRequestStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.QueryStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.Query#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.QueryStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.PutStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.Put#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.PutStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.DeliverReplyStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.DeliverReply#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.DeliverReplyStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.JournalInternalStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.JournalInternal#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.JournalInternalStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.MapInternalStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.MapInternal#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.MapInternalStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.ReqSyncStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.ReqSync#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.ReqSyncStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.ReplySyncStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.ReplySync#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.ReplySyncStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.CommitStartStep_q (Lit |step#0@@8|))))) (let ((|newBoundaryLsn#3| (LitInt (CoordinationSystem.Step.newBoundaryLsn (Lit |step#0@@8|)))))
(|CoordinationSystem.__default.CommitStart#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|) |newBoundaryLsn#3|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.CommitStartStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.CommitCompleteStep_q (Lit |step#0@@8|))))) (|CoordinationSystem.__default.CommitComplete#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|))) (=> (not (U_2_bool (Lit (bool_2_U (CoordinationSystem.Step.CommitCompleteStep_q (Lit |step#0@@8|)))))) (|CoordinationSystem.__default.Crash#canCall| (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)))))))))))))))))))))))))) (= (CoordinationSystem.__default.NextStep (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|) (Lit |step#0@@8|)) (ite (CoordinationSystem.Step.LoadEphemeralFromPersistentStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.LoadEphemeralFromPersistent (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.RecoverStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|records#2| (Lit (CoordinationSystem.Step.records (Lit |step#0@@8|)))))
(Lit (bool_2_U (CoordinationSystem.__default.Recover (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|) |records#2|))))) (ite (CoordinationSystem.Step.AcceptRequestStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.AcceptRequest (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.QueryStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.Query (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.PutStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.Put (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.DeliverReplyStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.DeliverReply (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.JournalInternalStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.JournalInternal (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.MapInternalStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.MapInternal (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.ReqSyncStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.ReqSync (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.ReplySyncStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.ReplySync (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (ite (CoordinationSystem.Step.CommitStartStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|newBoundaryLsn#2| (LitInt (CoordinationSystem.Step.newBoundaryLsn (Lit |step#0@@8|)))))
(Lit (bool_2_U (CoordinationSystem.__default.CommitStart (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|) |newBoundaryLsn#2|))))) (ite (CoordinationSystem.Step.CommitCompleteStep_q (Lit |step#0@@8|)) (CoordinationSystem.__default.CommitComplete (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)) (CoordinationSystem.__default.Crash (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|)))))))))))))))))
 :qid |CoordinationSystemidfy.293:22|
 :weight 3
 :skolemid |3789|
 :pattern ( (CoordinationSystem.__default.NextStep (Lit |v#0@@325|) (Lit |v'#0@@222|) (Lit |uiop#0@@62|) (Lit |step#0@@8|)))
))))
(assert  (=> true (forall ((|v#0@@326| T@U) (|v'#0@@223| T@U) (|uiop#0@@63| T@U) ) (!  (=> (and (and (and (= (type |v#0@@326|) DatatypeTypeType) (= (type |v'#0@@223|) DatatypeTypeType)) (= (type |uiop#0@@63|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Next#canCall| |v#0@@326| |v'#0@@223| |uiop#0@@63|) (and (and ($Is |v#0@@326| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@223| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@63| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) true)
 :qid |CoordinationSystemidfy.311:18|
 :skolemid |3790|
 :pattern ( (CoordinationSystem.__default.Next |v#0@@326| |v'#0@@223| |uiop#0@@63|))
))))
(assert (forall ((|v#0@@327| T@U) (|v'#0@@224| T@U) (|uiop#0@@64| T@U) ) (!  (=> (and (and (and (= (type |v#0@@327|) DatatypeTypeType) (= (type |v'#0@@224|) DatatypeTypeType)) (= (type |uiop#0@@64|) DatatypeTypeType)) (and (and ($Is |v#0@@327| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@224| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@64| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))) (= (|CoordinationSystem.__default.Next#requires| |v#0@@327| |v'#0@@224| |uiop#0@@64|) true))
 :qid |CoordinationSystemidfy.311:18|
 :skolemid |3791|
 :pattern ( (|CoordinationSystem.__default.Next#requires| |v#0@@327| |v'#0@@224| |uiop#0@@64|))
)))
(assert  (=> true (forall ((|v#0@@328| T@U) (|v'#0@@225| T@U) (|uiop#0@@65| T@U) ) (!  (=> (and (and (and (= (type |v#0@@328|) DatatypeTypeType) (= (type |v'#0@@225|) DatatypeTypeType)) (= (type |uiop#0@@65|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Next#canCall| |v#0@@328| |v'#0@@225| |uiop#0@@65|) (and (and ($Is |v#0@@328| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@225| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@65| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (forall ((|step#0@@9| T@U) ) (!  (=> (and (= (type |step#0@@9|) DatatypeTypeType) ($Is |step#0@@9| Tclass.CoordinationSystem.Step)) (|CoordinationSystem.__default.NextStep#canCall| |v#0@@328| |v'#0@@225| |uiop#0@@65| |step#0@@9|))
 :qid |CoordinationSystemidfy.312:12|
 :skolemid |3793|
 :pattern ( (CoordinationSystem.__default.NextStep |v#0@@328| |v'#0@@225| |uiop#0@@65| |step#0@@9|))
)) (= (CoordinationSystem.__default.Next |v#0@@328| |v'#0@@225| |uiop#0@@65|) (exists ((|step#0@@10| T@U) ) (!  (and (= (type |step#0@@10|) DatatypeTypeType) (and ($Is |step#0@@10| Tclass.CoordinationSystem.Step) (CoordinationSystem.__default.NextStep |v#0@@328| |v'#0@@225| |uiop#0@@65| |step#0@@10|)))
 :qid |CoordinationSystemidfy.312:12|
 :skolemid |3792|
 :pattern ( (CoordinationSystem.__default.NextStep |v#0@@328| |v'#0@@225| |uiop#0@@65| |step#0@@10|))
)))))
 :qid |CoordinationSystemidfy.311:18|
 :skolemid |3794|
 :pattern ( (CoordinationSystem.__default.Next |v#0@@328| |v'#0@@225| |uiop#0@@65|))
))))
(assert  (=> true (forall ((|v#0@@329| T@U) (|v'#0@@226| T@U) (|uiop#0@@66| T@U) ) (!  (=> (and (and (and (= (type |v#0@@329|) DatatypeTypeType) (= (type |v'#0@@226|) DatatypeTypeType)) (= (type |uiop#0@@66|) DatatypeTypeType)) (or (|CoordinationSystem.__default.Next#canCall| (Lit |v#0@@329|) (Lit |v'#0@@226|) (Lit |uiop#0@@66|)) (and (and ($Is |v#0@@329| Tclass.CoordinationSystem.Variables) ($Is |v'#0@@226| Tclass.CoordinationSystem.Variables)) ($Is |uiop#0@@66| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)))) (and (forall ((|step#1@@1| T@U) ) (!  (=> (and (= (type |step#1@@1|) DatatypeTypeType) ($Is |step#1@@1| Tclass.CoordinationSystem.Step)) (|CoordinationSystem.__default.NextStep#canCall| (Lit |v#0@@329|) (Lit |v'#0@@226|) (Lit |uiop#0@@66|) |step#1@@1|))
 :qid |CoordinationSystemidfy.312:12|
 :skolemid |3796|
 :pattern ( (CoordinationSystem.__default.NextStep |v#0@@329| |v'#0@@226| |uiop#0@@66| |step#1@@1|))
)) (= (CoordinationSystem.__default.Next (Lit |v#0@@329|) (Lit |v'#0@@226|) (Lit |uiop#0@@66|)) (exists ((|step#1@@2| T@U) ) (!  (and (= (type |step#1@@2|) DatatypeTypeType) (and ($Is |step#1@@2| Tclass.CoordinationSystem.Step) (CoordinationSystem.__default.NextStep (Lit |v#0@@329|) (Lit |v'#0@@226|) (Lit |uiop#0@@66|) |step#1@@2|)))
 :qid |CoordinationSystemidfy.312:12|
 :skolemid |3795|
 :pattern ( (CoordinationSystem.__default.NextStep |v#0@@329| |v'#0@@226| |uiop#0@@66| |step#1@@2|))
)))))
 :qid |CoordinationSystemidfy.311:18|
 :weight 3
 :skolemid |3797|
 :pattern ( (CoordinationSystem.__default.Next (Lit |v#0@@329|) (Lit |v'#0@@226|) (Lit |uiop#0@@66|)))
))))
(assert (forall ((arg0@@608 T@U) (arg1@@285 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.Request.Request| arg0@@608 arg1@@285)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.Request.Request|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Request.Request| arg0@@608 arg1@@285))
)))
(assert (forall ((|a#0#0#0@@9| T@U) (|a#0#1#0@@5| T@U) ) (!  (=> (and (= (type |a#0#0#0@@9|) DatatypeTypeType) (= (type |a#0#1#0@@5|) BoxType)) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#0#0#0@@9| |a#0#1#0@@5|)) |##AsyncMod_6#MapSpecMod#.Request.Request|))
 :qid |Asyncsdfy.5:30|
 :skolemid |3798|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#0#0#0@@9| |a#0#1#0@@5|))
)))
(assert (forall ((d@@289 T@U) ) (!  (=> (= (type d@@289) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@289) (= (DatatypeCtorId d@@289) |##AsyncMod_6#MapSpecMod#.Request.Request|)))
 :qid |unknown.0:0|
 :skolemid |3799|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@289))
)))
(assert (forall ((d@@290 T@U) ) (!  (=> (and (= (type d@@290) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@290)) (exists ((|a#1#0#0@@9| T@U) (|a#1#1#0@@5| T@U) ) (!  (and (and (= (type |a#1#0#0@@9|) DatatypeTypeType) (= (type |a#1#1#0@@5|) BoxType)) (= d@@290 (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#1#0#0@@9| |a#1#1#0@@5|)))
 :qid |Asyncsdfy.5:30|
 :skolemid |3800|
 :no-pattern (type |a#1#0#0@@9|)
 :no-pattern (type |a#1#1#0@@5|)
 :no-pattern (U_2_int |a#1#0#0@@9|)
 :no-pattern (U_2_bool |a#1#0#0@@9|)
 :no-pattern (U_2_int |a#1#1#0@@5|)
 :no-pattern (U_2_bool |a#1#1#0@@5|)
)))
 :qid |unknown.0:0|
 :skolemid |3801|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@290))
)))
(assert (= (type |Tclass.AsyncMod_6#MapSpecMod#.Request|) TyType))
(assert (= (Tag |Tclass.AsyncMod_6#MapSpecMod#.Request|) |Tagclass.AsyncMod_6#MapSpecMod#.Request|))
(assert (= (TagFamily |Tclass.AsyncMod_6#MapSpecMod#.Request|) tytagFamily$Request))
(assert (forall ((bx@@179 T@U) ) (!  (=> (and (= (type bx@@179) BoxType) ($IsBox bx@@179 |Tclass.AsyncMod_6#MapSpecMod#.Request|)) (and (= ($Box ($Unbox DatatypeTypeType bx@@179)) bx@@179) ($Is ($Unbox DatatypeTypeType bx@@179) |Tclass.AsyncMod_6#MapSpecMod#.Request|)))
 :qid |unknown.0:0|
 :skolemid |3802|
 :pattern ( ($IsBox bx@@179 |Tclass.AsyncMod_6#MapSpecMod#.Request|))
)))
(assert (= (type |#$ID|) TyType))
(assert (forall ((|a#2#0#0@@9| T@U) (|a#2#1#0@@5| T@U) ) (!  (=> (and (= (type |a#2#0#0@@9|) DatatypeTypeType) (= (type |a#2#1#0@@5|) BoxType)) (= ($Is (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#2#0#0@@9| |a#2#1#0@@5|) |Tclass.AsyncMod_6#MapSpecMod#.Request|)  (and ($Is |a#2#0#0@@9| Tclass.MapSpecMod.Input) ($IsBox |a#2#1#0@@5| |#$ID|))))
 :qid |Asyncsdfy.5:30|
 :skolemid |3803|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#2#0#0@@9| |a#2#1#0@@5|) |Tclass.AsyncMod_6#MapSpecMod#.Request|))
)))
(assert (forall ((|a#3#0#0@@9| T@U) (|a#3#1#0@@5| T@U) ($h@@232 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@9|) DatatypeTypeType) (= (type |a#3#1#0@@5|) BoxType)) (= (type $h@@232) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@232)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#3#0#0@@9| |a#3#1#0@@5|) |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@232)  (and ($IsAlloc |a#3#0#0@@9| Tclass.MapSpecMod.Input $h@@232) ($IsAllocBox |a#3#1#0@@5| |#$ID| $h@@232))))
 :qid |Asyncsdfy.5:30|
 :skolemid |3804|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#3#0#0@@9| |a#3#1#0@@5|) |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@232))
)))
(assert (forall ((d@@291 T@U) ($h@@233 T@U) ) (!  (=> (and (and (= (type d@@291) DatatypeTypeType) (= (type $h@@233) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@233) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@291) ($IsAlloc d@@291 |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@233)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.Request.input| d@@291) Tclass.MapSpecMod.Input $h@@233))
 :qid |unknown.0:0|
 :skolemid |3805|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.Request.input| d@@291) Tclass.MapSpecMod.Input $h@@233))
)))
(assert (forall ((d@@292 T@U) ($h@@234 T@U) ) (!  (=> (and (and (= (type d@@292) DatatypeTypeType) (= (type $h@@234) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@234) (and (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@292) ($IsAlloc d@@292 |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@234)))) ($IsAllocBox (|AsyncMod_6#MapSpecMod#.Request.id| d@@292) |#$ID| $h@@234))
 :qid |unknown.0:0|
 :skolemid |3806|
 :pattern ( ($IsAllocBox (|AsyncMod_6#MapSpecMod#.Request.id| d@@292) |#$ID| $h@@234))
)))
(assert (forall ((|a#4#0#0@@9| T@U) (|a#4#1#0@@5| T@U) ) (!  (=> (and (= (type |a#4#0#0@@9|) DatatypeTypeType) (= (type |a#4#1#0@@5|) BoxType)) (= (|#AsyncMod_6#MapSpecMod#.Request.Request| (Lit |a#4#0#0@@9|) (Lit |a#4#1#0@@5|)) (Lit (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#4#0#0@@9| |a#4#1#0@@5|))))
 :qid |Asyncsdfy.5:30|
 :skolemid |3807|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Request.Request| (Lit |a#4#0#0@@9|) (Lit |a#4#1#0@@5|)))
)))
(assert (forall ((|a#5#0#0@@15| T@U) (|a#5#1#0@@7| T@U) ) (!  (=> (and (= (type |a#5#0#0@@15|) DatatypeTypeType) (= (type |a#5#1#0@@7|) BoxType)) (= (|AsyncMod_6#MapSpecMod#.Request.input| (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#5#0#0@@15| |a#5#1#0@@7|)) |a#5#0#0@@15|))
 :qid |Asyncsdfy.5:30|
 :skolemid |3808|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#5#0#0@@15| |a#5#1#0@@7|))
)))
(assert (forall ((|a#6#0#0@@15| T@U) (|a#6#1#0@@8| T@U) ) (!  (=> (and (= (type |a#6#0#0@@15|) DatatypeTypeType) (= (type |a#6#1#0@@8|) BoxType)) (< (DtRank |a#6#0#0@@15|) (DtRank (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#6#0#0@@15| |a#6#1#0@@8|))))
 :qid |Asyncsdfy.5:30|
 :skolemid |3809|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#6#0#0@@15| |a#6#1#0@@8|))
)))
(assert (forall ((|a#7#0#0@@15| T@U) (|a#7#1#0@@8| T@U) ) (!  (=> (and (= (type |a#7#0#0@@15|) DatatypeTypeType) (= (type |a#7#1#0@@8|) BoxType)) (= (|AsyncMod_6#MapSpecMod#.Request.id| (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#7#0#0@@15| |a#7#1#0@@8|)) |a#7#1#0@@8|))
 :qid |Asyncsdfy.5:30|
 :skolemid |3810|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#7#0#0@@15| |a#7#1#0@@8|))
)))
(assert (forall ((|a#8#0#0@@14| T@U) (|a#8#1#0@@6| T@U) ) (!  (=> (and (= (type |a#8#0#0@@14|) DatatypeTypeType) (= (type |a#8#1#0@@6|) BoxType)) (< (BoxRank |a#8#1#0@@6|) (DtRank (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#8#0#0@@14| |a#8#1#0@@6|))))
 :qid |Asyncsdfy.5:30|
 :skolemid |3811|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Request.Request| |a#8#0#0@@14| |a#8#1#0@@6|))
)))
(assert (forall ((d@@293 T@U) ) (!  (=> (and (= (type d@@293) DatatypeTypeType) (|$IsA#AsyncMod_6#MapSpecMod#.Request| d@@293)) (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@293))
 :qid |unknown.0:0|
 :skolemid |3812|
 :pattern ( (|$IsA#AsyncMod_6#MapSpecMod#.Request| d@@293))
)))
(assert (forall ((d@@294 T@U) ) (!  (=> (and (= (type d@@294) DatatypeTypeType) ($Is d@@294 |Tclass.AsyncMod_6#MapSpecMod#.Request|)) (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@294))
 :qid |unknown.0:0|
 :skolemid |3813|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Request.Request_q| d@@294) ($Is d@@294 |Tclass.AsyncMod_6#MapSpecMod#.Request|))
)))
(assert (forall ((a@@221 T@U) (b@@171 T@U) ) (!  (=> (and (and (= (type a@@221) DatatypeTypeType) (= (type b@@171) DatatypeTypeType)) true) (= (|AsyncMod_6#MapSpecMod#.Request#Equal| a@@221 b@@171)  (and (|MapSpecMod.Input#Equal| (|AsyncMod_6#MapSpecMod#.Request.input| a@@221) (|AsyncMod_6#MapSpecMod#.Request.input| b@@171)) (= (|AsyncMod_6#MapSpecMod#.Request.id| a@@221) (|AsyncMod_6#MapSpecMod#.Request.id| b@@171)))))
 :qid |unknown.0:0|
 :skolemid |3814|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Request#Equal| a@@221 b@@171))
)))
(assert (forall ((a@@222 T@U) (b@@172 T@U) ) (!  (=> (and (= (type a@@222) DatatypeTypeType) (= (type b@@172) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.Request#Equal| a@@222 b@@172) (= a@@222 b@@172)))
 :qid |unknown.0:0|
 :skolemid |3815|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Request#Equal| a@@222 b@@172))
)))
(assert (forall ((arg0@@609 T@U) (arg1@@286 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.Reply.Reply| arg0@@609 arg1@@286)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.Reply.Reply|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Reply.Reply| arg0@@609 arg1@@286))
)))
(assert (forall ((|a#9#0#0@@12| T@U) (|a#9#1#0@@4| T@U) ) (!  (=> (and (= (type |a#9#0#0@@12|) DatatypeTypeType) (= (type |a#9#1#0@@4|) BoxType)) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#9#0#0@@12| |a#9#1#0@@4|)) |##AsyncMod_6#MapSpecMod#.Reply.Reply|))
 :qid |Asyncsdfy.6:26|
 :skolemid |3816|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#9#0#0@@12| |a#9#1#0@@4|))
)))
(assert (forall ((d@@295 T@U) ) (!  (=> (= (type d@@295) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@295) (= (DatatypeCtorId d@@295) |##AsyncMod_6#MapSpecMod#.Reply.Reply|)))
 :qid |unknown.0:0|
 :skolemid |3817|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@295))
)))
(assert (forall ((d@@296 T@U) ) (!  (=> (and (= (type d@@296) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@296)) (exists ((|a#10#0#0@@12| T@U) (|a#10#1#0@@4| T@U) ) (!  (and (and (= (type |a#10#0#0@@12|) DatatypeTypeType) (= (type |a#10#1#0@@4|) BoxType)) (= d@@296 (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#10#0#0@@12| |a#10#1#0@@4|)))
 :qid |Asyncsdfy.6:26|
 :skolemid |3818|
 :no-pattern (type |a#10#0#0@@12|)
 :no-pattern (type |a#10#1#0@@4|)
 :no-pattern (U_2_int |a#10#0#0@@12|)
 :no-pattern (U_2_bool |a#10#0#0@@12|)
 :no-pattern (U_2_int |a#10#1#0@@4|)
 :no-pattern (U_2_bool |a#10#1#0@@4|)
)))
 :qid |unknown.0:0|
 :skolemid |3819|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@296))
)))
(assert (= (type |Tclass.AsyncMod_6#MapSpecMod#.Reply|) TyType))
(assert (= (Tag |Tclass.AsyncMod_6#MapSpecMod#.Reply|) |Tagclass.AsyncMod_6#MapSpecMod#.Reply|))
(assert (= (TagFamily |Tclass.AsyncMod_6#MapSpecMod#.Reply|) tytagFamily$Reply))
(assert (forall ((bx@@180 T@U) ) (!  (=> (and (= (type bx@@180) BoxType) ($IsBox bx@@180 |Tclass.AsyncMod_6#MapSpecMod#.Reply|)) (and (= ($Box ($Unbox DatatypeTypeType bx@@180)) bx@@180) ($Is ($Unbox DatatypeTypeType bx@@180) |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))
 :qid |unknown.0:0|
 :skolemid |3820|
 :pattern ( ($IsBox bx@@180 |Tclass.AsyncMod_6#MapSpecMod#.Reply|))
)))
(assert (forall ((|a#11#0#0@@11| T@U) (|a#11#1#0@@3| T@U) ) (!  (=> (and (= (type |a#11#0#0@@11|) DatatypeTypeType) (= (type |a#11#1#0@@3|) BoxType)) (= ($Is (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#11#0#0@@11| |a#11#1#0@@3|) |Tclass.AsyncMod_6#MapSpecMod#.Reply|)  (and ($Is |a#11#0#0@@11| Tclass.MapSpecMod.Output) ($IsBox |a#11#1#0@@3| |#$ID|))))
 :qid |Asyncsdfy.6:26|
 :skolemid |3821|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#11#0#0@@11| |a#11#1#0@@3|) |Tclass.AsyncMod_6#MapSpecMod#.Reply|))
)))
(assert (forall ((|a#12#0#0@@9| T@U) (|a#12#1#0@@4| T@U) ($h@@235 T@U) ) (!  (=> (and (and (and (= (type |a#12#0#0@@9|) DatatypeTypeType) (= (type |a#12#1#0@@4|) BoxType)) (= (type $h@@235) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@235)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#12#0#0@@9| |a#12#1#0@@4|) |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@235)  (and ($IsAlloc |a#12#0#0@@9| Tclass.MapSpecMod.Output $h@@235) ($IsAllocBox |a#12#1#0@@4| |#$ID| $h@@235))))
 :qid |Asyncsdfy.6:26|
 :skolemid |3822|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#12#0#0@@9| |a#12#1#0@@4|) |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@235))
)))
(assert (forall ((d@@297 T@U) ($h@@236 T@U) ) (!  (=> (and (and (= (type d@@297) DatatypeTypeType) (= (type $h@@236) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@236) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@297) ($IsAlloc d@@297 |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@236)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.Reply.output| d@@297) Tclass.MapSpecMod.Output $h@@236))
 :qid |unknown.0:0|
 :skolemid |3823|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.Reply.output| d@@297) Tclass.MapSpecMod.Output $h@@236))
)))
(assert (forall ((d@@298 T@U) ($h@@237 T@U) ) (!  (=> (and (and (= (type d@@298) DatatypeTypeType) (= (type $h@@237) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@237) (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@298) ($IsAlloc d@@298 |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@237)))) ($IsAllocBox (|AsyncMod_6#MapSpecMod#.Reply.id| d@@298) |#$ID| $h@@237))
 :qid |unknown.0:0|
 :skolemid |3824|
 :pattern ( ($IsAllocBox (|AsyncMod_6#MapSpecMod#.Reply.id| d@@298) |#$ID| $h@@237))
)))
(assert (forall ((|a#13#0#0@@7| T@U) (|a#13#1#0@@4| T@U) ) (!  (=> (and (= (type |a#13#0#0@@7|) DatatypeTypeType) (= (type |a#13#1#0@@4|) BoxType)) (= (|#AsyncMod_6#MapSpecMod#.Reply.Reply| (Lit |a#13#0#0@@7|) (Lit |a#13#1#0@@4|)) (Lit (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#13#0#0@@7| |a#13#1#0@@4|))))
 :qid |Asyncsdfy.6:26|
 :skolemid |3825|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Reply.Reply| (Lit |a#13#0#0@@7|) (Lit |a#13#1#0@@4|)))
)))
(assert (forall ((|a#14#0#0@@8| T@U) (|a#14#1#0@@5| T@U) ) (!  (=> (and (= (type |a#14#0#0@@8|) DatatypeTypeType) (= (type |a#14#1#0@@5|) BoxType)) (= (|AsyncMod_6#MapSpecMod#.Reply.output| (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#14#0#0@@8| |a#14#1#0@@5|)) |a#14#0#0@@8|))
 :qid |Asyncsdfy.6:26|
 :skolemid |3826|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#14#0#0@@8| |a#14#1#0@@5|))
)))
(assert (forall ((|a#15#0#0@@9| T@U) (|a#15#1#0@@5| T@U) ) (!  (=> (and (= (type |a#15#0#0@@9|) DatatypeTypeType) (= (type |a#15#1#0@@5|) BoxType)) (< (DtRank |a#15#0#0@@9|) (DtRank (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#15#0#0@@9| |a#15#1#0@@5|))))
 :qid |Asyncsdfy.6:26|
 :skolemid |3827|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#15#0#0@@9| |a#15#1#0@@5|))
)))
(assert (forall ((|a#16#0#0@@9| T@U) (|a#16#1#0@@5| T@U) ) (!  (=> (and (= (type |a#16#0#0@@9|) DatatypeTypeType) (= (type |a#16#1#0@@5|) BoxType)) (= (|AsyncMod_6#MapSpecMod#.Reply.id| (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#16#0#0@@9| |a#16#1#0@@5|)) |a#16#1#0@@5|))
 :qid |Asyncsdfy.6:26|
 :skolemid |3828|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#16#0#0@@9| |a#16#1#0@@5|))
)))
(assert (forall ((|a#17#0#0@@8| T@U) (|a#17#1#0@@4| T@U) ) (!  (=> (and (= (type |a#17#0#0@@8|) DatatypeTypeType) (= (type |a#17#1#0@@4|) BoxType)) (< (BoxRank |a#17#1#0@@4|) (DtRank (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#17#0#0@@8| |a#17#1#0@@4|))))
 :qid |Asyncsdfy.6:26|
 :skolemid |3829|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Reply.Reply| |a#17#0#0@@8| |a#17#1#0@@4|))
)))
(assert (forall ((d@@299 T@U) ) (!  (=> (and (= (type d@@299) DatatypeTypeType) (|$IsA#AsyncMod_6#MapSpecMod#.Reply| d@@299)) (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@299))
 :qid |unknown.0:0|
 :skolemid |3830|
 :pattern ( (|$IsA#AsyncMod_6#MapSpecMod#.Reply| d@@299))
)))
(assert (forall ((d@@300 T@U) ) (!  (=> (and (= (type d@@300) DatatypeTypeType) ($Is d@@300 |Tclass.AsyncMod_6#MapSpecMod#.Reply|)) (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@300))
 :qid |unknown.0:0|
 :skolemid |3831|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| d@@300) ($Is d@@300 |Tclass.AsyncMod_6#MapSpecMod#.Reply|))
)))
(assert (forall ((a@@223 T@U) (b@@173 T@U) ) (!  (=> (and (and (= (type a@@223) DatatypeTypeType) (= (type b@@173) DatatypeTypeType)) true) (= (|AsyncMod_6#MapSpecMod#.Reply#Equal| a@@223 b@@173)  (and (|MapSpecMod.Output#Equal| (|AsyncMod_6#MapSpecMod#.Reply.output| a@@223) (|AsyncMod_6#MapSpecMod#.Reply.output| b@@173)) (= (|AsyncMod_6#MapSpecMod#.Reply.id| a@@223) (|AsyncMod_6#MapSpecMod#.Reply.id| b@@173)))))
 :qid |unknown.0:0|
 :skolemid |3832|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Reply#Equal| a@@223 b@@173))
)))
(assert (forall ((a@@224 T@U) (b@@174 T@U) ) (!  (=> (and (= (type a@@224) DatatypeTypeType) (= (type b@@174) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.Reply#Equal| a@@224 b@@174) (= a@@224 b@@174)))
 :qid |unknown.0:0|
 :skolemid |3833|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Reply#Equal| a@@224 b@@174))
)))
(assert (forall ((|a#18#0#0@@8| T@U) ) (!  (=> (= (type |a#18#0#0@@8|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#18#0#0@@8|)) |##AsyncMod_6#MapSpecMod#.PersistentState.PersistentState|))
 :qid |Asyncsdfy.8:46|
 :skolemid |3834|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#18#0#0@@8|))
)))
(assert (forall ((d@@301 T@U) ) (!  (=> (= (type d@@301) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@301) (= (DatatypeCtorId d@@301) |##AsyncMod_6#MapSpecMod#.PersistentState.PersistentState|)))
 :qid |unknown.0:0|
 :skolemid |3835|
 :pattern ( (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@301))
)))
(assert (forall ((d@@302 T@U) ) (!  (=> (and (= (type d@@302) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@302)) (exists ((|a#19#0#0@@8| T@U) ) (!  (and (= (type |a#19#0#0@@8|) DatatypeTypeType) (= d@@302 (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#19#0#0@@8|)))
 :qid |Asyncsdfy.8:46|
 :skolemid |3836|
 :no-pattern (type |a#19#0#0@@8|)
 :no-pattern (U_2_int |a#19#0#0@@8|)
 :no-pattern (U_2_bool |a#19#0#0@@8|)
)))
 :qid |unknown.0:0|
 :skolemid |3837|
 :pattern ( (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@302))
)))
(assert (forall ((|a#20#0#0@@8| T@U) ) (!  (=> (= (type |a#20#0#0@@8|) DatatypeTypeType) (= ($Is (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#20#0#0@@8|) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) ($Is |a#20#0#0@@8| Tclass.MapSpecMod.Variables)))
 :qid |Asyncsdfy.8:46|
 :skolemid |3838|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#20#0#0@@8|) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))
)))
(assert (forall ((|a#21#0#0@@7| T@U) ($h@@238 T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@7|) DatatypeTypeType) (= (type $h@@238) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@238)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#21#0#0@@7|) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| $h@@238) ($IsAlloc |a#21#0#0@@7| Tclass.MapSpecMod.Variables $h@@238)))
 :qid |Asyncsdfy.8:46|
 :skolemid |3839|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#21#0#0@@7|) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| $h@@238))
)))
(assert (forall ((arg0@@610 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.PersistentState.appv| arg0@@610)) DatatypeTypeType)
 :qid |funType:AsyncMod_6#MapSpecMod#.PersistentState.appv|
 :pattern ( (|AsyncMod_6#MapSpecMod#.PersistentState.appv| arg0@@610))
)))
(assert (forall ((d@@303 T@U) ($h@@239 T@U) ) (!  (=> (and (and (= (type d@@303) DatatypeTypeType) (= (type $h@@239) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@239) (and (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@303) ($IsAlloc d@@303 |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| $h@@239)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.PersistentState.appv| d@@303) Tclass.MapSpecMod.Variables $h@@239))
 :qid |unknown.0:0|
 :skolemid |3840|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.PersistentState.appv| d@@303) Tclass.MapSpecMod.Variables $h@@239))
)))
(assert (forall ((|a#22#0#0@@6| T@U) ) (!  (=> (= (type |a#22#0#0@@6|) DatatypeTypeType) (= (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| (Lit |a#22#0#0@@6|)) (Lit (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#22#0#0@@6|))))
 :qid |Asyncsdfy.8:46|
 :skolemid |3841|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| (Lit |a#22#0#0@@6|)))
)))
(assert (forall ((|a#23#0#0@@4| T@U) ) (!  (=> (= (type |a#23#0#0@@4|) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#23#0#0@@4|)) |a#23#0#0@@4|))
 :qid |Asyncsdfy.8:46|
 :skolemid |3842|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#23#0#0@@4|))
)))
(assert (forall ((|a#24#0#0@@3| T@U) ) (!  (=> (= (type |a#24#0#0@@3|) DatatypeTypeType) (< (DtRank |a#24#0#0@@3|) (DtRank (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#24#0#0@@3|))))
 :qid |Asyncsdfy.8:46|
 :skolemid |3843|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| |a#24#0#0@@3|))
)))
(assert (forall ((d@@304 T@U) ) (!  (=> (and (= (type d@@304) DatatypeTypeType) (|$IsA#AsyncMod_6#MapSpecMod#.PersistentState| d@@304)) (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@304))
 :qid |unknown.0:0|
 :skolemid |3844|
 :pattern ( (|$IsA#AsyncMod_6#MapSpecMod#.PersistentState| d@@304))
)))
(assert (forall ((d@@305 T@U) ) (!  (=> (and (= (type d@@305) DatatypeTypeType) ($Is d@@305 |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|)) (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@305))
 :qid |unknown.0:0|
 :skolemid |3845|
 :pattern ( (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| d@@305) ($Is d@@305 |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))
)))
(assert (forall ((a@@225 T@U) (b@@175 T@U) ) (!  (=> (and (and (= (type a@@225) DatatypeTypeType) (= (type b@@175) DatatypeTypeType)) true) (= (|AsyncMod_6#MapSpecMod#.PersistentState#Equal| a@@225 b@@175) (|MapSpecMod.Variables#Equal| (|AsyncMod_6#MapSpecMod#.PersistentState.appv| a@@225) (|AsyncMod_6#MapSpecMod#.PersistentState.appv| b@@175))))
 :qid |unknown.0:0|
 :skolemid |3846|
 :pattern ( (|AsyncMod_6#MapSpecMod#.PersistentState#Equal| a@@225 b@@175))
)))
(assert (forall ((a@@226 T@U) (b@@176 T@U) ) (!  (=> (and (= (type a@@226) DatatypeTypeType) (= (type b@@176) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.PersistentState#Equal| a@@226 b@@176) (= a@@226 b@@176)))
 :qid |unknown.0:0|
 :skolemid |3847|
 :pattern ( (|AsyncMod_6#MapSpecMod#.PersistentState#Equal| a@@226 b@@176))
)))
(assert (forall ((|a#25#0#0@@2| T@U) (|a#25#1#0@@0| T@U) ) (!  (=> (and (= (type |a#25#0#0@@2|) (MapType0Type BoxType boolType)) (= (type |a#25#1#0@@0|) (MapType0Type BoxType boolType))) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#25#0#0@@2| |a#25#1#0@@0|)) |##AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState|))
 :qid |Asyncsdfy.14:44|
 :skolemid |3848|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#25#0#0@@2| |a#25#1#0@@0|))
)))
(assert (forall ((d@@306 T@U) ) (!  (=> (= (type d@@306) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@306) (= (DatatypeCtorId d@@306) |##AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState|)))
 :qid |unknown.0:0|
 :skolemid |3849|
 :pattern ( (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@306))
)))
(assert (forall ((d@@307 T@U) ) (!  (=> (and (= (type d@@307) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@307)) (exists ((|a#26#0#0@@3| T@U) (|a#26#1#0@@0| T@U) ) (!  (and (and (= (type |a#26#0#0@@3|) (MapType0Type BoxType boolType)) (= (type |a#26#1#0@@0|) (MapType0Type BoxType boolType))) (= d@@307 (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#26#0#0@@3| |a#26#1#0@@0|)))
 :qid |Asyncsdfy.14:44|
 :skolemid |3850|
 :no-pattern (type |a#26#0#0@@3|)
 :no-pattern (type |a#26#1#0@@0|)
 :no-pattern (U_2_int |a#26#0#0@@3|)
 :no-pattern (U_2_bool |a#26#0#0@@3|)
 :no-pattern (U_2_int |a#26#1#0@@0|)
 :no-pattern (U_2_bool |a#26#1#0@@0|)
)))
 :qid |unknown.0:0|
 :skolemid |3851|
 :pattern ( (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@307))
)))
(assert (forall ((|a#27#0#0@@2| T@U) (|a#27#1#0@@0| T@U) ) (!  (=> (and (= (type |a#27#0#0@@2|) (MapType0Type BoxType boolType)) (= (type |a#27#1#0@@0|) (MapType0Type BoxType boolType))) (= ($Is (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#27#0#0@@2| |a#27#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|)  (and ($Is |a#27#0#0@@2| (TSet |Tclass.AsyncMod_6#MapSpecMod#.Request|)) ($Is |a#27#1#0@@0| (TSet |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))))
 :qid |Asyncsdfy.14:44|
 :skolemid |3852|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#27#0#0@@2| |a#27#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|))
)))
(assert (forall ((|a#28#0#0@@1| T@U) (|a#28#1#0@@0| T@U) ($h@@240 T@U) ) (!  (=> (and (and (and (= (type |a#28#0#0@@1|) (MapType0Type BoxType boolType)) (= (type |a#28#1#0@@0|) (MapType0Type BoxType boolType))) (= (type $h@@240) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@240)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#28#0#0@@1| |a#28#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@240)  (and ($IsAlloc |a#28#0#0@@1| (TSet |Tclass.AsyncMod_6#MapSpecMod#.Request|) $h@@240) ($IsAlloc |a#28#1#0@@0| (TSet |Tclass.AsyncMod_6#MapSpecMod#.Reply|) $h@@240))))
 :qid |Asyncsdfy.14:44|
 :skolemid |3853|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#28#0#0@@1| |a#28#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@240))
)))
(assert (forall ((d@@308 T@U) ($h@@241 T@U) ) (!  (=> (and (and (= (type d@@308) DatatypeTypeType) (= (type $h@@241) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@241) (and (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@308) ($IsAlloc d@@308 |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@241)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| d@@308) (TSet |Tclass.AsyncMod_6#MapSpecMod#.Request|) $h@@241))
 :qid |unknown.0:0|
 :skolemid |3854|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| d@@308) (TSet |Tclass.AsyncMod_6#MapSpecMod#.Request|) $h@@241))
)))
(assert (forall ((d@@309 T@U) ($h@@242 T@U) ) (!  (=> (and (and (= (type d@@309) DatatypeTypeType) (= (type $h@@242) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@242) (and (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@309) ($IsAlloc d@@309 |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@242)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| d@@309) (TSet |Tclass.AsyncMod_6#MapSpecMod#.Reply|) $h@@242))
 :qid |unknown.0:0|
 :skolemid |3855|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| d@@309) (TSet |Tclass.AsyncMod_6#MapSpecMod#.Reply|) $h@@242))
)))
(assert (forall ((|a#29#0#0@@1| T@U) (|a#29#1#0@@0| T@U) ) (!  (=> (and (= (type |a#29#0#0@@1|) (MapType0Type BoxType boolType)) (= (type |a#29#1#0@@0|) (MapType0Type BoxType boolType))) (= (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit |a#29#0#0@@1|) (Lit |a#29#1#0@@0|)) (Lit (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#29#0#0@@1| |a#29#1#0@@0|))))
 :qid |Asyncsdfy.14:44|
 :skolemid |3856|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit |a#29#0#0@@1|) (Lit |a#29#1#0@@0|)))
)))
(assert (forall ((|a#30#0#0@@2| T@U) (|a#30#1#0@@0| T@U) ) (!  (=> (and (= (type |a#30#0#0@@2|) (MapType0Type BoxType boolType)) (= (type |a#30#1#0@@0|) (MapType0Type BoxType boolType))) (= (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#30#0#0@@2| |a#30#1#0@@0|)) |a#30#0#0@@2|))
 :qid |Asyncsdfy.14:44|
 :skolemid |3857|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#30#0#0@@2| |a#30#1#0@@0|))
)))
(assert (forall ((|a#31#0#0@@2| T@U) (|a#31#1#0@@0| T@U) (d@@310 T@U) ) (!  (=> (and (and (and (= (type |a#31#0#0@@2|) (MapType0Type BoxType boolType)) (= (type |a#31#1#0@@0|) (MapType0Type BoxType boolType))) (= (type d@@310) DatatypeTypeType)) (U_2_bool (MapType0Select |a#31#0#0@@2| ($Box d@@310)))) (< (DtRank d@@310) (DtRank (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#31#0#0@@2| |a#31#1#0@@0|))))
 :qid |Asyncsdfy.14:44|
 :skolemid |3858|
 :pattern ( (MapType0Select |a#31#0#0@@2| ($Box d@@310)) (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#31#0#0@@2| |a#31#1#0@@0|))
)))
(assert (forall ((|a#32#0#0@@1| T@U) (|a#32#1#0@@0| T@U) ) (!  (=> (and (= (type |a#32#0#0@@1|) (MapType0Type BoxType boolType)) (= (type |a#32#1#0@@0|) (MapType0Type BoxType boolType))) (= (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#32#0#0@@1| |a#32#1#0@@0|)) |a#32#1#0@@0|))
 :qid |Asyncsdfy.14:44|
 :skolemid |3859|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#32#0#0@@1| |a#32#1#0@@0|))
)))
(assert (forall ((|a#33#0#0@@2| T@U) (|a#33#1#0@@0| T@U) (d@@311 T@U) ) (!  (=> (and (and (and (= (type |a#33#0#0@@2|) (MapType0Type BoxType boolType)) (= (type |a#33#1#0@@0|) (MapType0Type BoxType boolType))) (= (type d@@311) DatatypeTypeType)) (U_2_bool (MapType0Select |a#33#1#0@@0| ($Box d@@311)))) (< (DtRank d@@311) (DtRank (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#33#0#0@@2| |a#33#1#0@@0|))))
 :qid |Asyncsdfy.14:44|
 :skolemid |3860|
 :pattern ( (MapType0Select |a#33#1#0@@0| ($Box d@@311)) (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |a#33#0#0@@2| |a#33#1#0@@0|))
)))
(assert (forall ((d@@312 T@U) ) (!  (=> (and (= (type d@@312) DatatypeTypeType) (|$IsA#AsyncMod_6#MapSpecMod#.EphemeralState| d@@312)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@312))
 :qid |unknown.0:0|
 :skolemid |3861|
 :pattern ( (|$IsA#AsyncMod_6#MapSpecMod#.EphemeralState| d@@312))
)))
(assert (forall ((d@@313 T@U) ) (!  (=> (and (= (type d@@313) DatatypeTypeType) ($Is d@@313 |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@313))
 :qid |unknown.0:0|
 :skolemid |3862|
 :pattern ( (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| d@@313) ($Is d@@313 |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|))
)))
(assert (forall ((a@@227 T@U) (b@@177 T@U) ) (!  (=> (and (and (= (type a@@227) DatatypeTypeType) (= (type b@@177) DatatypeTypeType)) true) (= (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| a@@227 b@@177)  (and (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| a@@227) (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| b@@177)) (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| a@@227) (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| b@@177)))))
 :qid |unknown.0:0|
 :skolemid |3863|
 :pattern ( (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| a@@227 b@@177))
)))
(assert (forall ((a@@228 T@U) (b@@178 T@U) ) (!  (=> (and (= (type a@@228) DatatypeTypeType) (= (type b@@178) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| a@@228 b@@178) (= a@@228 b@@178)))
 :qid |unknown.0:0|
 :skolemid |3864|
 :pattern ( (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| a@@228 b@@178))
)))
(assert (forall ((|a#34#0#0@@2| T@U) (|a#34#1#0| T@U) ) (!  (=> (and (= (type |a#34#0#0@@2|) DatatypeTypeType) (= (type |a#34#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#34#0#0@@2| |a#34#1#0|)) |##AsyncMod_6#MapSpecMod#.Variables.Variables|))
 :qid |Asyncsdfy.16:34|
 :skolemid |3865|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#34#0#0@@2| |a#34#1#0|))
)))
(assert (forall ((d@@314 T@U) ) (!  (=> (= (type d@@314) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@314) (= (DatatypeCtorId d@@314) |##AsyncMod_6#MapSpecMod#.Variables.Variables|)))
 :qid |unknown.0:0|
 :skolemid |3866|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@314))
)))
(assert (forall ((d@@315 T@U) ) (!  (=> (and (= (type d@@315) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@315)) (exists ((|a#35#0#0@@2| T@U) (|a#35#1#0| T@U) ) (!  (and (and (= (type |a#35#0#0@@2|) DatatypeTypeType) (= (type |a#35#1#0|) DatatypeTypeType)) (= d@@315 (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#35#0#0@@2| |a#35#1#0|)))
 :qid |Asyncsdfy.16:34|
 :skolemid |3867|
 :no-pattern (type |a#35#0#0@@2|)
 :no-pattern (type |a#35#1#0|)
 :no-pattern (U_2_int |a#35#0#0@@2|)
 :no-pattern (U_2_bool |a#35#0#0@@2|)
 :no-pattern (U_2_int |a#35#1#0|)
 :no-pattern (U_2_bool |a#35#1#0|)
)))
 :qid |unknown.0:0|
 :skolemid |3868|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@315))
)))
(assert (= (type |Tclass.AsyncMod_6#MapSpecMod#.Variables|) TyType))
(assert (= (Tag |Tclass.AsyncMod_6#MapSpecMod#.Variables|) |Tagclass.AsyncMod_6#MapSpecMod#.Variables|))
(assert (= (TagFamily |Tclass.AsyncMod_6#MapSpecMod#.Variables|) tytagFamily$Variables))
(assert (forall ((bx@@181 T@U) ) (!  (=> (and (= (type bx@@181) BoxType) ($IsBox bx@@181 |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) (and (= ($Box ($Unbox DatatypeTypeType bx@@181)) bx@@181) ($Is ($Unbox DatatypeTypeType bx@@181) |Tclass.AsyncMod_6#MapSpecMod#.Variables|)))
 :qid |unknown.0:0|
 :skolemid |3869|
 :pattern ( ($IsBox bx@@181 |Tclass.AsyncMod_6#MapSpecMod#.Variables|))
)))
(assert (forall ((|a#36#0#0@@2| T@U) (|a#36#1#0@@0| T@U) ) (!  (=> (and (= (type |a#36#0#0@@2|) DatatypeTypeType) (= (type |a#36#1#0@@0|) DatatypeTypeType)) (= ($Is (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#36#0#0@@2| |a#36#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.Variables|)  (and ($Is |a#36#0#0@@2| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|) ($Is |a#36#1#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|))))
 :qid |Asyncsdfy.16:34|
 :skolemid |3870|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#36#0#0@@2| |a#36#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.Variables|))
)))
(assert (forall ((|a#37#0#0@@2| T@U) (|a#37#1#0@@0| T@U) ($h@@243 T@U) ) (!  (=> (and (and (and (= (type |a#37#0#0@@2|) DatatypeTypeType) (= (type |a#37#1#0@@0|) DatatypeTypeType)) (= (type $h@@243) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@243)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#37#0#0@@2| |a#37#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.Variables| $h@@243)  (and ($IsAlloc |a#37#0#0@@2| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| $h@@243) ($IsAlloc |a#37#1#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@243))))
 :qid |Asyncsdfy.16:34|
 :skolemid |3871|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#37#0#0@@2| |a#37#1#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.Variables| $h@@243))
)))
(assert (forall ((arg0@@611 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.Variables.persistent| arg0@@611)) DatatypeTypeType)
 :qid |funType:AsyncMod_6#MapSpecMod#.Variables.persistent|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Variables.persistent| arg0@@611))
)))
(assert (forall ((d@@316 T@U) ($h@@244 T@U) ) (!  (=> (and (and (= (type d@@316) DatatypeTypeType) (= (type $h@@244) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@244) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@316) ($IsAlloc d@@316 |Tclass.AsyncMod_6#MapSpecMod#.Variables| $h@@244)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.Variables.persistent| d@@316) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| $h@@244))
 :qid |unknown.0:0|
 :skolemid |3872|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.Variables.persistent| d@@316) |Tclass.AsyncMod_6#MapSpecMod#.PersistentState| $h@@244))
)))
(assert (forall ((arg0@@612 T@U) ) (! (= (type (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| arg0@@612)) DatatypeTypeType)
 :qid |funType:AsyncMod_6#MapSpecMod#.Variables.ephemeral|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| arg0@@612))
)))
(assert (forall ((d@@317 T@U) ($h@@245 T@U) ) (!  (=> (and (and (= (type d@@317) DatatypeTypeType) (= (type $h@@245) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@245) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@317) ($IsAlloc d@@317 |Tclass.AsyncMod_6#MapSpecMod#.Variables| $h@@245)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| d@@317) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@245))
 :qid |unknown.0:0|
 :skolemid |3873|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| d@@317) |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState| $h@@245))
)))
(assert (forall ((|a#38#0#0@@2| T@U) (|a#38#1#0@@0| T@U) ) (!  (=> (and (= (type |a#38#0#0@@2|) DatatypeTypeType) (= (type |a#38#1#0@@0|) DatatypeTypeType)) (= (|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit |a#38#0#0@@2|) (Lit |a#38#1#0@@0|)) (Lit (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#38#0#0@@2| |a#38#1#0@@0|))))
 :qid |Asyncsdfy.16:34|
 :skolemid |3874|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit |a#38#0#0@@2|) (Lit |a#38#1#0@@0|)))
)))
(assert (forall ((|a#39#0#0@@3| T@U) (|a#39#1#0@@0| T@U) ) (!  (=> (and (= (type |a#39#0#0@@3|) DatatypeTypeType) (= (type |a#39#1#0@@0|) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.Variables.persistent| (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#39#0#0@@3| |a#39#1#0@@0|)) |a#39#0#0@@3|))
 :qid |Asyncsdfy.16:34|
 :skolemid |3875|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#39#0#0@@3| |a#39#1#0@@0|))
)))
(assert (forall ((|a#40#0#0@@1| T@U) (|a#40#1#0@@0| T@U) ) (!  (=> (and (= (type |a#40#0#0@@1|) DatatypeTypeType) (= (type |a#40#1#0@@0|) DatatypeTypeType)) (< (DtRank |a#40#0#0@@1|) (DtRank (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#40#0#0@@1| |a#40#1#0@@0|))))
 :qid |Asyncsdfy.16:34|
 :skolemid |3876|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#40#0#0@@1| |a#40#1#0@@0|))
)))
(assert (forall ((|a#41#0#0@@1| T@U) (|a#41#1#0@@0| T@U) ) (!  (=> (and (= (type |a#41#0#0@@1|) DatatypeTypeType) (= (type |a#41#1#0@@0|) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#41#0#0@@1| |a#41#1#0@@0|)) |a#41#1#0@@0|))
 :qid |Asyncsdfy.16:34|
 :skolemid |3877|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#41#0#0@@1| |a#41#1#0@@0|))
)))
(assert (forall ((|a#42#0#0@@1| T@U) (|a#42#1#0@@0| T@U) ) (!  (=> (and (= (type |a#42#0#0@@1|) DatatypeTypeType) (= (type |a#42#1#0@@0|) DatatypeTypeType)) (< (DtRank |a#42#1#0@@0|) (DtRank (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#42#0#0@@1| |a#42#1#0@@0|))))
 :qid |Asyncsdfy.16:34|
 :skolemid |3878|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.Variables.Variables| |a#42#0#0@@1| |a#42#1#0@@0|))
)))
(assert (forall ((d@@318 T@U) ) (!  (=> (and (= (type d@@318) DatatypeTypeType) (|$IsA#AsyncMod_6#MapSpecMod#.Variables| d@@318)) (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@318))
 :qid |unknown.0:0|
 :skolemid |3879|
 :pattern ( (|$IsA#AsyncMod_6#MapSpecMod#.Variables| d@@318))
)))
(assert (forall ((d@@319 T@U) ) (!  (=> (and (= (type d@@319) DatatypeTypeType) ($Is d@@319 |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@319))
 :qid |unknown.0:0|
 :skolemid |3880|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| d@@319) ($Is d@@319 |Tclass.AsyncMod_6#MapSpecMod#.Variables|))
)))
(assert (forall ((a@@229 T@U) (b@@179 T@U) ) (!  (=> (and (and (= (type a@@229) DatatypeTypeType) (= (type b@@179) DatatypeTypeType)) true) (= (|AsyncMod_6#MapSpecMod#.Variables#Equal| a@@229 b@@179)  (and (|AsyncMod_6#MapSpecMod#.PersistentState#Equal| (|AsyncMod_6#MapSpecMod#.Variables.persistent| a@@229) (|AsyncMod_6#MapSpecMod#.Variables.persistent| b@@179)) (|AsyncMod_6#MapSpecMod#.EphemeralState#Equal| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| a@@229) (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| b@@179)))))
 :qid |unknown.0:0|
 :skolemid |3881|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Variables#Equal| a@@229 b@@179))
)))
(assert (forall ((a@@230 T@U) (b@@180 T@U) ) (!  (=> (and (= (type a@@230) DatatypeTypeType) (= (type b@@180) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.Variables#Equal| a@@230 b@@180) (= a@@230 b@@180)))
 :qid |unknown.0:0|
 :skolemid |3882|
 :pattern ( (|AsyncMod_6#MapSpecMod#.Variables#Equal| a@@230 b@@180))
)))
(assert (forall ((arg0@@613 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| arg0@@613)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.UIOp.RequestOp|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| arg0@@613))
)))
(assert (forall ((|a#43#0#0@@1| T@U) ) (!  (=> (= (type |a#43#0#0@@1|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#43#0#0@@1|)) |##AsyncMod_6#MapSpecMod#.UIOp.RequestOp|))
 :qid |Asyncsdfy.48:17|
 :skolemid |3883|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#43#0#0@@1|))
)))
(assert (forall ((d@@320 T@U) ) (!  (=> (= (type d@@320) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@320) (= (DatatypeCtorId d@@320) |##AsyncMod_6#MapSpecMod#.UIOp.RequestOp|)))
 :qid |unknown.0:0|
 :skolemid |3884|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@320))
)))
(assert (forall ((d@@321 T@U) ) (!  (=> (and (= (type d@@321) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@321)) (exists ((|a#44#0#0@@1| T@U) ) (!  (and (= (type |a#44#0#0@@1|) DatatypeTypeType) (= d@@321 (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#44#0#0@@1|)))
 :qid |Asyncsdfy.48:17|
 :skolemid |3885|
 :no-pattern (type |a#44#0#0@@1|)
 :no-pattern (U_2_int |a#44#0#0@@1|)
 :no-pattern (U_2_bool |a#44#0#0@@1|)
)))
 :qid |unknown.0:0|
 :skolemid |3886|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@321))
)))
(assert (forall ((|a#45#0#0@@1| T@U) ) (!  (=> (= (type |a#45#0#0@@1|) DatatypeTypeType) (= ($Is (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#45#0#0@@1|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp|) ($Is |a#45#0#0@@1| |Tclass.AsyncMod_6#MapSpecMod#.Request|)))
 :qid |Asyncsdfy.48:17|
 :skolemid |3887|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#45#0#0@@1|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))
)))
(assert (forall ((|a#46#0#0@@0| T@U) ($h@@246 T@U) ) (!  (=> (and (and (= (type |a#46#0#0@@0|) DatatypeTypeType) (= (type $h@@246) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@246)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#46#0#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@246) ($IsAlloc |a#46#0#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@246)))
 :qid |Asyncsdfy.48:17|
 :skolemid |3888|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#46#0#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@246))
)))
(assert (forall ((d@@322 T@U) ($h@@247 T@U) ) (!  (=> (and (and (= (type d@@322) DatatypeTypeType) (= (type $h@@247) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@247) (and (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@322) ($IsAlloc d@@322 |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@247)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.req| d@@322) |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@247))
 :qid |unknown.0:0|
 :skolemid |3889|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.req| d@@322) |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@247))
)))
(assert (forall ((|a#47#0#0@@0| T@U) ) (!  (=> (= (type |a#47#0#0@@0|) DatatypeTypeType) (= (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| (Lit |a#47#0#0@@0|)) (Lit (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#47#0#0@@0|))))
 :qid |Asyncsdfy.48:17|
 :skolemid |3890|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| (Lit |a#47#0#0@@0|)))
)))
(assert (forall ((|a#48#0#0@@0| T@U) ) (!  (=> (= (type |a#48#0#0@@0|) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.UIOp.req| (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#48#0#0@@0|)) |a#48#0#0@@0|))
 :qid |Asyncsdfy.48:17|
 :skolemid |3891|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#48#0#0@@0|))
)))
(assert (forall ((|a#49#0#0| T@U) ) (!  (=> (= (type |a#49#0#0|) DatatypeTypeType) (< (DtRank |a#49#0#0|) (DtRank (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#49#0#0|))))
 :qid |Asyncsdfy.48:17|
 :skolemid |3892|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.RequestOp| |a#49#0#0|))
)))
(assert (forall ((arg0@@614 T@U) (arg1@@287 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| arg0@@614 arg1@@287)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| arg0@@614 arg1@@287))
)))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) DatatypeTypeType) (= (type |a#50#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#50#0#0| |a#50#1#0|)) |##AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp|))
 :qid |Asyncsdfy.49:17|
 :skolemid |3893|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#50#0#0| |a#50#1#0|))
)))
(assert (forall ((d@@323 T@U) ) (!  (=> (= (type d@@323) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@323) (= (DatatypeCtorId d@@323) |##AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp|)))
 :qid |unknown.0:0|
 :skolemid |3894|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@323))
)))
(assert (forall ((d@@324 T@U) ) (!  (=> (and (= (type d@@324) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@324)) (exists ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (!  (and (and (= (type |a#51#0#0|) DatatypeTypeType) (= (type |a#51#1#0|) DatatypeTypeType)) (= d@@324 (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#51#0#0| |a#51#1#0|)))
 :qid |Asyncsdfy.49:17|
 :skolemid |3895|
 :no-pattern (type |a#51#0#0|)
 :no-pattern (type |a#51#1#0|)
 :no-pattern (U_2_int |a#51#0#0|)
 :no-pattern (U_2_bool |a#51#0#0|)
 :no-pattern (U_2_int |a#51#1#0|)
 :no-pattern (U_2_bool |a#51#1#0|)
)))
 :qid |unknown.0:0|
 :skolemid |3896|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@324))
)))
(assert (forall ((|a#52#0#0@@0| T@U) (|a#52#1#0| T@U) ) (!  (=> (and (= (type |a#52#0#0@@0|) DatatypeTypeType) (= (type |a#52#1#0|) DatatypeTypeType)) (= ($Is (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#52#0#0@@0| |a#52#1#0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)  (and ($Is |a#52#0#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.Request|) ($Is |a#52#1#0| |Tclass.AsyncMod_6#MapSpecMod#.Reply|))))
 :qid |Asyncsdfy.49:17|
 :skolemid |3897|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#52#0#0@@0| |a#52#1#0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))
)))
(assert (forall ((|a#53#0#0@@0| T@U) (|a#53#1#0| T@U) ($h@@248 T@U) ) (!  (=> (and (and (and (= (type |a#53#0#0@@0|) DatatypeTypeType) (= (type |a#53#1#0|) DatatypeTypeType)) (= (type $h@@248) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@248)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#53#0#0@@0| |a#53#1#0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@248)  (and ($IsAlloc |a#53#0#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@248) ($IsAlloc |a#53#1#0| |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@248))))
 :qid |Asyncsdfy.49:17|
 :skolemid |3898|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#53#0#0@@0| |a#53#1#0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@248))
)))
(assert (forall ((d@@325 T@U) ($h@@249 T@U) ) (!  (=> (and (and (= (type d@@325) DatatypeTypeType) (= (type $h@@249) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@249) (and (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@325) ($IsAlloc d@@325 |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@249)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.req| d@@325) |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@249))
 :qid |unknown.0:0|
 :skolemid |3899|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.req| d@@325) |Tclass.AsyncMod_6#MapSpecMod#.Request| $h@@249))
)))
(assert (forall ((d@@326 T@U) ($h@@250 T@U) ) (!  (=> (and (and (= (type d@@326) DatatypeTypeType) (= (type $h@@250) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@250) (and (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@326) ($IsAlloc d@@326 |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@250)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.reply| d@@326) |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@250))
 :qid |unknown.0:0|
 :skolemid |3900|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.reply| d@@326) |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@250))
)))
(assert (forall ((|a#54#0#0@@0| T@U) (|a#54#1#0| T@U) ) (!  (=> (and (= (type |a#54#0#0@@0|) DatatypeTypeType) (= (type |a#54#1#0|) DatatypeTypeType)) (= (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| (Lit |a#54#0#0@@0|) (Lit |a#54#1#0|)) (Lit (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#54#0#0@@0| |a#54#1#0|))))
 :qid |Asyncsdfy.49:17|
 :skolemid |3901|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| (Lit |a#54#0#0@@0|) (Lit |a#54#1#0|)))
)))
(assert (forall ((|a#55#0#0@@0| T@U) (|a#55#1#0| T@U) ) (!  (=> (and (= (type |a#55#0#0@@0|) DatatypeTypeType) (= (type |a#55#1#0|) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.UIOp.req| (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#55#0#0@@0| |a#55#1#0|)) |a#55#0#0@@0|))
 :qid |Asyncsdfy.49:17|
 :skolemid |3902|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#55#0#0@@0| |a#55#1#0|))
)))
(assert (forall ((|a#56#0#0@@0| T@U) (|a#56#1#0| T@U) ) (!  (=> (and (= (type |a#56#0#0@@0|) DatatypeTypeType) (= (type |a#56#1#0|) DatatypeTypeType)) (< (DtRank |a#56#0#0@@0|) (DtRank (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#56#0#0@@0| |a#56#1#0|))))
 :qid |Asyncsdfy.49:17|
 :skolemid |3903|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#56#0#0@@0| |a#56#1#0|))
)))
(assert (forall ((|a#57#0#0@@0| T@U) (|a#57#1#0| T@U) ) (!  (=> (and (= (type |a#57#0#0@@0|) DatatypeTypeType) (= (type |a#57#1#0|) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#57#0#0@@0| |a#57#1#0|)) |a#57#1#0|))
 :qid |Asyncsdfy.49:17|
 :skolemid |3904|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#57#0#0@@0| |a#57#1#0|))
)))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (!  (=> (and (= (type |a#58#0#0|) DatatypeTypeType) (= (type |a#58#1#0|) DatatypeTypeType)) (< (DtRank |a#58#1#0|) (DtRank (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#58#0#0| |a#58#1#0|))))
 :qid |Asyncsdfy.49:17|
 :skolemid |3905|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp| |a#58#0#0| |a#58#1#0|))
)))
(assert (forall ((arg0@@615 T@U) ) (! (= (type (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| arg0@@615)) DatatypeTypeType)
 :qid |funType:#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| arg0@@615))
)))
(assert (forall ((|a#59#0#0@@0| T@U) ) (!  (=> (= (type |a#59#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#59#0#0@@0|)) |##AsyncMod_6#MapSpecMod#.UIOp.ReplyOp|))
 :qid |Asyncsdfy.50:15|
 :skolemid |3906|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#59#0#0@@0|))
)))
(assert (forall ((d@@327 T@U) ) (!  (=> (= (type d@@327) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@327) (= (DatatypeCtorId d@@327) |##AsyncMod_6#MapSpecMod#.UIOp.ReplyOp|)))
 :qid |unknown.0:0|
 :skolemid |3907|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@327))
)))
(assert (forall ((d@@328 T@U) ) (!  (=> (and (= (type d@@328) DatatypeTypeType) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@328)) (exists ((|a#60#0#0@@0| T@U) ) (!  (and (= (type |a#60#0#0@@0|) DatatypeTypeType) (= d@@328 (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#60#0#0@@0|)))
 :qid |Asyncsdfy.50:15|
 :skolemid |3908|
 :no-pattern (type |a#60#0#0@@0|)
 :no-pattern (U_2_int |a#60#0#0@@0|)
 :no-pattern (U_2_bool |a#60#0#0@@0|)
)))
 :qid |unknown.0:0|
 :skolemid |3909|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@328))
)))
(assert (forall ((|a#61#0#0@@0| T@U) ) (!  (=> (= (type |a#61#0#0@@0|) DatatypeTypeType) (= ($Is (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#61#0#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp|) ($Is |a#61#0#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))
 :qid |Asyncsdfy.50:15|
 :skolemid |3910|
 :pattern ( ($Is (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#61#0#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))
)))
(assert (forall ((|a#62#0#0@@0| T@U) ($h@@251 T@U) ) (!  (=> (and (and (= (type |a#62#0#0@@0|) DatatypeTypeType) (= (type $h@@251) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@251)) (= ($IsAlloc (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#62#0#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@251) ($IsAlloc |a#62#0#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@251)))
 :qid |Asyncsdfy.50:15|
 :skolemid |3911|
 :pattern ( ($IsAlloc (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#62#0#0@@0|) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@251))
)))
(assert (forall ((d@@329 T@U) ($h@@252 T@U) ) (!  (=> (and (and (= (type d@@329) DatatypeTypeType) (= (type $h@@252) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@252) (and (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@329) ($IsAlloc d@@329 |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@252)))) ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.reply| d@@329) |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@252))
 :qid |unknown.0:0|
 :skolemid |3912|
 :pattern ( ($IsAlloc (|AsyncMod_6#MapSpecMod#.UIOp.reply| d@@329) |Tclass.AsyncMod_6#MapSpecMod#.Reply| $h@@252))
)))
(assert (forall ((|a#63#0#0@@0| T@U) ) (!  (=> (= (type |a#63#0#0@@0|) DatatypeTypeType) (= (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| (Lit |a#63#0#0@@0|)) (Lit (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#63#0#0@@0|))))
 :qid |Asyncsdfy.50:15|
 :skolemid |3913|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| (Lit |a#63#0#0@@0|)))
)))
(assert (forall ((|a#64#0#0@@0| T@U) ) (!  (=> (= (type |a#64#0#0@@0|) DatatypeTypeType) (= (|AsyncMod_6#MapSpecMod#.UIOp.reply| (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#64#0#0@@0|)) |a#64#0#0@@0|))
 :qid |Asyncsdfy.50:15|
 :skolemid |3914|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#64#0#0@@0|))
)))
(assert (forall ((|a#65#0#0@@0| T@U) ) (!  (=> (= (type |a#65#0#0@@0|) DatatypeTypeType) (< (DtRank |a#65#0#0@@0|) (DtRank (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#65#0#0@@0|))))
 :qid |Asyncsdfy.50:15|
 :skolemid |3915|
 :pattern ( (|#AsyncMod_6#MapSpecMod#.UIOp.ReplyOp| |a#65#0#0@@0|))
)))
(assert (forall ((d@@330 T@U) ) (!  (=> (and (= (type d@@330) DatatypeTypeType) (|$IsA#AsyncMod_6#MapSpecMod#.UIOp| d@@330)) (or (or (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@330) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@330)) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@330)))
 :qid |unknown.0:0|
 :skolemid |3916|
 :pattern ( (|$IsA#AsyncMod_6#MapSpecMod#.UIOp| d@@330))
)))
(assert (forall ((d@@331 T@U) ) (!  (=> (and (= (type d@@331) DatatypeTypeType) ($Is d@@331 |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)) (or (or (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@331) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@331)) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@331)))
 :qid |unknown.0:0|
 :skolemid |3917|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| d@@331) ($Is d@@331 |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| d@@331) ($Is d@@331 |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| d@@331) ($Is d@@331 |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))
)))
(assert (forall ((a@@231 T@U) (b@@181 T@U) ) (!  (=> (and (and (= (type a@@231) DatatypeTypeType) (= (type b@@181) DatatypeTypeType)) (and (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| a@@231) (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| b@@181))) (= (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@231 b@@181) (|AsyncMod_6#MapSpecMod#.Request#Equal| (|AsyncMod_6#MapSpecMod#.UIOp.req| a@@231) (|AsyncMod_6#MapSpecMod#.UIOp.req| b@@181))))
 :qid |unknown.0:0|
 :skolemid |3918|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@231 b@@181) (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| a@@231))
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@231 b@@181) (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| b@@181))
)))
(assert (forall ((a@@232 T@U) (b@@182 T@U) ) (!  (=> (and (and (= (type a@@232) DatatypeTypeType) (= (type b@@182) DatatypeTypeType)) (and (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| a@@232) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| b@@182))) (= (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@232 b@@182)  (and (|AsyncMod_6#MapSpecMod#.Request#Equal| (|AsyncMod_6#MapSpecMod#.UIOp.req| a@@232) (|AsyncMod_6#MapSpecMod#.UIOp.req| b@@182)) (|AsyncMod_6#MapSpecMod#.Reply#Equal| (|AsyncMod_6#MapSpecMod#.UIOp.reply| a@@232) (|AsyncMod_6#MapSpecMod#.UIOp.reply| b@@182)))))
 :qid |unknown.0:0|
 :skolemid |3919|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@232 b@@182) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| a@@232))
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@232 b@@182) (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| b@@182))
)))
(assert (forall ((a@@233 T@U) (b@@183 T@U) ) (!  (=> (and (and (= (type a@@233) DatatypeTypeType) (= (type b@@183) DatatypeTypeType)) (and (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| a@@233) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| b@@183))) (= (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@233 b@@183) (|AsyncMod_6#MapSpecMod#.Reply#Equal| (|AsyncMod_6#MapSpecMod#.UIOp.reply| a@@233) (|AsyncMod_6#MapSpecMod#.UIOp.reply| b@@183))))
 :qid |unknown.0:0|
 :skolemid |3920|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@233 b@@183) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| a@@233))
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@233 b@@183) (|AsyncMod_6#MapSpecMod#.UIOp.ReplyOp_q| b@@183))
)))
(assert (forall ((a@@234 T@U) (b@@184 T@U) ) (!  (=> (and (= (type a@@234) DatatypeTypeType) (= (type b@@184) DatatypeTypeType)) (= (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@234 b@@184) (= a@@234 b@@184)))
 :qid |unknown.0:0|
 :skolemid |3921|
 :pattern ( (|AsyncMod_6#MapSpecMod#.UIOp#Equal| a@@234 b@@184))
)))
(assert (= (type |Tclass.AsyncMod_6#MapSpecMod#.__default|) TyType))
(assert (= (Tag |Tclass.AsyncMod_6#MapSpecMod#.__default|) |Tagclass.AsyncMod_6#MapSpecMod#.__default|))
(assert (= (TagFamily |Tclass.AsyncMod_6#MapSpecMod#.__default|) tytagFamily$_default))
(assert (forall ((bx@@182 T@U) ) (!  (=> (and (= (type bx@@182) BoxType) ($IsBox bx@@182 |Tclass.AsyncMod_6#MapSpecMod#.__default|)) (and (= ($Box ($Unbox refType bx@@182)) bx@@182) ($Is ($Unbox refType bx@@182) |Tclass.AsyncMod_6#MapSpecMod#.__default|)))
 :qid |unknown.0:0|
 :skolemid |3922|
 :pattern ( ($IsBox bx@@182 |Tclass.AsyncMod_6#MapSpecMod#.__default|))
)))
(assert (forall (($o@@63 T@U) ) (!  (=> (= (type $o@@63) refType) (= ($Is $o@@63 |Tclass.AsyncMod_6#MapSpecMod#.__default|)  (or (= $o@@63 null) (= (dtype $o@@63) |Tclass.AsyncMod_6#MapSpecMod#.__default|))))
 :qid |unknown.0:0|
 :skolemid |3923|
 :pattern ( ($Is $o@@63 |Tclass.AsyncMod_6#MapSpecMod#.__default|))
)))
(assert (forall (($o@@64 T@U) ($h@@253 T@U) ) (!  (=> (and (= (type $o@@64) refType) (= (type $h@@253) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@64 |Tclass.AsyncMod_6#MapSpecMod#.__default| $h@@253)  (or (= $o@@64 null) (U_2_bool (MapType1Select (MapType0Select $h@@253 $o@@64) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3924|
 :pattern ( ($IsAlloc $o@@64 |Tclass.AsyncMod_6#MapSpecMod#.__default| $h@@253))
)))
(assert  (=> true (=> true ($Is |AsyncMod_6#MapSpecMod#.__default.InitPersistentState| |Tclass.AsyncMod_6#MapSpecMod#.PersistentState|))))
(assert (= |AsyncMod_6#MapSpecMod#.__default.InitPersistentState#requires| true))
(assert  (=> true (=> true (and |MapSpecMod.__default.InitState#canCall| (= |AsyncMod_6#MapSpecMod#.__default.InitPersistentState| (Lit (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| (Lit MapSpecMod.__default.InitState))))))))
(assert  (=> true (=> true (and |MapSpecMod.__default.InitState#canCall| (= |AsyncMod_6#MapSpecMod#.__default.InitPersistentState| (Lit (|#AsyncMod_6#MapSpecMod#.PersistentState.PersistentState| (Lit MapSpecMod.__default.InitState))))))))
(assert  (=> true (=> true ($Is |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState| |Tclass.AsyncMod_6#MapSpecMod#.EphemeralState|))))
(assert (= |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState#requires| true))
(assert  (=> true (=> true (= |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState| (Lit (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit (|Set#Empty| BoxType)) (Lit (|Set#Empty| BoxType))))))))
(assert  (=> true (=> true (= |AsyncMod_6#MapSpecMod#.__default.InitEphemeralState| (Lit (|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit (|Set#Empty| BoxType)) (Lit (|Set#Empty| BoxType))))))))
(assert  (=> true (forall ((|v#0@@330| T@U) (|v'#0@@227| T@U) (|req#0| T@U) ) (!  (=> (and (and (and (= (type |v#0@@330|) DatatypeTypeType) (= (type |v'#0@@227|) DatatypeTypeType)) (= (type |req#0|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoRequest#canCall| |v#0@@330| |v'#0@@227| |req#0|) (and (and ($Is |v#0@@330| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@227| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0| |Tclass.AsyncMod_6#MapSpecMod#.Request|)))) true)
 :qid |Asyncsdfy.26:23|
 :skolemid |3925|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoRequest| |v#0@@330| |v'#0@@227| |req#0|))
))))
(assert (forall ((|v#0@@331| T@U) (|v'#0@@228| T@U) (|req#0@@0| T@U) ) (!  (=> (and (and (and (= (type |v#0@@331|) DatatypeTypeType) (= (type |v'#0@@228|) DatatypeTypeType)) (= (type |req#0@@0|) DatatypeTypeType)) (and (and ($Is |v#0@@331| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@228| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.Request|))) (= (|AsyncMod_6#MapSpecMod#.__default.DoRequest#requires| |v#0@@331| |v'#0@@228| |req#0@@0|) true))
 :qid |Asyncsdfy.26:23|
 :skolemid |3926|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoRequest#requires| |v#0@@331| |v'#0@@228| |req#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@332| T@U) (|v'#0@@229| T@U) (|req#0@@1| T@U) ) (!  (=> (and (and (and (= (type |v#0@@332|) DatatypeTypeType) (= (type |v'#0@@229|) DatatypeTypeType)) (= (type |req#0@@1|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoRequest#canCall| |v#0@@332| |v'#0@@229| |req#0@@1|) (and (and ($Is |v#0@@332| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@229| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0@@1| |Tclass.AsyncMod_6#MapSpecMod#.Request|)))) (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@332|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|))) (=> (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|)) ($Box |req#0@@1|)))) (and (and (|$IsA#AsyncMod_6#MapSpecMod#.Variables| |v'#0@@229|) (|$IsA#AsyncMod_6#MapSpecMod#.Variables| (let ((|dt_update_tmp#0#0@@46| |v#0@@332|))
(let ((|dt_update#ephemeral#0#0@@13| (let ((|dt_update_tmp#1#0@@5| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|)))
(let ((|dt_update#requests#0#0@@5| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |req#0@@1|)))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0@@5| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#1#0@@5|))))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#0@@46|) |dt_update#ephemeral#0#0@@13|))))) (let ((|dt_update_tmp#0#0@@47| |v#0@@332|))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@332|) (let ((|dt_update_tmp#1#0@@6| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|)))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@332|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#1#0@@6|)))) (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |dt_update_tmp#0#0@@47|)))))) (= (|AsyncMod_6#MapSpecMod#.__default.DoRequest| |v#0@@332| |v'#0@@229| |req#0@@1|)  (and (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|)) ($Box |req#0@@1|)))) (|AsyncMod_6#MapSpecMod#.Variables#Equal| |v'#0@@229| (let ((|dt_update_tmp#0#0@@48| |v#0@@332|))
(let ((|dt_update#ephemeral#0#0@@14| (let ((|dt_update_tmp#1#0@@7| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|)))
(let ((|dt_update#requests#0#0@@6| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@332|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |req#0@@1|)))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#0@@6| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#1#0@@7|))))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#0@@48|) |dt_update#ephemeral#0#0@@14|))))))))
 :qid |Asyncsdfy.26:23|
 :skolemid |3927|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoRequest| |v#0@@332| |v'#0@@229| |req#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@333| T@U) (|v'#0@@230| T@U) (|req#0@@2| T@U) ) (!  (=> (and (and (and (= (type |v#0@@333|) DatatypeTypeType) (= (type |v'#0@@230|) DatatypeTypeType)) (= (type |req#0@@2|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoRequest#canCall| (Lit |v#0@@333|) (Lit |v'#0@@230|) (Lit |req#0@@2|)) (and (and ($Is |v#0@@333| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@230| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0@@2| |Tclass.AsyncMod_6#MapSpecMod#.Request|)))) (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@333|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|))))) (=> (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|))))) ($Box (Lit |req#0@@2|))))) (and (and (|$IsA#AsyncMod_6#MapSpecMod#.Variables| (Lit |v'#0@@230|)) (|$IsA#AsyncMod_6#MapSpecMod#.Variables| (let ((|dt_update_tmp#0#1@@46| (Lit |v#0@@333|)))
(let ((|dt_update#ephemeral#0#1@@13| (let ((|dt_update_tmp#1#1@@5| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|)))))
(let ((|dt_update#requests#0#1@@5| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|)))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |req#0@@2|))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1@@5| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#1#1@@5|)))))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#1@@46|)) |dt_update#ephemeral#0#1@@13|))))) (let ((|dt_update_tmp#0#1@@47| (Lit |v#0@@333|)))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@333|)) (let ((|dt_update_tmp#1#1@@6| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|)))))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@333|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|))))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#1#1@@6|)))) (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |dt_update_tmp#0#1@@47|)))))) (= (|AsyncMod_6#MapSpecMod#.__default.DoRequest| (Lit |v#0@@333|) (Lit |v'#0@@230|) (Lit |req#0@@2|))  (and (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|))))) ($Box (Lit |req#0@@2|))))) (|AsyncMod_6#MapSpecMod#.Variables#Equal| |v'#0@@230| (let ((|dt_update_tmp#0#1@@48| (Lit |v#0@@333|)))
(let ((|dt_update#ephemeral#0#1@@14| (let ((|dt_update_tmp#1#1@@7| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|)))))
(let ((|dt_update#requests#0#1@@6| (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@333|)))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |req#0@@2|))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| |dt_update#requests#0#1@@6| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| |dt_update_tmp#1#1@@7|)))))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#1@@48|)) |dt_update#ephemeral#0#1@@14|))))))))
 :qid |Asyncsdfy.26:23|
 :weight 3
 :skolemid |3928|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoRequest| (Lit |v#0@@333|) (Lit |v'#0@@230|) (Lit |req#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@334| T@U) (|v'#0@@231| T@U) (|req#0@@3| T@U) (|reply#0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@334|) DatatypeTypeType) (= (type |v'#0@@231|) DatatypeTypeType)) (= (type |req#0@@3|) DatatypeTypeType)) (= (type |reply#0|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoExecute#canCall| |v#0@@334| |v'#0@@231| |req#0@@3| |reply#0|) (and (and (and ($Is |v#0@@334| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@231| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0@@3| |Tclass.AsyncMod_6#MapSpecMod#.Request|)) ($Is |reply#0| |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))) true)
 :qid |Asyncsdfy.32:23|
 :skolemid |3929|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoExecute| |v#0@@334| |v'#0@@231| |req#0@@3| |reply#0|))
))))
(assert (forall ((|v#0@@335| T@U) (|v'#0@@232| T@U) (|req#0@@4| T@U) (|reply#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@335|) DatatypeTypeType) (= (type |v'#0@@232|) DatatypeTypeType)) (= (type |req#0@@4|) DatatypeTypeType)) (= (type |reply#0@@0|) DatatypeTypeType)) (and (and (and ($Is |v#0@@335| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@232| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0@@4| |Tclass.AsyncMod_6#MapSpecMod#.Request|)) ($Is |reply#0@@0| |Tclass.AsyncMod_6#MapSpecMod#.Reply|))) (= (|AsyncMod_6#MapSpecMod#.__default.DoExecute#requires| |v#0@@335| |v'#0@@232| |req#0@@4| |reply#0@@0|) true))
 :qid |Asyncsdfy.32:23|
 :skolemid |3930|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoExecute#requires| |v#0@@335| |v'#0@@232| |req#0@@4| |reply#0@@0|))
)))
(assert  (=> true (forall ((|v#0@@336| T@U) (|v'#0@@233| T@U) (|req#0@@5| T@U) (|reply#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@336|) DatatypeTypeType) (= (type |v'#0@@233|) DatatypeTypeType)) (= (type |req#0@@5|) DatatypeTypeType)) (= (type |reply#0@@1|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoExecute#canCall| |v#0@@336| |v'#0@@233| |req#0@@5| |reply#0@@1|) (and (and (and ($Is |v#0@@336| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@233| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0@@5| |Tclass.AsyncMod_6#MapSpecMod#.Request|)) ($Is |reply#0@@1| |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))) (and (and (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| |reply#0@@1|) (|AsyncMod_6#MapSpecMod#.Request.Request_q| |req#0@@5|)) (=> (= (|AsyncMod_6#MapSpecMod#.Reply.id| |reply#0@@1|) (|AsyncMod_6#MapSpecMod#.Request.id| |req#0@@5|)) (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@336|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|))) (=> (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)) ($Box |req#0@@5|))) (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@336|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|))) (=> (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)) ($Box |reply#0@@1|)))) (and (and (and (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@336|) (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v#0@@336|))) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v'#0@@233|) (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v'#0@@233|)))) (|AsyncMod_6#MapSpecMod#.Request.Request_q| |req#0@@5|)) (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| |reply#0@@1|)) (|MapSpecMod.__default.Next#canCall| (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v#0@@336|)) (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v'#0@@233|)) (|AsyncMod_6#MapSpecMod#.Request.input| |req#0@@5|) (|AsyncMod_6#MapSpecMod#.Reply.output| |reply#0@@1|))) (=> (MapSpecMod.__default.Next (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v#0@@336|)) (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v'#0@@233|)) (|AsyncMod_6#MapSpecMod#.Request.input| |req#0@@5|) (|AsyncMod_6#MapSpecMod#.Reply.output| |reply#0@@1|)) (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v'#0@@233|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v'#0@@233|))) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@336|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)))) (=> (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v'#0@@233|)) (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |req#0@@5|)))) (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v'#0@@233|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v'#0@@233|))) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@336|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)))))))))))))) (= (|AsyncMod_6#MapSpecMod#.__default.DoExecute| |v#0@@336| |v'#0@@233| |req#0@@5| |reply#0@@1|)  (and (and (and (and (and (= (|AsyncMod_6#MapSpecMod#.Reply.id| |reply#0@@1|) (|AsyncMod_6#MapSpecMod#.Request.id| |req#0@@5|)) (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)) ($Box |req#0@@5|)))) (not (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)) ($Box |reply#0@@1|))))) (MapSpecMod.__default.Next (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v#0@@336|)) (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |v'#0@@233|)) (|AsyncMod_6#MapSpecMod#.Request.input| |req#0@@5|) (|AsyncMod_6#MapSpecMod#.Reply.output| |reply#0@@1|))) (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v'#0@@233|)) (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |req#0@@5|))))) (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v'#0@@233|)) (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@336|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |reply#0@@1|))))))))
 :qid |Asyncsdfy.32:23|
 :skolemid |3931|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoExecute| |v#0@@336| |v'#0@@233| |req#0@@5| |reply#0@@1|))
))))
(assert  (=> true (forall ((|v#0@@337| T@U) (|v'#0@@234| T@U) (|req#0@@6| T@U) (|reply#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |v#0@@337|) DatatypeTypeType) (= (type |v'#0@@234|) DatatypeTypeType)) (= (type |req#0@@6|) DatatypeTypeType)) (= (type |reply#0@@2|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoExecute#canCall| (Lit |v#0@@337|) (Lit |v'#0@@234|) (Lit |req#0@@6|) (Lit |reply#0@@2|)) (and (and (and ($Is |v#0@@337| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@234| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |req#0@@6| |Tclass.AsyncMod_6#MapSpecMod#.Request|)) ($Is |reply#0@@2| |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))) (and (and (and (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (Lit |reply#0@@2|)) (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit |req#0@@6|))) (=> (= (Lit (|AsyncMod_6#MapSpecMod#.Reply.id| (Lit |reply#0@@2|))) (Lit (|AsyncMod_6#MapSpecMod#.Request.id| (Lit |req#0@@6|)))) (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@337|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|))))) (=> (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|))))) ($Box (Lit |req#0@@6|)))) (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@337|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|))))) (=> (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|))))) ($Box (Lit |reply#0@@2|))))) (and (and (and (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@337|)) (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v#0@@337|))))) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v'#0@@234|)) (|AsyncMod_6#MapSpecMod#.PersistentState.PersistentState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v'#0@@234|)))))) (|AsyncMod_6#MapSpecMod#.Request.Request_q| (Lit |req#0@@6|))) (|AsyncMod_6#MapSpecMod#.Reply.Reply_q| (Lit |reply#0@@2|))) (|MapSpecMod.__default.Next#canCall| (Lit (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v#0@@337|))))) (Lit (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v'#0@@234|))))) (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit |req#0@@6|))) (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit |reply#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (MapSpecMod.__default.Next (Lit (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v#0@@337|))))) (Lit (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v'#0@@234|))))) (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit |req#0@@6|))) (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit |reply#0@@2|))))))) (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v'#0@@234|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v'#0@@234|))))) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@337|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|)))))) (=> (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v'#0@@234|)))) (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|)))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |req#0@@6|))))) (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v'#0@@234|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v'#0@@234|))))) (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@337|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|)))))))))))))))) (= (|AsyncMod_6#MapSpecMod#.__default.DoExecute| (Lit |v#0@@337|) (Lit |v'#0@@234|) (Lit |req#0@@6|) (Lit |reply#0@@2|))  (and (and (and (and (and (= (Lit (|AsyncMod_6#MapSpecMod#.Reply.id| (Lit |reply#0@@2|))) (Lit (|AsyncMod_6#MapSpecMod#.Request.id| (Lit |req#0@@6|)))) (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|))))) ($Box (Lit |req#0@@6|))))) (not (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|))))) ($Box (Lit |reply#0@@2|)))))) (MapSpecMod.__default.Next (Lit (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v#0@@337|))))) (Lit (|AsyncMod_6#MapSpecMod#.PersistentState.appv| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| (Lit |v'#0@@234|))))) (Lit (|AsyncMod_6#MapSpecMod#.Request.input| (Lit |req#0@@6|))) (Lit (|AsyncMod_6#MapSpecMod#.Reply.output| (Lit |reply#0@@2|))))) (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v'#0@@234|)))) (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|)))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |req#0@@6|)))))) (|Set#Equal| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v'#0@@234|)))) (|Set#Union| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@337|)))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |reply#0@@2|)))))))))
 :qid |Asyncsdfy.32:23|
 :weight 3
 :skolemid |3932|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoExecute| (Lit |v#0@@337|) (Lit |v'#0@@234|) (Lit |req#0@@6|) (Lit |reply#0@@2|)))
))))
(assert  (=> true (forall ((|v#0@@338| T@U) (|v'#0@@235| T@U) (|reply#0@@3| T@U) ) (!  (=> (and (and (and (= (type |v#0@@338|) DatatypeTypeType) (= (type |v'#0@@235|) DatatypeTypeType)) (= (type |reply#0@@3|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoReply#canCall| |v#0@@338| |v'#0@@235| |reply#0@@3|) (and (and ($Is |v#0@@338| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@235| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |reply#0@@3| |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))) true)
 :qid |Asyncsdfy.41:21|
 :skolemid |3933|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoReply| |v#0@@338| |v'#0@@235| |reply#0@@3|))
))))
(assert (forall ((|v#0@@339| T@U) (|v'#0@@236| T@U) (|reply#0@@4| T@U) ) (!  (=> (and (and (and (= (type |v#0@@339|) DatatypeTypeType) (= (type |v'#0@@236|) DatatypeTypeType)) (= (type |reply#0@@4|) DatatypeTypeType)) (and (and ($Is |v#0@@339| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@236| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |reply#0@@4| |Tclass.AsyncMod_6#MapSpecMod#.Reply|))) (= (|AsyncMod_6#MapSpecMod#.__default.DoReply#requires| |v#0@@339| |v'#0@@236| |reply#0@@4|) true))
 :qid |Asyncsdfy.41:21|
 :skolemid |3934|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoReply#requires| |v#0@@339| |v'#0@@236| |reply#0@@4|))
)))
(assert  (=> true (forall ((|v#0@@340| T@U) (|v'#0@@237| T@U) (|reply#0@@5| T@U) ) (!  (=> (and (and (and (= (type |v#0@@340|) DatatypeTypeType) (= (type |v'#0@@237|) DatatypeTypeType)) (= (type |reply#0@@5|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoReply#canCall| |v#0@@340| |v'#0@@237| |reply#0@@5|) (and (and ($Is |v#0@@340| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@237| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |reply#0@@5| |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))) (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@340|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|))) (=> (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|)) ($Box |reply#0@@5|))) (and (and (|$IsA#AsyncMod_6#MapSpecMod#.Variables| |v'#0@@237|) (|$IsA#AsyncMod_6#MapSpecMod#.Variables| (let ((|dt_update_tmp#0#0@@49| |v#0@@340|))
(let ((|dt_update#ephemeral#0#0@@15| (let ((|dt_update_tmp#1#0@@8| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|)))
(let ((|dt_update#replies#0#0@@5| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |reply#0@@5|)))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#1#0@@8|) |dt_update#replies#0#0@@5|)))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#0@@49|) |dt_update#ephemeral#0#0@@15|))))) (let ((|dt_update_tmp#0#0@@50| |v#0@@340|))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@340|) (let ((|dt_update_tmp#1#0@@9| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|)))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |v#0@@340|) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#1#0@@9|)))) (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |dt_update_tmp#0#0@@50|)))))) (= (|AsyncMod_6#MapSpecMod#.__default.DoReply| |v#0@@340| |v'#0@@237| |reply#0@@5|)  (and (U_2_bool (MapType0Select (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|)) ($Box |reply#0@@5|))) (|AsyncMod_6#MapSpecMod#.Variables#Equal| |v'#0@@237| (let ((|dt_update_tmp#0#0@@51| |v#0@@340|))
(let ((|dt_update#ephemeral#0#0@@16| (let ((|dt_update_tmp#1#0@@10| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|)))
(let ((|dt_update#replies#0#0@@6| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| |v#0@@340|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |reply#0@@5|)))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#1#0@@10|) |dt_update#replies#0#0@@6|)))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#0@@51|) |dt_update#ephemeral#0#0@@16|))))))))
 :qid |Asyncsdfy.41:21|
 :skolemid |3935|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoReply| |v#0@@340| |v'#0@@237| |reply#0@@5|))
))))
(assert  (=> true (forall ((|v#0@@341| T@U) (|v'#0@@238| T@U) (|reply#0@@6| T@U) ) (!  (=> (and (and (and (= (type |v#0@@341|) DatatypeTypeType) (= (type |v'#0@@238|) DatatypeTypeType)) (= (type |reply#0@@6|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.DoReply#canCall| (Lit |v#0@@341|) (Lit |v'#0@@238|) (Lit |reply#0@@6|)) (and (and ($Is |v#0@@341| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@238| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |reply#0@@6| |Tclass.AsyncMod_6#MapSpecMod#.Reply|)))) (and (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@341|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|))))) (=> (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|))))) ($Box (Lit |reply#0@@6|)))) (and (and (|$IsA#AsyncMod_6#MapSpecMod#.Variables| (Lit |v'#0@@238|)) (|$IsA#AsyncMod_6#MapSpecMod#.Variables| (let ((|dt_update_tmp#0#1@@49| (Lit |v#0@@341|)))
(let ((|dt_update#ephemeral#0#1@@15| (let ((|dt_update_tmp#1#1@@8| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|)))))
(let ((|dt_update#replies#0#1@@5| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|)))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |reply#0@@6|))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#1#1@@8|)) |dt_update#replies#0#1@@5|)))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#1@@49|)) |dt_update#ephemeral#0#1@@15|))))) (let ((|dt_update_tmp#0#1@@50| (Lit |v#0@@341|)))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@341|)) (let ((|dt_update_tmp#1#1@@9| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|)))))
 (and (and (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| (Lit |v#0@@341|)) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|))))) (|AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState_q| |dt_update_tmp#1#1@@9|)))) (|AsyncMod_6#MapSpecMod#.Variables.Variables_q| |dt_update_tmp#0#1@@50|)))))) (= (|AsyncMod_6#MapSpecMod#.__default.DoReply| (Lit |v#0@@341|) (Lit |v'#0@@238|) (Lit |reply#0@@6|))  (and (U_2_bool (MapType0Select (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|))))) ($Box (Lit |reply#0@@6|)))) (|AsyncMod_6#MapSpecMod#.Variables#Equal| |v'#0@@238| (let ((|dt_update_tmp#0#1@@51| (Lit |v#0@@341|)))
(let ((|dt_update#ephemeral#0#1@@16| (let ((|dt_update_tmp#1#1@@10| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|)))))
(let ((|dt_update#replies#0#1@@6| (|Set#Difference| (|AsyncMod_6#MapSpecMod#.EphemeralState.replies| (Lit (|AsyncMod_6#MapSpecMod#.Variables.ephemeral| (Lit |v#0@@341|)))) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |reply#0@@6|))))))
(|#AsyncMod_6#MapSpecMod#.EphemeralState.EphemeralState| (Lit (|AsyncMod_6#MapSpecMod#.EphemeralState.requests| |dt_update_tmp#1#1@@10|)) |dt_update#replies#0#1@@6|)))))
(|#AsyncMod_6#MapSpecMod#.Variables.Variables| (Lit (|AsyncMod_6#MapSpecMod#.Variables.persistent| |dt_update_tmp#0#1@@51|)) |dt_update#ephemeral#0#1@@16|))))))))
 :qid |Asyncsdfy.41:21|
 :weight 3
 :skolemid |3936|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.DoReply| (Lit |v#0@@341|) (Lit |v'#0@@238|) (Lit |reply#0@@6|)))
))))
(assert  (=> true (forall ((|v#0@@342| T@U) (|v'#0@@239| T@U) (|op#0@@3| T@U) ) (!  (=> (and (and (and (= (type |v#0@@342|) DatatypeTypeType) (= (type |v'#0@@239|) DatatypeTypeType)) (= (type |op#0@@3|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| |v#0@@342| |v'#0@@239| |op#0@@3|) (and (and ($Is |v#0@@342| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@239| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |op#0@@3| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))) true)
 :qid |Asyncsdfy.52:22|
 :skolemid |3937|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@342| |v'#0@@239| |op#0@@3|))
))))
(assert (forall ((|v#0@@343| T@U) (|v'#0@@240| T@U) (|op#0@@4| T@U) ) (!  (=> (and (and (and (= (type |v#0@@343|) DatatypeTypeType) (= (type |v'#0@@240|) DatatypeTypeType)) (= (type |op#0@@4|) DatatypeTypeType)) (and (and ($Is |v#0@@343| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@240| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |op#0@@4| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|))) (= (|AsyncMod_6#MapSpecMod#.__default.NextStep#requires| |v#0@@343| |v'#0@@240| |op#0@@4|) true))
 :qid |Asyncsdfy.52:22|
 :skolemid |3938|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep#requires| |v#0@@343| |v'#0@@240| |op#0@@4|))
)))
(assert  (=> true (forall ((|v#0@@344| T@U) (|v'#0@@241| T@U) (|op#0@@5| T@U) ) (!  (=> (and (and (and (= (type |v#0@@344|) DatatypeTypeType) (= (type |v'#0@@241|) DatatypeTypeType)) (= (type |op#0@@5|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| |v#0@@344| |v'#0@@241| |op#0@@5|) (and (and ($Is |v#0@@344| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@241| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |op#0@@5| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))) (and (and (=> (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| |op#0@@5|) (let ((|req#2| (|AsyncMod_6#MapSpecMod#.UIOp.req| |op#0@@5|)))
(|AsyncMod_6#MapSpecMod#.__default.DoRequest#canCall| |v#0@@344| |v'#0@@241| |req#2|))) (=> (not (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| |op#0@@5|)) (and (=> (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| |op#0@@5|) (let ((|reply#2| (|AsyncMod_6#MapSpecMod#.UIOp.reply| |op#0@@5|)))
(let ((|req#3| (|AsyncMod_6#MapSpecMod#.UIOp.req| |op#0@@5|)))
(|AsyncMod_6#MapSpecMod#.__default.DoExecute#canCall| |v#0@@344| |v'#0@@241| |req#3| |reply#2|)))) (=> (not (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| |op#0@@5|)) (let ((|reply#3| (|AsyncMod_6#MapSpecMod#.UIOp.reply| |op#0@@5|)))
(|AsyncMod_6#MapSpecMod#.__default.DoReply#canCall| |v#0@@344| |v'#0@@241| |reply#3|)))))) (= (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@344| |v'#0@@241| |op#0@@5|) (ite (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| |op#0@@5|) (let ((|req#0@@7| (|AsyncMod_6#MapSpecMod#.UIOp.req| |op#0@@5|)))
(|AsyncMod_6#MapSpecMod#.__default.DoRequest| |v#0@@344| |v'#0@@241| |req#0@@7|)) (ite (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| |op#0@@5|) (let ((|reply#0@@7| (|AsyncMod_6#MapSpecMod#.UIOp.reply| |op#0@@5|)))
(let ((|req#1| (|AsyncMod_6#MapSpecMod#.UIOp.req| |op#0@@5|)))
(|AsyncMod_6#MapSpecMod#.__default.DoExecute| |v#0@@344| |v'#0@@241| |req#1| |reply#0@@7|))) (let ((|reply#1| (|AsyncMod_6#MapSpecMod#.UIOp.reply| |op#0@@5|)))
(|AsyncMod_6#MapSpecMod#.__default.DoReply| |v#0@@344| |v'#0@@241| |reply#1|)))))))
 :qid |Asyncsdfy.52:22|
 :skolemid |3939|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@344| |v'#0@@241| |op#0@@5|))
))))
(assert  (=> true (forall ((|v#0@@345| T@U) (|v'#0@@242| T@U) (|op#0@@6| T@U) ) (!  (=> (and (and (and (= (type |v#0@@345|) DatatypeTypeType) (= (type |v'#0@@242|) DatatypeTypeType)) (= (type |op#0@@6|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| (Lit |v#0@@345|) (Lit |v'#0@@242|) (Lit |op#0@@6|)) (and (and ($Is |v#0@@345| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@242| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)) ($Is |op#0@@6| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))) (and (and (=> (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (Lit |op#0@@6|))))) (let ((|req#6| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit |op#0@@6|)))))
(|AsyncMod_6#MapSpecMod#.__default.DoRequest#canCall| (Lit |v#0@@345|) (Lit |v'#0@@242|) |req#6|))) (=> (not (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (Lit |op#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (Lit |op#0@@6|))))) (let ((|reply#6| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit |op#0@@6|)))))
(let ((|req#7| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit |op#0@@6|)))))
(|AsyncMod_6#MapSpecMod#.__default.DoExecute#canCall| (Lit |v#0@@345|) (Lit |v'#0@@242|) |req#7| |reply#6|)))) (=> (not (U_2_bool (Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (Lit |op#0@@6|)))))) (let ((|reply#7| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit |op#0@@6|)))))
(|AsyncMod_6#MapSpecMod#.__default.DoReply#canCall| (Lit |v#0@@345|) (Lit |v'#0@@242|) |reply#7|)))))) (= (|AsyncMod_6#MapSpecMod#.__default.NextStep| (Lit |v#0@@345|) (Lit |v'#0@@242|) (Lit |op#0@@6|)) (ite (|AsyncMod_6#MapSpecMod#.UIOp.RequestOp_q| (Lit |op#0@@6|)) (U_2_bool (let ((|req#4| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit |op#0@@6|)))))
(Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.__default.DoRequest| (Lit |v#0@@345|) (Lit |v'#0@@242|) |req#4|))))) (ite (|AsyncMod_6#MapSpecMod#.UIOp.ExecuteOp_q| (Lit |op#0@@6|)) (U_2_bool (let ((|reply#4| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit |op#0@@6|)))))
(let ((|req#5| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.req| (Lit |op#0@@6|)))))
(Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.__default.DoExecute| (Lit |v#0@@345|) (Lit |v'#0@@242|) |req#5| |reply#4|)))))) (U_2_bool (let ((|reply#5| (Lit (|AsyncMod_6#MapSpecMod#.UIOp.reply| (Lit |op#0@@6|)))))
(Lit (bool_2_U (|AsyncMod_6#MapSpecMod#.__default.DoReply| (Lit |v#0@@345|) (Lit |v'#0@@242|) |reply#5|))))))))))
 :qid |Asyncsdfy.52:22|
 :weight 3
 :skolemid |3940|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep| (Lit |v#0@@345|) (Lit |v'#0@@242|) (Lit |op#0@@6|)))
))))
(assert  (=> true (forall ((|v#0@@346| T@U) (|v'#0@@243| T@U) ) (!  (=> (and (and (= (type |v#0@@346|) DatatypeTypeType) (= (type |v'#0@@243|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.Next#canCall| |v#0@@346| |v'#0@@243|) (and ($Is |v#0@@346| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@243| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)))) true)
 :qid |Asyncsdfy.59:18|
 :skolemid |3941|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.Next| |v#0@@346| |v'#0@@243|))
))))
(assert (forall ((|v#0@@347| T@U) (|v'#0@@244| T@U) ) (!  (=> (and (and (= (type |v#0@@347|) DatatypeTypeType) (= (type |v'#0@@244|) DatatypeTypeType)) (and ($Is |v#0@@347| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@244| |Tclass.AsyncMod_6#MapSpecMod#.Variables|))) (= (|AsyncMod_6#MapSpecMod#.__default.Next#requires| |v#0@@347| |v'#0@@244|) true))
 :qid |Asyncsdfy.59:18|
 :skolemid |3942|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.Next#requires| |v#0@@347| |v'#0@@244|))
)))
(assert  (=> true (forall ((|v#0@@348| T@U) (|v'#0@@245| T@U) ) (!  (=> (and (and (= (type |v#0@@348|) DatatypeTypeType) (= (type |v'#0@@245|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.Next#canCall| |v#0@@348| |v'#0@@245|) (and ($Is |v#0@@348| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@245| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)))) (and (forall ((|step#0@@11| T@U) ) (!  (=> (and (= (type |step#0@@11|) DatatypeTypeType) ($Is |step#0@@11| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)) (|AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| |v#0@@348| |v'#0@@245| |step#0@@11|))
 :qid |Asyncsdfy.60:12|
 :skolemid |3944|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@348| |v'#0@@245| |step#0@@11|))
)) (= (|AsyncMod_6#MapSpecMod#.__default.Next| |v#0@@348| |v'#0@@245|) (exists ((|step#0@@12| T@U) ) (!  (and (= (type |step#0@@12|) DatatypeTypeType) (and ($Is |step#0@@12| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|) (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@348| |v'#0@@245| |step#0@@12|)))
 :qid |Asyncsdfy.60:12|
 :skolemid |3943|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@348| |v'#0@@245| |step#0@@12|))
)))))
 :qid |Asyncsdfy.59:18|
 :skolemid |3945|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.Next| |v#0@@348| |v'#0@@245|))
))))
(assert  (=> true (forall ((|v#0@@349| T@U) (|v'#0@@246| T@U) ) (!  (=> (and (and (= (type |v#0@@349|) DatatypeTypeType) (= (type |v'#0@@246|) DatatypeTypeType)) (or (|AsyncMod_6#MapSpecMod#.__default.Next#canCall| (Lit |v#0@@349|) (Lit |v'#0@@246|)) (and ($Is |v#0@@349| |Tclass.AsyncMod_6#MapSpecMod#.Variables|) ($Is |v'#0@@246| |Tclass.AsyncMod_6#MapSpecMod#.Variables|)))) (and (forall ((|step#1@@3| T@U) ) (!  (=> (and (= (type |step#1@@3|) DatatypeTypeType) ($Is |step#1@@3| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)) (|AsyncMod_6#MapSpecMod#.__default.NextStep#canCall| (Lit |v#0@@349|) (Lit |v'#0@@246|) |step#1@@3|))
 :qid |Asyncsdfy.60:12|
 :skolemid |3947|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@349| |v'#0@@246| |step#1@@3|))
)) (= (|AsyncMod_6#MapSpecMod#.__default.Next| (Lit |v#0@@349|) (Lit |v'#0@@246|)) (exists ((|step#1@@4| T@U) ) (!  (and (= (type |step#1@@4|) DatatypeTypeType) (and ($Is |step#1@@4| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|) (|AsyncMod_6#MapSpecMod#.__default.NextStep| (Lit |v#0@@349|) (Lit |v'#0@@246|) |step#1@@4|)))
 :qid |Asyncsdfy.60:12|
 :skolemid |3946|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.NextStep| |v#0@@349| |v'#0@@246| |step#1@@4|))
)))))
 :qid |Asyncsdfy.59:18|
 :weight 3
 :skolemid |3948|
 :pattern ( (|AsyncMod_6#MapSpecMod#.__default.Next| (Lit |v#0@@349|) (Lit |v'#0@@246|)))
))))
(assert (forall ((arg0@@616 T@U) ) (! (= (type (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| arg0@@616)) DatatypeTypeType)
 :qid |funType:#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| arg0@@616))
)))
(assert (forall ((|a#0#0#0@@10| T@U) ) (!  (=> (= (type |a#0#0#0@@10|) DatatypeTypeType) (= (DatatypeCtorId (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#0#0#0@@10|)) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp|))
 :qid |CrashTolerantsdfy.19:17|
 :skolemid |3949|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#0#0#0@@10|))
)))
(assert (forall ((d@@332 T@U) ) (!  (=> (= (type d@@332) DatatypeTypeType) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@332) (= (DatatypeCtorId d@@332) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp|)))
 :qid |unknown.0:0|
 :skolemid |3950|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@332))
)))
(assert (forall ((d@@333 T@U) ) (!  (=> (and (= (type d@@333) DatatypeTypeType) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@333)) (exists ((|a#1#0#0@@10| T@U) ) (!  (and (= (type |a#1#0#0@@10|) DatatypeTypeType) (= d@@333 (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#1#0#0@@10|)))
 :qid |CrashTolerantsdfy.19:17|
 :skolemid |3951|
 :no-pattern (type |a#1#0#0@@10|)
 :no-pattern (U_2_int |a#1#0#0@@10|)
 :no-pattern (U_2_bool |a#1#0#0@@10|)
)))
 :qid |unknown.0:0|
 :skolemid |3952|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@333))
)))
(assert (forall ((|a#2#0#0@@10| T@U) ) (!  (=> (= (type |a#2#0#0@@10|) DatatypeTypeType) (= ($Is (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#2#0#0@@10|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) ($Is |a#2#0#0@@10| |Tclass.AsyncMod_6#MapSpecMod#.UIOp|)))
 :qid |CrashTolerantsdfy.19:17|
 :skolemid |3953|
 :pattern ( ($Is (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#2#0#0@@10|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
)))
(assert (forall ((|a#3#0#0@@10| T@U) ($h@@254 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@10|) DatatypeTypeType) (= (type $h@@254) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@254)) (= ($IsAlloc (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#3#0#0@@10|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@254) ($IsAlloc |a#3#0#0@@10| |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@254)))
 :qid |CrashTolerantsdfy.19:17|
 :skolemid |3954|
 :pattern ( ($IsAlloc (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#3#0#0@@10|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@254))
)))
(assert (forall ((d@@334 T@U) ($h@@255 T@U) ) (!  (=> (and (and (= (type d@@334) DatatypeTypeType) (= (type $h@@255) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@255) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@334) ($IsAlloc d@@334 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@255)))) ($IsAlloc (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| d@@334) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@255))
 :qid |unknown.0:0|
 :skolemid |3955|
 :pattern ( ($IsAlloc (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| d@@334) |Tclass.AsyncMod_6#MapSpecMod#.UIOp| $h@@255))
)))
(assert (forall ((|a#4#0#0@@10| T@U) ) (!  (=> (= (type |a#4#0#0@@10|) DatatypeTypeType) (= (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| (Lit |a#4#0#0@@10|)) (Lit (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#4#0#0@@10|))))
 :qid |CrashTolerantsdfy.19:17|
 :skolemid |3956|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| (Lit |a#4#0#0@@10|)))
)))
(assert (forall ((|a#5#0#0@@16| T@U) ) (!  (=> (= (type |a#5#0#0@@16|) DatatypeTypeType) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#5#0#0@@16|)) |a#5#0#0@@16|))
 :qid |CrashTolerantsdfy.19:17|
 :skolemid |3957|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#5#0#0@@16|))
)))
(assert (forall ((|a#6#0#0@@16| T@U) ) (!  (=> (= (type |a#6#0#0@@16|) DatatypeTypeType) (< (DtRank |a#6#0#0@@16|) (DtRank (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#6#0#0@@16|))))
 :qid |CrashTolerantsdfy.19:17|
 :skolemid |3958|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp| |a#6#0#0@@16|))
)))
(assert (= (type |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|))
(assert (forall ((d@@335 T@U) ) (!  (=> (= (type d@@335) DatatypeTypeType) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| d@@335) (= (DatatypeCtorId d@@335) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|)))
 :qid |unknown.0:0|
 :skolemid |3959|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| d@@335))
)))
(assert (forall ((d@@336 T@U) ) (!  (=> (and (= (type d@@336) DatatypeTypeType) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| d@@336)) (= d@@336 |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|))
 :qid |unknown.0:0|
 :skolemid |3960|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| d@@336))
)))
(assert ($Is |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
(assert (forall (($h@@256 T@U) ) (!  (=> (and (= (type $h@@256) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@256)) ($IsAlloc |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@256))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3961|
 :pattern ( ($IsAlloc |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@256))
)))
(assert (= |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp| (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|)))
(assert (= (type |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp|) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp|))
(assert (forall ((d@@337 T@U) ) (!  (=> (= (type d@@337) DatatypeTypeType) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| d@@337) (= (DatatypeCtorId d@@337) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp|)))
 :qid |unknown.0:0|
 :skolemid |3962|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| d@@337))
)))
(assert (forall ((d@@338 T@U) ) (!  (=> (and (= (type d@@338) DatatypeTypeType) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| d@@338)) (= d@@338 |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp|))
 :qid |unknown.0:0|
 :skolemid |3963|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| d@@338))
)))
(assert ($Is |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
(assert (forall (($h@@257 T@U) ) (!  (=> (and (= (type $h@@257) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@257)) ($IsAlloc |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@257))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3964|
 :pattern ( ($IsAlloc |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@257))
)))
(assert (= |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp| (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp|)))
(assert (forall ((arg0@@617 Int) ) (! (= (type (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| arg0@@617)) DatatypeTypeType)
 :qid |funType:#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| arg0@@617))
)))
(assert (forall ((|a#17#0#0@@9| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#17#0#0@@9|)) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp|)
 :qid |CrashTolerantsdfy.22:17|
 :skolemid |3965|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#17#0#0@@9|))
)))
(assert (forall ((d@@339 T@U) ) (!  (=> (= (type d@@339) DatatypeTypeType) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@339) (= (DatatypeCtorId d@@339) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp|)))
 :qid |unknown.0:0|
 :skolemid |3966|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@339))
)))
(assert (forall ((d@@340 T@U) ) (!  (=> (and (= (type d@@340) DatatypeTypeType) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@340)) (exists ((|a#18#0#0@@9| Int) ) (! (= d@@340 (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#18#0#0@@9|))
 :qid |CrashTolerantsdfy.22:17|
 :skolemid |3967|
)))
 :qid |unknown.0:0|
 :skolemid |3968|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@340))
)))
(assert (forall ((|a#19#0#0@@9| Int) ) (! (= ($Is (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#19#0#0@@9|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) ($Is (int_2_U |a#19#0#0@@9|) Tclass._System.nat))
 :qid |CrashTolerantsdfy.22:17|
 :skolemid |3969|
 :pattern ( ($Is (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#19#0#0@@9|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
)))
(assert (forall ((|a#20#0#0@@9| Int) ($h@@258 T@U) ) (!  (=> (and (= (type $h@@258) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@258)) (= ($IsAlloc (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#20#0#0@@9|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@258) ($IsAlloc (int_2_U |a#20#0#0@@9|) Tclass._System.nat $h@@258)))
 :qid |CrashTolerantsdfy.22:17|
 :skolemid |3970|
 :pattern ( ($IsAlloc (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#20#0#0@@9|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@258))
)))
(assert (forall ((d@@341 T@U) ($h@@259 T@U) ) (!  (=> (and (and (= (type d@@341) DatatypeTypeType) (= (type $h@@259) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@259) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@341) ($IsAlloc d@@341 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@259)))) ($IsAlloc (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| d@@341)) Tclass._System.nat $h@@259))
 :qid |unknown.0:0|
 :skolemid |3971|
 :pattern ( ($IsAlloc (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| d@@341)) Tclass._System.nat $h@@259))
)))
(assert (forall ((|a#21#0#0@@8| Int) ) (! (= (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| (LitInt |a#21#0#0@@8|)) (Lit (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#21#0#0@@8|)))
 :qid |CrashTolerantsdfy.22:17|
 :skolemid |3972|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| (LitInt |a#21#0#0@@8|)))
)))
(assert (forall ((|a#22#0#0@@7| Int) ) (! (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#22#0#0@@7|)) |a#22#0#0@@7|)
 :qid |CrashTolerantsdfy.22:17|
 :skolemid |3973|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp| |a#22#0#0@@7|))
)))
(assert (forall ((arg0@@618 Int) ) (! (= (type (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| arg0@@618)) DatatypeTypeType)
 :qid |funType:#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| arg0@@618))
)))
(assert (forall ((|a#23#0#0@@5| Int) ) (! (= (DatatypeCtorId (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#23#0#0@@5|)) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp|)
 :qid |CrashTolerantsdfy.23:19|
 :skolemid |3974|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#23#0#0@@5|))
)))
(assert (forall ((d@@342 T@U) ) (!  (=> (= (type d@@342) DatatypeTypeType) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@342) (= (DatatypeCtorId d@@342) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp|)))
 :qid |unknown.0:0|
 :skolemid |3975|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@342))
)))
(assert (forall ((d@@343 T@U) ) (!  (=> (and (= (type d@@343) DatatypeTypeType) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@343)) (exists ((|a#24#0#0@@4| Int) ) (! (= d@@343 (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#24#0#0@@4|))
 :qid |CrashTolerantsdfy.23:19|
 :skolemid |3976|
)))
 :qid |unknown.0:0|
 :skolemid |3977|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@343))
)))
(assert (forall ((|a#25#0#0@@3| Int) ) (! (= ($Is (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#25#0#0@@3|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) ($Is (int_2_U |a#25#0#0@@3|) Tclass._System.nat))
 :qid |CrashTolerantsdfy.23:19|
 :skolemid |3978|
 :pattern ( ($Is (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#25#0#0@@3|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
)))
(assert (forall ((|a#26#0#0@@4| Int) ($h@@260 T@U) ) (!  (=> (and (= (type $h@@260) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@260)) (= ($IsAlloc (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#26#0#0@@4|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@260) ($IsAlloc (int_2_U |a#26#0#0@@4|) Tclass._System.nat $h@@260)))
 :qid |CrashTolerantsdfy.23:19|
 :skolemid |3979|
 :pattern ( ($IsAlloc (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#26#0#0@@4|) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@260))
)))
(assert (forall ((d@@344 T@U) ($h@@261 T@U) ) (!  (=> (and (and (= (type d@@344) DatatypeTypeType) (= (type $h@@261) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@261) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@344) ($IsAlloc d@@344 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@261)))) ($IsAlloc (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| d@@344)) Tclass._System.nat $h@@261))
 :qid |unknown.0:0|
 :skolemid |3980|
 :pattern ( ($IsAlloc (int_2_U (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| d@@344)) Tclass._System.nat $h@@261))
)))
(assert (forall ((|a#27#0#0@@3| Int) ) (! (= (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| (LitInt |a#27#0#0@@3|)) (Lit (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#27#0#0@@3|)))
 :qid |CrashTolerantsdfy.23:19|
 :skolemid |3981|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| (LitInt |a#27#0#0@@3|)))
)))
(assert (forall ((|a#28#0#0@@2| Int) ) (! (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#28#0#0@@2|)) |a#28#0#0@@2|)
 :qid |CrashTolerantsdfy.23:19|
 :skolemid |3982|
 :pattern ( (|#CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp| |a#28#0#0@@2|))
)))
(assert (= (type |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp|) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp|))
(assert (forall ((d@@345 T@U) ) (!  (=> (= (type d@@345) DatatypeTypeType) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| d@@345) (= (DatatypeCtorId d@@345) |##CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp|)))
 :qid |unknown.0:0|
 :skolemid |3983|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| d@@345))
)))
(assert (forall ((d@@346 T@U) ) (!  (=> (and (= (type d@@346) DatatypeTypeType) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| d@@346)) (= d@@346 |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp|))
 :qid |unknown.0:0|
 :skolemid |3984|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| d@@346))
)))
(assert ($Is |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
(assert (forall (($h@@262 T@U) ) (!  (=> (and (= (type $h@@262) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@262)) ($IsAlloc |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@262))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |3985|
 :pattern ( ($IsAlloc |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $h@@262))
)))
(assert (= |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp| (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp|)))
(assert (forall ((d@@347 T@U) ) (!  (=> (and (= (type d@@347) DatatypeTypeType) (|$IsA#CrashTolerantUIOp_5#MapSpecMod#.UIOp| d@@347)) (or (or (or (or (or (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@347) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| d@@347)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| d@@347)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@347)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@347)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| d@@347)))
 :qid |unknown.0:0|
 :skolemid |3986|
 :pattern ( (|$IsA#CrashTolerantUIOp_5#MapSpecMod#.UIOp| d@@347))
)))
(assert (forall ((d@@348 T@U) ) (!  (=> (and (= (type d@@348) DatatypeTypeType) ($Is d@@348 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|)) (or (or (or (or (or (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@348) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| d@@348)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| d@@348)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@348)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@348)) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| d@@348)))
 :qid |unknown.0:0|
 :skolemid |3987|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| d@@348) ($Is d@@348 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| d@@348) ($Is d@@348 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| d@@348) ($Is d@@348 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| d@@348) ($Is d@@348 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| d@@348) ($Is d@@348 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| d@@348) ($Is d@@348 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|))
)))
(assert (forall ((a@@235 T@U) (b@@185 T@U) ) (!  (=> (and (and (= (type a@@235) DatatypeTypeType) (= (type b@@185) DatatypeTypeType)) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| a@@235) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| b@@185))) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@235 b@@185) (|AsyncMod_6#MapSpecMod#.UIOp#Equal| (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| a@@235) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.baseOp| b@@185))))
 :qid |unknown.0:0|
 :skolemid |3988|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@235 b@@185) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| a@@235))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@235 b@@185) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.OperateOp_q| b@@185))
)))
(assert (forall ((a@@236 T@U) (b@@186 T@U) ) (!  (=> (and (and (= (type a@@236) DatatypeTypeType) (= (type b@@186) DatatypeTypeType)) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| a@@236) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| b@@186))) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@236 b@@186) true))
 :qid |unknown.0:0|
 :skolemid |3989|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@236 b@@186) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| a@@236))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@236 b@@186) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp_q| b@@186))
)))
(assert (forall ((a@@237 T@U) (b@@187 T@U) ) (!  (=> (and (and (= (type a@@237) DatatypeTypeType) (= (type b@@187) DatatypeTypeType)) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| a@@237) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| b@@187))) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@237 b@@187) true))
 :qid |unknown.0:0|
 :skolemid |3990|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@237 b@@187) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| a@@237))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@237 b@@187) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.SyncOp_q| b@@187))
)))
(assert (forall ((a@@238 T@U) (b@@188 T@U) ) (!  (=> (and (and (= (type a@@238) DatatypeTypeType) (= (type b@@188) DatatypeTypeType)) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| a@@238) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| b@@188))) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@238 b@@188) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| a@@238) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| b@@188))))
 :qid |unknown.0:0|
 :skolemid |3991|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@238 b@@188) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| a@@238))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@238 b@@188) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReqSyncOp_q| b@@188))
)))
(assert (forall ((a@@239 T@U) (b@@189 T@U) ) (!  (=> (and (and (= (type a@@239) DatatypeTypeType) (= (type b@@189) DatatypeTypeType)) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| a@@239) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| b@@189))) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@239 b@@189) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| a@@239) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.syncReqId| b@@189))))
 :qid |unknown.0:0|
 :skolemid |3992|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@239 b@@189) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| a@@239))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@239 b@@189) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.ReplySyncOp_q| b@@189))
)))
(assert (forall ((a@@240 T@U) (b@@190 T@U) ) (!  (=> (and (and (= (type a@@240) DatatypeTypeType) (= (type b@@190) DatatypeTypeType)) (and (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| a@@240) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| b@@190))) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@240 b@@190) true))
 :qid |unknown.0:0|
 :skolemid |3993|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@240 b@@190) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| a@@240))
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@240 b@@190) (|CrashTolerantUIOp_5#MapSpecMod#.UIOp.NoopOp_q| b@@190))
)))
(assert (forall ((a@@241 T@U) (b@@191 T@U) ) (!  (=> (and (= (type a@@241) DatatypeTypeType) (= (type b@@191) DatatypeTypeType)) (= (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@241 b@@191) (= a@@241 b@@191)))
 :qid |unknown.0:0|
 :skolemid |3994|
 :pattern ( (|CrashTolerantUIOp_5#MapSpecMod#.UIOp#Equal| a@@241 b@@191))
)))
(assert (= (type |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|) TyType))
(assert (= (Tag |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|) |Tagclass.CrashTolerantUIOp_5#MapSpecMod#.__default|))
(assert (= (TagFamily |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|) tytagFamily$_default))
(assert (forall ((bx@@183 T@U) ) (!  (=> (and (= (type bx@@183) BoxType) ($IsBox bx@@183 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|)) (and (= ($Box ($Unbox refType bx@@183)) bx@@183) ($Is ($Unbox refType bx@@183) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|)))
 :qid |unknown.0:0|
 :skolemid |3995|
 :pattern ( ($IsBox bx@@183 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|))
)))
(assert (forall (($o@@65 T@U) ) (!  (=> (= (type $o@@65) refType) (= ($Is $o@@65 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|)  (or (= $o@@65 null) (= (dtype $o@@65) |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|))))
 :qid |unknown.0:0|
 :skolemid |3996|
 :pattern ( ($Is $o@@65 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default|))
)))
(assert (forall (($o@@66 T@U) ($h@@263 T@U) ) (!  (=> (and (= (type $o@@66) refType) (= (type $h@@263) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@66 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default| $h@@263)  (or (= $o@@66 null) (U_2_bool (MapType1Select (MapType0Select $h@@263 $o@@66) alloc)))))
 :qid |unknown.0:0|
 :skolemid |3997|
 :pattern ( ($IsAlloc $o@@66 |Tclass.CrashTolerantUIOp_5#MapSpecMod#.__default| $h@@263))
)))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@619 T@T) (arg1@@288 T@T) ) (! (= (Ctor (MapType6Type arg0@@619 arg1@@288)) 28)
 :qid |ctor:MapType6Type|
)) (forall ((arg0@@620 T@T) (arg1@@289 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@620 arg1@@289)) arg0@@620)
 :qid |typeInv:MapType6TypeInv0|
 :pattern ( (MapType6Type arg0@@620 arg1@@289))
))) (forall ((arg0@@621 T@T) (arg1@@290 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@621 arg1@@290)) arg1@@290)
 :qid |typeInv:MapType6TypeInv1|
 :pattern ( (MapType6Type arg0@@621 arg1@@290))
))) (forall ((arg0@@622 T@U) (arg1@@291 T@U) (arg2@@170 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@622))))
(= (type (MapType6Select arg0@@622 arg1@@291 arg2@@170)) aVar1@@6))
 :qid |funType:MapType6Select|
 :pattern ( (MapType6Select arg0@@622 arg1@@291 arg2@@170))
))) (forall ((arg0@@623 T@U) (arg1@@292 T@U) (arg2@@171 T@U) (arg3@@98 T@U) ) (! (let ((aVar1@@7 (type arg3@@98)))
(let ((aVar0@@4 (type arg1@@292)))
(= (type (MapType6Store arg0@@623 arg1@@292 arg2@@171 arg3@@98)) (MapType6Type aVar0@@4 aVar1@@7))))
 :qid |funType:MapType6Store|
 :pattern ( (MapType6Store arg0@@623 arg1@@292 arg2@@171 arg3@@98))
))) (forall ((m@@68 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@68))))
 (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@68 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28)))
 :qid |mapAx0:MapType6Select|
 :weight 0
))) (and (and (forall ((val@@29 T@U) (m@@69 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@69 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@69 y0@@21 y1@@17)))
 :qid |mapAx1:MapType6Select:0|
 :weight 0
)) (forall ((val@@30 T@U) (m@@70 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@70 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@70 y0@@22 y1@@18)))
 :qid |mapAx1:MapType6Select:1|
 :weight 0
))) (forall ((val@@31 T@U) (m@@71 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@71 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@71 y0@@23 y1@@19)))
 :qid |mapAx2:MapType6Select|
 :weight 0
)))) (forall ((arg0@@624 T@U) (arg1@@293 T@U) (arg2@@172 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#0| arg0@@624 arg1@@293 arg2@@172 arg3@@99)) (MapType6Type refType boolType))
 :qid |funType:lambda#0|
 :pattern ( (|lambda#0| arg0@@624 arg1@@293 arg2@@172 arg3@@99))
))))
(assert (forall ((|l#0@@21| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@67 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1))))
 (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@67) refType)) (= (type $f@@1) (FieldType alpha@@8))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0@@21| |l#1| |l#2| |l#3|) $o@@67 $f@@1))  (=> (and (not (= $o@@67 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@67) |l#2|))) |l#3|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |3998|
 :pattern ( (MapType6Select (|lambda#0| |l#0@@21| |l#1| |l#2| |l#3|) $o@@67 $f@@1))
)))
(assert (forall ((arg0@@625 T@U) (arg1@@294 T@U) (arg2@@173 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#1| arg0@@625 arg1@@294 arg2@@173 arg3@@100)) (MapType6Type refType boolType))
 :qid |funType:lambda#1|
 :pattern ( (|lambda#1| arg0@@625 arg1@@294 arg2@@173 arg3@@100))
)))
(assert (forall ((|l#0@@22| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@68 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2))))
 (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@68) refType)) (= (type $f@@2) (FieldType alpha@@9))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@22| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@68 $f@@2))  (=> (and (not (= $o@@68 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@68) |l#2@@0|))) |l#3@@0|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |3999|
 :pattern ( (MapType6Select (|lambda#1| |l#0@@22| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@68 $f@@2))
)))
(assert (forall ((arg0@@626 T@U) (arg1@@295 T@U) (arg2@@174 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#2| arg0@@626 arg1@@295 arg2@@174 arg3@@101)) (MapType6Type refType boolType))
 :qid |funType:lambda#2|
 :pattern ( (|lambda#2| arg0@@626 arg1@@295 arg2@@174 arg3@@101))
)))
(assert (forall ((|l#0@@23| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@69 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3))))
 (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@69) refType)) (= (type $f@@3) (FieldType alpha@@10))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@23| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@69 $f@@3))  (=> (and (not (= $o@@69 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@69) |l#2@@1|))) |l#3@@1|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4000|
 :pattern ( (MapType6Select (|lambda#2| |l#0@@23| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@69 $f@@3))
)))
(assert (forall ((arg0@@627 T@U) (arg1@@296 T@U) (arg2@@175 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#3| arg0@@627 arg1@@296 arg2@@175 arg3@@102)) (MapType6Type refType boolType))
 :qid |funType:lambda#3|
 :pattern ( (|lambda#3| arg0@@627 arg1@@296 arg2@@175 arg3@@102))
)))
(assert (forall ((|l#0@@24| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@70 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4))))
 (=> (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@70) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@24| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@70 $f@@4))  (=> (and (not (= $o@@70 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@70) |l#2@@2|))) |l#3@@2|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4001|
 :pattern ( (MapType6Select (|lambda#3| |l#0@@24| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@70 $f@@4))
)))
(assert (forall ((arg0@@628 T@U) (arg1@@297 T@U) (arg2@@176 T@U) (arg3@@103 Bool) ) (! (= (type (|lambda#4| arg0@@628 arg1@@297 arg2@@176 arg3@@103)) (MapType6Type refType boolType))
 :qid |funType:lambda#4|
 :pattern ( (|lambda#4| arg0@@628 arg1@@297 arg2@@176 arg3@@103))
)))
(assert (forall ((|l#0@@25| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@71 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5))))
 (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@71) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@25| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@71 $f@@5))  (=> (and (not (= $o@@71 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@71) |l#2@@3|))) |l#3@@3|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4002|
 :pattern ( (MapType6Select (|lambda#4| |l#0@@25| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@71 $f@@5))
)))
(assert (forall ((arg0@@629 T@U) (arg1@@298 T@U) (arg2@@177 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#5| arg0@@629 arg1@@298 arg2@@177 arg3@@104)) (MapType6Type refType boolType))
 :qid |funType:lambda#5|
 :pattern ( (|lambda#5| arg0@@629 arg1@@298 arg2@@177 arg3@@104))
)))
(assert (forall ((|l#0@@26| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@72 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6))))
 (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@72) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@26| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@72 $f@@6))  (=> (and (not (= $o@@72 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@72) |l#2@@4|))) |l#3@@4|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4003|
 :pattern ( (MapType6Select (|lambda#5| |l#0@@26| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@72 $f@@6))
)))
(assert (forall ((|l#0@@27| Int) (|l#1@@5| Int) (|l#2@@5| T@U) (|l#3@@5| T@U) (|l#4| T@U) (|$l#2#heap#0| T@U) (|$l#2#lsn#0| T@U) ) (!  (=> (and (and (and (and (= (type |l#2@@5|) DatatypeTypeType) (= (type |l#3@@5|) DatatypeTypeType)) (= (type |l#4|) DatatypeTypeType)) (= (type |$l#2#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#2#lsn#0|) BoxType)) (= (MapType2Select (|lambda#6| |l#0@@27| |l#1@@5| |l#2@@5| |l#3@@5| |l#4|) |$l#2#heap#0| |$l#2#lsn#0|) ($Box (ite  (and (INTERNAL_le_boogie |l#0@@27| (U_2_int ($Unbox intType |$l#2#lsn#0|))) (INTERNAL_le_boogie (U_2_int ($Unbox intType |$l#2#lsn#0|)) |l#1@@5|)) (CoordinationSystemRefinement.__default.StampedMapToVersion (MsgHistoryMod.__default.MapPlusHistory |l#2@@5| (MsgHistoryMod.MsgHistory.DiscardRecent |l#3@@5| (U_2_int ($Unbox intType |$l#2#lsn#0|))))) |l#4|))))
 :qid |CoordinationSystemRefinementminidfy.54:82|
 :skolemid |4004|
 :pattern ( (MapType2Select (|lambda#6| |l#0@@27| |l#1@@5| |l#2@@5| |l#3@@5| |l#4|) |$l#2#heap#0| |$l#2#lsn#0|))
)))
(assert (forall ((|l#0@@28| T@U) (|$l#2#heap#0@@0| T@U) (|$l#2#lsn#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@28|) TyType) (= (type |$l#2#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#2#lsn#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#7| |l#0@@28|) |$l#2#heap#0@@0| |$l#2#lsn#0@@0|)) ($IsBox |$l#2#lsn#0@@0| |l#0@@28|)))
 :qid |DafnyPreludebpl.22:1|
 :skolemid |4005|
 :pattern ( (MapType2Select (|lambda#7| |l#0@@28|) |$l#2#heap#0@@0| |$l#2#lsn#0@@0|))
)))
(assert (forall ((|l#0@@29| Bool) (|$l#2#o#0| T@U) ) (!  (=> (= (type |$l#2#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#8| |l#0@@29|) |$l#2#o#0|)) |l#0@@29|))
 :qid |unknown.0:0|
 :skolemid |4006|
 :pattern ( (MapType0Select (|lambda#8| |l#0@@29|) |$l#2#o#0|))
)))
(assert (forall ((|l#0@@30| T@U) (|$l#2#heap#0@@1| T@U) (|$l#2#lsn#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@30|) (MapType0Type BoxType boolType)) (= (type |$l#2#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#2#lsn#0@@1|) BoxType)) (= (MapType2Select (|lambda#9| |l#0@@30|) |$l#2#heap#0@@1| |$l#2#lsn#0@@1|) |l#0@@30|))
 :qid |CoordinationSystemRefinementminidfy.63:7|
 :skolemid |4007|
 :pattern ( (MapType2Select (|lambda#9| |l#0@@30|) |$l#2#heap#0@@1| |$l#2#lsn#0@@1|))
)))
(assert (forall ((|l#0@@31| T@U) (|$l#2#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@31|) HandleTypeType) (= (type |$l#2#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#10| |l#0@@31|) |$l#2#ly#0|) |l#0@@31|))
 :qid |CoordinationSystemRefinementminidfy.63:7|
 :skolemid |4008|
 :pattern ( (MapType0Select (|lambda#10| |l#0@@31|) |$l#2#ly#0|))
)))
(assert (forall ((arg0@@630 T@U) (arg1@@299 T@U) (arg2@@178 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#26| arg0@@630 arg1@@299 arg2@@178 arg3@@105)) (MapType6Type refType boolType))
 :qid |funType:lambda#26|
 :pattern ( (|lambda#26| arg0@@630 arg1@@299 arg2@@178 arg3@@105))
)))
(assert (forall ((|l#0@@32| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@73 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7))))
 (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@73) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@32| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@73 $f@@7))  (=> (and (not (= $o@@73 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@73) |l#2@@6|))) |l#3@@6|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4009|
 :pattern ( (MapType6Select (|lambda#26| |l#0@@32| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@73 $f@@7))
)))
(assert (forall ((arg0@@631 T@U) (arg1@@300 T@U) (arg2@@179 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#27| arg0@@631 arg1@@300 arg2@@179 arg3@@106)) (MapType6Type refType boolType))
 :qid |funType:lambda#27|
 :pattern ( (|lambda#27| arg0@@631 arg1@@300 arg2@@179 arg3@@106))
)))
(assert (forall ((|l#0@@33| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ($o@@74 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8))))
 (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@74) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@33| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@74 $f@@8))  (=> (and (not (= $o@@74 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@74) |l#2@@7|))) |l#3@@7|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4010|
 :pattern ( (MapType6Select (|lambda#27| |l#0@@33| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@74 $f@@8))
)))
(assert (forall ((arg0@@632 T@U) (arg1@@301 T@U) (arg2@@180 T@U) (arg3@@107 Bool) ) (! (= (type (|lambda#53| arg0@@632 arg1@@301 arg2@@180 arg3@@107)) (MapType6Type refType boolType))
 :qid |funType:lambda#53|
 :pattern ( (|lambda#53| arg0@@632 arg1@@301 arg2@@180 arg3@@107))
)))
(assert (forall ((|l#0@@34| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ($o@@75 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9))))
 (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@75) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType6Select (|lambda#53| |l#0@@34| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@75 $f@@9))  (=> (and (not (= $o@@75 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@75) |l#2@@8|))) |l#3@@8|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4011|
 :pattern ( (MapType6Select (|lambda#53| |l#0@@34| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@75 $f@@9))
)))
(assert (forall ((arg0@@633 T@U) (arg1@@302 T@U) (arg2@@181 T@U) (arg3@@108 Bool) ) (! (= (type (|lambda#54| arg0@@633 arg1@@302 arg2@@181 arg3@@108)) (MapType6Type refType boolType))
 :qid |funType:lambda#54|
 :pattern ( (|lambda#54| arg0@@633 arg1@@302 arg2@@181 arg3@@108))
)))
(assert (forall ((|l#0@@35| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ($o@@76 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10))))
 (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@76) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType6Select (|lambda#54| |l#0@@35| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@76 $f@@10))  (=> (and (not (= $o@@76 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@76) |l#2@@9|))) |l#3@@9|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4012|
 :pattern ( (MapType6Select (|lambda#54| |l#0@@35| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@76 $f@@10))
)))
(assert (forall ((arg0@@634 T@U) (arg1@@303 T@U) (arg2@@182 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#55| arg0@@634 arg1@@303 arg2@@182 arg3@@109)) (MapType6Type refType boolType))
 :qid |funType:lambda#55|
 :pattern ( (|lambda#55| arg0@@634 arg1@@303 arg2@@182 arg3@@109))
)))
(assert (forall ((|l#0@@36| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ($o@@77 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11))))
 (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@77) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@36| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@77 $f@@11))  (=> (and (not (= $o@@77 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@77) |l#2@@10|))) |l#3@@10|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4013|
 :pattern ( (MapType6Select (|lambda#55| |l#0@@36| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@77 $f@@11))
)))
(assert (forall ((arg0@@635 T@U) (arg1@@304 T@U) (arg2@@183 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#56| arg0@@635 arg1@@304 arg2@@183 arg3@@110)) (MapType6Type refType boolType))
 :qid |funType:lambda#56|
 :pattern ( (|lambda#56| arg0@@635 arg1@@304 arg2@@183 arg3@@110))
)))
(assert (forall ((|l#0@@37| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ($o@@78 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12))))
 (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@78) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType6Select (|lambda#56| |l#0@@37| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@78 $f@@12))  (=> (and (not (= $o@@78 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@78) |l#2@@11|))) |l#3@@11|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4014|
 :pattern ( (MapType6Select (|lambda#56| |l#0@@37| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@78 $f@@12))
)))
(assert (forall ((arg0@@636 T@U) (arg1@@305 T@U) (arg2@@184 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#57| arg0@@636 arg1@@305 arg2@@184 arg3@@111)) (MapType6Type refType boolType))
 :qid |funType:lambda#57|
 :pattern ( (|lambda#57| arg0@@636 arg1@@305 arg2@@184 arg3@@111))
)))
(assert (forall ((|l#0@@38| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ($o@@79 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13))))
 (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@79) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType6Select (|lambda#57| |l#0@@38| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@79 $f@@13))  (=> (and (not (= $o@@79 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@79) |l#2@@12|))) |l#3@@12|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4015|
 :pattern ( (MapType6Select (|lambda#57| |l#0@@38| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@79 $f@@13))
)))
(assert (forall ((arg0@@637 T@U) (arg1@@306 T@U) (arg2@@185 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#58| arg0@@637 arg1@@306 arg2@@185 arg3@@112)) (MapType6Type refType boolType))
 :qid |funType:lambda#58|
 :pattern ( (|lambda#58| arg0@@637 arg1@@306 arg2@@185 arg3@@112))
)))
(assert (forall ((|l#0@@39| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ($o@@80 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14))))
 (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@80) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@39| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@80 $f@@14))  (=> (and (not (= $o@@80 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@80) |l#2@@13|))) |l#3@@13|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4016|
 :pattern ( (MapType6Select (|lambda#58| |l#0@@39| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@80 $f@@14))
)))
(assert (forall ((arg0@@638 T@U) (arg1@@307 T@U) (arg2@@186 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#59| arg0@@638 arg1@@307 arg2@@186 arg3@@113)) (MapType6Type refType boolType))
 :qid |funType:lambda#59|
 :pattern ( (|lambda#59| arg0@@638 arg1@@307 arg2@@186 arg3@@113))
)))
(assert (forall ((|l#0@@40| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ($o@@81 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15))))
 (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@81) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@40| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@81 $f@@15))  (=> (and (not (= $o@@81 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@81) |l#2@@14|))) |l#3@@14|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4017|
 :pattern ( (MapType6Select (|lambda#59| |l#0@@40| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@81 $f@@15))
)))
(assert (forall ((arg0@@639 T@U) (arg1@@308 T@U) (arg2@@187 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#60| arg0@@639 arg1@@308 arg2@@187 arg3@@114)) (MapType6Type refType boolType))
 :qid |funType:lambda#60|
 :pattern ( (|lambda#60| arg0@@639 arg1@@308 arg2@@187 arg3@@114))
)))
(assert (forall ((|l#0@@41| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ($o@@82 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16))))
 (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@82) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType6Select (|lambda#60| |l#0@@41| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@82 $f@@16))  (=> (and (not (= $o@@82 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@82) |l#2@@15|))) |l#3@@15|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4018|
 :pattern ( (MapType6Select (|lambda#60| |l#0@@41| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@82 $f@@16))
)))
(assert (forall ((arg0@@640 T@U) (arg1@@309 T@U) (arg2@@188 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#61| arg0@@640 arg1@@309 arg2@@188 arg3@@115)) (MapType6Type refType boolType))
 :qid |funType:lambda#61|
 :pattern ( (|lambda#61| arg0@@640 arg1@@309 arg2@@188 arg3@@115))
)))
(assert (forall ((|l#0@@42| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ($o@@83 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17))))
 (=> (and (and (and (and (= (type |l#0@@42|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@83) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@42| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@83 $f@@17))  (=> (and (not (= $o@@83 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@83) |l#2@@16|))) |l#3@@16|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4019|
 :pattern ( (MapType6Select (|lambda#61| |l#0@@42| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@83 $f@@17))
)))
(assert (forall ((arg0@@641 T@U) (arg1@@310 T@U) (arg2@@189 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#62| arg0@@641 arg1@@310 arg2@@189 arg3@@116)) (MapType6Type refType boolType))
 :qid |funType:lambda#62|
 :pattern ( (|lambda#62| arg0@@641 arg1@@310 arg2@@189 arg3@@116))
)))
(assert (forall ((|l#0@@43| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ($o@@84 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18))))
 (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@84) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType6Select (|lambda#62| |l#0@@43| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@84 $f@@18))  (=> (and (not (= $o@@84 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@84) |l#2@@17|))) |l#3@@17|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4020|
 :pattern ( (MapType6Select (|lambda#62| |l#0@@43| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@84 $f@@18))
)))
(assert (forall ((arg0@@642 T@U) (arg1@@311 T@U) (arg2@@190 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#63| arg0@@642 arg1@@311 arg2@@190 arg3@@117)) (MapType6Type refType boolType))
 :qid |funType:lambda#63|
 :pattern ( (|lambda#63| arg0@@642 arg1@@311 arg2@@190 arg3@@117))
)))
(assert (forall ((|l#0@@44| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ($o@@85 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19))))
 (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@85) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType6Select (|lambda#63| |l#0@@44| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@85 $f@@19))  (=> (and (not (= $o@@85 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@85) |l#2@@18|))) |l#3@@18|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4021|
 :pattern ( (MapType6Select (|lambda#63| |l#0@@44| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@85 $f@@19))
)))
(assert (forall ((arg0@@643 T@U) (arg1@@312 T@U) (arg2@@191 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#64| arg0@@643 arg1@@312 arg2@@191 arg3@@118)) (MapType6Type refType boolType))
 :qid |funType:lambda#64|
 :pattern ( (|lambda#64| arg0@@643 arg1@@312 arg2@@191 arg3@@118))
)))
(assert (forall ((|l#0@@45| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ($o@@86 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20))))
 (=> (and (and (and (and (= (type |l#0@@45|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (type $o@@86) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType6Select (|lambda#64| |l#0@@45| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@86 $f@@20))  (=> (and (not (= $o@@86 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@86) |l#2@@19|))) |l#3@@19|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4022|
 :pattern ( (MapType6Select (|lambda#64| |l#0@@45| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@86 $f@@20))
)))
(assert (forall ((arg0@@644 T@U) (arg1@@313 T@U) (arg2@@192 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#65| arg0@@644 arg1@@313 arg2@@192 arg3@@119)) (MapType6Type refType boolType))
 :qid |funType:lambda#65|
 :pattern ( (|lambda#65| arg0@@644 arg1@@313 arg2@@192 arg3@@119))
)))
(assert (forall ((|l#0@@46| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ($o@@87 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21))))
 (=> (and (and (and (and (= (type |l#0@@46|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type $o@@87) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType6Select (|lambda#65| |l#0@@46| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@87 $f@@21))  (=> (and (not (= $o@@87 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@87) |l#2@@20|))) |l#3@@20|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4023|
 :pattern ( (MapType6Select (|lambda#65| |l#0@@46| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@87 $f@@21))
)))
(assert (forall ((arg0@@645 T@U) (arg1@@314 T@U) (arg2@@193 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#66| arg0@@645 arg1@@314 arg2@@193 arg3@@120)) (MapType6Type refType boolType))
 :qid |funType:lambda#66|
 :pattern ( (|lambda#66| arg0@@645 arg1@@314 arg2@@193 arg3@@120))
)))
(assert (forall ((|l#0@@47| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ($o@@88 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22))))
 (=> (and (and (and (and (= (type |l#0@@47|) refType) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type $o@@88) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType6Select (|lambda#66| |l#0@@47| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@88 $f@@22))  (=> (and (not (= $o@@88 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@88) |l#2@@21|))) |l#3@@21|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4024|
 :pattern ( (MapType6Select (|lambda#66| |l#0@@47| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@88 $f@@22))
)))
(assert (forall ((arg0@@646 T@U) (arg1@@315 T@U) (arg2@@194 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#67| arg0@@646 arg1@@315 arg2@@194 arg3@@121)) (MapType6Type refType boolType))
 :qid |funType:lambda#67|
 :pattern ( (|lambda#67| arg0@@646 arg1@@315 arg2@@194 arg3@@121))
)))
(assert (forall ((|l#0@@48| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ($o@@89 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23))))
 (=> (and (and (and (and (= (type |l#0@@48|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type $o@@89) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType6Select (|lambda#67| |l#0@@48| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@89 $f@@23))  (=> (and (not (= $o@@89 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@89) |l#2@@22|))) |l#3@@22|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4025|
 :pattern ( (MapType6Select (|lambda#67| |l#0@@48| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@89 $f@@23))
)))
(assert (forall ((arg0@@647 T@U) (arg1@@316 T@U) (arg2@@195 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#68| arg0@@647 arg1@@316 arg2@@195 arg3@@122)) (MapType6Type refType boolType))
 :qid |funType:lambda#68|
 :pattern ( (|lambda#68| arg0@@647 arg1@@316 arg2@@195 arg3@@122))
)))
(assert (forall ((|l#0@@49| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ($o@@90 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24))))
 (=> (and (and (and (and (= (type |l#0@@49|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type $o@@90) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType6Select (|lambda#68| |l#0@@49| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@90 $f@@24))  (=> (and (not (= $o@@90 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@90) |l#2@@23|))) |l#3@@23|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4026|
 :pattern ( (MapType6Select (|lambda#68| |l#0@@49| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@90 $f@@24))
)))
(assert (forall ((arg0@@648 T@U) (arg1@@317 T@U) (arg2@@196 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#69| arg0@@648 arg1@@317 arg2@@196 arg3@@123)) (MapType6Type refType boolType))
 :qid |funType:lambda#69|
 :pattern ( (|lambda#69| arg0@@648 arg1@@317 arg2@@196 arg3@@123))
)))
(assert (forall ((|l#0@@50| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ($o@@91 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25))))
 (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type $o@@91) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType6Select (|lambda#69| |l#0@@50| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@91 $f@@25))  (=> (and (not (= $o@@91 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@91) |l#2@@24|))) |l#3@@24|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4027|
 :pattern ( (MapType6Select (|lambda#69| |l#0@@50| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@91 $f@@25))
)))
(assert (forall ((arg0@@649 T@U) (arg1@@318 T@U) (arg2@@197 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#70| arg0@@649 arg1@@318 arg2@@197 arg3@@124)) (MapType6Type refType boolType))
 :qid |funType:lambda#70|
 :pattern ( (|lambda#70| arg0@@649 arg1@@318 arg2@@197 arg3@@124))
)))
(assert (forall ((|l#0@@51| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ($o@@92 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26))))
 (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type $o@@92) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType6Select (|lambda#70| |l#0@@51| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@92 $f@@26))  (=> (and (not (= $o@@92 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@92) |l#2@@25|))) |l#3@@25|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4028|
 :pattern ( (MapType6Select (|lambda#70| |l#0@@51| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@92 $f@@26))
)))
(assert (forall ((arg0@@650 T@U) (arg1@@319 T@U) (arg2@@198 T@U) (arg3@@125 Bool) ) (! (= (type (|lambda#71| arg0@@650 arg1@@319 arg2@@198 arg3@@125)) (MapType6Type refType boolType))
 :qid |funType:lambda#71|
 :pattern ( (|lambda#71| arg0@@650 arg1@@319 arg2@@198 arg3@@125))
)))
(assert (forall ((|l#0@@52| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ($o@@93 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27))))
 (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (type $o@@93) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType6Select (|lambda#71| |l#0@@52| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@93 $f@@27))  (=> (and (not (= $o@@93 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@93) |l#2@@26|))) |l#3@@26|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4029|
 :pattern ( (MapType6Select (|lambda#71| |l#0@@52| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@93 $f@@27))
)))
(assert (forall ((arg0@@651 T@U) (arg1@@320 T@U) (arg2@@199 T@U) (arg3@@126 Bool) ) (! (= (type (|lambda#72| arg0@@651 arg1@@320 arg2@@199 arg3@@126)) (MapType6Type refType boolType))
 :qid |funType:lambda#72|
 :pattern ( (|lambda#72| arg0@@651 arg1@@320 arg2@@199 arg3@@126))
)))
(assert (forall ((|l#0@@53| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ($o@@94 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28))))
 (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@94) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType6Select (|lambda#72| |l#0@@53| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@94 $f@@28))  (=> (and (not (= $o@@94 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@94) |l#2@@27|))) |l#3@@27|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4030|
 :pattern ( (MapType6Select (|lambda#72| |l#0@@53| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@94 $f@@28))
)))
(assert (forall ((arg0@@652 T@U) (arg1@@321 T@U) (arg2@@200 T@U) (arg3@@127 Bool) ) (! (= (type (|lambda#73| arg0@@652 arg1@@321 arg2@@200 arg3@@127)) (MapType6Type refType boolType))
 :qid |funType:lambda#73|
 :pattern ( (|lambda#73| arg0@@652 arg1@@321 arg2@@200 arg3@@127))
)))
(assert (forall ((|l#0@@54| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ($o@@95 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29))))
 (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@95) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType6Select (|lambda#73| |l#0@@54| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@95 $f@@29))  (=> (and (not (= $o@@95 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@95) |l#2@@28|))) |l#3@@28|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4031|
 :pattern ( (MapType6Select (|lambda#73| |l#0@@54| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@95 $f@@29))
)))
(assert (forall ((arg0@@653 T@U) (arg1@@322 T@U) (arg2@@201 T@U) (arg3@@128 Bool) ) (! (= (type (|lambda#74| arg0@@653 arg1@@322 arg2@@201 arg3@@128)) (MapType6Type refType boolType))
 :qid |funType:lambda#74|
 :pattern ( (|lambda#74| arg0@@653 arg1@@322 arg2@@201 arg3@@128))
)))
(assert (forall ((|l#0@@55| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ($o@@96 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30))))
 (=> (and (and (and (and (= (type |l#0@@55|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@96) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType6Select (|lambda#74| |l#0@@55| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@96 $f@@30))  (=> (and (not (= $o@@96 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@96) |l#2@@29|))) |l#3@@29|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4032|
 :pattern ( (MapType6Select (|lambda#74| |l#0@@55| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@96 $f@@30))
)))
(assert (forall ((arg0@@654 T@U) (arg1@@323 T@U) (arg2@@202 T@U) (arg3@@129 Bool) ) (! (= (type (|lambda#75| arg0@@654 arg1@@323 arg2@@202 arg3@@129)) (MapType6Type refType boolType))
 :qid |funType:lambda#75|
 :pattern ( (|lambda#75| arg0@@654 arg1@@323 arg2@@202 arg3@@129))
)))
(assert (forall ((|l#0@@56| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ($o@@97 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31))))
 (=> (and (and (and (and (= (type |l#0@@56|) refType) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (type $o@@97) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType6Select (|lambda#75| |l#0@@56| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@97 $f@@31))  (=> (and (not (= $o@@97 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@97) |l#2@@30|))) |l#3@@30|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4033|
 :pattern ( (MapType6Select (|lambda#75| |l#0@@56| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@97 $f@@31))
)))
(assert (forall ((arg0@@655 T@U) (arg1@@324 T@U) (arg2@@203 T@U) (arg3@@130 Bool) ) (! (= (type (|lambda#76| arg0@@655 arg1@@324 arg2@@203 arg3@@130)) (MapType6Type refType boolType))
 :qid |funType:lambda#76|
 :pattern ( (|lambda#76| arg0@@655 arg1@@324 arg2@@203 arg3@@130))
)))
(assert (forall ((|l#0@@57| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ($o@@98 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32))))
 (=> (and (and (and (and (= (type |l#0@@57|) refType) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (type $o@@98) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType6Select (|lambda#76| |l#0@@57| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@98 $f@@32))  (=> (and (not (= $o@@98 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@98) |l#2@@31|))) |l#3@@31|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4034|
 :pattern ( (MapType6Select (|lambda#76| |l#0@@57| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@98 $f@@32))
)))
(assert (forall ((arg0@@656 T@U) (arg1@@325 T@U) (arg2@@204 T@U) (arg3@@131 Bool) ) (! (= (type (|lambda#77| arg0@@656 arg1@@325 arg2@@204 arg3@@131)) (MapType6Type refType boolType))
 :qid |funType:lambda#77|
 :pattern ( (|lambda#77| arg0@@656 arg1@@325 arg2@@204 arg3@@131))
)))
(assert (forall ((|l#0@@58| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ($o@@99 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33))))
 (=> (and (and (and (and (= (type |l#0@@58|) refType) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (type $o@@99) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType6Select (|lambda#77| |l#0@@58| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@99 $f@@33))  (=> (and (not (= $o@@99 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@99) |l#2@@32|))) |l#3@@32|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4035|
 :pattern ( (MapType6Select (|lambda#77| |l#0@@58| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@99 $f@@33))
)))
(assert (forall ((arg0@@657 T@U) (arg1@@326 T@U) (arg2@@205 T@U) (arg3@@132 Bool) ) (! (= (type (|lambda#78| arg0@@657 arg1@@326 arg2@@205 arg3@@132)) (MapType6Type refType boolType))
 :qid |funType:lambda#78|
 :pattern ( (|lambda#78| arg0@@657 arg1@@326 arg2@@205 arg3@@132))
)))
(assert (forall ((|l#0@@59| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ($o@@100 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34))))
 (=> (and (and (and (and (= (type |l#0@@59|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@100) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType6Select (|lambda#78| |l#0@@59| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@100 $f@@34))  (=> (and (not (= $o@@100 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@100) |l#2@@33|))) |l#3@@33|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4036|
 :pattern ( (MapType6Select (|lambda#78| |l#0@@59| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@100 $f@@34))
)))
(assert (forall ((arg0@@658 T@U) (arg1@@327 T@U) (arg2@@206 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#79| arg0@@658 arg1@@327 arg2@@206 arg3@@133)) (MapType6Type refType boolType))
 :qid |funType:lambda#79|
 :pattern ( (|lambda#79| arg0@@658 arg1@@327 arg2@@206 arg3@@133))
)))
(assert (forall ((|l#0@@60| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ($o@@101 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35))))
 (=> (and (and (and (and (= (type |l#0@@60|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@101) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType6Select (|lambda#79| |l#0@@60| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@101 $f@@35))  (=> (and (not (= $o@@101 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@101) |l#2@@34|))) |l#3@@34|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4037|
 :pattern ( (MapType6Select (|lambda#79| |l#0@@60| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@101 $f@@35))
)))
(assert (forall ((arg0@@659 T@U) (arg1@@328 T@U) (arg2@@207 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#80| arg0@@659 arg1@@328 arg2@@207 arg3@@134)) (MapType6Type refType boolType))
 :qid |funType:lambda#80|
 :pattern ( (|lambda#80| arg0@@659 arg1@@328 arg2@@207 arg3@@134))
)))
(assert (forall ((|l#0@@61| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ($o@@102 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36))))
 (=> (and (and (and (and (= (type |l#0@@61|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@102) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType6Select (|lambda#80| |l#0@@61| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@102 $f@@36))  (=> (and (not (= $o@@102 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@102) |l#2@@35|))) |l#3@@35|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4038|
 :pattern ( (MapType6Select (|lambda#80| |l#0@@61| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@102 $f@@36))
)))
(assert (forall ((arg0@@660 T@U) (arg1@@329 T@U) (arg2@@208 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#81| arg0@@660 arg1@@329 arg2@@208 arg3@@135)) (MapType6Type refType boolType))
 :qid |funType:lambda#81|
 :pattern ( (|lambda#81| arg0@@660 arg1@@329 arg2@@208 arg3@@135))
)))
(assert (forall ((|l#0@@62| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ($o@@103 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37))))
 (=> (and (and (and (and (= (type |l#0@@62|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@103) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType6Select (|lambda#81| |l#0@@62| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@103 $f@@37))  (=> (and (not (= $o@@103 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@103) |l#2@@36|))) |l#3@@36|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4039|
 :pattern ( (MapType6Select (|lambda#81| |l#0@@62| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@103 $f@@37))
)))
(assert (forall ((arg0@@661 T@U) (arg1@@330 T@U) (arg2@@209 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#82| arg0@@661 arg1@@330 arg2@@209 arg3@@136)) (MapType6Type refType boolType))
 :qid |funType:lambda#82|
 :pattern ( (|lambda#82| arg0@@661 arg1@@330 arg2@@209 arg3@@136))
)))
(assert (forall ((|l#0@@63| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ($o@@104 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38))))
 (=> (and (and (and (and (= (type |l#0@@63|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@104) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType6Select (|lambda#82| |l#0@@63| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@104 $f@@38))  (=> (and (not (= $o@@104 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@104) |l#2@@37|))) |l#3@@37|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4040|
 :pattern ( (MapType6Select (|lambda#82| |l#0@@63| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@104 $f@@38))
)))
(assert (forall ((arg0@@662 T@U) (arg1@@331 T@U) (arg2@@210 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#83| arg0@@662 arg1@@331 arg2@@210 arg3@@137)) (MapType6Type refType boolType))
 :qid |funType:lambda#83|
 :pattern ( (|lambda#83| arg0@@662 arg1@@331 arg2@@210 arg3@@137))
)))
(assert (forall ((|l#0@@64| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ($o@@105 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39))))
 (=> (and (and (and (and (= (type |l#0@@64|) refType) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (type $o@@105) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType6Select (|lambda#83| |l#0@@64| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@105 $f@@39))  (=> (and (not (= $o@@105 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@105) |l#2@@38|))) |l#3@@38|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4041|
 :pattern ( (MapType6Select (|lambda#83| |l#0@@64| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@105 $f@@39))
)))
(assert (forall ((arg0@@663 T@U) (arg1@@332 T@U) (arg2@@211 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#84| arg0@@663 arg1@@332 arg2@@211 arg3@@138)) (MapType6Type refType boolType))
 :qid |funType:lambda#84|
 :pattern ( (|lambda#84| arg0@@663 arg1@@332 arg2@@211 arg3@@138))
)))
(assert (forall ((|l#0@@65| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ($o@@106 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40))))
 (=> (and (and (and (and (= (type |l#0@@65|) refType) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (type $o@@106) refType)) (= (type $f@@40) (FieldType alpha@@47))) (= (U_2_bool (MapType6Select (|lambda#84| |l#0@@65| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@106 $f@@40))  (=> (and (not (= $o@@106 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@106) |l#2@@39|))) |l#3@@39|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4042|
 :pattern ( (MapType6Select (|lambda#84| |l#0@@65| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@106 $f@@40))
)))
(assert (forall ((arg0@@664 T@U) (arg1@@333 T@U) (arg2@@212 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#85| arg0@@664 arg1@@333 arg2@@212 arg3@@139)) (MapType6Type refType boolType))
 :qid |funType:lambda#85|
 :pattern ( (|lambda#85| arg0@@664 arg1@@333 arg2@@212 arg3@@139))
)))
(assert (forall ((|l#0@@66| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@40| Bool) ($o@@107 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41))))
 (=> (and (and (and (and (= (type |l#0@@66|) refType) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (type $o@@107) refType)) (= (type $f@@41) (FieldType alpha@@48))) (= (U_2_bool (MapType6Select (|lambda#85| |l#0@@66| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@107 $f@@41))  (=> (and (not (= $o@@107 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@107) |l#2@@40|))) |l#3@@40|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4043|
 :pattern ( (MapType6Select (|lambda#85| |l#0@@66| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@107 $f@@41))
)))
(assert (forall ((arg0@@665 T@U) (arg1@@334 T@U) (arg2@@213 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#86| arg0@@665 arg1@@334 arg2@@213 arg3@@140)) (MapType6Type refType boolType))
 :qid |funType:lambda#86|
 :pattern ( (|lambda#86| arg0@@665 arg1@@334 arg2@@213 arg3@@140))
)))
(assert (forall ((|l#0@@67| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@41| Bool) ($o@@108 T@U) ($f@@42 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42))))
 (=> (and (and (and (and (= (type |l#0@@67|) refType) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (type $o@@108) refType)) (= (type $f@@42) (FieldType alpha@@49))) (= (U_2_bool (MapType6Select (|lambda#86| |l#0@@67| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@108 $f@@42))  (=> (and (not (= $o@@108 |l#0@@67|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@108) |l#2@@41|))) |l#3@@41|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4044|
 :pattern ( (MapType6Select (|lambda#86| |l#0@@67| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@108 $f@@42))
)))
(assert (forall ((arg0@@666 T@U) (arg1@@335 T@U) (arg2@@214 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#87| arg0@@666 arg1@@335 arg2@@214 arg3@@141)) (MapType6Type refType boolType))
 :qid |funType:lambda#87|
 :pattern ( (|lambda#87| arg0@@666 arg1@@335 arg2@@214 arg3@@141))
)))
(assert (forall ((|l#0@@68| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@42| Bool) ($o@@109 T@U) ($f@@43 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43))))
 (=> (and (and (and (and (= (type |l#0@@68|) refType) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (type $o@@109) refType)) (= (type $f@@43) (FieldType alpha@@50))) (= (U_2_bool (MapType6Select (|lambda#87| |l#0@@68| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@109 $f@@43))  (=> (and (not (= $o@@109 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@109) |l#2@@42|))) |l#3@@42|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4045|
 :pattern ( (MapType6Select (|lambda#87| |l#0@@68| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@109 $f@@43))
)))
(assert (forall ((arg0@@667 T@U) (arg1@@336 T@U) (arg2@@215 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#88| arg0@@667 arg1@@336 arg2@@215 arg3@@142)) (MapType6Type refType boolType))
 :qid |funType:lambda#88|
 :pattern ( (|lambda#88| arg0@@667 arg1@@336 arg2@@215 arg3@@142))
)))
(assert (forall ((|l#0@@69| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@43| Bool) ($o@@110 T@U) ($f@@44 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44))))
 (=> (and (and (and (and (= (type |l#0@@69|) refType) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (type $o@@110) refType)) (= (type $f@@44) (FieldType alpha@@51))) (= (U_2_bool (MapType6Select (|lambda#88| |l#0@@69| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@110 $f@@44))  (=> (and (not (= $o@@110 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@110) |l#2@@43|))) |l#3@@43|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4046|
 :pattern ( (MapType6Select (|lambda#88| |l#0@@69| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@110 $f@@44))
)))
(assert (forall ((arg0@@668 T@U) (arg1@@337 T@U) (arg2@@216 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#89| arg0@@668 arg1@@337 arg2@@216 arg3@@143)) (MapType6Type refType boolType))
 :qid |funType:lambda#89|
 :pattern ( (|lambda#89| arg0@@668 arg1@@337 arg2@@216 arg3@@143))
)))
(assert (forall ((|l#0@@70| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@44| Bool) ($o@@111 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45))))
 (=> (and (and (and (and (= (type |l#0@@70|) refType) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type $o@@111) refType)) (= (type $f@@45) (FieldType alpha@@52))) (= (U_2_bool (MapType6Select (|lambda#89| |l#0@@70| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@111 $f@@45))  (=> (and (not (= $o@@111 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@111) |l#2@@44|))) |l#3@@44|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4047|
 :pattern ( (MapType6Select (|lambda#89| |l#0@@70| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@111 $f@@45))
)))
(assert (forall ((arg0@@669 T@U) (arg1@@338 T@U) (arg2@@217 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#90| arg0@@669 arg1@@338 arg2@@217 arg3@@144)) (MapType6Type refType boolType))
 :qid |funType:lambda#90|
 :pattern ( (|lambda#90| arg0@@669 arg1@@338 arg2@@217 arg3@@144))
)))
(assert (forall ((|l#0@@71| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@45| Bool) ($o@@112 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46))))
 (=> (and (and (and (and (= (type |l#0@@71|) refType) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type $o@@112) refType)) (= (type $f@@46) (FieldType alpha@@53))) (= (U_2_bool (MapType6Select (|lambda#90| |l#0@@71| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@112 $f@@46))  (=> (and (not (= $o@@112 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@112) |l#2@@45|))) |l#3@@45|))))
 :qid |DafnyPreludebpl.129:1|
 :skolemid |4048|
 :pattern ( (MapType6Select (|lambda#90| |l#0@@71| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@112 $f@@46))
)))
(assert (forall ((|l#0@@72| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@46| Int) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (and (and (= (type |l#0@@72|) TyType) (= (type |l#1@@46|) TyType)) (= (type |l#2@@46|) HandleTypeType)) (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#91| |l#0@@72| |l#1@@46| |l#2@@46| |l#3@@46|) |$l#0#heap#0| |$l#0#i#0|) (Apply1 |l#0@@72| |l#1@@46| |$l#0#heap#0| |l#2@@46| ($Box (int_2_U (INTERNAL_add_boogie (U_2_int ($Unbox intType |$l#0#i#0|)) |l#3@@46|))))))
 :qid |DafnyPreludebpl.22:1|
 :skolemid |4049|
 :pattern ( (MapType2Select (|lambda#91| |l#0@@72| |l#1@@46| |l#2@@46| |l#3@@46|) |$l#0#heap#0| |$l#0#i#0|))
)))
(assert (forall ((|l#0@@73| T@U) (|l#1@@47| Int) (|l#2@@47| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@73|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#92| |l#0@@73| |l#1@@47| |l#2@@47|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@73|) (and (INTERNAL_le_boogie |l#1@@47| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (INTERNAL_lt_boogie (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@47|)))))
 :qid |DafnyPreludebpl.22:1|
 :skolemid |4050|
 :pattern ( (MapType2Select (|lambda#92| |l#0@@73| |l#1@@47| |l#2@@47|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))
)))
(assert (forall ((|l#0@@74| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|$w#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@74|) TyType) (= (type |l#1@@48|) (MapType0Type BoxType boolType))) (= (type |l#2@@48|) BoxType)) (= (type |$w#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#106| |l#0@@74| |l#1@@48| |l#2@@48|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@74|) (and (U_2_bool (MapType0Select |l#1@@48| |$w#0|)) (not (= |$w#0| |l#2@@48|))))))
 :qid |unknown.0:0|
 :skolemid |4051|
 :pattern ( (MapType0Select (|lambda#106| |l#0@@74| |l#1@@48| |l#2@@48|) |$w#0|))
)))
(assert (forall ((|l#0@@75| T@U) (|$w#0@@0| T@U) ) (!  (=> (and (= (type |l#0@@75|) (MapType0Type BoxType BoxType)) (= (type |$w#0@@0|) BoxType)) (= (MapType0Select (|lambda#107| |l#0@@75|) |$w#0@@0|) (MapType0Select |l#0@@75| |$w#0@@0|)))
 :qid |MapRemovesdfy.22:44|
 :skolemid |4052|
 :pattern ( (MapType0Select (|lambda#107| |l#0@@75|) |$w#0@@0|))
)))
(assert (forall ((|l#0@@76| T@U) (|l#1@@49| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (and (= (type |l#0@@76|) TyType) (= (type |l#1@@49|) (SeqType BoxType))) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#112| |l#0@@76| |l#1@@49|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) ($Box (bool_2_U (LinearMaybe.__default.has |l#0@@76| (|Seq#Index| |l#1@@49| (U_2_int ($Unbox intType |$l#0#i#0@@1|))))))))
 :qid |unknown.0:0|
 :skolemid |4053|
 :pattern ( (MapType2Select (|lambda#112| |l#0@@76| |l#1@@49|) |$l#0#heap#0@@1| |$l#0#i#0@@1|))
)))
(assert (forall ((|l#0@@77| T@U) (|$w#0@@1| T@U) ) (!  (=> (and (= (type |l#0@@77|) TyType) (= (type |$w#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#122| |l#0@@77|) |$w#0@@1|))  (and ($IsBox |$w#0@@1| |l#0@@77|) (TotalKMMapMod.__default.AnyKey ($Unbox (SeqType BoxType) |$w#0@@1|)))))
 :qid |KeyTypesdfy.10:8|
 :skolemid |4054|
 :pattern ( (MapType0Select (|lambda#122| |l#0@@77|) |$w#0@@1|))
)))
(assert (forall ((|l#0@@78| T@U) (|$w#0@@2| T@U) ) (!  (=> (and (= (type |l#0@@78|) BoxType) (= (type |$w#0@@2|) BoxType)) (= (MapType0Select (|lambda#123| |l#0@@78|) |$w#0@@2|) |l#0@@78|))
 :qid |TotalMapsdfyTotalKMMapMod.28:5|
 :skolemid |4055|
 :pattern ( (MapType0Select (|lambda#123| |l#0@@78|) |$w#0@@2|))
)))
(assert (forall ((|l#0@@79| T@U) (|l#1@@50| T@U) (|l#2@@49| Int) (|$y#0| T@U) ) (!  (=> (and (and (= (type |l#0@@79|) TyType) (= (type |l#1@@50|) (MapType0Type BoxType intType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#126| |l#0@@79| |l#1@@50| |l#2@@49|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@79|) (> (U_2_int (MapType0Select |l#1@@50| |$y#0|)) |l#2@@49|))))
 :qid |unknown.0:0|
 :skolemid |4056|
 :pattern ( (MapType0Select (|lambda#126| |l#0@@79| |l#1@@50| |l#2@@49|) |$y#0|))
)))
(assert (forall ((|l#0@@80| T@U) (|l#1@@51| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@80|) TyType) (= (type |l#1@@51|) (MapType0Type BoxType boolType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#128| |l#0@@80| |l#1@@51|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@80|) (U_2_bool (MapType0Select |l#1@@51| |$y#0@@0|)))))
 :qid |unknown.0:0|
 :skolemid |4057|
 :pattern ( (MapType0Select (|lambda#128| |l#0@@80| |l#1@@51|) |$y#0@@0|))
)))
(assert (forall ((|l#0@@81| T@U) (|l#1@@52| T@U) (|l#2@@50| T@U) (|l#3@@47| T@U) (|$l#0#heap#0@@2| T@U) (|$l#0#i#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@81|) TyType) (= (type |l#1@@52|) TyType)) (= (type |l#2@@50|) HandleTypeType)) (= (type |l#3@@47|) (SeqType BoxType))) (= (type |$l#0#heap#0@@2|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@2|) BoxType)) (= (MapType2Select (|lambda#134| |l#0@@81| |l#1@@52| |l#2@@50| |l#3@@47|) |$l#0#heap#0@@2| |$l#0#i#0@@2|) (Apply1 |l#0@@81| |l#1@@52| |$l#0#heap#0@@2| |l#2@@50| (|Seq#Index| |l#3@@47| (U_2_int ($Unbox intType |$l#0#i#0@@2|))))))
 :qid |unknown.0:0|
 :skolemid |4058|
 :pattern ( (MapType2Select (|lambda#134| |l#0@@81| |l#1@@52| |l#2@@50| |l#3@@47|) |$l#0#heap#0@@2| |$l#0#i#0@@2|))
)))
(assert (forall ((|l#0@@82| T@U) (|l#1@@53| Int) (|l#2@@51| Int) (|l#3@@48| T@U) (|l#4@@0| T@U) (|l#5| T@U) (|l#6| T@U) (|$l#0#heap#0@@3| T@U) (|$l#0#i#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |l#0@@82|) TyType) (= (type |l#3@@48|) TyType)) (= (type |l#4@@0|) TyType)) (= (type |l#5|) HandleTypeType)) (= (type |l#6|) (SeqType BoxType))) (= (type |$l#0#heap#0@@3|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@3|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#135| |l#0@@82| |l#1@@53| |l#2@@51| |l#3@@48| |l#4@@0| |l#5| |l#6|) |$l#0#heap#0@@3| |$l#0#i#0@@3|))  (and ($IsBox |$l#0#i#0@@3| |l#0@@82|) (and (and (INTERNAL_le_boogie |l#1@@53| (U_2_int ($Unbox intType |$l#0#i#0@@3|))) (INTERNAL_lt_boogie (U_2_int ($Unbox intType |$l#0#i#0@@3|)) |l#2@@51|)) (Requires1 |l#3@@48| |l#4@@0| |$l#0#heap#0@@3| |l#5| (|Seq#Index| |l#6| (U_2_int ($Unbox intType |$l#0#i#0@@3|))))))))
 :qid |DafnyPreludebpl.22:1|
 :skolemid |4059|
 :pattern ( (MapType2Select (|lambda#135| |l#0@@82| |l#1@@53| |l#2@@51| |l#3@@48| |l#4@@0| |l#5| |l#6|) |$l#0#heap#0@@3| |$l#0#i#0@@3|))
)))
(assert (forall ((arg0@@670 T@U) (arg1@@339 Int) (arg2@@218 Int) (arg3@@145 T@U) (arg4@@59 T@U) (arg5@@22 T@U) (arg6@@8 T@U) (arg7@@4 T@U) (arg8@@4 T@U) (arg9@@2 T@U) (arg10@@2 T@U) (arg11 T@U) (arg12 T@U) ) (! (= (type (|lambda#136| arg0@@670 arg1@@339 arg2@@218 arg3@@145 arg4@@59 arg5@@22 arg6@@8 arg7@@4 arg8@@4 arg9@@2 arg10@@2 arg11 arg12)) (MapType0Type refType boolType))
 :qid |funType:lambda#136|
 :pattern ( (|lambda#136| arg0@@670 arg1@@339 arg2@@218 arg3@@145 arg4@@59 arg5@@22 arg6@@8 arg7@@4 arg8@@4 arg9@@2 arg10@@2 arg11 arg12))
)))
(assert (forall ((|l#0@@83| T@U) (|l#1@@54| Int) (|l#2@@52| Int) (|l#3@@49| T@U) (|l#4@@1| T@U) (|l#5@@0| T@U) (|l#6@@0| T@U) (|l#7| T@U) (|l#8| T@U) (|l#9| T@U) (|l#10| T@U) (|l#11| T@U) (|l#12| T@U) (|$l#0#o#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@83|) TyType) (= (type |l#3@@49|) TyType)) (= (type |l#4@@1|) TyType)) (= (type |l#5@@0|) (MapType0Type refType MapType1Type))) (= (type |l#6@@0|) HandleTypeType)) (= (type |l#7|) (SeqType BoxType))) (= (type |l#8|) TyType)) (= (type |l#9|) TyType)) (= (type |l#10|) (MapType0Type refType MapType1Type))) (= (type |l#11|) HandleTypeType)) (= (type |l#12|) (SeqType BoxType))) (= (type |$l#0#o#0|) refType)) (= (U_2_bool (MapType0Select (|lambda#136| |l#0@@83| |l#1@@54| |l#2@@52| |l#3@@49| |l#4@@1| |l#5@@0| |l#6@@0| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12|) |$l#0#o#0|)) (exists ((|i#3@@1| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| |l#0@@83|) (and (and (INTERNAL_le_boogie |l#1@@54| |i#3@@1|) (INTERNAL_lt_boogie |i#3@@1| |l#2@@52|)) (U_2_bool (MapType0Select (Reads1 |l#3@@49| |l#4@@1| |l#5@@0| |l#6@@0| (|Seq#Index| |l#7| |i#3@@1|)) ($Box |o#0|))))) (= ($Box |$l#0#o#0|) ($Box |o#0|))))
 :qid |Sequencesidfy.142:17|
 :skolemid |2444|
 :pattern ( (MapType0Select (Reads1 |l#8| |l#9| |l#10| |l#11| (|Seq#Index| |l#12| |i#3@@1|)) ($Box |o#0|)))
))))
 :qid |unknown.0:0|
 :skolemid |4060|
 :pattern ( (MapType0Select (|lambda#136| |l#0@@83| |l#1@@54| |l#2@@52| |l#3@@49| |l#4@@1| |l#5@@0| |l#6@@0| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@84| T@U) (|l#1@@55| Int) (|l#2@@53| Int) (|l#3@@50| T@U) (|l#4@@2| T@U) (|l#5@@1| T@U) (|l#6@@1| T@U) (|l#7@@0| T@U) (|l#8@@0| T@U) (|l#9@@0| T@U) (|l#10@@0| T@U) (|$l#0#heap#0@@4| T@U) (|$l#0#i#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@84|) TyType) (= (type |l#3@@50|) TyType)) (= (type |l#4@@2|) TyType)) (= (type |l#5@@1|) HandleTypeType)) (= (type |l#6@@1|) (SeqType BoxType))) (= (type |l#7@@0|) TyType)) (= (type |l#8@@0|) TyType)) (= (type |l#9@@0|) HandleTypeType)) (= (type |l#10@@0|) (SeqType BoxType))) (= (type |$l#0#heap#0@@4|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@4|) BoxType)) (= (MapType2Select (|lambda#137| |l#0@@84| |l#1@@55| |l#2@@53| |l#3@@50| |l#4@@2| |l#5@@1| |l#6@@1| |l#7@@0| |l#8@@0| |l#9@@0| |l#10@@0|) |$l#0#heap#0@@4| |$l#0#i#0@@4|) (SetRef_to_SetBox (|lambda#136| |l#0@@84| |l#1@@55| |l#2@@53| |l#3@@50| |l#4@@2| |$l#0#heap#0@@4| |l#5@@1| |l#6@@1| |l#7@@0| |l#8@@0| |$l#0#heap#0@@4| |l#9@@0| |l#10@@0|))))
 :qid |unknown.0:0|
 :skolemid |4061|
 :pattern ( (MapType2Select (|lambda#137| |l#0@@84| |l#1@@55| |l#2@@53| |l#3@@50| |l#4@@2| |l#5@@1| |l#6@@1| |l#7@@0| |l#8@@0| |l#9@@0| |l#10@@0|) |$l#0#heap#0@@4| |$l#0#i#0@@4|))
)))
(assert (forall ((|$l#2#heap#0@@2| T@U) (|$l#2#a#0| T@U) (|$l#2#e#0| T@U) ) (!  (=> (and (and (= (type |$l#2#heap#0@@2|) (MapType0Type refType MapType1Type)) (= (type |$l#2#a#0|) BoxType)) (= (type |$l#2#e#0|) BoxType)) (= (MapType3Select |lambda#149| |$l#2#heap#0@@2| |$l#2#a#0| |$l#2#e#0|) ($Box (|Set#Union| ($Unbox (MapType0Type BoxType boolType) |$l#2#a#0|) ($Unbox (MapType0Type BoxType boolType) |$l#2#e#0|)))))
 :qid |DafnyPreludebpl.545:12|
 :skolemid |4062|
 :pattern ( (MapType3Select |lambda#149| |$l#2#heap#0@@2| |$l#2#a#0| |$l#2#e#0|))
)))
(assert (forall ((|l#0@@85| T@U) (|l#1@@56| T@U) (|$l#2#heap#0@@3| T@U) (|$l#2#a#0@@0| T@U) (|$l#2#e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |l#0@@85|) TyType) (= (type |l#1@@56|) TyType)) (= (type |$l#2#heap#0@@3|) (MapType0Type refType MapType1Type))) (= (type |$l#2#a#0@@0|) BoxType)) (= (type |$l#2#e#0@@0|) BoxType)) (= (U_2_bool (MapType3Select (|lambda#150| |l#0@@85| |l#1@@56|) |$l#2#heap#0@@3| |$l#2#a#0@@0| |$l#2#e#0@@0|))  (and ($IsBox |$l#2#a#0@@0| |l#0@@85|) ($IsBox |$l#2#e#0@@0| |l#1@@56|))))
 :qid |unknown.0:0|
 :skolemid |4063|
 :pattern ( (MapType3Select (|lambda#150| |l#0@@85| |l#1@@56|) |$l#2#heap#0@@3| |$l#2#a#0@@0| |$l#2#e#0@@0|))
)))
(assert (forall ((|l#0@@86| T@U) (|$l#2#heap#0@@4| T@U) (|$l#2#a#0@@1| T@U) (|$l#2#e#0@@1| T@U) ) (!  (=> (and (and (and (= (type |l#0@@86|) (MapType0Type BoxType boolType)) (= (type |$l#2#heap#0@@4|) (MapType0Type refType MapType1Type))) (= (type |$l#2#a#0@@1|) BoxType)) (= (type |$l#2#e#0@@1|) BoxType)) (= (MapType3Select (|lambda#152| |l#0@@86|) |$l#2#heap#0@@4| |$l#2#a#0@@1| |$l#2#e#0@@1|) |l#0@@86|))
 :qid |Sequencesidfy.350:15|
 :skolemid |4064|
 :pattern ( (MapType3Select (|lambda#152| |l#0@@86|) |$l#2#heap#0@@4| |$l#2#a#0@@1| |$l#2#e#0@@1|))
)))
(assert (forall ((|l#0@@87| T@U) (|l#1@@57| T@U) (|l#2@@54| T@U) (|$w#0@@3| T@U) ) (!  (=> (and (and (and (= (type |l#0@@87|) TyType) (= (type |l#1@@57|) (MapType0Type BoxType boolType))) (= (type |l#2@@54|) (MapType0Type BoxType boolType))) (= (type |$w#0@@3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#169| |l#0@@87| |l#1@@57| |l#2@@54|) |$w#0@@3|))  (and ($IsBox |$w#0@@3| |l#0@@87|) (and (U_2_bool (MapType0Select |l#1@@57| |$w#0@@3|)) (not (U_2_bool (MapType0Select |l#2@@54| |$w#0@@3|)))))))
 :qid |unknown.0:0|
 :skolemid |4065|
 :pattern ( (MapType0Select (|lambda#169| |l#0@@87| |l#1@@57| |l#2@@54|) |$w#0@@3|))
)))
(assert (forall ((|l#0@@88| T@U) (|l#1@@58| T@U) (|l#2@@55| T@U) (|$w#0@@4| T@U) ) (!  (=> (and (and (and (= (type |l#0@@88|) TyType) (= (type |l#1@@58|) TyType)) (= (type |l#2@@55|) (IMapType BoxType BoxType))) (= (type |$w#0@@4|) BoxType)) (= (MapType0Select (|lambda#174| |l#0@@88| |l#1@@58| |l#2@@55|) |$w#0@@4|) (let ((|a#0@@86| (|$let#8_a| |l#0@@88| |l#1@@58| |l#2@@55| |$w#0@@4|)))
|a#0@@86|)))
 :qid |unknown.0:0|
 :skolemid |4066|
 :pattern ( (MapType0Select (|lambda#174| |l#0@@88| |l#1@@58| |l#2@@55|) |$w#0@@4|))
)))
(assert (forall ((|l#0@@89| T@U) (|l#1@@59| T@U) (|l#2@@56| T@U) (|$w#0@@5| T@U) ) (!  (=> (and (and (and (= (type |l#0@@89|) TyType) (= (type |l#1@@59|) (MapType0Type BoxType boolType))) (= (type |l#2@@56|) (MapType0Type BoxType boolType))) (= (type |$w#0@@5|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#185| |l#0@@89| |l#1@@59| |l#2@@56|) |$w#0@@5|))  (and ($IsBox |$w#0@@5| |l#0@@89|) (and (U_2_bool (MapType0Select |l#1@@59| |$w#0@@5|)) (U_2_bool (MapType0Select |l#2@@56| |$w#0@@5|))))))
 :qid |unknown.0:0|
 :skolemid |4067|
 :pattern ( (MapType0Select (|lambda#185| |l#0@@89| |l#1@@59| |l#2@@56|) |$w#0@@5|))
)))
(assert (forall ((|l#0@@90| T@U) (|l#1@@60| T@U) (|l#2@@57| T@U) (|$w#0@@6| T@U) ) (!  (=> (and (and (and (= (type |l#0@@90|) (MapType0Type BoxType boolType)) (= (type |l#1@@60|) (MapType0Type BoxType BoxType))) (= (type |l#2@@57|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@6|) BoxType)) (= (MapType0Select (|lambda#200| |l#0@@90| |l#1@@60| |l#2@@57|) |$w#0@@6|) (ite (U_2_bool (MapType0Select |l#0@@90| |$w#0@@6|)) (MapType0Select |l#1@@60| |$w#0@@6|) (MapType0Select |l#2@@57| |$w#0@@6|))))
 :qid |Mapsidfy.134:52|
 :skolemid |4068|
 :pattern ( (MapType0Select (|lambda#200| |l#0@@90| |l#1@@60| |l#2@@57|) |$w#0@@6|))
)))
(assert (forall ((|l#0@@91| T@U) (|l#1@@61| T@U) (|l#2@@58| T@U) (|l#3@@51| T@U) (|l#4@@3| T@U) (|$w#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@91|) (MapType0Type BoxType boolType)) (= (type |l#1@@61|) (MapType0Type BoxType BoxType))) (= (type |l#2@@58|) (MapType0Type BoxType boolType))) (= (type |l#3@@51|) (MapType0Type BoxType BoxType))) (= (type |l#4@@3|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@7|) BoxType)) (= (MapType0Select (|lambda#220| |l#0@@91| |l#1@@61| |l#2@@58| |l#3@@51| |l#4@@3|) |$w#0@@7|) (ite (U_2_bool (MapType0Select |l#0@@91| |$w#0@@7|)) (MapType0Select |l#1@@61| |$w#0@@7|) (ite (U_2_bool (MapType0Select |l#2@@58| |$w#0@@7|)) (MapType0Select |l#3@@51| |$w#0@@7|) (MapType0Select |l#4@@3| |$w#0@@7|)))))
 :qid |Mapsidfy.212:9|
 :skolemid |4069|
 :pattern ( (MapType0Select (|lambda#220| |l#0@@91| |l#1@@61| |l#2@@58| |l#3@@51| |l#4@@3|) |$w#0@@7|))
)))
(assert (forall ((|l#0@@92| T@U) (|l#1@@62| Int) (|l#2@@59| Int) (|$y#0@@1| T@U) ) (!  (=> (and (= (type |l#0@@92|) TyType) (= (type |$y#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#227| |l#0@@92| |l#1@@62| |l#2@@59|) |$y#0@@1|))  (and ($IsBox |$y#0@@1| |l#0@@92|) (and (INTERNAL_le_boogie |l#1@@62| (U_2_int ($Unbox intType |$y#0@@1|))) (INTERNAL_lt_boogie (U_2_int ($Unbox intType |$y#0@@1|)) |l#2@@59|)))))
 :qid |DafnyPreludebpl.22:1|
 :skolemid |4070|
 :pattern ( (MapType0Select (|lambda#227| |l#0@@92| |l#1@@62| |l#2@@59|) |$y#0@@1|))
)))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |v#0@@350| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |v'#0@@247| () T@U)
(declare-fun |##c#1@0| () T@U)
(declare-fun |##v#9@0| () T@U)
(declare-fun |##v'#3@0| () T@U)
(declare-fun |##uiop#3@0| () T@U)
(declare-fun StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree () T@U)
(declare-fun |uiop#0@@67| () T@U)
(declare-fun |stableLSN#0@0| () Int)
(declare-fun |##ctj#0_0@0| () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapInvert () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapInvert () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@@50 () T@U)
(declare-fun MoreFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree0 () T@U)
(declare-fun |step#0@@13| () T@U)
(declare-fun |stableLSN#0@@5| () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |v#0@@350|) DatatypeTypeType) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type |v'#0@@247|) DatatypeTypeType)) (= (type |##c#1@0|) DatatypeTypeType)) (= (type |##v#9@0|) DatatypeTypeType)) (= (type |##v'#3@0|) DatatypeTypeType)) (= (type |##uiop#3@0|) DatatypeTypeType)) (= (type StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree) LayerTypeType)) (= (type |uiop#0@@67|) DatatypeTypeType)) (= (type |##ctj#0_0@0|) DatatypeTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapInvert) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapInvert) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) LayerTypeType)) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type $Heap@@50) (MapType0Type refType MapType1Type))) (= (type MoreFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree0) LayerTypeType)) (= (type |step#0@@13|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$CoordinationSystemRefinement.__default.CrashNext)
(set-option :timeout 0)
(set-option :rlimit 32700000)
(assert (not
 (=> (= (ControlFlow 0 0) 606858) (let ((anon3_correct  (=> |CoordinationSystemRefinement.__default.Ic#canCall| (=> (and (and (and (CrashTolerantMapSpecMod.Constants.Constants_q (Lit CoordinationSystemRefinement.__default.Ic)) ($IsAlloc |v#0@@350| Tclass.CoordinationSystem.Variables $Heap@0)) (and (|CoordinationSystemRefinement.__default.I#canCall| |v#0@@350|) (CrashTolerantMapSpecMod.Variables.Variables_q (CoordinationSystemRefinement.__default.I |v#0@@350|)))) (and (and ($IsAlloc |v'#0@@247| Tclass.CoordinationSystem.Variables $Heap@0) (|CoordinationSystemRefinement.__default.I#canCall| |v'#0@@247|)) (and (CrashTolerantMapSpecMod.Variables.Variables_q (CoordinationSystemRefinement.__default.I |v'#0@@247|)) (= |##c#1@0| (Lit CoordinationSystemRefinement.__default.Ic))))) (=> (and (and (and (and ($IsAlloc |##c#1@0| Tclass.CrashTolerantMapSpecMod.Constants $Heap@0) (= |##v#9@0| (CoordinationSystemRefinement.__default.I |v#0@@350|))) (and ($IsAlloc |##v#9@0| Tclass.CrashTolerantMapSpecMod.Variables $Heap@0) (= |##v'#3@0| (CoordinationSystemRefinement.__default.I |v'#0@@247|)))) (and (and ($IsAlloc |##v'#3@0| Tclass.CrashTolerantMapSpecMod.Variables $Heap@0) (= |##uiop#3@0| (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|))) (and ($IsAlloc |##uiop#3@0| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $Heap@0) (|CrashTolerantMapSpecMod.__default.NextStep#canCall| (Lit CoordinationSystemRefinement.__default.Ic) (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|))))) (and (and (and |CoordinationSystemRefinement.__default.Ic#canCall| (|CoordinationSystemRefinement.__default.I#canCall| |v#0@@350|)) (|CoordinationSystemRefinement.__default.I#canCall| |v'#0@@247|)) (|CrashTolerantMapSpecMod.__default.NextStep#canCall| (Lit CoordinationSystemRefinement.__default.Ic) (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|)))) (and (=> (= (ControlFlow 0 230314) (- 0 611642)) (CrashTolerantMapSpecMod.__default.NextStep (Lit CoordinationSystemRefinement.__default.Ic) (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|))) (=> (CrashTolerantMapSpecMod.__default.NextStep (Lit CoordinationSystemRefinement.__default.Ic) (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) (Lit |#CrashTolerantUIOp_5#MapSpecMod#.UIOp.CrashOp|)) (and (=> (= (ControlFlow 0 230314) (- 0 611660)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (MsgHistoryMod.MsgHistory.WF (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (MsgHistoryMod.MsgHistory.WF (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 611708)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (=> (|CrashTolerantJournal.Ephemeral.WF#canCall| (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (or (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (|AbstractJournal.Variables.WF#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (or (AbstractJournal.Variables.WF (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (U_2_bool (Lit (bool_2_U true))))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (=> (|CrashTolerantJournal.Ephemeral.WF#canCall| (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (or (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (|AbstractJournal.Variables.WF#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (or (AbstractJournal.Variables.WF (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (U_2_bool (Lit (bool_2_U true)))))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 611806)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (=> (|CrashTolerantJournal.Ephemeral.WF#canCall| (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (or (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (|AbstractJournal.Variables.WF#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (or (AbstractJournal.Variables.WF (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (MsgHistoryMod.MsgHistory.WF (AbstractJournal.Variables.journal (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))))))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (=> (|CrashTolerantJournal.Ephemeral.WF#canCall| (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (or (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (|AbstractJournal.Variables.WF#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (or (AbstractJournal.Variables.WF (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))) (MsgHistoryMod.MsgHistory.WF (AbstractJournal.Variables.journal (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))))))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 611912)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))) (MsgHistoryMod.MsgHistory.WF ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantJournal.Variables.WF#canCall| (CoordinationSystem.Variables.journal |v'#0@@247|)) (or (CrashTolerantJournal.Variables.WF (CoordinationSystem.Variables.journal |v'#0@@247|)) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))) (MsgHistoryMod.MsgHistory.WF ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|)))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 611976)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantMap.Variables.WF#canCall| (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (or (CrashTolerantMap.Variables.WF (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (U_2_bool (Lit (bool_2_U true)))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (|CrashTolerantMap.Variables.WF#canCall| (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (or (CrashTolerantMap.Variables.WF (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (U_2_bool (Lit (bool_2_U true))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612020)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (= (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (= (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612060)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (= (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (= (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral (CoordinationSystem.Variables.journal |v'#0@@247|))) (CrashTolerantMap.Ephemeral.Known_q (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612102)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))) (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystem.Variables.WF#canCall| |v'#0@@247|) (or (CoordinationSystem.Variables.WF |v'#0@@247|) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))) (Options.Option.Some_q (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612144)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v'#0@@247|) (U_2_bool (Lit (bool_2_U true)))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v'#0@@247|) (U_2_bool (Lit (bool_2_U true))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612172)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanFollow (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (= (MsgHistoryMod.MsgHistory.seqStart (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvPersistentJournalGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanFollow (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (= (MsgHistoryMod.MsgHistory.seqStart (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612250)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (not (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|)))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (not (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|))))) (and (=> (= (ControlFlow 0 230314) (- 0 612276)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (not (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|)))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (not (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|))))) (and (=> (= (ControlFlow 0 230314) (- 0 612302)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanFollow (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (= (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanFollow (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (= (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612388)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612438)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612524)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (MsgHistoryMod.MsgHistory.seqEnd (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (MsgHistoryMod.MsgHistory.seqEnd (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612610)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|)))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612656)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (= (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (= (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612708)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v'#0@@247|) (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v'#0@@247|) (CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612756)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v'#0@@247|) (|StampedMod.Stamped#Equal| (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (|CoordinationSystemRefinement.__default.InvEphemeralValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v'#0@@247|) (|StampedMod.Stamped#Equal| (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612820)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612878)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvFrozenMapGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 612940)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v'#0@@247|) (|StampedMod.Stamped#Equal| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v'#0@@247|) (|StampedMod.Stamped#Equal| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613022)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (U_2_bool (Lit (bool_2_U true))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (U_2_bool (Lit (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613056)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (U_2_bool (Lit (bool_2_U true))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (U_2_bool (Lit (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613104)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|)))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v'#0@@247|))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613168)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanFollow (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (= (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanFollow (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (= (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613292)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613380)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613504)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (MsgHistoryMod.MsgHistory.seqEnd (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|)))) (INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CoordinationSystemRefinement.__default.IMap (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (MsgHistoryMod.MsgHistory.seqEnd (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613628)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|)))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613712)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (= (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v'#0@@247|)))))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvEphemeralGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v'#0@@247|) (= (CoordinationSystem.Ephemeral.mapLsn (CoordinationSystem.Variables.ephemeral |v'#0@@247|)) (StampedMod.Stamped.seqEnd (AbstractMap.Variables.stampedMap (CrashTolerantMap.Ephemeral.v (CrashTolerantMap.Variables.ephemeral (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613802)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifMap#6| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))
(let ((|ifJournal#6| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
 (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| |ifJournal#6| (StampedMod.Stamped.seqEnd |ifMap#6|)) (or (MsgHistoryMod.MsgHistory.CanFollow |ifJournal#6| (StampedMod.Stamped.seqEnd |ifMap#6|)) (= (MsgHistoryMod.MsgHistory.seqStart |ifJournal#6|) (StampedMod.Stamped.seqEnd |ifMap#6|)))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifMap#6@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))
(let ((|ifJournal#6@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
 (=> (|MsgHistoryMod.MsgHistory.CanFollow#canCall| |ifJournal#6@@0| (StampedMod.Stamped.seqEnd |ifMap#6@@0|)) (or (MsgHistoryMod.MsgHistory.CanFollow |ifJournal#6@@0| (StampedMod.Stamped.seqEnd |ifMap#6@@0|)) (= (MsgHistoryMod.MsgHistory.seqStart |ifJournal#6@@0|) (StampedMod.Stamped.seqEnd |ifMap#6@@0|))))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613890)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifJournal#6@@1| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#6@@1|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifJournal#6@@2| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#6@@2|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 613962)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifMap#6@@1| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))
(INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd |ifMap#6@@1|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifMap#6@@2| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))
(INTERNAL_le_boogie (StampedMod.Stamped.seqEnd (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|))) (StampedMod.Stamped.seqEnd |ifMap#6@@2|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 614034)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifJournal#6@@3| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#6@@3|) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedGeometry#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v'#0@@247|) (let ((|ifJournal#6@@4| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqEnd |ifJournal#6@@4|) (CoordinationSystemRefinement.__default.EphemeralSeqEnd |v'#0@@247|)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 614102)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (U_2_bool (Lit (bool_2_U true))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (U_2_bool (Lit (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 614136)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (U_2_bool (Lit (bool_2_U true))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (U_2_bool (Lit (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 230314) (- 0 614184)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (let ((|ifJournal#7| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#7| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (let ((|ifJournal#7@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#7@@0| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 614254)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (let ((|ifJournal#7@@1| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#7@@1| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (let ((|ifJournal#7@@2| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight (CoordinationSystem.Variables.journal |v'#0@@247|))))))
(CoordinationSystemRefinement.__default.JournalOverlapsAgree StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree |ifJournal#7@@2| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|))))))))) (and (=> (= (ControlFlow 0 230314) (- 0 614324)) (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (let ((|ifMap#7| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))
(|StampedMod.Stamped#Equal| |ifMap#7| (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd |ifMap#7|))))))))))) (=> (=> (|CoordinationSystemRefinement.__default.Inv#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.Inv |v'#0@@247|) (=> (CoordinationSystemRefinement.__default.CommitStarted |v'#0@@247|) (=> (|CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement#canCall| |v'#0@@247|) (or (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v'#0@@247|) (let ((|ifMap#7@@0| ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantMap.Variables.inFlight (CoordinationSystem.Variables.mapadt |v'#0@@247|))))))
(|StampedMod.Stamped#Equal| |ifMap#7@@0| (MsgHistoryMod.__default.MapPlusHistory (CrashTolerantMap.Variables.persistent (CoordinationSystem.Variables.mapadt |v'#0@@247|)) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v'#0@@247|)) (StampedMod.Stamped.seqEnd |ifMap#7@@0|)))))))))) (=> (= (ControlFlow 0 230314) (- 0 614406)) (=> (|CrashTolerantMapSpecMod.__default.Next#canCall| (Lit CoordinationSystemRefinement.__default.Ic) (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) |uiop#0@@67|) (or (CrashTolerantMapSpecMod.__default.Next (Lit CoordinationSystemRefinement.__default.Ic) (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) |uiop#0@@67|) (exists ((|uiop#2@@1| T@U) ) (!  (and (= (type |uiop#2@@1|) DatatypeTypeType) (and ($Is |uiop#2@@1| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) (CrashTolerantMapSpecMod.__default.NextStep (Lit CoordinationSystemRefinement.__default.Ic) (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) |uiop#2@@1|)))
 :qid |CrashTolerantsdfyCrashTolerantMapSpecMod.172:12|
 :skolemid |1696|
 :pattern ( (CrashTolerantMapSpecMod.__default.NextStep CoordinationSystemRefinement.__default.Ic (CoordinationSystemRefinement.__default.I |v#0@@350|) (CoordinationSystemRefinement.__default.I |v'#0@@247|) |uiop#2@@1|))
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon4_Else_correct  (=> (and (not (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@350|))) (= (ControlFlow 0 230312) 230314)) anon3_correct)))
(let ((anon4_Then_correct  (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@350|)) (=> (and (and (CoordinationSystem.Variables.Variables_q |v'#0@@247|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v'#0@@247|))) (and ($IsAlloc (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) Tclass.MsgHistoryMod.MsgHistory $Heap@0) ($IsAlloc (int_2_U |stableLSN#0@0|) Tclass._System.nat $Heap@0))) (and (=> (= (ControlFlow 0 230310) (- 0 610662)) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) |stableLSN#0@0|)))) (and (=> (= (ControlFlow 0 230310) (- 0 610695)) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|) (INTERNAL_le_boogie |stableLSN#0@0| (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))))))) (and (=> (= (ControlFlow 0 230310) (- 0 610728)) (=> (|MsgHistoryMod.MsgHistory.WF#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (or (MsgHistoryMod.MsgHistory.WF (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))))))) (and (=> (= (ControlFlow 0 230310) (- 0 610766)) (=> (|MsgHistoryMod.MsgHistory.WF#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (or (MsgHistoryMod.MsgHistory.WF (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))) (=> (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))))) (or (MsgHistoryMod.MsgHistory.ContainsExactly (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))))) (forall ((|lsn#0_0| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#0_0|) (= (U_2_bool (MapType0Select (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)))) ($Box (int_2_U |lsn#0_0|)))) (MsgHistoryMod.MsgHistory.Contains (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |lsn#0_0|)))
 :qid |MsgHistoryidfy.42:14|
 :skolemid |1700|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |lsn#0_0|))
 :pattern ( (MapType0Select (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)))) ($Box (int_2_U |lsn#0_0|))))
))))))) (=> (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|) (=> (and (and (MsgHistoryMod.MsgHistory.MsgHistory_q (MsgHistoryMod.MsgHistory.DiscardRecent (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|)) (CoordinationSystem.Variables.Variables_q |v#0@@350|)) (and (= |##ctj#0_0@0| (CoordinationSystem.Variables.journal |v#0@@350|)) ($IsAlloc |##ctj#0_0@0| Tclass.CrashTolerantJournal.Variables $Heap@0))) (and (=> (= (ControlFlow 0 230310) (- 0 610934)) (=> (|CrashTolerantJournal.Variables.WF#canCall| |##ctj#0_0@0|) (or (CrashTolerantJournal.Variables.WF |##ctj#0_0@0|) (MsgHistoryMod.MsgHistory.WF (CrashTolerantJournal.Variables.persistent |##ctj#0_0@0|))))) (and (=> (= (ControlFlow 0 230310) (- 0 610949)) (=> (|CrashTolerantJournal.Variables.WF#canCall| |##ctj#0_0@0|) (or (CrashTolerantJournal.Variables.WF |##ctj#0_0@0|) (=> (|CrashTolerantJournal.Ephemeral.WF#canCall| (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|)) (or (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|)) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|)) (=> (|AbstractJournal.Variables.WF#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|))) (or (AbstractJournal.Variables.WF (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|))) (U_2_bool (Lit (bool_2_U true))))))))))) (and (=> (= (ControlFlow 0 230310) (- 0 611002)) (=> (|CrashTolerantJournal.Variables.WF#canCall| |##ctj#0_0@0|) (or (CrashTolerantJournal.Variables.WF |##ctj#0_0@0|) (=> (|CrashTolerantJournal.Ephemeral.WF#canCall| (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|)) (or (CrashTolerantJournal.Ephemeral.WF (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|)) (=> (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|)) (=> (|AbstractJournal.Variables.WF#canCall| (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|))) (or (AbstractJournal.Variables.WF (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|))) (MsgHistoryMod.MsgHistory.WF (AbstractJournal.Variables.journal (CrashTolerantJournal.Ephemeral.v (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|)))))))))))) (and (=> (= (ControlFlow 0 230310) (- 0 611060)) (=> (|CrashTolerantJournal.Variables.WF#canCall| |##ctj#0_0@0|) (or (CrashTolerantJournal.Variables.WF |##ctj#0_0@0|) (=> (Options.Option.Some_q (CrashTolerantJournal.Variables.inFlight |##ctj#0_0@0|)) (MsgHistoryMod.MsgHistory.WF ($Unbox DatatypeTypeType (Options.Option.value (CrashTolerantJournal.Variables.inFlight |##ctj#0_0@0|)))))))) (and (=> (= (ControlFlow 0 230310) (- 0 611088)) (CrashTolerantJournal.Ephemeral.Known_q (CrashTolerantJournal.Variables.ephemeral |##ctj#0_0@0|))) (=> (and (and (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@350|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)))) (and ($IsAlloc (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) Tclass.MsgHistoryMod.MsgHistory $Heap@0) ($IsAlloc (int_2_U |stableLSN#0@0|) Tclass._System.nat $Heap@0))) (and (=> (= (ControlFlow 0 230310) (- 0 611126)) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))) |stableLSN#0@0|)))) (and (=> (= (ControlFlow 0 230310) (- 0 611159)) (=> (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|) (or (MsgHistoryMod.MsgHistory.CanDiscardTo (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|) (INTERNAL_le_boogie |stableLSN#0@0| (MsgHistoryMod.MsgHistory.seqEnd (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))))))) (and (=> (= (ControlFlow 0 230310) (- 0 611192)) (=> (|MsgHistoryMod.MsgHistory.WF#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))) (or (MsgHistoryMod.MsgHistory.WF (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))) (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))) (MsgHistoryMod.MsgHistory.seqEnd (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))))))) (and (=> (= (ControlFlow 0 230310) (- 0 611230)) (=> (|MsgHistoryMod.MsgHistory.WF#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))) (or (MsgHistoryMod.MsgHistory.WF (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))) (=> (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))))) (or (MsgHistoryMod.MsgHistory.ContainsExactly (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|))))) (forall ((|lsn#0_1| Int) ) (!  (=> (INTERNAL_le_boogie 0 |lsn#0_1|) (= (U_2_bool (MapType0Select (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)))) ($Box (int_2_U |lsn#0_1|)))) (MsgHistoryMod.MsgHistory.Contains (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |lsn#0_1|)))
 :qid |MsgHistoryidfy.42:14|
 :skolemid |1702|
 :pattern ( (MsgHistoryMod.MsgHistory.Contains (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |lsn#0_1|))
 :pattern ( (MapType0Select (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)))) ($Box (int_2_U |lsn#0_1|))))
))))))) (=> (and (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|) (MsgHistoryMod.MsgHistory.MsgHistory_q (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|))) (=> (and (and (|$IsA#MsgHistoryMod.MsgHistory| (MsgHistoryMod.MsgHistory.DiscardRecent (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|)) (|$IsA#MsgHistoryMod.MsgHistory| (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|))) (and (and (and (CoordinationSystem.Variables.Variables_q |v'#0@@247|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v'#0@@247|))) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|)) (and (and (CoordinationSystem.Variables.Variables_q |v#0@@350|) (|CoordinationSystemRefinement.__default.IEJ#canCall| (CoordinationSystem.Variables.journal |v#0@@350|))) (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|)))) (and (=> (= (ControlFlow 0 230310) (- 0 611452)) (|MsgHistoryMod.MsgHistory#Equal| (MsgHistoryMod.MsgHistory.DiscardRecent (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|))) (=> (|MsgHistoryMod.MsgHistory#Equal| (MsgHistoryMod.MsgHistory.DiscardRecent (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)) |stableLSN#0@0|) (MsgHistoryMod.MsgHistory.DiscardRecent (CoordinationSystemRefinement.__default.IEJ (CoordinationSystem.Variables.journal |v#0@@350|)) |stableLSN#0@0|)) (=> (= (ControlFlow 0 230310) 230314) anon3_correct)))))))))))))))))))))))))
(let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1) (=> (and (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1) (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes)) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapInvert) StartFuel_Maps._default.IMapInvert)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapInvert) StartFuelAssert_Maps._default.IMapInvert) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_MsgHistoryMod.MsgHistory.LSNSet) StartFuel_MsgHistoryMod.MsgHistory.LSNSet))) (and (and (= (AsFuelBottom StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) (= (AsFuelBottom StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree) StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree)) (and (= (AsFuelBottom StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree) StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree) (= $_Frame@0 (|lambda#89| null $Heap@@50 alloc false)))))))) (and (=> (= (ControlFlow 0 230308) (- 0 610495)) (forall (($o@@113 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47))))
 (=> (and (and (= (type $o@@113) refType) (= (type $f@@47) (FieldType alpha@@54))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@113 $f@@47))))
 :qid |CoordinationSystemRefinementminidfy.508:32|
 :skolemid |1699|
 :no-pattern (type $o@@113)
 :no-pattern (type $f@@47)
 :no-pattern (U_2_int $o@@113)
 :no-pattern (U_2_bool $o@@113)
 :no-pattern (U_2_int $f@@47)
 :no-pattern (U_2_bool $f@@47)
))) (=> (forall (($o@@114 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48))))
 (=> (and (and (= (type $o@@114) refType) (= (type $f@@48) (FieldType alpha@@55))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@114 $f@@48))))
 :qid |CoordinationSystemRefinementminidfy.508:32|
 :skolemid |1699|
 :no-pattern (type $o@@114)
 :no-pattern (type $f@@48)
 :no-pattern (U_2_int $o@@114)
 :no-pattern (U_2_bool $o@@114)
 :no-pattern (U_2_int $f@@48)
 :no-pattern (U_2_bool $f@@48)
)) (=> (and (and (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= $Heap@@50 $Heap@0)) (and (= StartFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree ($LS MoreFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree0)) (= StartFuelAssert_CoordinationSystemRefinement._default.JournalOverlapsAgree ($LS ($LS MoreFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree0))))) (and (and (= (AsFuelBottom MoreFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree0) MoreFuel_CoordinationSystemRefinement._default.JournalOverlapsAgree0) (CoordinationSystem.Variables.Variables_q |v'#0@@247|)) (and (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v'#0@@247|)) (MsgHistoryMod.MsgHistory.MsgHistory_q (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)))))) (and (and (and (and (CoordinationSystem.Variables.Variables_q |v'#0@@247|) (CrashTolerantJournal.Variables.Variables_q (CoordinationSystem.Variables.journal |v'#0@@247|))) (MsgHistoryMod.MsgHistory.MsgHistory_q (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|)))) (= |stableLSN#0@0| (MsgHistoryMod.MsgHistory.seqEnd (CrashTolerantJournal.Variables.persistent (CoordinationSystem.Variables.journal |v'#0@@247|))))) (and (CoordinationSystem.Variables.Variables_q |v#0@@350|) (CoordinationSystem.Variables.Variables_q |v#0@@350|)))) (and (=> (= (ControlFlow 0 230308) 230310) anon4_Then_correct) (=> (= (ControlFlow 0 230308) 230312) anon4_Else_correct)))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@50) ($IsHeapAnchor $Heap@@50)) (=> (and (and ($Is |v#0@@350| Tclass.CoordinationSystem.Variables) ($IsAlloc |v#0@@350| Tclass.CoordinationSystem.Variables $Heap@@50)) (|$IsA#CoordinationSystem.Variables| |v#0@@350|)) (=> (and (and (and ($Is |v'#0@@247| Tclass.CoordinationSystem.Variables) ($IsAlloc |v'#0@@247| Tclass.CoordinationSystem.Variables $Heap@@50)) (|$IsA#CoordinationSystem.Variables| |v'#0@@247|)) (and (and ($Is |uiop#0@@67| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp|) ($IsAlloc |uiop#0@@67| |Tclass.CrashTolerantUIOp_5#MapSpecMod#.UIOp| $Heap@@50)) (|$IsA#CrashTolerantUIOp_5#MapSpecMod#.UIOp| |uiop#0@@67|))) (=> (and (and (and (and ($Is |step#0@@13| Tclass.CoordinationSystem.Step) ($IsAlloc |step#0@@13| Tclass.CoordinationSystem.Step $Heap@@50)) (|$IsA#CoordinationSystem.Step| |step#0@@13|)) (and (and (INTERNAL_le_boogie 0 |stableLSN#0@@5|) (= 44 $FunctionContextHeight)) (and (|CoordinationSystemRefinement.__default.Inv#canCall| |v#0@@350|) (and (CoordinationSystemRefinement.__default.Inv |v#0@@350|) (and (and (and (and (CoordinationSystem.Variables.WF |v#0@@350|) (CoordinationSystemRefinement.__default.InvPersistentJournalGeometry |v#0@@350|)) (=> (CoordinationSystem.Ephemeral.Unknown_q (CoordinationSystem.Variables.ephemeral |v#0@@350|)) (and (not (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@350|)) (not (CoordinationSystemRefinement.__default.CommitStarted |v#0@@350|))))) (=> (CoordinationSystem.Ephemeral.Known_q (CoordinationSystem.Variables.ephemeral |v#0@@350|)) (and (and (CoordinationSystemRefinement.__default.InvEphemeralGeometry |v#0@@350|) (CoordinationSystemRefinement.__default.InvEphemeralValueAgreement |v#0@@350|)) (=> (CoordinationSystemRefinement.__default.MapIsFrozen |v#0@@350|) (and (CoordinationSystemRefinement.__default.InvFrozenMapGeometry |v#0@@350|) (CoordinationSystemRefinement.__default.InvFrozenMapValueAgreement |v#0@@350|)))))) (=> (CoordinationSystemRefinement.__default.CommitStarted |v#0@@350|) (and (CoordinationSystemRefinement.__default.InvCommitStartedGeometry |v#0@@350|) (CoordinationSystemRefinement.__default.InvCommitStartedValueAgreement |v#0@@350|)))))))) (and (and (and (|CoordinationSystem.__default.Next#canCall| |v#0@@350| |v'#0@@247| |uiop#0@@67|) (and (CoordinationSystem.__default.Next |v#0@@350| |v'#0@@247| |uiop#0@@67|) (exists ((|step#2| T@U) ) (!  (and (= (type |step#2|) DatatypeTypeType) (and ($Is |step#2| Tclass.CoordinationSystem.Step) (CoordinationSystem.__default.NextStep |v#0@@350| |v'#0@@247| |uiop#0@@67| |step#2|)))
 :qid |CoordinationSystemidfy.312:12|
 :skolemid |1695|
 :pattern ( (CoordinationSystem.__default.NextStep |v#0@@350| |v'#0@@247| |uiop#0@@67| |step#2|))
)))) (CoordinationSystem.__default.NextStep |v#0@@350| |v'#0@@247| |uiop#0@@67| |step#0@@13|)) (and (CoordinationSystem.Step.CrashStep_q |step#0@@13|) (= (ControlFlow 0 606858) 230308)))) anon0_correct))))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(pop 1)
; Valid
